{"meta":{"title":"hooyantsing's Blog","subtitle":"","description":"君何不随风起，抟扶摇上者九万里","author":"hooyantsing","url":"http://blog.hooy.xyz","root":"/"},"pages":[],"posts":[{"title":"P02 入门","slug":"技术向/Zookeeper/大数据技术之Zookeeper_3.5.7版本教程/P02 入门","date":"2022-06-27T16:00:00.000Z","updated":"2022-06-28T01:48:17.115Z","comments":true,"path":"技术向/Zookeeper/大数据技术之Zookeeper_3.5.7版本教程/P02 入门/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Zookeeper/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BZookeeper_3.5.7%E7%89%88%E6%9C%AC%E6%95%99%E7%A8%8B/P02%20%E5%85%A5%E9%97%A8/","excerpt":"","text":"视频源：大数据技术之Zookeeper 3.5.7版本教程","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Zookeeper","slug":"技术向/Zookeeper","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Zookeeper/"},{"name":"大数据技术之Zookeeper_3.5.7版本教程","slug":"技术向/Zookeeper/大数据技术之Zookeeper-3-5-7版本教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Zookeeper/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BZookeeper-3-5-7%E7%89%88%E6%9C%AC%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"Untitled","slug":"技术向/FXGL/FXGL基础入门教程_Java游戏引擎教程/Untitled","date":"2022-06-25T16:00:00.000Z","updated":"2022-07-14T08:20:18.110Z","comments":true,"path":"技术向/FXGL/FXGL基础入门教程_Java游戏引擎教程/Untitled/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/FXGL/FXGL%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_Java%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E6%95%99%E7%A8%8B/Untitled/","excerpt":"","text":"视频源：FXGL基础入门教程 Java游戏引擎教程","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"FXGL","slug":"技术向/FXGL","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/FXGL/"},{"name":"FXGL基础入门教程_Java游戏引擎教程","slug":"技术向/FXGL/FXGL基础入门教程-Java游戏引擎教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/FXGL/FXGL%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-Java%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"LeeWyatt","slug":"LeeWyatt","permalink":"http://blog.hooy.xyz/tags/LeeWyatt/"}],"author":"hooy"},{"title":"P38 Alibaba 微服务组件 Sentinel","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P38 Alibaba 微服务组件 Sentinel","date":"2022-06-22T16:00:00.000Z","updated":"2022-06-23T03:38:32.985Z","comments":true,"path":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P38 Alibaba 微服务组件 Sentinel/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P38%20Alibaba%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6%20Sentinel/","excerpt":"","text":"视频源：小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂 1. 分布式系统遇到的问题服务雪崩：因服务提供者的不可用导致服务调用者的不可用，并将不可用逐渐放大的过程。 雪崩原理：大量请求线程同步等待造成资源耗尽，当服务调用者使用同步调用时，会产生大量的等待线程占用系统资源。一旦线程资源耗尽，服务调用者提供的服务也处于不可用状态。 2. 解决方案超时机制在不做任何处理的情况下，服务提供者不可用会导致消费者请求线程强制等待，而造成系统资源耗尽。加入超时机制，一旦超时就释放资源。由于释放资源速度较快，一定程度上可以抑制资源耗尽的问题。 服务限流例如图示例，服务限制 500，那么进来的 800 中的 500 可以正常的响应，剩余的 300 则降级拒绝处理。 资源隔离用户的请求不在直接访问服务，而是通过线程池中的空闲线程来访问服务，如果线程池已满，则会进行降级处理，用户的请求不会被阻塞，至少可以看到一个执行结果（例如返回友好的提示信息），而不是无休止的等待或者看到系统崩溃。 服务熔断远程服务不稳定或网络抖动时暂时关闭，这叫服务熔断。 实时监测应用，如果发现在一定时间内失败次数&#x2F;失败率达到了一定阈值，就 “跳闸” ，断路器打开——此时，请求直接返回，而不去调用原本的逻辑。跳闸一段时间后（例如 10s），断路器会进入半开状态，这是一个瞬间态，此时允许一次请求调用该调的逻辑，如果成功，则断路器关闭，应用正常调用；如果调用依然不成功，断路器继续回到打开状态，过段时间再进入半开状态尝试——通过 “跳闸” ，应用可以保护自己，而且避免浪费资源；而通过半开的设计，可实现应用的 “自我修复”。 所以，同样的道理，当依赖的服务有大量超时时，再让新的请求去访问根本没有意义，只会无谓的消耗现有资源。比如我们设置了超时时间 1s ，如果短时间内有大量请求在 1s 内都得不到响应，就意味着这个服务出现了异常，此时就没有必要再让其他的请求去访问这个依赖了，这个时候就应该使用断路器避免资源浪费。 服务降级有服务熔断，必然要有服务降级。 所谓降级，就是当某个服务熔断后，服务将不再被调用，此时客户端可以自己准备一个本地的 fallback（回退）回调，返回一个缺省值。例如：（备用接口&#x2F;缓存&#x2F;mock数据）。这样做虽然服务水平下降，但好歹可用，比直接挂掉要强，当然这也要看适合的业务场景。 3. Sentinel：分布式系统的流量防卫兵3.1 Sentinel 是什么Sentinel 是阿里巴巴开源，面向分布式服务架构的高可用防护组件 随着微服务的流行，服务和服务之间的发稳定性变得越来越重要，Sentinel 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从限流、流量整形、熔断降级、系统负载保护、热点防护等多个维度来帮助开发者保障微服务的稳定性。 源码地址：https://github.com/alibaba/Sentinel 官方文档：https://github.com/alibaba/Sentinel/wiki Sentinel 具有以下特征： 丰富的应用场景：Sentinel 承接了阿里巴巴近 10 年的双十一大促销流量的核心场景，例如秒杀（突发流量控制在系统容量可以承受的范围）、消息削峰填谷、实时熔断下游不可用应用等。 完备的实时监控：Sentinel 同时提供了实时的监控功能。您可以在控制台中看到接入应用的单台机器秒杀数据，甚至 500 台以下规模的集群汇总运行情况。 广泛的开原生态：Sentinel 提供开箱即用的与其他开源框架&#x2F;库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相关的依赖并进行简单的配置即可快速的接入 Sentinel。 完善的 SPI 扩展点：Sentinel 提供简单易用、完善的 SPI 扩展点。您可以通过实现扩展点，快速的定制逻辑。例如定制规则管理、适配数据源等。 阿里云提供了企业级 Sentinel 服务，应用高可用服务 AHAS。 Sentinel 和 Hystrix 对比 4. Sentinel 快速开始Sentinel 资源保护的方式5. 启动 Sentinel 控制台6. Spring Cloud Alibaba 整合 Sentinel微服务 和 Sentinel Dashboard 通信原理","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringCloud","slug":"技术向/SpringCloud","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/"},{"name":"小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程-保姆级教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"图灵架构师周瑜","slug":"图灵架构师周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E6%9E%B6%E6%9E%84%E5%B8%88%E5%91%A8%E7%91%9C/"},{"name":"图灵学院","slug":"图灵学院","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E5%AD%A6%E9%99%A2/"},{"name":"徐庶","slug":"徐庶","permalink":"http://blog.hooy.xyz/tags/%E5%BE%90%E5%BA%B6/"}],"author":"hooy"},{"title":"P32 Alibaba 微服务组件 Nacos 配置中心","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P32 Alibaba 微服务组件 Nacos 配置中心","date":"2022-06-21T16:00:00.000Z","updated":"2022-06-23T01:24:06.166Z","comments":true,"path":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P32 Alibaba 微服务组件 Nacos 配置中心/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P32%20Alibaba%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6%20Nacos%20%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/","excerpt":"","text":"视频源：小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂 1. Nacos 配置中心使用1.1 Nacos-config 配置中心介绍官方文档：http://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config Nacos 提供用于存储配置和其他元数据的 key&#x2F;value 存储，为分布式系统中的外部化配置提供服务器端和客户端支持。使用 Spring Cloud Alibaba Nacos Config，您可以在 Nacos Server 集中管理你 Spring Cloud 应用的外部属性配置。 1.2 Nacos-config 配置管理界面最佳实现 NameSpace：区分开发环境（dev）和生产环境（prod）； Group：区分项目名； Data ID：区分服务名。 1.3 Nacos-config 权限管理开启权限管理，否则设置了权限不生效。打开 Nacos 的 conf&#x2F;application.properties 配置文件。 12# 默认为 false 改为 truenacos.core.auth.enabled=true 1.4 Nacos-config Client 读取配置Step 01 加入依赖 1234&lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;&lt;/dependency&gt; Step 02 编辑&#x2F;创建两个文件 application.yaml 和 bootstrap.yaml 1234# application.yamlserver: port: 8050 123456789101112# bootstrap.yaml 写配置中心相关的配置spring: application: # 此项是服务名。若没指定 Nacos-config 提供的 Data ID，则自动加载名为服务名的 Data ID name: config-nacos cloud: nacos: server-addr: 127.0.0.1:8847 # 默认可以省略，若开启了权限管理，则为必填项 username: nacos password: nacos Step 03 测试一下 12345678910@SpringBootApplicationpublic class ConfigApplication &#123; public static void main(String[] args) &#123; ConfigurableApplicationContext applicationContext = SpringApplication.run(ConfigApplication.class, args); String userName = applicationContext.getEnvironment().getProperty(&quot;user.name&quot;); System.out.println(userName); &#125;&#125; 1.5 Nacos-config 其他扩展配置 内容较多不方便书写笔记，故给出以下链接帮助学习。 详见视频教程：https://www.bilibili.com/video/BV1bR4y1L724?p=36 详见官网文档：http://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config 1.6 Nacos-config @RefreshScope单单 @Value 注解注入属性，无法感知到远程配置的变化。为此，给类加上 @RefreshScope 注解即可解决。 123456789101112@RestController@RequestMapping(&quot;/config&quot;)@RefreshScopepublic class ConfigController &#123; @Value(&quot;$&#123;user.name&#125;&quot;) public String username; @RequsetMapping(&quot;/show&quot;) public String show()&#123; return username; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringCloud","slug":"技术向/SpringCloud","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/"},{"name":"小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程-保姆级教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"图灵架构师周瑜","slug":"图灵架构师周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E6%9E%B6%E6%9E%84%E5%B8%88%E5%91%A8%E7%91%9C/"},{"name":"图灵学院","slug":"图灵学院","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E5%AD%A6%E9%99%A2/"},{"name":"徐庶","slug":"徐庶","permalink":"http://blog.hooy.xyz/tags/%E5%BE%90%E5%BA%B6/"}],"author":"hooy"},{"title":"P21 微服务负载均衡器 Ribbon","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P21 微服务负载均衡器 Ribbon","date":"2022-06-20T16:00:00.000Z","updated":"2022-06-21T03:40:01.930Z","comments":true,"path":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P21 微服务负载均衡器 Ribbon/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P21%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%20Ribbon/","excerpt":"","text":"视频源：小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂 1. 什么是 Ribbon目前主流的负载方案分以下两种： 集中式负载均衡，在消费者和服务提供方中间使用独立的代理方式进行负载，有硬件的（比如 F5），也有软件的（比如 Nginx）； 客户端根据自己的请求情况做负载均衡，Ribbon 就属于客户端自己做负载均衡。 Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一套客户端的负载均衡工具，Ribbon 客户端组件提供一系列的完善配置，如超时，重试等。通过 LoadBalancer 获取到服务提供的所有机器实例，Ribbon 会自动基于某种规则（轮询、随机）去调用这些服务。Ribbon 也可以实现我们自己的负载均衡算法。 1.1 客户端的负载均衡例如 Spring Cloud 中的 Ribbon ，客户端会有一个服务器地址列表，在发送请求前通过负载均衡算法选择一个服务器，然后进行访问，这是客户端负载均衡；即在客户端就进行负载均衡算法匹配。 1.2 服务端的负载均衡例如 Nginx，通过 Nginx 进行负载均衡，先发送请求，然后通过负载均衡算法，在多个服务器之间选择一个进行访问；即在服务器端再进行负载均衡算法匹配。 1.3 常见负载均衡算法 随机，通过随机选择服务进行执行，一般这种方式使用较少； 轮询，负载均衡默认实现方式，请求来之后排队处理； 加权轮询，通过对服务器性能的分型，给高配置、低负载的服务器分配更高的权重，均衡各个服务器的压力； 地址 Hash，通过客户端请求的地址 Hash 值取模映射进行服务器调度； 最小链接数，即使请求均衡了，压力不一定会均衡，最小链接数法就是根据服务器的情况，比如请求积压数等参数，将请求分配到当前压力最小的服务器。 2. Nacos 使用 RibbonStep 01 nacos-discovery 依赖了 ribbon，可以不用再引入 ribbon 依赖 Step 02 添加 @LoadBalanced 注解 12345678@Configurationpublic class RestConfig &#123; @Bean @LoadBalanced public RestTemplate restTemplate() &#123; return new RestTemplate(); &#125;&#125; Step 03 修改 Controller 12String url = &quot;http://mall-order/order/findOrderByUserId&quot; + id;R result = restTemplate.getForObject(url,R.class); 3. Ribbon 内核原理3.1 Ribbon 原理3.2 Ribbon 负载均衡策略 IRule 这是所有负载均衡策略的父接口，里边的核心方法是 choose 方法，用来选择一个服务实例； AbstractLoadBalancerRule AbstractLoadBalancerRule 是一个抽象类，里边主要定义了一个 ILoadBalancer，这里定义它的目的主要是辅助负责均衡策略选取合适的服务端实例。 3.2.1 修改默认负载均衡策略配置类方式调用其他微服务，一律使用指定的负载均衡算法 123456789@Configurationpublic class RibbonRandomRuleConfig &#123; // 方法名一定要叫 iRule @Bean public IRule iRule() &#123; return new RandomRule(); &#125;&#125; 注意，此处有坑！不能写在 @SpringBootApplication 注解的 @CompentScan 扫描得到的地方，否则自定义的配置类会被所有的 RibbonClients 共享。不建议这么使用，推荐 yml 方式。 再在 Spring Boot 启动类指定哪些服务使用该负载均衡策略 123456789101112131415161718@SpringBootApplication@RibbonClients(value = &#123; @RibbonClient(name = &quot;stock-service&quot;,configuration = RibbonRandomRuleConfig.class)&#125;)public class OrderApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(OrderApplication.class,args); &#125; // 通常写在配置类里面 @Bean @LoadBalanced public RestTemplate restTemplate()&#123; RestTemplate restTemplate = new RestTemplate(); return restTemplate; &#125;&#125; 配置文件方式（推荐）调用指定微服务提供的服务时，使用对应的负载均衡算法 修改 application.yml 1234567# 服务名:# ribbon:# NFLoadBalancerRuleClassName: 负载均衡策略实现类全路径stock-service: ribbon: NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule 3.2.2 自定义负载均衡策略通过实现 IRule 接口或继承 AbstractLoadBalancerRule 抽象类可以自定义负载均衡策略，主要的选择服务逻辑在 choose 方法中。 1234567891011121314151617181920/** * 自定义负载均衡策略：返回一个随机服务实例 */public class CustomRule extends AbstractLoadBalancerRule &#123; public void initWithNiwsConfig(IClientConfig iClientConfig) &#123; &#125; /** * 负载均衡算法逻辑 */ public Server choose(Object o) &#123; ILoadBalancer loadBalancer = this.getLoadBalancer(); // 获取当前请求的服务实例 List&lt;Server&gt; reachableServers = loadBalancer.getReachableServers(); // 获取随机数 int random = ThreadLocalRandom.current().nextInt(reachableServers.size()); return reachableServers.get(random); &#125;&#125; 3.3 饥饿加载默认 Ribbon 处于懒加载状态，使用到时才会加载，这也就导致消费者第一次向生产者服务实例请求响应速度慢。 开启饥饿加载（禁用懒加载）： 123456ribbon: eager-load: # 开启 ribbon 饥饿加载 enable: true # 配置哪个服务使用 ribbon 饥饿加载，多个使用逗号分隔 clients: stock-service","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringCloud","slug":"技术向/SpringCloud","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/"},{"name":"小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程-保姆级教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"图灵架构师周瑜","slug":"图灵架构师周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E6%9E%B6%E6%9E%84%E5%B8%88%E5%91%A8%E7%91%9C/"},{"name":"图灵学院","slug":"图灵学院","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E5%AD%A6%E9%99%A2/"},{"name":"徐庶","slug":"徐庶","permalink":"http://blog.hooy.xyz/tags/%E5%BE%90%E5%BA%B6/"}],"author":"hooy"},{"title":"P25 微服务负载均衡器 LoadBalancer","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P25 微服务负载均衡器 LoadBalancer","date":"2022-06-20T16:00:00.000Z","updated":"2022-06-21T06:42:05.118Z","comments":true,"path":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P25 微服务负载均衡器 LoadBalancer/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P25%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%20LoadBalancer/","excerpt":"","text":"视频源：小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂 1. 什么是 Spring Cloud LoadBalancerSpring Cloud LoadBalancer 是 Spring Cloud 官方自己提供的客户端负载均衡器，用来替代 Ribbon。 Spring 官方提供了两种负载均衡客户端： RestTemplate RestTemplate 是 Spring 提供的可用于访问 Rest 服务的客户端，RestTemplate 提供了多种便捷访问远程 http 服务的方法，能够大大提高客户端的编写效率。默认情况下，RestTemplate 默认依赖 jdk 的 http 连接工具。 WebClient WebClient 是从 Spring WebFlux 5.0 版本开始提供的一个非阻塞的基于响应式编程的进行 http 请求的客户端工具。它的响应式编程基于 Reactor。WebClient 提供了标准 http 请求方式对应的 GET POST PUT DELETE 等方法，可以用来发起相应的请求。 2. RestTemplate 整合 LoadBalancer引入依赖 12345678910111213141516&lt;!--排除 ribbon 依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;!--添加 loadbalancer 依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt; &lt;/dependency&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringCloud","slug":"技术向/SpringCloud","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/"},{"name":"小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程-保姆级教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"图灵架构师周瑜","slug":"图灵架构师周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E6%9E%B6%E6%9E%84%E5%B8%88%E5%91%A8%E7%91%9C/"},{"name":"图灵学院","slug":"图灵学院","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E5%AD%A6%E9%99%A2/"},{"name":"徐庶","slug":"徐庶","permalink":"http://blog.hooy.xyz/tags/%E5%BE%90%E5%BA%B6/"}],"author":"hooy"},{"title":"P26 微服务调用组件 Feign","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P26 微服务调用组件 Feign","date":"2022-06-20T16:00:00.000Z","updated":"2022-06-22T01:50:13.700Z","comments":true,"path":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P26 微服务调用组件 Feign/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P26%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E7%BB%84%E4%BB%B6%20Feign/","excerpt":"","text":"视频源：小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂 Java 项目中如何实现接口调用？ Httpclient Httpclient 是 Apache Jakarta Common 下的子项目，用来提供高效的、最新的、功能丰富的支持 http 协议的客户端编程工具包，并且它支持 HTTP 协议最新版本和建议。Httpclient 相比传统 JDK 自带的 URL Connection，提升了易用性和灵活性，使客户端发送 http 请求变得容易，提高了开发的效率。 Okhttp 一个处理网络请求的开源项目，是安卓端最火的轻量级框架，由 Square 公司贡献，用于代替 HttpUrlConnection 和 Apache HttpClient。Okhttp拥有简介的 API、高效的性能，并支持多种协议（HTTP&#x2F;2 和 SPDY）。 HttpURLConnection HttpURLConnection 是 Java 的标准类，它继承自 URLConnection，可用于向指定网站发送 GET 请求、POST 请求。HttpURLConnection 使用比较复杂，不像 HttpClient 那样容易使用。 RestTemplate WebClient RestTemplate 是 Spring 提供的用于访问 Rest 服务的客户端，RestTemplate 提供了多种便捷访问远程 HTTP 服务的方法，能够大大提高客户端的编写效率。 上面介绍的是最常见的集中调用接口的方法，我们下面要介绍的方法比上面的更简单、方便，他就是 Feign。 1. 什么是 FeignFeign 是 Netflix 开发的声明式、模板化的 HTTP 客户端。 Spring Cloud openfeign 对 Feign 进行了增强，使其支持 Spring MVC 注解，另外还整合了 Ribbon 和 Nacos，从而使得 Feign 的使用更加方便。 1.1 优势Feign 可以做到 使用 HTTP 请求远程服务时就像是调用本地方法一样的体验 。开发者完全感知不到这是远程方法，更改知不道这是一个 HTTP 请求。它像 Dubbo 一样，consumer 直接调用接口方法调用 provider，而不需要通过常规的 Httpclient 构造请求再解析返回数据，它解决了让开发者调用远程接口就像调用本地方法一样，无需关注与远程的交互细节，更无需关注分布式环境开发。 以下提到 Feign 即是 OpenFeign 2. Spring Cloud Alibaba 快速整合 OpenFeignStep 01 引入依赖 12345&lt;!--添加 openfeign 依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; Step 02 添加 feign 接口和方法 order-openfeign 服务 feign.StockFeignService 1234567// name 服务名 , path 对应服务 Controller @RequestMapping 路径@FeignClient(name = &quot;stock-service&quot;, path = &quot;/stock&quot;)public interface StockFeignService &#123; // 声明 Controller 是怎么样的就怎么样复制过来 @RequestMapping(&quot;/reduct&quot;) String reduct();&#125; stock-nacos 服务 controller.StockController 123456789@RestController@RequestMapping(&quot;/stock&quot;)public class StockController &#123; @RequestMapping(&quot;/reduct&quot;) public String reduct()&#123; System.out.println(&quot;扣减库存&quot;); return &quot;扣减库存&quot;; &#125;&#125; Step 03 消费者服务调用生产者服务 1234567891011121314@RestController@RequestMapping(&quot;/order&quot;)public class OrderController &#123; @Autowired StockFeignService stockFeignService; @RequestMapping(&quot;/add&quot;) public String add()&#123; System.out.println(&quot;下单成功&quot;); String msg = stockFeignService.reduct(); return &quot;Hello Feign&quot; + msg; &#125;&#125; Step 04 消费者服务开启 OpenFeign，使用 @EnableFeignClients 注解 123456789@SpringBootApplication@EnableFeignClientspublic class OrderApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(OrderApplication.class,args); &#125;&#125; 3. Spring Cloud Feign 的自定义配置及使用OpenFeign 提供了很多扩展机制，让用户可以更加灵活地使用。 3.1 日志配置有时候我们遇到 Bug，比如接口调用失败，参数没收到等问题，或者想看看调用性能，就需要配置 Feign 的日志，以此让 Feign 把请求信息输出。 通过源码可以看到日志等级由 4 级，分别是： NONE [性能最佳，适用于生产]：不记录任何日志（默认值）； BASIC [适用于生产环境追踪问题]：仅记录请求方法、URL、响应状态代码以及执行时间； HEADERS ：记录 BASIC 级别的基础上，记录请求和响应的 header； FULL [比较适用于开发及测试环境定位问题]：记录请求和响应的 header、body 和元数据。 注意，以上是 OpenFeign 的日志等级，而日志的输出又是 DEBUG 等级。 修改 SpringBoot 项目日志输出级别： 123logging: level: com.tulingxueyuan.order.feign: debug 全局配置配置类方式Step 01 定义一个配置类，指定日志级别 123456789101112/** * 全局配置：当使用 @Configuration 注解会将配置作用所有的服务提供方 * 局部配准：如果只想针对某一个服务进行配置，不要加 @Configuration 注解 */@Configurationpublic class FeignConfig &#123; @Bean public Logger.Level feignLoggerLevel() &#123; return Logger.Level.FULL; &#125;&#125; Step 02 123456@FeignClient(name = &quot;product-service&quot;, path = &quot;/product&quot;)public interface ProductFeignService &#123; @RequestMapping(&quot;/&#123;id&#125;&quot;) String get(@PathVariable(&quot;id&quot;) Integer id);&#125; 局部配置配置类方式Step 01 定义一个配置类，指定日志级别 1234567public class FeignConfig &#123; @Bean public Logger.Level feignLoggerLevel() &#123; return Logger.Level.FULL; &#125;&#125; Step 02 123456@FeignClient(name = &quot;product-service&quot;, path = &quot;/product&quot;, configuration = FeignConfig.class)public interface ProductFeignService &#123; @RequestMapping(&quot;/&#123;id&#125;&quot;) String get(@PathVariable(&quot;id&quot;) Integer id);&#125; 配置文件方式123456# feign 日志局部配置feign: client: config: product-service: # 服务名 loggerLevel: BASIC 3.2 契约配置 作用：将 OpenFeign 的注解变更为 Feign 注解，用于老项目升级改造。 Spring Cloud 在 Feign 的基础上做了扩展，使用 Spring MVC 的注解来完成 Feign 的功能。原生的 Feign 是不支持 Spring MVC 注解的，如果你想在 Spring Cloud 中使用原生的注解方式来定义客户端也是可以的，通过配置契约来改变这个配置，Spring Cloud 中默认的是 SpringMvcContract。 Spring Cloud 1 早期版本就是用的原生 Feign，随着 Netfilx 的停更替换成了 OpenFeign。 12345feign: client: config: product-service: # 服务名 contract: feign.Contract.Default # 还原成原生注解 3.4 超时时间配置通过 Options 可以配置 “连接超时时间” 和 “请求处理超时时间”，Options 的第一个参数是连接超时时间（ms），默认值是 2s ；第二个是请求处理超时时间（ms），默认值是 5s。 123456feign: client: config: product-service: # 服务名 connectTimeout: 5000 # 连接超时时间 readTimeout: 3000 # 请求处理超时时间 3.3 自定义拦截器实现认证逻辑1234567public class FeignAuthRequestInterceptor implements RequestInterceptor &#123; public void apply(RequestTemplate template) &#123; // 业务逻辑 String access_token = UUID.randomUUID().toString(); template.header(&quot;Authorization&quot;,access_token); &#125;&#125; 12345678// 全局配置@Configurationpublic class FeignConfig &#123; @Bean public FeignAuthRequestInterceptor feignAuthRequestInterceptor() &#123; return new FeignAuthRequestInterceptor(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringCloud","slug":"技术向/SpringCloud","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/"},{"name":"小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程-保姆级教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"图灵架构师周瑜","slug":"图灵架构师周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E6%9E%B6%E6%9E%84%E5%B8%88%E5%91%A8%E7%91%9C/"},{"name":"图灵学院","slug":"图灵学院","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E5%AD%A6%E9%99%A2/"},{"name":"徐庶","slug":"徐庶","permalink":"http://blog.hooy.xyz/tags/%E5%BE%90%E5%BA%B6/"}],"author":"hooy"},{"title":"P12 Alibaba 微服务组件 Nacos 注册中心","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P12 Alibaba 微服务组件 Nacos 注册中心","date":"2022-06-16T16:00:00.000Z","updated":"2022-06-20T11:47:21.820Z","comments":true,"path":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P12 Alibaba 微服务组件 Nacos 注册中心/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P12%20Alibaba%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6%20Nacos%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/","excerpt":"","text":"视频源：小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂 1. 什么是 NacosNacos 官网：https://nacos.io 官方：一个更易于构建云原生应用的动态 服务发现（Nacos Discovery）、服务配置（Nacos Config） 和服务管理平台。 Nacos 的关键特性包括： 服务发现和服务健康检测； 动态配置服务； 动态 DNS 服务； 服务及其元数据管理。 2. Nacos 注册中心2.1 注册中心演变及其设计思想 2.2 Nacos 注册中心架构 2.3 核心功能服务注册：Nacos Client 会通过发送 REST 请求的方式向 Nacos Server 注册自己的服务，提供自身的元数据，比如 ip 地址、端口等信息。Nacos Client 接收到注册请求后，就会把这些元数据信息存储在一个双层的内存 Map 中。 服务心跳：在服务注册后，Nacos Client 会维护一个定时心跳来持续通知 Nacos Server，说明服务一直处于可用状态，防止被剔除。默认 5s 发送一次心跳。 服务同步：Nacos Server 集群之间会相互同步服务实例，用来保证服务信息的一致性。 服务发现：服务消费者（Nacos Client）在调用服务提供者的服务时，会发送一个 REST 请求给 Nacos Server，获取上面注册的服务清单，并缓存在 Nacos Client 本地，同时会在 Nacos Client 本地开启一个定时任务定时拉取服务端最新的注册表信息更新到本地缓存。 服务健康检查：Nacos Server 会开启一个定时任务用来检查注册服务实例的健康情况，对于超过 15s 没有收到客户端心跳的实例会将它的 healthy 属性置为 false（客户端服务发现时不会发现），如果某个实例超过 30s 没有收到心跳，直接剔除该实例（被剔除的实例如果恢复发送心跳则会重新注册）。 注册中心之间的对比 一致性协议CAP：C一致性；A可用性；P分区容错性。 3. Nacos Server 部署 Spring Cloud Alibaba:2.2.5.RELEASE 对应 Nacos 1.4.1 下载地址：Nacos 3.1 单机模式eg 以下通过 Windows 版本展开学习 下载并解压，找到 startup.cmd 文件，Nacos 默认启动是集群模式，刚入门则需要修改该文件改为单机模式，方便学习。 123set MODE=&quot;cluster&quot;# 将 cluster 改为 standaloneset MODE=&quot;standalone&quot; 双击启动。 JDK 版本必须高于 8，且必须配置 JAVA_HOME 环境变量。 控制台会输出 web 管理链接，默认账号密码均是：nacos 现在，给每个项目 pom 文件加入 Nacos Client 依赖 1234&lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;&lt;/dependency&gt; 更多配置文件配置字段详见：https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-discovery order-nacos 微服务项目 application.yaml 1234567891011121314151617server: port: 8020spring: application: # 该微服务名 name: order-service cloud: nacos: # Nacos 注册中心地址 server-addr: 127.0.0.1:8848 discovery: # 访问用户名及密码 username: nacos password: nacos # 命名空间，不同空间的微服务相互隔离。通常可划分为开发环境 dev 生产环境 prod，默认 public namespace: public stock-nacos 微服务项目 application.yaml 1234567891011121314151617server: port: 8021spring: application: # 该微服务名 name: stock-service cloud: nacos: # Nacos 注册中心地址 server-addr: 127.0.0.1:8848 discovery: # 访问用户名及密码 username: nacos password: nacos # 命名空间，不同空间的微服务相互隔离。通常可划分为开发环境 dev 生产环境 prod，默认 public namespace: public 分别启动以上两个微服务项目，可以在 Nacos web 管理页面看到如下信息： 引入注册中心后，我们就不需要在代码里写服务地址了，取而代之的是服务名称。 123String msg = restTemplate.getForObject(&quot;http://localhost:8011/stock/reduct&quot;, String.class);// 服务地址 -&gt; 服务名称String msg = restTemplate.getForObject(&quot;http://stock-service/stock/reduct&quot;, String.class); 为 RestTemplate 加上 @LoadBalanced 注解，启用负载均衡器。负载均衡器具有服务名向地址解析的功能。 Nacos 默认采用 Ribbon 负载均衡。 负载均衡机制：循环向相同服务不同实例发送处理请求。 1234567// 通常写在配置类里面@Bean@LoadBalancedpublic RestTemplate restTemplate()&#123; RestTemplate restTemplate = new RestTemplate(); return restTemplate;&#125; 同一个项目如何开启多个实例对实例点击右键 Copy Configuration... 打开如下图配置界面。 3.2 集群模式 eg 以下通过 Linux 版本展开学习 进入 Linux 系统 123456789# 创建一个文件目录，并进入mkdir nacoscd nacos# 下载 Linux 版 release（1.4.1）wget https://github.com/alibaba/nacos/releases/download/1.4.1/nacos-server-1.4.1.tar.gz# 下载好，解压tar -zxvf nacos-server-1.4.1.tar.gz# 重命名mv nacos nacos8849 单机搭建伪集群 修改每个 Nacos 配置文件，以 nacos8849 为例，进入 nacos8849 目录 修改 conf&#x2F;application.properties 的配置，使用外置数据源 MySQL 版本要求 5.7+ 12345678# 使用外置 MySQL 数据源spring.datasource.platform=mysql# 连接数量db.num=1# MySQLdb.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTCdb.user.0=rootdb.password.0=root 将 conf&#x2F;cluster.conf.example 复制一份重命名为 cluster.conf，添加节点配置 12# 复制并重命名cp cluster.conf.example cluster.conf 1234# ip:port192.168.3.14:8849192.168.3.14:8850192.168.3.14:8851 创建 MySQL 数据库，sql 脚本位置：conf&#x2F;nacos-mysql.sql （可选）如果出现内存不足，修改启动脚本（bin&#x2F;startup.sh）的 jvm 参数 1JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn256 -XX:MetaspasceSize=128m ...&quot; 启动 Nacos 1./startup.sh 目前，已经成功搭建起了 Nacos 集群，可到 Nacos web 管理页面查看。 现在，我们需要通过 Nginx 负载均衡将请求分发到各个 Nacos 服务器。 下载 Nginx 1234567# 1. 添加官方源仓库yum install -y yum-utilsyum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo# 2. 安装 openrestyyum install -y openrestycd /user/local/openresty/ 官方推荐，Nginx 反向代理 conf&#x2F;nginx.conf 123456789101112upstream nacoscluster &#123; server 127.0.0.1:8849; server 127.0.0.1:8850; server 127.0.0.1:8851;&#125;server &#123; linsten 8847; server_name localhost; location /nacos/&#123; proxy_pass http://nacoscluster/nacos/; &#125;&#125; 启动 Nginx 1./nginx 最后，微服务项目（Nacos Client）在配置文件中指向 Nginx 即可。 123spring: nacos: server-addr:192.168.65.220:8847 3.3 prometheus + grafana 监控 Nacos4. Spring Cloud Alibaba Nacos 快速开始4.1 Spring Cloud Alibaba 版本选型4.2 搭建 Nacos-client 服务","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringCloud","slug":"技术向/SpringCloud","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/"},{"name":"小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程-保姆级教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"图灵架构师周瑜","slug":"图灵架构师周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E6%9E%B6%E6%9E%84%E5%B8%88%E5%91%A8%E7%91%9C/"},{"name":"图灵学院","slug":"图灵学院","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E5%AD%A6%E9%99%A2/"},{"name":"徐庶","slug":"徐庶","permalink":"http://blog.hooy.xyz/tags/%E5%BE%90%E5%BA%B6/"}],"author":"hooy"},{"title":"P01 微服务和 Spring Cloud Alibaba","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P01 微服务和 Spring Cloud Alibaba","date":"2022-06-14T16:00:00.000Z","updated":"2022-06-17T02:29:41.181Z","comments":true,"path":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P01 微服务和 Spring Cloud Alibaba/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P01%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%92%8C%20Spring%20Cloud%20Alibaba/","excerpt":"","text":"视频源：小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂 1. 微服务和 Spring Cloud Alibaba 介绍1.1 架构的演变过程 1.1.1 单体应用架构 优点： 项目架构简单，开发成本低； 项目部署在一个节点上，维护方便； 缺点： 全部功能集成在一个工程中，对于大型项目来讲不易开发和维护； 项目模块之间紧密耦合，单点容错率低； 无法针对不同模块进行针对性优化和水平扩展。 1.1.2 垂直应用架构 优点： 系统拆分实现了流量分担，解决了并发问题，而且可以针对不同莫款进行优化和水平扩展； 一个系统的问题不会影响到其它系统，提高容错率； 缺点： 系统之间相互独立，无法进行相互调用； 系统之间相互独立，会有重复的开发任务。 1.1.3 分布式架构（互联网公司刚起步推荐架构） 优点： 抽取公共的功能为服务层，提高代码复用性； 缺点： 系统间耦合度变高，调用关系错综复杂，难以维护。 1.1.4 SOA 架构 优点： 使用治理中心（ESB\\Dubbo）解决了服务间调用关系的自动调节； 缺点： 服务间会有依赖关系，一旦某个环节出错会影响较大（服务雪崩）； 服务关系复杂，运维、测试部署困难。 1.1.5 微服务架构微服务架构比 SOA 架构粒度会更加精细，让专业的人去做专业的事情（专注），目的提高效率，每个服务与服务之间互不影响，微服务架构中，每个服务必须独立部署，微服务架构也更加轻巧、轻量级。 SOA 架构中可能数据库存储会发生共享，微服务强调独立每个服务都是单独数据库，保证每个服务与服务之间互不影响。 项目体现特征微服务架构比 SOA 架构更加适合互联网公司敏捷开发、快速迭代版本，因为粒度非常精细。 优点： 服务原子化拆分，独立打包、部署和升级、保证每个微服务清晰的任务划分，利于扩展； 微服务之间采用 Restful 等轻量级 http 协议互相调用； 缺点： 分布式系统开发的技术成本高（容错、分布式事务等）； 复杂性更高。各个微服务进行分布式独立部署，当进行模块调用的时候，分布式会变得更加麻烦。 1.2.1 微服务架构的常见问题 这么多小服务，如何管理他们？（服务治理 注册中心[服务注册 发现 剔除]）Nacos 这么多小服务，他们之间如何通讯？（Restful RPC Dubbo Feign） 迭代：以前[httpclient(“url”,args)] -&gt; SpringBoot[restTemplate(“url”,args)] -&gt; Feign 这么多小服务，客户端怎么访问他们？（网关）Gateway 这么多小服务，一旦出现问题了，应该如何自处理？（容错）Sentinel 这么多小服务，一点出现问题了，应该如何排错？（链路追踪）Skywalking 1.2.2 常见微服务架构 Dobbo：Zookeeper + Dubbo + SpringMVC&#x2F;SpringBoot 配套通信方式：rpc 注册中心：zookeeper&#x2F;redis 配置中心：diamond SpringCloud：全家桶 + 轻松嵌入第三方组件（Netfilx） 配套通信方式：http restful 注册中心：eruka&#x2F;consul 配置中心：config 断路器：hystrix 网关：zuul 分布式追踪系统：sleuth + zipkin SpringCloud Alibaba SpringCloud 以微服务为核心的分布式系统构建标准 4. Spring Cloud 各套实现对比","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringCloud","slug":"技术向/SpringCloud","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/"},{"name":"小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程-保姆级教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"图灵架构师周瑜","slug":"图灵架构师周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E6%9E%B6%E6%9E%84%E5%B8%88%E5%91%A8%E7%91%9C/"},{"name":"图灵学院","slug":"图灵学院","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E5%AD%A6%E9%99%A2/"},{"name":"徐庶","slug":"徐庶","permalink":"http://blog.hooy.xyz/tags/%E5%BE%90%E5%BA%B6/"}],"author":"hooy"},{"title":"P10 Spring Cloud Alibaba 环境搭建","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P10 Spring Cloud Alibaba 环境搭建","date":"2022-06-14T16:00:00.000Z","updated":"2022-06-16T11:38:32.909Z","comments":true,"path":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂/P10 Spring Cloud Alibaba 环境搭建/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P10%20Spring%20Cloud%20Alibaba%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"","text":"视频源：小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂 3. Spring Cloud Alibaba 环境搭建1. 基于 Spring Boot 的父 maven 项目打开 IDEA 创建一个 Spring Initializr 项目，Type 选择 Maven Project，再将 Packaging 选择 Pom （如果没有Pom选项，后面在 pom 文件里改成 pom 即可）。 一路下一步。项目创建好后，打开 pom 文件，加入以下代码，让项目打包时不用打包成 jar 包。 1&lt;packaging&gt;pom&lt;/packaging&gt; 2. 子 maven 项目右键父项目 New Module，创建一个 Maven 项目。 子项目是 web 项目，pom 加入 web 相关的依赖坐标。 123456&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 3. 创建两个服务并通信 Order 服务 SpringBootApplication 1234567891011121314@SpringBootApplicationpublic class OrderApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(OrderApplication.class,args); &#125; // 通常写在配置类里面 @Bean public RestTemplate restTemplate()&#123; RestTemplate restTemplate = new RestTemplate(); return restTemplate; &#125;&#125; Controller 1234567891011121314@RestController@RequestMapping(&quot;/order&quot;)public class OrderController &#123; @Autowired RestTemplate restTemplate; @RequestMapping(&quot;/add&quot;) public String add()&#123; System.out.println(&quot;下单成功&quot;); String msg = restTemplate.getForObject(&quot;http://localhost:8011/stock/reduct&quot;, String.class); return &quot;hello world&quot; + msg; &#125;&#125; aplication.yaml 12server: port: 8010 Stock 服务 SpringBootApplication 1234567@SpringBootApplicationpublic class StockApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(StockApplication.class, args); &#125;&#125; Controller 123456789@RestController@RequestMapping(&quot;/stock&quot;)public class StockController &#123; @RequestMapping(&quot;/reduct&quot;) public String reduct()&#123; System.out.println(&quot;扣减库存&quot;); return &quot;扣减库存&quot;; &#125;&#125; aplication.yaml 12server: port: 8011 Run Dashboard &#x2F; Service方便管理各个服务。 4. 引入 Spring Cloud Alibaba 相关组件 注意：一定要去查阅官方文档组件之间版本兼容性。 这里使用以下版本学习： Spring Cloud Alibaba:2.2.5.RELEASE Spring Boot:2.3.2.RELEASE Spring Cloud:Hoxton.SR8 为父项目加入依赖坐标： 123456789101112&lt;dependencyManagement&gt; &lt;!--spring cloud alibaba 版本管理--&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt; &lt;version&gt;2.2.5.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; dependencyManagement 和 dependencies 区别：dependencyManagement 的依赖需要子类声明后才能使用，dependencies 的依赖子类可以直接使用。 当然，可以将 &lt;parent&gt; 标签内的依赖坐标加入其中，这样就能释放 parent 标签了。 12345678910111213141516171819202122232425262728&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;!--spring cloud alibaba 版本管理--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt; &lt;version&gt;2.2.5.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;!--spring boot 版本管理--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.3.11&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;!--spring cloud 版本管理--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Hoxton.SR8&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; 5. IDEA 集成阿里云快速初始化向导阿里云提供的快速初始化向导：https://start.aliyun.com/bootstrap.html","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringCloud","slug":"技术向/SpringCloud","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/"},{"name":"小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程-保姆级教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"图灵架构师周瑜","slug":"图灵架构师周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E6%9E%B6%E6%9E%84%E5%B8%88%E5%91%A8%E7%91%9C/"},{"name":"图灵学院","slug":"图灵学院","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E5%AD%A6%E9%99%A2/"},{"name":"徐庶","slug":"徐庶","permalink":"http://blog.hooy.xyz/tags/%E5%BE%90%E5%BA%B6/"}],"author":"hooy"},{"title":"P51 Nullable注解和函数式注册对象","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P51 Nullable注解和函数式注册对象","date":"2022-06-01T16:00:00.000Z","updated":"2022-06-15T08:32:50.642Z","comments":true,"path":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P51 Nullable注解和函数式注册对象/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P51%20Nullable%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%87%BD%E6%95%B0%E5%BC%8F%E6%B3%A8%E5%86%8C%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"视频源：尚硅谷Spring框架视频教程（spring5源码级讲解） @Nullable 注解该注解用在： 方法：方法返回值可以为空； 形参：形参值可以为空； 属性：属性值可以为空。 函数式风格 GenericApplicationContext12345678// 创建 GenericApplicationContext 对象GenericApplicationContext context = new GenericApplicationContext();// （非必要）清空容器context.refresh();// 对象注册context.registerBean(&quot;user&quot;,User.class,()-&gt; new User());// 获取在 spring 注册的对象User user = (User)context.getBean(&quot;user&quot;);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringFramework","slug":"技术向/SpringFramework","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"},{"name":"尚硅谷Spring框架视频教程（spring5源码级讲解）","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"JavaSE强化教程泛型，由点到面的讲解了整个泛型体系","slug":"技术向/Java/JavaSE强化教程泛型_由点到面的讲解了整个泛型体系/JavaSE强化教程泛型，由点到面的讲解了整个泛型体系","date":"2022-05-31T16:00:00.000Z","updated":"2022-06-15T08:32:50.160Z","comments":true,"path":"技术向/Java/JavaSE强化教程泛型_由点到面的讲解了整个泛型体系/JavaSE强化教程泛型，由点到面的讲解了整个泛型体系/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/JavaSE%E5%BC%BA%E5%8C%96%E6%95%99%E7%A8%8B%E6%B3%9B%E5%9E%8B_%E7%94%B1%E7%82%B9%E5%88%B0%E9%9D%A2%E7%9A%84%E8%AE%B2%E8%A7%A3%E4%BA%86%E6%95%B4%E4%B8%AA%E6%B3%9B%E5%9E%8B%E4%BD%93%E7%B3%BB/JavaSE%E5%BC%BA%E5%8C%96%E6%95%99%E7%A8%8B%E6%B3%9B%E5%9E%8B%EF%BC%8C%E7%94%B1%E7%82%B9%E5%88%B0%E9%9D%A2%E7%9A%84%E8%AE%B2%E8%A7%A3%E4%BA%86%E6%95%B4%E4%B8%AA%E6%B3%9B%E5%9E%8B%E4%BD%93%E7%B3%BB/","excerpt":"","text":"视频源：JavaSE强化教程泛型，由点到面的讲解了整个泛型体系 泛型类、接口泛型类 泛型类的定义语法 123class 类名称&lt;泛型标识,泛型标识,...&gt; &#123; private 泛型标识 变量名;&#125; 常用的泛型标识：T、E、K、V 123456789101112131415public class Generic&lt;T&gt; &#123; private T key; public Generic(T key) &#123; this.key = key; &#125; public T getKey() &#123; return key; &#125; public void setKey(T key) &#123; this.key = key; &#125;&#125; 使用语法 1类名&lt;具体的数据类型&gt; 对象名 = new 类名&lt;具体的数据类型&gt;(); Java 1.7 以后，后面的&lt;&gt;中的具体数据类型可以省略不写 1类名&lt;具体的数据类型&gt; 对象名 = new 类名&lt;&gt;(); 泛型类注意事项 泛型类，如果没有指定具体的数据类型，操作类型是 Object； 泛型的类型参数只能是类类型，不能是基本数据类型； 泛型类型在逻辑上可以看成是多个不同的类型，但实际上都是相同类型。 123456789101112131415161718public class ProductGetter&lt;T&gt; &#123; Random random = new Random(); // 奖品 private T product; // 奖品池 ArrayList&lt;T&gt; list = new ArrayList&lt;&gt;(); // 添加奖品 public void addProduct(T t) &#123; list.add(t); &#125; // 抽奖 public T getProduct() &#123; product = list.get(random.nextInt(list.size())); return product; &#125;&#125; 从泛型类派生子类 子类也是泛型类，子类和父类的泛型类型要一致； 123class ChildGeneric&lt;T&gt; extends Generic&lt;T&gt;// 也可以增加泛型类型class ChildGeneric&lt;T,E,K&gt; extends Generic&lt;T&gt; 子类不是泛型类，父类要明确泛型的数据类型 1class ChildGeneric extends Generic&lt;String&gt; 泛型接口 泛型接口的定义语法 123interface 接口名称&lt;泛型标识,泛型标识,...&gt; &#123; 泛型标识 方法名();&#125; 泛型接口的使用 实现类不是泛型类，接口要明确数据类型； 实现类也是泛型类，实现类和接口的泛型类型要一致。 123public interface Generator&lt;T&gt; &#123; T getKey();&#125; 12public class Pair&lt;T&gt; implements Generator&lt;T&gt;public class Pair&lt;T,E,K&gt; implements Generator&lt;T&gt; 1public class Apple implements Generator&lt;String&gt; 泛型方法 泛型类，是在实例化类的时候指明泛型的具体类型； 泛型方法，是在调用方法的时候指明泛型的具体类型。 123修饰符 &lt;T,E,...&gt; 返回值类型 方法名(形参列表) &#123; 方法体...&#125; public 与返回值中间 &lt;T&gt; 非常重要，可以理解为声明此方法为泛型方法； 只有声明了 &lt;T&gt; 的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法； &lt;T&gt; 表明该方法将使用泛型类型 T，此时才可以在方法中使用泛型类型 T； 与泛型类的定义一样，此处 T 可以随便写为任意表示，常见的如 T、E、K、V 等形式的参数常用于表示泛型。 123public &lt;E&gt; E getProduct(ArrayList&lt;E&gt; list) &#123; return list.get(random.nextInt(list.size()));&#125; 泛型方法可以被 static 修饰。 1public static &lt;T,E,K&gt; void printType(T t,E e,K k) 泛型方法与可变参数12345public &lt;E&gt; void print(E... e) &#123; for(E e1 : e) &#123; System.out.println(e); &#125;&#125; 泛型方法总结 泛型方法能使方法独立于类而产生变化； 如果 static 方法要使用泛型能力，就必须使其成为泛型方法。 类型通配符什么是类型通配符 类型通配符一般是使用 ? 代替具体的类型实参； 所以，类型通配符是类型实参，而不是类型形参。 类型通配符的上限1类/接口&lt;? extends 实参类型&gt; 要求该泛型的类型，只能是实参类型，或实参类型的子类型类型。 eg 01 1234567891011public static void main(String[] args) &#123; Box&lt;Number&gt; box1 = new Box&lt;&gt;; showBox(box1); Box&lt;Integer&gt; box2 = new Box&lt;&gt;; showBox(box2);&#125;// 向上父类只能到Number （Integer是Number子类）public static void showBox(Box&lt;? extends Number&gt; box) &#123; Numaber first = box.getFirst();&#125; eg 02 继承关系：Animal -&gt; Cat -&gt; MiniCat 1public class Animal&#123;&#125; 1public class Cat extends Animal&#123;&#125; 1public class MiniCat extends Cat&#123;&#125; 1234567891011public static void main(String[] args) &#123; ArrayList&lt;Animal&gt; animals = new ArrayList&lt;&gt;(); ArrayList&lt;Cat&gt; cats = new ArrayList&lt;&gt;(); ArrayList&lt;MiniCat&gt; miniCat = new ArrayList&lt;&gt;(); showAnimal(animals); // 编译错误 showAnimal(cats); showAnimal(miniCat);&#125;public static void showAnimal(ArrayList&lt;? extends Cat&gt; list) &#123;&#125; 注意：“类型通配符的上限” 方法不允许添加元素 12345public static void showAnimal(ArrayList&lt;? extends Cat&gt; list) &#123; list.add(new Animal()); // 编译错误 list.add(new Cat()); // 编译错误 list.add(new MiniCat()); // 编译错误&#125; 类型通配符的下限1类/接口&lt;? super 实参类型&gt; 要求该泛型的类型，只能是实参类型，或实参类型的父类类型。 1234567891011public static void main(String[] args) &#123; ArrayList&lt;Animal&gt; animals = new ArrayList&lt;&gt;(); ArrayList&lt;Cat&gt; cats = new ArrayList&lt;&gt;(); ArrayList&lt;MiniCat&gt; miniCat = new ArrayList&lt;&gt;(); showAnimal(animals); showAnimal(cats); showAnimal(miniCat); // 编译错误&#125;public static void showAnimal(ArrayList&lt;? super Cat&gt; list) &#123;&#125; 注意：“类型通配符的下限” 方法允许添加元素，不保证元素类型约束要求。 以下章节未学习 类型擦除泛型与数组泛型和反射","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"JavaSE强化教程泛型_由点到面的讲解了整个泛型体系","slug":"技术向/Java/JavaSE强化教程泛型-由点到面的讲解了整个泛型体系","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/JavaSE%E5%BC%BA%E5%8C%96%E6%95%99%E7%A8%8B%E6%B3%9B%E5%9E%8B-%E7%94%B1%E7%82%B9%E5%88%B0%E9%9D%A2%E7%9A%84%E8%AE%B2%E8%A7%A3%E4%BA%86%E6%95%B4%E4%B8%AA%E6%B3%9B%E5%9E%8B%E4%BD%93%E7%B3%BB/"}],"tags":[{"name":"黑马程序员","slug":"黑马程序员","permalink":"http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"}],"author":"hooy"},{"title":"P33 - P39 JdbcTemplate","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P33 - P39 JdbcTemplate","date":"2022-05-30T16:00:00.000Z","updated":"2022-06-15T08:32:50.641Z","comments":true,"path":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P33 - P39 JdbcTemplate/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P33%20-%20P39%20JdbcTemplate/","excerpt":"","text":"视频源：尚硅谷Spring框架视频教程（spring5源码级讲解） JdbcTemplate（概念和准备）1. 什么是 JdbcTemplateSpring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作。 2. 准备工作Step 01 引入依赖（jar包） Step 02 在 spring 配置文件配置数据库连接池 123456&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt; &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/userDB&quot;&gt;&lt;/property&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt; &lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;&lt;/bean&gt; Step 03 配置 JdbcTemplate 对象，注入 DataSource 12345&lt;!-- JdbcTemplate对象 --&gt;&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt; &lt;!-- 注入dataSource --&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;JdbcTemplate&quot;&gt;&lt;/property&gt;&lt;/bean&gt; Step 04 创建 service 类，创建 dao 类，在 dao 注入 jdbcTemplate 对象 由于使用到了注解，需要在 spring 配置文件中配置 组件扫描 12345@Repositorypublic class BookDaoImpl implements BookDao &#123; @Autowired private JdbcTemplate jdbcTemplate;&#125; 单条数据操作 P34 123456@Datapublic class User &#123; private String userId; private String userName; private String userStatus;&#125; 添加1234567891011121314@Repositorypublic class BookDaoImpl implements BookDao &#123; @Autowired private JdbcTemplate jdbcTemplate; @Overried public void add(Book book) &#123; // 创建sql语句和args参数 String sql = &quot;insert into t_book values(?,?,?)&quot;; Object[] args = &#123;book.getUserId(),book.getUserName(),book.getUserStatus()&#125;; // 调用方法 返回影响行数 int update = jdbcTemplate.update(sql,args); &#125;&#125; 修改和删除12345678910111213141516171819202122@Repositorypublic class BookDaoImpl implements BookDao &#123; @Autowired private JdbcTemplate jdbcTemplate; @Overried public void update(Book book) &#123; // 创建sql语句和args参数 String sql = &quot;update t_book set user_id = ?,user_name = ?,user_status = ?&quot;; Object[] args = &#123;book.getUserId(),book.getUserName(),book.getUserStatus()&#125;; // 调用方法 返回影响行数 int update = jdbcTemplate.update(sql,args); &#125; @Overried public void delete(String id) &#123; // 创建sql语句和args参数 String sql = &quot;delete from t_book where user_id = ?&quot;; // 调用方法 返回影响行数 int update = jdbcTemplate.update(sql,id); &#125;&#125; 查询数据返回基本类型12345678910111213@Repositorypublic class BookDaoImpl implements BookDao &#123; @Autowired private JdbcTemplate jdbcTemplate; @Overried public int selectCount() &#123; String sql = &quot;select count(*) from t_book&quot;; // Class 返回类型 Integer count = jdbcTemplate.queryForObject(sql,Integer.class); return count; &#125;&#125; 返回对象类型12345678910111213@Repositorypublic class BookDaoImpl implements BookDao &#123; @Autowired private JdbcTemplate jdbcTemplate; @Overried public Book findBookInfo() &#123; String sql = &quot;select * from t_book where user_id = ?&quot;; // RowMapper 是接口，针对返回不同类型数据，使用这个接口里面实现类完成数据封装 Book book = jdbcTemplate.queryForObject(sql,new BeanPropertyRowMapper&lt;Book&gt;(Book.class),id); return book; &#125;&#125; 返回集合类型12345678910111213@Repositorypublic class BookDaoImpl implements BookDao &#123; @Autowired private JdbcTemplate jdbcTemplate; @Overried public List&lt;Book&gt; findAllBook() &#123; String sql = &quot;select * from t_book&quot;; // RowMapper 是接口，针对返回不同类型数据，使用这个接口里面实现类完成数据封装 List&lt;Book&gt; bookList = jdbcTemplate.query(sql,new BeanPropertyRowMapper&lt;Book&gt;(Book.class)); return bookList; &#125;&#125; 批量数据操作添加1234567891011@Repositorypublic class BookDaoImpl implements BookDao &#123; @Autowired private JdbcTemplate jdbcTemplate; @Overried public void batchAddBook(List&lt;Object[]&gt; batchArgs) &#123; String sql = &quot;insert into t_book values(?,?,?)&quot;; int[] ints = jdbcTemplate.batchUpdate(sql,batchArgs); &#125;&#125; 修改和删除1234567891011121314151617@Repositorypublic class BookDaoImpl implements BookDao &#123; @Autowired private JdbcTemplate jdbcTemplate; @Overried public void batchUpdateBook(List&lt;Object[]&gt; batchArgs) &#123; String sql = &quot;update t_book set user_id = ?,user_name = ?,user_status = ?&quot;; int[] ints = jdbcTemplate.batchUpdate(sql,batchArgs); &#125; @Overried public void batchDeleteBook(List&lt;Object[]&gt; batchArgs) &#123; String sql = &quot;delete from t_book where user_id = ?&quot;; int[] ints = jdbcTemplate.batchUpdate(sql,batchArgs); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringFramework","slug":"技术向/SpringFramework","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"},{"name":"尚硅谷Spring框架视频教程（spring5源码级讲解）","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P40 - P49 事务操作","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P40 - P49 事务操作","date":"2022-05-30T16:00:00.000Z","updated":"2022-06-15T08:32:50.642Z","comments":true,"path":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P40 - P49 事务操作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P40%20-%20P49%20%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C/","excerpt":"","text":"视频源：尚硅谷Spring框架视频教程（spring5源码级讲解） 事务概念1. 什么是事务事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操作都失败。 2. 事务四个特性（ACID） 原子性：不可分割，要么都成功要么都失败； 一致性：操作前后总量不变； 隔离性：多事务操作时互不影响； 持久性：提交后保存数据。 搭建事务操作环境 事务操作过程123456789101112public void accountMoney() &#123; try &#123; // 第一步 开启事务 // 第二步 进行业务操作 userDao.reduceMoney(); int i = 10/0; userDao.addMoney(); // 第三步 没有发生异常，提交事务 &#125; catch(Excepiton e) &#123; // 第三步 出现异常，回滚事务 &#125;&#125; Spring 事务管理介绍1. 事务添加到 JavaEE 三层结构里面 Service 层（业务逻辑层）2. 在 Spring 进行事务管理操作有两种方式： 编程式事务管理； 声明式事务管理（常用）。 基于注解方式； 基于 xml 配置文件方式。 4. 在 Spring 进行声明式事务管理，底层使用 AOP 原理5. 提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类 注解声明式事务管理Step 01 在 spring 配置文件配置事务管理器 1234&lt;!-- 创建事务管理器 --&gt;&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;&lt;/bean&gt; Step 02 在 spring 配置文件，开启事务注解 在 spring 配置文件引入命名空间 tx 12xmlns:util=&quot;http://www.springframework.org/schema/tx&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot; 开启事务注解 12&lt;!-- 开启事务注解 --&gt;&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;&gt;&lt;/tx:annotation-driven&gt; Step 03 在 service 类（方法）上面添加事务注解 @Transactional 123456@Transactionalpublic void accountMoney() &#123; userDao.reduceMoney(); int i = 10/0; userDao.addMoney();&#125; 声明式事务管理参数配置1. 在 Service 类上面添加注解 @Transactional，在这个注解里面可以配置事务相关参数 propagation：事务传播行为； 多事务方法（对数据库表增删改操作）之间进行调用 Spring 框架事务传播行为有 7 种： REQUIRED（默认）：如果 add 方法本身有事务，调用 update 方法后，update 使用当前 add 方法的事务；如果 add 方法本身没有事务，调用 update 方法后，创建新事务； REQUIRED_NEW：使用 add 方法调用 update 方法，如果 add 无论是否有事务，都创建新的事务； 12@Transactional(propagation = Propagation.REQUIRED)public class UserService&#123;&#125; Isolation：事务隔离级别； 遇到的三个问题： 脏读：一个未提交的事务读取到另一个未提交事务的数据； 不可重复读：一个未提交事务读取到另一个提交事务修改之前的数据； 幻读： 此部分建议专门搜索相关知识点。 解决问题，设置事务隔离级别： 12@Transactional(isolation = Isolation.REPEATABLE_READ)public class UserService&#123;&#125; timeout：超时时间； 事务需要在一定时间内进行提交，如果不提交进行回滚。默认值 -1，即无超时时间。单位秒。 readOnly：是否只读； 默认值 false，设置 true 后，只能查询操作。 12@Transactional(timeout = true)public class UserService&#123;&#125; rollbackFor：回滚； 设置出现哪些异常进行事务回滚。 noRollbackFor：不回滚； 设置出现哪些异常不进行事务回滚。 XML 声明式事务管理1. 在 spring 配置文件中进行配置Step 01 配置事务管理器 1234&lt;!-- 创建事务管理器 --&gt;&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;&lt;/bean&gt; Step 02 配置通知 12345678&lt;!-- 配置通知 --&gt;&lt;tx:advice id=&quot;txadvice&quot;&gt; &lt;!-- 配置事务参数 --&gt; &lt;tx:attributes&gt; &lt;!-- 指定哪种规则的方法上面添加事务 --&gt; &lt;tx:method name=&quot;accountMoney&quot; propagation=&quot;REQUIRED&quot;/&gt; &lt;/tx:attributes&gt;&lt;/tx:advice&gt; Step 03 配置切入点和切面 123456&lt;aop:config&gt; &lt;!-- 配置切入点 --&gt; &lt;aop:pointcut id=&quot;pt&quot; expression=&quot;execution(* com.atguigu.spring5.service.UserService.*(..))&quot;/&gt; &lt;!-- 配置切面 --&gt; &lt;aop:advisor advice-ref=&quot;txadvice&quot; pointcut-ref=&quot;pt&quot;/&gt;&lt;/aop:config&gt; 完全注解开发1. 创建配置类，使用配置类代替 xml 配置文件12345678910111213141516171819202122232425262728293031323334@Configuration // 配置类@ComponentScan(basePackages = &quot;com.atguigu&quot;) // 组件扫描@EnableTransactionManagement // 开启事务public class TxConfig &#123; // 创建数据库连接池 @Bean public DruidDataSource getDruidDataSource() &#123; DruidDataSource dataSource = new DruidDataSource(); dataSource.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;); dataSource.setUrl(&quot;jdbc:mysql:///user_db&quot;); dataSource.setUsername(&quot;root&quot;); dataSource.setPassword(&quot;root&quot;); return dataSource; &#125; // 创建 JdbcTemplate 对象 @Bean public JdbcTemplate getJdbcTemplate(DataSource dataSource) &#123; // 到 IOC 容器中根据类型找到 dataSource JdbcTemplate jdbcTemplate = new JdbcTemplate(); // 注入 dataSource jdbcTemplate.setDataSource(dataSource); return jdbcTemplate; &#125; // 创建事务管理器对象 @Bean public DataSourceTransactionManager getDataSourceTransactionManager(DataSource dataSource) &#123; DataSourceTransactionManager transactionManager = new DataSourceTransactionManager(); transactionManager.setDataSource(dataSource); return transactionManager; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringFramework","slug":"技术向/SpringFramework","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"},{"name":"尚硅谷Spring框架视频教程（spring5源码级讲解）","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P20 - P24 IOC容器-Bean管理注解方式","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P20 - P24 IOC容器-Bean管理注解方式","date":"2022-05-29T16:00:00.000Z","updated":"2022-06-15T08:32:50.640Z","comments":true,"path":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P20 - P24 IOC容器-Bean管理注解方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P20%20-%20P24%20IOC%E5%AE%B9%E5%99%A8-Bean%E7%AE%A1%E7%90%86%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F/","excerpt":"","text":"视频源：尚硅谷Spring框架视频教程（spring5源码级讲解） IOC 操作 Bean 管理（基于注解方式） P20 1. 什么是注解2. Spring 针对 Bean 管理中创建对象提供注解 @Component @Service @Controller @Repository 不同名称是用于角色区分，上面四个注解功能一样，都可以创建 Bean 实例。 3. 基于注解方式实现对象创建Step 01 引入依赖 spring-aop-5.2.6.RELEASE.jar Step 02 开启组件扫描 在 spring 配置文件中引入命名空间 context 12xmlns:util=&quot;http://www.springframework.org/schema/context&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/context http://www.springframework.org/schema/util/spring-context.xsd&quot; 开启组件扫描 1234567&lt;!-- 如果扫描多个包 Method 01：多个包使用逗号隔开； Method 02：扫描包上层目录。--&gt;&lt;context:component-san base-package=&quot;com.atguigu.service,com.atguigu.dao&quot;&gt;&lt;/context:component-san&gt; Step 03 创建类，在类上面添加创建对象注解 1234567// 注解里面 value 属性值可以省略不写，默认值是类名称首字母小写@Component(value = &quot;userService&quot;) // &lt;bean id=&quot;userService&quot; class=&quot;...&quot;&gt;&lt;/bean&gt;public class UserService &#123; public void add() &#123; // more code ... &#125;&#125; 4. 开启组件扫描细节配置 P21 spring 配置文件 12345678910111213141516&lt;!-- [包括] use-default-filters=&quot;false&quot; 表示不使用默认filter，不扫描全部 eg：只包括使用了 @Controller 注解（annotation）的类。--&gt;&lt;context:component-scan base-package=&quot;com.atguigu&quot; use-default-filters=&quot;fasle&quot;&gt; &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.sterotype.Controller&quot;/&gt;&lt;/context:component-scan&gt;&lt;!-- [排除] eg：只排除使用了 @Controller 注解（annotation）的类。--&gt;&lt;context:component-scan base-package=&quot;com.atguigu&quot;&gt; &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.sterotype.Controller&quot;/&gt;&lt;/context:component-scan&gt; 5. 基于注解方式实现属性注入 P22 @Autowired：根据属性类型自动注入； 12@Autowiredprivate UserDao userDao; @Qualifier：根据属性名称自动注入，要和 @Autowired 一起使用； 123@Autowired@Qualifier(value = &quot;userDaoImpl1&quot;)private UserDao userDao; @Resource：可以根据属性类型自动注入，也可以根据属性名称自动注入； 123@Resource // 根据类型进行注入@Resource(name = &quot;userDaoImpl1&quot;) // 根据名称注入private UserDao userDao; @Value：注入普通类型属性。 12@Value(value=&quot;abc&quot;)private String name; 6. 完全注解开发 P23 Step 01 创建配置类，替代 xml 配置文件 12345@Configuration // 作为配置类，替代xml配置文件@ComponentScan(basePackages = &#123;&quot;com.atguigu&quot;&#125;)public class SpringConfig &#123; &#125; Step 02 编写测试类 123456@Testpublic void testService2() &#123; // 加载配置类 ApplicationContext context = new AnnotationConfigApplicationContext(SpringConfig.class); UserService userService = context.getBean(&quot;userService&quot;,UserService.class);&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringFramework","slug":"技术向/SpringFramework","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"},{"name":"尚硅谷Spring框架视频教程（spring5源码级讲解）","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P24 - P32 AOP","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P25 - P32 AOP","date":"2022-05-29T16:00:00.000Z","updated":"2022-06-15T08:32:50.641Z","comments":true,"path":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P25 - P32 AOP/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P25%20-%20P32%20AOP/","excerpt":"","text":"视频源：尚硅谷Spring框架视频教程（spring5源码级讲解） AOP（概念）1. 什么是 AOP 不通过修改源码方式，在主干功能里面添加新功能。 将日志记录、性能统计、安全控制、事务处理、异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将他们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。 AOP（底层原理） P27 AOP 底层使用动态代理有两种情况动态代理： 有接口情况，使用 JDK 动态代理； 调用 java.lang.reflect.Proxy 类里的 newProxyInstance 方法； 参数一：类加载器； 参数二：被代理类实现的接口，支持多个接口； 参数三：实现 InvocationHandler 接口，写增强方法。 编写 JDK 动态代理代码； 使用 Proxy 类创建接口代理对象。 没有接口情况，使用 CGLIB 动态代理。 AOP（术语） P28 1. 连接点类里面哪些方法可以被增强，这些方法称为连接点。 2. 切入点实际被真正增强的方法，称为切入点。 3. 通知（增强）增强的逻辑部分被称为通知（增强）。 通知有多种类型： 前置通知 @Before 后置通知 @After 环绕通知 @Around 异常通知 @AfterThrowing 最终通知 @AfterReturing 4. 切面把通知应用到切入点的过程，称为切面。 AOP 操作（准备） P29 1. Spring 框架一般基于 AspectJ 实现 AOP 操作什么是 AspectJ ？ AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spring 框架一起使用，进行 AOP 操作。 2. 基于 AspectJ 实现 AOP 操作 基于 xml 配置文件实现； 基于注解方式实现。 3. 在项目工程里面引入 AOP 相关依赖4. 切入点表达式 切入点表达式的作用：知道对哪个类里面的哪个方法进行增强； 语法结构：execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]) eg 01 对 com.atguigu.dao.BookDao 类里面的 add 进行增强 12345// 权限修饰符 * 表示任意权限// 返回类型 可以省略// 参数列表 .. 表示全部参数execution(* com.atguigu.dao.BookDao.add(..)); eg 02 对 com.atguigu.dao.BookDao 类里面的所有的方法进行增强 1execution(* com.atguigu.dao.BookDao.*(..)); eg 03 对 com.atguigu.dao 包里面所有类，类里面所有方法进行增强 1execution(* com.atguigu.dao.*.*(..)); AOP 操作（AspectJ 注解）1. 创建类，在类里面定义方法2. 创建增强类（编写增强逻辑）3. 进行通知的配置 在 spring 配置文件中，开启注解扫描； 12&lt;!-- 开启注解扫描 --&gt;&lt;context:component-san base-package=&quot;com.atguigu.spring5.aopanno&quot;&gt;&lt;/context:component-san&gt; 需要加入 context 和 aop 命名空间。 使用注解创建 User 和 UserProxy 对象； 在增强类上面添加 @Aspect 注解； 被增强类： 123456@Componentpublic class User &#123; public void add() &#123; System.out.println(&quot;add...&quot;); &#125;&#125; 增强类： 123456789101112131415161718@Component@Aspect // 生成代理对象public class UserProxy &#123; // 前置通知 @Before(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;) public void before() &#123; System.out.println(&quot;before...&quot;); &#125; // 环绕通知 @Around(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;) public void around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123; System.out.println(&quot;环绕之前...&quot;); proceedingJoinPoint.proceed(); System.out.println(&quot;环绕之后...&quot;); &#125;&#125; 在 spring 配置文件中开启生成代理对象。 12&lt;!-- 开启 Aspect 生成代理对象 --&gt;&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt; 可以用配置类的注解代替：@EnableAspectJAutoProxy(proxyTargetClass = true) 123456@Configuration // 作为配置类，替代xml配置文件@ComponentScan(basePackages = &#123;&quot;com.atguigu&quot;&#125;)@EnableAspectJAutoProxy(proxyTargetClass = true)public class SpringConfig &#123; &#125; 5. 相同切入点抽取1234567891011121314@Component@Aspect // 生成代理对象public class UserProxy &#123; // 相同切入点抽取 @Pointcut(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;) public void pointdemo() &#123;&#125; // 前置通知 @Before(value = &quot;&quot;) public void before(pointdemo()) &#123; System.out.println(&quot;before...&quot;); &#125;&#125; 6. 有多个增强类对同一个方法进行增强，设置增强类优先级在增强类上面添加注解 @Order(数字类型值)，数字类型值越小，优先级越高。 123456@Component@Aspect // 生成代理对象@Order(1)public class UserProxy &#123; // more code ...&#125; AOP 操作（AspectJ 配置文件） P32 配置文件方式不常用，多用注解方式（上一节）。 1. 创建两个类，被增强类和增强类，创建方法被增强类： 12345public class Book &#123; public void buy() &#123; System.out.println(&quot;buy...&quot;); &#125;&#125; 增强类： 12345public class BookProxy &#123; public void before() &#123; System.out.println(&quot;before...&quot;); &#125;&#125; 2. 在 spring 配置文件中创建两个类对象12&lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.aopxml.Book&quot;&gt;&lt;/bean&gt;&lt;bean id=&quot;bookProxy&quot; class=&quot;com.atguigu.spring5.aopxml.BookProxy&quot;&gt;&lt;/bean&gt; 3. 在 spring 配置文件中配置切入点123456789&lt;aop:config&gt; &lt;!-- 切入点 --&gt; &lt;aop:pointcut id=&quot;p&quot; expression=&quot;execution(* com.atguigu.spring5.aopxml.BookProxy.buy(..))&quot;/&gt; &lt;!-- 切面 --&gt; &lt;aop:aspect ref=&quot;bookProxy&quot;&gt; &lt;!-- 增强作用在具体的方法上 --&gt; &lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;p&quot;/&gt; &lt;/aop:aspect&gt;&lt;/aop:config&gt; 4. 完全使用注解开发123456@Configuration // 作为配置类，替代xml配置文件@ComponentScan(basePackages = &#123;&quot;com.atguigu&quot;&#125;)@EnableAspectJAutoProxy(proxyTargetClass = true)public class SpringConfig &#123; &#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringFramework","slug":"技术向/SpringFramework","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"},{"name":"尚硅谷Spring框架视频教程（spring5源码级讲解）","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"Java8 Stream流式编程爱 撸码就是快 流式编程好 代码传家宝","slug":"技术向/Java/java8_Stream流式编程爱_撸码就是快_流式编程好_代码传家宝/Java8 Stream流式编程爱 撸码就是快 流式编程好 代码传家宝","date":"2022-05-12T16:00:00.000Z","updated":"2022-06-15T08:32:50.161Z","comments":true,"path":"技术向/Java/java8_Stream流式编程爱_撸码就是快_流式编程好_代码传家宝/Java8 Stream流式编程爱 撸码就是快 流式编程好 代码传家宝/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/java8_Stream%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%88%B1_%E6%92%B8%E7%A0%81%E5%B0%B1%E6%98%AF%E5%BF%AB_%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%A5%BD_%E4%BB%A3%E7%A0%81%E4%BC%A0%E5%AE%B6%E5%AE%9D/Java8%20Stream%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%88%B1%20%E6%92%B8%E7%A0%81%E5%B0%B1%E6%98%AF%E5%BF%AB%20%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%A5%BD%20%E4%BB%A3%E7%A0%81%E4%BC%A0%E5%AE%B6%E5%AE%9D/","excerpt":"","text":"视频源：java8 Stream流式编程爱 撸码就是快，流式编程好 代码传家宝 函数式接口接口内仅有一个声明的方法。 @FunctionalInterface该注解用于声明该接口为函数式接口，并无什么作用，顶多当接口内存在两个及以上方法时该注解无法通过编译。 1234@FunctionalInterfacepublic interface demo &#123; void method;&#125; 方法引用12345678910run(SimpleLamdba::doFormatStatic); // 静态方法引用run(new SimpleLamdba()::doFormat); // 普通方法引用public static String doFormatStatic(String param) &#123; return &quot;name&quot; + param;&#125;public String doFormat(String param) &#123; return &quot;name&quot; + param;&#125; Stream 执行机制解密 Stream 不存储数据，不用担心内存溢出； Stream 不改变源数据； Stream 不可重复使用。 “过滤” 和 “排序” 可以拥有多个，“采集” 只能拥有一个。 “过滤” 和 “排序” 是懒节点，只有当执行 “采集” 节点时，前面的节点才执行，否则将即便是写了 “过滤” 和 “排序” 代码也不执行。 创建流用例： 1234567private static final List&lt;Apple&gt; appleStore = Arrays.asList( new Apple(1, &quot;red&quot;, 500, &quot;湖南&quot;), new Apple(2, &quot;red&quot;, 100, &quot;天津&quot;), new Apple(3, &quot;green&quot;, 300, &quot;湖南&quot;), new Apple(4, &quot;green&quot;, 200, &quot;天津&quot;), new Apple(5, &quot;green&quot;, 100, &quot;湖南&quot;)); 向 Stream 转换方法： 1234567// list -&gt; stream// Method 01:appleStore.stream();// Method 02:Arrays.stream(new int[]&#123;1,2,3&#125;);// Method 03:Stream.of(1,2,3); 1. 流的生成与不可重复使用12345Stream&lt;Apple&gt; stream1 = appleStore.stream();Stream&lt;Apple&gt; stream2 = stream1.filter(a -&gt; a.getColor().equals(&quot;red&quot;));Stream&lt;Apple&gt; stream3 = stream1.filter(a -&gt; a.getWeight() &gt; 100);// 执行结果报错 stream2 流使用了 stream1 流，stream1 流销毁，当 stream3 流使用 stream1 流时执行报错。 上一个节点可以影响下一个节点123456appleStore.stream() .fillter(a -&gt; a.getColor().equals(&quot;red&quot;) || a.getColor().equals(&quot;green&quot;)) // 过滤 .map(a -&gt; a.getColor()) // 将 Apple 对象转换为 String 字符串 .distinct() // 去重 .peek(color -&gt; System.out.println(color)) // 打印 .toArray(); Debug 方法详见视频进度： 1:02:00 采集 list map group by 数组 最大值 求任意值","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"java8_Stream流式编程爱_撸码就是快_流式编程好_代码传家宝","slug":"技术向/Java/java8-Stream流式编程爱-撸码就是快-流式编程好-代码传家宝","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/java8-Stream%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%88%B1-%E6%92%B8%E7%A0%81%E5%B0%B1%E6%98%AF%E5%BF%AB-%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%A5%BD-%E4%BB%A3%E7%A0%81%E4%BC%A0%E5%AE%B6%E5%AE%9D/"}],"tags":[{"name":"鲁班大叔","slug":"鲁班大叔","permalink":"http://blog.hooy.xyz/tags/%E9%B2%81%E7%8F%AD%E5%A4%A7%E5%8F%94/"}],"author":"hooy"},{"title":"P04 - P06 IOC容器（底层原理）","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P04 - P06 IOC容器（底层原理）","date":"2022-05-05T16:00:00.000Z","updated":"2022-06-15T08:32:50.639Z","comments":true,"path":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P04 - P06 IOC容器（底层原理）/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P04%20-%20P06%20IOC%E5%AE%B9%E5%99%A8%EF%BC%88%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%89/","excerpt":"","text":"视频源：尚硅谷Spring框架视频教程（spring5源码级讲解） 课程介绍IOC 容器 IOC 底层原理； IOC 接口（BeanFactory）； IOC 操作 Bean 管理（基于xml）； IOC 操作 Bean 管理（基于注解）。 IOC（概念和原理）1. 什么是 IOC 控制反转：把对象创建和对象之间的调用过程，交给 Spring 进行管理； 使用 IOC 的目的，为了耦合度降低。 2. IOC 底层原理 xml 解析、工厂模式、反射； 3. 画图讲解 IOC 底层原理 IOC（接口） IOC 思想基于 IOC 容器完成，IOC容器底层就是对象工厂； Spring 提供 IOC 容器实现两种方式（两个接口）： BeanFactory：IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用； 加载配置文件时不会创建对象，在获取（使用）对象才去创建对象。 1BeanFactory context = new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;); ApplicationContext：BeanFactory 接口的子接口，提供更多更强大的功能，一般由开发人员使用。 加载配置文件时就会创建配置文件中的对象。 1ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;); ApplicationContext 接口的实现类： IDEA 按住 CTRL + H 查看","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringFramework","slug":"技术向/SpringFramework","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"},{"name":"尚硅谷Spring框架视频教程（spring5源码级讲解）","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P07 - P19 IOC容器-Bean管理XML方式","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P07 - P19 IOC容器-Bean管理XML方式","date":"2022-05-05T16:00:00.000Z","updated":"2022-06-15T08:32:50.639Z","comments":true,"path":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P07 - P19 IOC容器-Bean管理XML方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P07%20-%20P19%20IOC%E5%AE%B9%E5%99%A8-Bean%E7%AE%A1%E7%90%86XML%E6%96%B9%E5%BC%8F/","excerpt":"","text":"视频源：尚硅谷Spring框架视频教程（spring5源码级讲解） IOC 操作 Bean 管理1. 什么是 Bean 管理（两个操作）： Spring 创建对象； Spring 注入属性。 2. Bean 管理操作有两种方式 基于 xml 配置文件方式实现； 基于注解方式实现 IOC 操作 Bean 管理（基于 xml 方式）1. 基于 xml 方式创建对象1&lt;bean id=&quot;user&quot; class=&quot;com.atguigu.spring5.User&quot;&gt;&lt;/bean&gt; 在 spring 配置文件中，使用 bean 标签，标签里面添加对应属性，就可以实现对象创建； 在 bean 标签有很多属性，介绍常用的属性； id 属性：唯一标识，通过它从 IOC 中获取对象； class 属性：类全路径（包类路径）。 创建对象时，默认执行无参构造方法。 2. 基于 xml 方式注入属性 DI：依赖注入，就是注入属性。 3. 使用 set方法 注入属性model 类 123456789101112public class Book &#123; private String bname; private String bauthor; public void setBname(String bname) &#123; this.bname = bname; &#125; public void setBauthor(String bauthor) &#123; this.bauthor = bauthor; &#125;&#125; spring 配置文件 12345678&lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.Book&quot;&gt; &lt;!-- 使用 property 标签完成属性注入 name 属性：类里面属性名称 value 属性：向属性注入的值 --&gt; &lt;property name=&quot;bname&quot; value=&quot;易筋经&quot;&gt;&lt;/property&gt; &lt;property name=&quot;bauthor&quot; value=&quot;达摩老祖&quot;&gt;&lt;/property&gt;&lt;/bean&gt; 4. 使用 有参构造方法 注入属性model 类 123456789public class Orders &#123; private String oname; private String address; public Orders(String oname,String address) &#123; this.oname = oname; this.address = address; &#125;&#125; spring 配置文件 1234&lt;bean id=&quot;orders&quot; class=&quot;com.atguigu.spring5.Orders&quot;&gt; &lt;constructor-ages name=&quot;oname&quot; value=&quot;电脑&quot;&lt;/constructor-ages&gt; &lt;constructor-ages name=&quot;address&quot; value=&quot;China&quot;&gt;&lt;/constructor-ages&gt;&lt;/bean&gt; 由于存在有参构造方法，并且没有显式无参构造方法。在编辑 xml 文件时，仅写 bean 不含 constructor-ages 标签时，class 属性会报错。 5. 使用 p命名空间 注入属性 可以简化基于 xml 配置方式。 Step 01：添加 p命名空间 在配置文件中 1xmlns:p=&quot;http://www.springframework.org/schema/p&quot; Step 02：简化配置代码 12345678&lt;!-- 简化前 --&gt;&lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.Book&quot;&gt; &lt;property name=&quot;bname&quot; value=&quot;易筋经&quot;&gt;&lt;/property&gt; &lt;property name=&quot;bauthor&quot; value=&quot;达摩老祖&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 简化后 --&gt;&lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.Book&quot; b:bname=&quot;易筋经&quot; b:bauthor=&quot;达摩老祖&quot;&gt;&lt;/bean&gt; IOC 操作 Bean 管理（xml 注入其他类型属性）1. 字面量 null 值 123&lt;property name=&quot;address&quot;&gt; &lt;null/&gt;&lt;/property&gt; 属性值包含特殊符号 method 01：字符转义 1&lt;property name=&quot;address&quot; value=&quot;&amp;lt;&amp;lt;南京&amp;gt;&amp;gt;&quot;&gt;&lt;/property&gt; method 02：把带特殊符号的内容写到 CDATA 123&lt;property name=&quot;address&quot;&gt; &lt;value&gt;&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;&lt;/value&gt;&lt;/property&gt; 2. 注入属性 - 外部 beanUserService 123456789101112public class UserService &#123; // 创建 UserDao 类型属性，生成 set 方法 private UserDao userDao; public void setUserDao(UserDao userDao) &#123; this.userDao = userDao; &#125; public void add() &#123; System.out.println(&quot;service add&quot;); userDao.update(); &#125;&#125; UserDao 接口 123public interface UserDao &#123; public void update();&#125; UserDaoImpl 123456public class UserDaoImpl implements UserDao &#123; @Override public void update() &#123; System.out.println(&quot;dao update&quot;); &#125;&#125; spring 配置文件 12345678&lt;bean id=&quot;userService&quot; class=&quot;com.atguigu.spring5.service.UserService&quot;&gt; &lt;!-- name 属性：类里面属性名称 ref 属性：创建 userDao 对象 bean 标签 id 值 --&gt; &lt;property name=&quot;userDao&quot; ref=&quot;userDaoImpl&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean id=&quot;userDaoImpl&quot; class=&quot;com.atguigu.spring5.dao.UserDaoImpl&quot;&gt;&lt;/bean&gt; 3. 注入属性 - 内部 bean一对多关系：部门和员工 一个部门有多个员工，一个员工属于一个部门。部门是一，员工是多。 Dept 1234567// 部门类public class Dept &#123; private String dname; public void setDname (String dname) &#123; this.dname = dname; &#125;&#125; Emp 1234567891011121314151617// 员工类public class Emp &#123; private String ename; private String gender; // 员工属于某一个部门，使用对象形式表示 private Dept dept; public void setDept(Dept dept) &#123; this.dept = dept; &#125; public void setEname(String ename) &#123; this.ename = ename &#125; public void setGender(String gender) &#123; this.gender = gender; &#125;&#125; spring 配置文件 123456789101112&lt;!-- 内部 bean --&gt;&lt;bean id=&quot;emp&quot; class=&quot;com.atguigu.spring5.bean.Emp&quot;&gt; &lt;!-- 设置两个普通属性 --&gt; &lt;property name=&quot;ename&quot; value=&quot;lucy&quot;&gt;&lt;/property&gt; &lt;property name=&quot;gender&quot; value=&quot;girl&quot;&gt;&lt;/property&gt; &lt;!-- 设置对象类型属性 --&gt; &lt;property name=&quot;dept&quot;&gt; &lt;bean id=&quot;dept&quot; class=&quot;com.atguigu.spring5.bean.Dept&quot;&gt; &lt;property name=&quot;dname&quot; value=&quot;安保部&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;/property&gt;&lt;/bean&gt; 4. 注入属性 - 级联赋值method 01： spring 配置文件 1234567891011&lt;!-- 级联赋值 --&gt;&lt;bean id=&quot;emp&quot; class=&quot;com.atguigu.spring5.bean.Emp&quot;&gt; &lt;!-- 设置两个普通属性 --&gt; &lt;property name=&quot;ename&quot; value=&quot;lucy&quot;&gt;&lt;/property&gt; &lt;property name=&quot;gender&quot; value=&quot;girl&quot;&gt;&lt;/property&gt; &lt;!-- 设置对象类型属性 --&gt; &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean id=&quot;dept&quot; class=&quot;com.atguigu.spring5.bean.Dept&quot;&gt; &lt;property name=&quot;dname&quot; value=&quot;安保部&quot;&gt;&lt;/property&gt;&lt;/bean&gt; method 02： Emp 对其修改，增加 Dept 的 get 方法 123456789101112131415161718192021// 员工类public class Emp &#123; private String ename; private String gender; // 员工属于某一个部门，使用对象形式表示 private Dept dept; // 生成 dept 的 get 方法 public Dept getDept() &#123; return dept; &#125; public void setDept(Dept dept) &#123; this.dept = dept; &#125; public void setEname(String ename) &#123; this.ename = ename &#125; public void setGender(String gender) &#123; this.gender = gender; &#125;&#125; spring 配置文件 12345678910&lt;!-- 级联赋值 --&gt;&lt;bean id=&quot;emp&quot; class=&quot;com.atguigu.spring5.bean.Emp&quot;&gt; &lt;!-- 设置两个普通属性 --&gt; &lt;property name=&quot;ename&quot; value=&quot;lucy&quot;&gt;&lt;/property&gt; &lt;property name=&quot;gender&quot; value=&quot;girl&quot;&gt;&lt;/property&gt; &lt;!-- 设置对象类型属性 --&gt; &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt; &lt;property name=&quot;dept.dname&quot; value=&quot;安保部&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean id=&quot;dept&quot; class=&quot;com.atguigu.spring5.bean.Dept&quot;&gt;&lt;/bean&gt; IOC 操作 Bean 管理（xml 注入集合属性）1. 注入数组类型属性2. 注入 List 集合类型属性3. 注入 Map 集合类型属性4. 注入 Set 集合类型属性Stu 12345678910111213public class Stu &#123; // 1 array 类型属性 private String[] courses; // 2 list 类型属性 private List&lt;String&gt; list; // 3 map 类型属性 private Map&lt;String,String&gt; maps; // 4 set 类型属性 private Set&lt;String&gt; sets; // setXXX() ... &#125; spring 配置文件 123456789101112131415161718192021222324252627282930&lt;bean id=&quot;stu&quot; class=&quot;com.atguigu.spring5.collectiontype.Stu&quot;&gt; &lt;!-- array 类型属性注入 --&gt; &lt;property name=&quot;courses&quot;&gt; &lt;array&gt; &lt;value&gt;Java&lt;/value&gt; &lt;value&gt;Python&lt;/value&gt; &lt;/array&gt; &lt;/property&gt; &lt;!-- list 类型属性注入 --&gt; &lt;property name=&quot;list&quot;&gt; &lt;list&gt; &lt;value&gt;Java&lt;/value&gt; &lt;value&gt;Python&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;!-- map 类型属性注入 --&gt; &lt;property name=&quot;maps&quot;&gt; &lt;map&gt; &lt;entry key=&quot;java&quot; value=&quot;Java&quot;&gt;&lt;/entry&gt; &lt;entry key=&quot;python&quot; value=&quot;Python&quot;&gt;&lt;/entry&gt; &lt;/map&gt; &lt;/property&gt; &lt;!-- set 类型属性注入 --&gt; &lt;property name=&quot;sets&quot;&gt; &lt;set&gt; &lt;value&gt;Java&lt;/value&gt; &lt;value&gt;Redis&lt;/value&gt; &lt;/set&gt; &lt;/property&gt;&lt;/bean&gt; 5. 在集合里面设置对象类型值Stu 基础上增加代码 12345public class Stu &#123; // more code ... private List&lt;Course&gt; courseList; // setCourseList() ...&#125; Course 1234public class Course &#123; private String cname; // setCname() ...&#125; spring 配置文件 123456789101112131415&lt;bean id=&quot;stu&quot; class=&quot;com.atguigu.spring5.collectiontype.Stu&quot;&gt; &lt;!-- list 类型属性注入 对象类型 --&gt; &lt;property name=&quot;courseList&quot;&gt; &lt;list&gt; &lt;ref bean=&quot;course1&quot;&gt;&lt;/ref&gt; &lt;ref bean=&quot;course2&quot;&gt;&lt;/ref&gt; &lt;/list&gt; &lt;/property&gt;&lt;/bean&gt;&lt;bean id=&quot;course1&quot; class=&quot;com.atguigu.spring5.collectiontype.Course&quot;&gt; &lt;property name=&quot;cname&quot; value=&quot;Java&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean id=&quot;course2&quot; class=&quot;com.atguigu.spring5.collectiontype.Course&quot;&gt; &lt;property name=&quot;cname&quot; value=&quot;Python&quot;&gt;&lt;/property&gt;&lt;/bean&gt; 6. 把集合注入部分提取出来Step 01 在 spring 配置文件中引入命名空间 util 12xmlns:util=&quot;http://www.springframework.org/schema/util&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot; Step 02 使用 util 标签完成 list 集合注入 Book 1234public class Book &#123; private List&lt;String&gt; list; // setList() ...&#125; spring 配置文件 123456789&lt;util:list id=&quot;bookList&quot;&gt; &lt;value&gt;易筋经&lt;/value&gt; &lt;value&gt;九阴真经&lt;/value&gt; &lt;value&gt;九阳神功&lt;/value&gt;&lt;/util:list&gt;&lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.collectiontype.Book&quot;&gt; &lt;property name=&quot;list&quot; ref=&quot;bookList&quot;&gt;&lt;/property&gt;&lt;/bean&gt; IOC 操作 Bean 管理（FactoryBean） P15 1. Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean） 普通 bean：在配置文件定义 bean 类型就是返回类型； 工厂 bean：在配置文件定义 bean 类型可以和返回类型不一样（用于创建复杂 bean 对象）。 Step 01 创建类，让这个类作为工厂 bean，实现接口 FactoryBean Step 02 实现接口里面的方法，在实现的方法中定义返回的 bean 类型 MyBean 123456789public class MyBean implements FactoryBean&lt;Course&gt; &#123; @Override public Course getObject() throws Exception &#123; Course course = new Course(); course.setCname(&quot;abc&quot;); return course; &#125; // more @Override ...&#125; spring 配置文件 1&lt;bean id=&quot;myBean&quot; class=&quot;com.atguigu.spring5.factorybean.MyBean&quot;&gt;&lt;/bean&gt; 测试 123ApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);Course course = context.getBean(&quot;myBean&quot;,Course.class);System.out.println(course); IOC 操作 Bean 管理（bean 作用域）在 Spring 里面，默认情况下 bean 是单实例对象（单例）； 1. 如何设置单实例还是多实例在 spring 配置文件 bean 标签里面有属性 scope 用于设置单实例还是多实例： singleton：默认值，单实例； prototype：多实例； request：将对象放到 request 中； session：将对象放到 session 中。 常用：singleton 和 prototype；不常用：request 和 session，若使用建议先查阅相关资料。 123&lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.collectiontype.Book&quot; scope=&quot;prototype&quot;&gt; &lt;!-- more code ... --&gt;&lt;/bean&gt; singleton 和 prototype 区别 singleton 单实例，prototype 多实例； 设置 scope 值是 singleton 时，加载 spring 配置文件时就会创建实例对象；设置 scope 值是 prototype 时，在调用 getBean() 方法时创建多实例对象。 IOC 操作 Bean 管理（bean 生命周期） P17 1. 生命周期从对象创建到对象销毁的过程。 2. bean 生命周期（简化版） 通过构造器创建 bean 实例（执行无参构造方法）； 为 bean 的属性设置值核对其他 bean 引用（调用 set 方法）； 调用 bean 的初始化方法（需要开发者配置初始化方法）； bean 可以使用了（对象获取到了）； 当容器关闭时，调用 bean 的销毁方法（需要开发者配置销毁方法）。 这里只是简单的介绍了一下 bean 生命周期，技术细节还请查阅专业的技术文档。 eg Order 12345678910111213141516171819202122public class Orders &#123; private String orderName; public Orders() &#123; System.out.println(&quot;第一步：执行无参构造方法创建bean实例&quot;); &#125; public void setOrderName(String orderName) &#123; this.orderName = orderName; System.out.println(&quot;第二步：调用set方法设置属性值&quot;); &#125; //初始化方法 public void initMethod()&#123; System.out.println(&quot;第四步：执行初始化方法&quot;); &#125; //销毁方法 public void destroyMethod()&#123; System.out.println(&quot;第七步：执行销毁方法&quot;); &#125;&#125; spring 配置文件 123456&lt;bean id=&quot;orders&quot; class=&quot;com.oymn.spring5.Orders&quot; init-method=&quot;initMethod&quot; destroy-method=&quot;destroyMethod&quot;&gt; &lt;property name=&quot;orderName&quot; value=&quot;hahah&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!--配置bean后置处理器，这样配置后整个xml里面的bean用的都是这个后置处理器--&gt;&lt;bean id=&quot;myBeanPost&quot; class=&quot;com.oymn.spring5.MyBeanPost&quot;&gt;&lt;/bean&gt; 测试 12345678910111213@Testpublic void testOrders()&#123; ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;); Orders orders = context.getBean(&quot;orders&quot;, Orders.class); System.out.println(&quot;第六步：获取bean实例对象&quot;); System.out.println(orders); //手动让bean实例销毁 context.close();&#125; 3. 后置处理器MyBeanPost 后置处理器 123456789101112131415//实现后置处理器，需要实现BeanPostProcessor接口public class MyBeanPost implements BeanPostProcessor &#123; @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123; System.out.println(&quot;第三步：将bean实例传递给bean后置处理器的postProcessBeforeInitialization方法&quot;); return bean; &#125; @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123; System.out.println(&quot;第五步：将bean实例传递给bean后置处理器的postProcessAfterInitialization方法&quot;); return bean; &#125;&#125; spring 配置文件 配置bean后置处理器，这样配置后整个xml里面的bean用的都是这个后置处理器。 123456&lt;bean id=&quot;orders&quot; class=&quot;com.oymn.spring5.Orders&quot; init-method=&quot;initMethod&quot; destroy-method=&quot;destroyMethod&quot;&gt; &lt;property name=&quot;orderName&quot; value=&quot;hahah&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!--配置bean后置处理器，这样配置后整个xml里面的bean用的都是这个后置处理器--&gt;&lt;bean id=&quot;myBeanPost&quot; class=&quot;com.oymn.spring5.MyBeanPost&quot;&gt;&lt;/bean&gt; IOC 操作 Bean 管理（xml 自动装配） P18 1. 什么是自动装配根据指定装配规则（名称或者类型），Spring 自动将匹配的属性值进行注入。 2. 演示自动装配过程bean 标签属性 autowire，配置自动装配。autowire 属性常用两个值： byName：根据属性名称注入； byType：根据属性类型注入。 1. 根据属性名称自动注入根据属性名称自动装配：要求 emp中属性的名称dept 和 bean标签的id值dept 一样，才能识别。 1234&lt;!--指定autowire属性值为byName--&gt;&lt;bean id=&quot;emp&quot; class=&quot;com.oymn.spring5.Emp&quot; autowire=&quot;byName&quot;&gt;&lt;/bean&gt;&lt;bean id=&quot;dept&quot; class=&quot;com.oymn.spring5.Dept&quot;&gt;&lt;/bean&gt; 2. 根据属性类型自动注入根据属性类型自动装配：要求同一个xml文件中不能有两个相同类型的bean，否则无法识别是哪一个。 1234&lt;!--指定autowire属性值为byType--&gt;&lt;bean id=&quot;emp&quot; class=&quot;com.oymn.spring5.Emp&quot; autowire=&quot;byType&quot;&gt;&lt;/bean&gt;&lt;bean id=&quot;dept&quot; class=&quot;com.oymn.spring5.Dept&quot;&gt;&lt;/bean&gt; IOC 操作 Bean 管理（外部属性文件） P19 eg 配置德鲁伊（druid）连接池 1. 直接配置数据库信息1234567&lt;!-- 直接配置连接池 --&gt;&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt; &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/userDB&quot;&gt;&lt;/property&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt; &lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;&lt;/bean&gt; 2. 引入外部属性文件配置数据库连接池Step 00 编写外部属性文件 和 引入德鲁伊（druid）连接池依赖 jar 包 jdbc.properties 外部属性文件 1234prop.driverClass=com.mysql.jdbc.Driverprop.url=jdbc:mysql://localhost:3306/userDBprop.userName=rootprop.password=root Step 01 在 spring 配置文件中引入命名空间 context 12xmlns:util=&quot;http://www.springframework.org/schema/context&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/context http://www.springframework.org/schema/util/spring-context.xsd&quot; Step 02 在 spring 配置文件使用标签引入外部属性文件 123456789&lt;!-- 引入外部属性文件 --&gt;&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt; &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;prop.driverClass&#125;&quot;&gt;&lt;/property&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;prop.url&#125;&quot;&gt;&lt;/property&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;prop.userName&#125;&quot;&gt;&lt;/property&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;prop.password&#125;&quot;&gt;&lt;/property&gt;&lt;/bean&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringFramework","slug":"技术向/SpringFramework","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"},{"name":"尚硅谷Spring框架视频教程（spring5源码级讲解）","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P25 SLF4J日志桥接器","slug":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P25 SLF4J日志桥接器","date":"2022-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.274Z","comments":true,"path":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P25 SLF4J日志桥接器/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P25%20SLF4J%E6%97%A5%E5%BF%97%E6%A1%A5%E6%8E%A5%E5%99%A8/","excerpt":"","text":"视频源：黑马程序员java日志框架教程，全面深入学习多种java日志框架 桥接旧的日志框架（Bridging）针对老日志框架迁移至 SLF4J 及其实现 通常，您依赖的某些组件依赖于 SLF4J 以外的日志记录 API。您也可以假设这些组件在不久的将来不会切换到 SLF4J 。为了解决这种情况，SLF4J 附带了几个桥接模块，这些模块将对 log4j、JCL 和 java.util.logging API 的调用重定向，就好像它们是对 SLF4J API 一样。 桥接解决的是项目中日志的遗留问题，当系统中存在之前的日志 API，可以通过桥接转换到 SLF4J 的实现。 先去除之前老的日志框架的依赖； 添加 SLF4J 提供的桥接组件； 为项目添加 SLF4J 的具体实现。 该图源自官方文档。 SLF4J 桥接 log4j导入依赖： 12345678910111213141516171819202122232425262728&lt;!--slf4j 日志门面--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.26&lt;/version&gt; &lt;/dependency&gt; &lt;!--logback 日志实现--&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.2.3&lt;/version&gt; &lt;/dependency&gt; &lt;!--log4j 日志实现 &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt; &lt;/dependency&gt; --&gt; &lt;!--log4j 桥接器--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt; &lt;version&gt;1.7.25&lt;/version&gt; &lt;/dependency&gt; 测试： 1234567891011121314import org.apache.log4j.Logger;import org.junit.Test;public class Log4jTest &#123; // 定义 log4j 日志对象 public static final Logger LOGGER = Logger.getLogger(Log4jTest.class); // 测试桥接器 @Test public void test01()&#123; LOGGER.info(&quot;hello log4j&quot;); &#125;&#125; 注意，log4j 日志框架需要配置 log4j.properties 文件。 经过 SLF4J 桥接 log4j 后，输出由 log4j 日志样式转变为 logback 日志样式。 注意事项 jcl-over-slf4j.jar 和 slf4-jcl.jar 不能同时出现。前一个 jar 文件将导致 JCL 将日志系统的选择委托给 SLF4J ，后一个 jar 文件将导致 SLF4J 将日志系统的选择委托给 JCL，从而导致 无限循环； log4j-over-slf4j.jar 和 slf4j-log4j12.jar 不能同时出现； jul-to-slf4j.jar 和 slf4j-jdk-14.jar 不能同时出现； 所有的桥接都只对 Logger 日志记录器对象有效，如果程序中调用了内部的配置类或者是 Appender，Filter 等对象，将无法产生效果。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"黑马程序员java日志框架教程_全面深入学习多种java日志框架","slug":"技术向/Java/黑马程序员java日志框架教程-全面深入学习多种java日志框架","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"黑马程序员","slug":"黑马程序员","permalink":"http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"}],"author":"hooy"},{"title":"P26 logback入门","slug":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P26 logback入门","date":"2022-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.274Z","comments":true,"path":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P26 logback入门/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P26%20logback%E5%85%A5%E9%97%A8/","excerpt":"","text":"视频源：黑马程序员java日志框架教程，全面深入学习多种java日志框架 Logback 的使用Logback 是由 log4j 创始人设计的另一个开源日志组件，性能比 log4j 更好。 官方网站：https://logback.qos.ch/ Logback主要分为三个模块： logback-core：其他两个模块的基础模块； logback-classic：它是 log4j 的一个改良版本，同时它完整实现了 slf4j API； logback-access：访问模块与 Servlet 容器集成提供通过 Http 来访问日志的功能。 logback 入门导入依赖： 123456789101112&lt;!--slf4j 日志门面--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.26&lt;/version&gt; &lt;/dependency&gt; &lt;!--logback 日志实现--&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.2.3&lt;/version&gt; &lt;/dependency&gt; 测试： 1234567891011121314151617import org.junit.Test;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class LogbackTest &#123; private static final Logger LOGGER = LoggerFactory.getLogger(LogbackTest.class); @Test public void testQuick()&#123; LOGGER.error(&quot;error&quot;); LOGGER.warn(&quot;warn&quot;); LOGGER.info(&quot;info&quot;); LOGGER.debug(&quot;debug&quot;); LOGGER.trace(&quot;trace&quot;); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"黑马程序员java日志框架教程_全面深入学习多种java日志框架","slug":"技术向/Java/黑马程序员java日志框架教程-全面深入学习多种java日志框架","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"黑马程序员","slug":"黑马程序员","permalink":"http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"}],"author":"hooy"},{"title":"P27 logback基础配置文件","slug":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P27 logback基础配置文件","date":"2022-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.275Z","comments":true,"path":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P27 logback基础配置文件/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P27%20logback%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","excerpt":"","text":"视频源：黑马程序员java日志框架教程，全面深入学习多种java日志框架 logback 配置logback 会依次读取以下类型配置文件： logback.groovy logback-test.xml logback.xml 如果均不存在会采用默认配置。 logback 组件之间的关系 Logger：日志的记录器，把它关联到应用的对应的 context 上后，主要用于存放日志对象，也可以定义日志类型、级别； Appender：用于指定日志输出的目的地、目的地可以是控制台、文件、数据库等等； Layout：负责把事件转换成字符串，格式化的日志信息的输出。在 logback 中 Layout 对象被封装在 encoder 中。 基本配置信息输出至控制台（Console）。 src&#x2F;main&#x2F;resources&#x2F;logback.xml 123456789101112131415161718192021222324252627&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;configuration&gt; &lt;!--配置集中管理属性 日志输出格式： %-5level：-5 占五位字符 %d&#123;yyyy-MM-dd HH:mm:ss:SSS&#125;：日期格式化 %c：类的完整名称 %M：方法名 %L：行号 %thread：线程名称 %m 或者 %msg：信息 %n：换行--&gt; &lt;property name=&quot;pattern&quot; value=&quot;&#123;%-5level&#125; %d&#123;yyyy-MM-dd HH:mm:ss:SSS&#125; %c %M %L %thread %m%n&quot;&gt;&lt;/property&gt; &lt;!--控制台日志输出 appender--&gt; &lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;!--控制输出流对象--&gt; &lt;target&gt;System.err&lt;/target&gt; &lt;!--日志消息格式配置--&gt; &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt; &lt;pattern&gt;$&#123;pattern&#125;&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!--root logger 配置--&gt; &lt;root level=&quot;ALL&quot;&gt; &lt;appender-ref ref=&quot;console&quot;&gt;&lt;/appender-ref&gt; &lt;/root&gt;&lt;/configuration&gt; 测试： 1234567891011121314151617import org.junit.Test;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class LogbackTest &#123; private static final Logger LOGGER = LoggerFactory.getLogger(LogbackTest.class); @Test public void testQuick()&#123; LOGGER.error(&quot;error&quot;); LOGGER.warn(&quot;warn&quot;); LOGGER.info(&quot;info&quot;); LOGGER.debug(&quot;debug&quot;); LOGGER.trace(&quot;trace&quot;); &#125;&#125; 输出：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"黑马程序员java日志框架教程_全面深入学习多种java日志框架","slug":"技术向/Java/黑马程序员java日志框架教程-全面深入学习多种java日志框架","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"黑马程序员","slug":"黑马程序员","permalink":"http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"}],"author":"hooy"},{"title":"P28 logback的FileAppender","slug":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P28 logback的FileAppender","date":"2022-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.275Z","comments":true,"path":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P28 logback的FileAppender/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P28%20logback%E7%9A%84FileAppender/","excerpt":"","text":"视频源：黑马程序员java日志框架教程，全面深入学习多种java日志框架 将日志输出至文件log（txt）或者 html 文件。 在 P27 的 logback.xml 基础上加入以下配置代码： 12345678910111213141516171819202122232425262728&lt;!--text格式日志文件输出的appender--&gt; &lt;appender name=&quot;logFile&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt; &lt;!--日志文件保存路径--&gt; &lt;file&gt;$&#123;log_dir&#125;/logback.log&lt;/file&gt; &lt;!--日志消息格式配置--&gt; &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt; &lt;pattern&gt;$&#123;pattern&#125;&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!--html格式日志文件输出的appender--&gt; &lt;appender name=&quot;htmlFile&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt; &lt;!--日志文件保存路径--&gt; &lt;file&gt;$&#123;log_dir&#125;/logback.html&lt;/file&gt; &lt;!--日志消息格式配置--&gt; &lt;encoder class=&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;&gt; &lt;layout class=&quot;ch.qos.logback.classic.html.HTMLLayout&quot;&gt; &lt;pattern&gt;$&#123;pattern&#125;&lt;/pattern&gt; &lt;/layout&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!--root logger 配置--&gt; &lt;root level=&quot;ALL&quot;&gt; &lt;appender-ref ref=&quot;console&quot;/&gt; &lt;appender-ref ref=&quot;logFile&quot;/&gt; &lt;appender-ref ref=&quot;htmlFile&quot;/&gt; &lt;/root&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"黑马程序员java日志框架教程_全面深入学习多种java日志框架","slug":"技术向/Java/黑马程序员java日志框架教程-全面深入学习多种java日志框架","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"黑马程序员","slug":"黑马程序员","permalink":"http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"}],"author":"hooy"},{"title":"P29 logback的拆分Appender","slug":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P29 logback的拆分Appender","date":"2022-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.276Z","comments":true,"path":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P29 logback的拆分Appender/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P29%20logback%E7%9A%84%E6%8B%86%E5%88%86Appender/","excerpt":"","text":"视频源：黑马程序员java日志框架教程，全面深入学习多种java日志框架 日志拆分和归档压缩在 P27 的 logback.xml 基础上加入以下配置代码： 12345678910111213141516&lt;!--日志拆分和归档压缩的appender--&gt; &lt;appender name=&quot;rollFile&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;!--日志文件保存路径--&gt; &lt;file&gt;$&#123;log_dir&#125;/roll_logback.log&lt;/file&gt; &lt;!--日志消息格式配置--&gt; &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt; &lt;pattern&gt;$&#123;pattern&#125;&lt;/pattern&gt; &lt;/encoder&gt; &lt;!--指定拆分规则--&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt; &lt;!--按照时间和压缩格式声明拆分的文件名--&gt; &lt;fileNamePattern&gt;$&#123;log_dir&#125;/rolling.%d&#123;yyyy-MM-dd&#125;.log.gz&lt;/fileNamePattern&gt; &lt;!--按照文件大小拆分--&gt; &lt;maxFileSize&gt;1MB&lt;/maxFileSize&gt; &lt;/rollingPolicy&gt; &lt;/appender&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"黑马程序员java日志框架教程_全面深入学习多种java日志框架","slug":"技术向/Java/黑马程序员java日志框架教程-全面深入学习多种java日志框架","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"黑马程序员","slug":"黑马程序员","permalink":"http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"}],"author":"hooy"},{"title":"P30 logback的过滤器和异步日志","slug":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P30 logback的过滤器和异步日志","date":"2022-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.276Z","comments":true,"path":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P30 logback的过滤器和异步日志/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P30%20logback%E7%9A%84%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E5%BC%82%E6%AD%A5%E6%97%A5%E5%BF%97/","excerpt":"","text":"视频源：黑马程序员java日志框架教程，全面深入学习多种java日志框架 在 P30 的 logback.xml 基础上修改以下配置代码： 12345678910111213141516171819202122232425262728293031323334353637&lt;!--日志拆分和归档压缩的appender--&gt; &lt;appender name=&quot;rollFile&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;!--日志文件保存路径--&gt; &lt;file&gt;$&#123;log_dir&#125;/roll_logback.log&lt;/file&gt; &lt;!--日志消息格式配置--&gt; &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt; &lt;pattern&gt;$&#123;pattern&#125;&lt;/pattern&gt; &lt;/encoder&gt; &lt;!--指定拆分规则--&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt; &lt;!--按照时间和压缩格式声明拆分的文件名--&gt; &lt;fileNamePattern&gt;$&#123;log_dir&#125;/rolling.%d&#123;yyyy-MM-dd&#125;.log.gz&lt;/fileNamePattern&gt; &lt;!--按照文件大小拆分--&gt; &lt;maxFileSize&gt;1MB&lt;/maxFileSize&gt; &lt;/rollingPolicy&gt; &lt;!--日志过滤器级别--&gt; &lt;fillter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;!--日志过滤规则 level：级别 onMatch：高于这个级别的ACCEPT放行 onMismatch：低于等于这个级别的DENY拦截--&gt; &lt;level&gt;ERROR&lt;/level&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/fillter&gt; &lt;/appender&gt; &lt;!--异步日志：提高性能--&gt; &lt;appender name=&quot;async&quot; class=&quot;ch.qos.logback.classic.AsyncAppender&quot;&gt; 指定某个具体的 appender &lt;appender-ref ref=&quot;rollFile&quot;/&gt; &lt;/appender&gt; &lt;!--root logger 配置--&gt; &lt;root level=&quot;ALL&quot;&gt; &lt;appender-ref ref=&quot;console&quot;/&gt; &lt;appender-ref ref=&quot;async&quot;/&gt; &lt;/root&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"黑马程序员java日志框架教程_全面深入学习多种java日志框架","slug":"技术向/Java/黑马程序员java日志框架教程-全面深入学习多种java日志框架","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"黑马程序员","slug":"黑马程序员","permalink":"http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"}],"author":"hooy"},{"title":"P31 logback的access模块","slug":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P31 logback的access模块","date":"2022-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.277Z","comments":true,"path":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P31 logback的access模块/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P31%20logback%E7%9A%84access%E6%A8%A1%E5%9D%97/","excerpt":"","text":"视频源：黑马程序员java日志框架教程，全面深入学习多种java日志框架 转换器Logback 官方提供了两种转换器，方便配置文件转换： log4j.properties Translator logback.xml to Groovy logback-access 的使用logback-access 模块与 Servlet容器（如 Tomcat 和 Jetty）集成，以提供 HTTP 访问日志功能。我们可以使用 logback-access 模块来替换 tomcat 的访问日志。 详见视频操作","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"黑马程序员java日志框架教程_全面深入学习多种java日志框架","slug":"技术向/Java/黑马程序员java日志框架教程-全面深入学习多种java日志框架","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"黑马程序员","slug":"黑马程序员","permalink":"http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"}],"author":"hooy"},{"title":"P23 SLF4J日志绑定","slug":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P23 SLF4J日志绑定","date":"2022-04-22T16:00:00.000Z","updated":"2022-06-15T08:32:50.273Z","comments":true,"path":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P23 SLF4J日志绑定/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P23%20SLF4J%E6%97%A5%E5%BF%97%E7%BB%91%E5%AE%9A/","excerpt":"","text":"视频源：黑马程序员java日志框架教程，全面深入学习多种java日志框架 绑定日志的实现（Bingding） 蓝色表示可以直接使用，青色表示需要一个适配层才可使用。 该图源自官方文档。 使用 SLF4J 的日志绑定流程： 添加 slf4j-api 的依赖； 使用 slf4j 的 API 在项目中进行统一的日志记录； 绑定具体的日志实现框架； 绑定已经实现了 slf4j 的日志框架，直接添加对应的依赖； 绑定没有实现 slf4j 的日志框架，先添加日志的适配器，再添加实现类的依赖； slf4j 有且仅有一个日志实现框架的绑定，如果出现多个，默认使用第一个依赖日志实现。 SLF4J 绑定 logback导入依赖： 123456789101112&lt;!--slf4j 日志门面--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.26&lt;/version&gt; &lt;/dependency&gt; &lt;!--logback 日志实现--&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.2.3&lt;/version&gt; &lt;/dependency&gt; 注意，当存在多个 SLF4J 实现时，绑定第一个实现依赖。 logback-classic 传递依赖 logback-core。 SLF4J 绑定 slf4j-nop相当于日志开关，当引入该包时，日志功能失效。 导入依赖： 123456789101112&lt;!--slf4j 日志门面--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.26&lt;/version&gt; &lt;/dependency&gt; &lt;!--关闭日志--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-nop&lt;/artifactId&gt; &lt;version&gt;1.7.25&lt;/version&gt; &lt;/dependency&gt; SLF4J 绑定 log4jStep 01 导入依赖： 1234567891011121314151617181920&lt;!--slf4j 日志门面--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.26&lt;/version&gt; &lt;/dependency&gt;&lt;!--log4j 日志实现，需要导入适配器--&gt; &lt;!--slf-4j 对 log4j 适配器--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.12&lt;/version&gt; &lt;/dependency&gt; &lt;!--log4j 日志实现--&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt; &lt;/dependency&gt; Step 02 将 log4j.properties 配置文件放入 src&#x2F;main&#x2F;resources 目录，重新构建项目（File -&gt; Rebuild Module）。 SLF4J 绑定 jul导入依赖： 123456789101112&lt;!--slf4j 日志门面--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.26&lt;/version&gt; &lt;/dependency&gt;&lt;!--jul 日志实现，需要导入适配器--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-jdk14&lt;/artifactId&gt; &lt;version&gt;1.7.25&lt;/version&gt; &lt;/dependency&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"黑马程序员java日志框架教程_全面深入学习多种java日志框架","slug":"技术向/Java/黑马程序员java日志框架教程-全面深入学习多种java日志框架","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"黑马程序员","slug":"黑马程序员","permalink":"http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"}],"author":"hooy"},{"title":"P03 日志框架介绍","slug":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P03 日志框架介绍","date":"2022-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:50.272Z","comments":true,"path":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P03 日志框架介绍/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P03%20%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"视频源：黑马程序员java日志框架教程，全面深入学习多种java日志框架 日志门面JCL、slf4j 日志实现JUC、logback、log4j、log4j2 日志框架出现的历史顺序log4j -&gt; JUL -&gt; JCL -&gt; slf4j -&gt; logback -&gt; log4j2 SLF4J 官网https://www.slf4j.org/","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"黑马程序员java日志框架教程_全面深入学习多种java日志框架","slug":"技术向/Java/黑马程序员java日志框架教程-全面深入学习多种java日志框架","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"黑马程序员","slug":"黑马程序员","permalink":"http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"}],"author":"hooy"},{"title":"P22 SLF4J入门","slug":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P22 SLF4J入门","date":"2022-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:50.273Z","comments":true,"path":"技术向/Java/黑马程序员java日志框架教程_全面深入学习多种java日志框架/P22 SLF4J入门/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P22%20SLF4J%E5%85%A5%E9%97%A8/","excerpt":"","text":"视频源：黑马程序员java日志框架教程，全面深入学习多种java日志框架 日志门面和日志实现依赖： 123456789101112&lt;!--slf4j 日志门面--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.26&lt;/version&gt; &lt;/dependency&gt; &lt;!--slf4j 简单实现--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt; &lt;version&gt;1.7.21&lt;/version&gt; &lt;/dependency&gt; 单元测试依赖： 123456&lt;!--单元测试--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;/dependency&gt; 简单实现： 12345678910111213141516171819202122232425262728293031import org.junit.Test;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class Slf4jTest &#123; // 不需要每个方法里获取一个日志对象 public static final Logger LOGGER = LoggerFactory.getLogger(Slf4jTest.class); // 快速入门 @Test public void test01()&#123; LOGGER.error(&quot;error&quot;); LOGGER.warn(&quot;warn&quot;); LOGGER.info(&quot;info&quot;); LOGGER.debug(&quot;debug&quot;); LOGGER.trace(&quot;trace&quot;); // 使用占位符输出日志信息 String name = &quot;itheima&quot;; Integer age = 14; LOGGER.info(&quot;用户：&#123;&#125; &#123;&#125;&quot;,name,age); // 将系统的异常信息输出 try &#123; int i = 1/0; &#125; catch (Exception e)&#123; LOGGER.error(&quot;出现异常&quot;,e); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"黑马程序员java日志框架教程_全面深入学习多种java日志框架","slug":"技术向/Java/黑马程序员java日志框架教程-全面深入学习多种java日志框架","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"黑马程序员","slug":"黑马程序员","permalink":"http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"}],"author":"hooy"},{"title":"20分钟带你搞懂XPath-Scrapy数据解析神器","slug":"技术向/XPath/20分钟带你搞懂XPath-Scrapy数据解析神器/20分钟带你搞懂XPath-Scrapy数据解析神器","date":"2022-04-06T16:00:00.000Z","updated":"2022-06-15T08:32:50.666Z","comments":true,"path":"技术向/XPath/20分钟带你搞懂XPath-Scrapy数据解析神器/20分钟带你搞懂XPath-Scrapy数据解析神器/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/XPath/20%E5%88%86%E9%92%9F%E5%B8%A6%E4%BD%A0%E6%90%9E%E6%87%82XPath-Scrapy%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E7%A5%9E%E5%99%A8/20%E5%88%86%E9%92%9F%E5%B8%A6%E4%BD%A0%E6%90%9E%E6%87%82XPath-Scrapy%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E7%A5%9E%E5%99%A8/","excerpt":"","text":"视频源：20分钟带你搞懂XPath-Scrapy数据解析神器 认识 XPath1. 什么是 XPath 解析 XML 的一种语言（HTML 其实是 XML 的子类），广泛用于解析 HTML 数据； 几乎所有语言都能使用 XPath，比如 Java 和 C 语言； 除了 XPath 还有其他手段用于 XML 解析，比如：BeautifulSoup、lxml、DOM、SAX、JSDOM、DOM4J、minixml 等。 2. XPath 语法XPath 语法 3 大类： 层级：/ 直接子集、// 跳级； 属性： @ 属性访问； 函数：contains()、text()。 使用 XPath1. 在浏览器中使用 XPath1//div[@class=&quot;opr-recommends-merge-content&quot;]//div[contains(@class,&quot;opr-recommends-merge-item&quot;)] 跳级 标签名 [@class&#x3D;” 属性仅包含一个类名 “] 跳级 标签名 [contains(@class,” 属性包含多个类名中的一个 “)] eg： 123456789101112131415161718192021222324252627282930&lt;!-- more html ... --&gt;&lt;div class=&quot;result-op xpath-log new-pmd&quot; srcid=&quot;21102&quot; fk=&quot;21102_&quot; id=&quot;1&quot; tpl=&quot;right_recommends_merge&quot; mu=&quot;http://www.baidu.com/s?wd=&amp;amp;srcid=21102&quot; data-op=&quot;&#123;&#x27;y&#x27;:&#x27;&#x27;&#125;&quot; data-click=&quot;&#123;&amp;quot;p1&amp;quot;:1,&amp;quot;rsv_bdr&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;fm&amp;quot;:&amp;quot;alxr&amp;quot;,&amp;quot;rsv_stl&amp;quot;:0,&amp;quot;p5&amp;quot;:1&#125;&quot; data-cost=&quot;&#123;&amp;quot;renderCost&amp;quot;:1,&amp;quot;dataCost&amp;quot;:3&#125;&quot; m-name=&quot;aladdin-san/app/right_recommends_merge/result_b895932&quot; m-path=&quot;https://pss.bdstatic.com/r/www/cache/static/aladdin-san/app/right_recommends_merge/result_b895932&quot; nr=&quot;1&quot;&gt; &lt;div class=&quot;cr-content container_2AHLd&quot;&gt;&lt;section data-click=&quot;&#123; &#x27;rsv_card_index&#x27;: 0 &#125;&quot;&gt;&lt;div class=&quot;cr-title c-clearfix&quot;&gt;&lt;!--8--&gt;&lt;!--9--&gt;&lt;!--11--&gt;&lt;span title=&quot;相关应用软件&quot;&gt;相关应用软件&lt;/span&gt;&lt;!--11--&gt;&lt;!--10--&gt;&lt;!--8--&gt;&lt;!--7--&gt;&lt;/div&gt;&lt;div class=&quot; container_EBGt2 has-attr_1DAxq fold_2kZgh &quot;&gt;&lt;div class=&quot;c-row row_19xr-&quot;&gt;&lt;div&gt;&lt;section data-click=&quot;&#123; &#x27;rsv_item_index&#x27;: 0 &#125;&quot;&gt;&lt;div class=&quot;c-span2 container_f_bS8&quot; data-click=&quot;&#123;&amp;quot;rsv_re_ename&amp;quot;:&amp;quot;j2sdk&amp;quot;,&amp;quot;rsv_re_uri&amp;quot;:&amp;quot;29d5861b9ff94d14b0f463c1129011a3&amp;quot;&#125;&quot;&gt;&lt;div class=&quot;img-container_2JSl6&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-img c-img2 c-img-s c-img-radius-large cover-img_PLe_S&quot; href=&quot;/s?wd=j2sdk&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=dbfeZL2CxS3Uk2594ohlJvEooa1Ju0BYeb4x5MEYcvlLqkKOJZHkxvyHhbE&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=29d5861b9ff94d14b0f463c1129011a3&quot;&gt;&lt;span class=&quot;cover-img-boder_1-OG1 c-img-radius-large&quot;&gt;&lt;/span&gt;&lt;img src=&quot;https://t11.baidu.com/it/u=3391737136,525361792&amp;amp;fm=58&quot; class=&quot;c-img c-img2 c-img-radius-large&quot;&gt;&lt;/a&gt;&lt;a class=&quot;img-container-mask_1S9Kw c-img-radius-large&quot; target=&quot;_blank&quot; href=&quot;/s?wd=j2sdk&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=dbfeZL2CxS3Uk2594ohlJvEooa1Ju0BYeb4x5MEYcvlLqkKOJZHkxvyHhbE&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=29d5861b9ff94d14b0f463c1129011a3&quot;&gt;&lt;/a&gt;&lt;!--17--&gt;&lt;/div&gt;&lt;div class=&quot;title_1v7d9&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-font-medium inc_rs_a&quot; title=&quot;j2sdk&quot; href=&quot;/s?wd=j2sdk&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=dbfeZL2CxS3Uk2594ohlJvEooa1Ju0BYeb4x5MEYcvlLqkKOJZHkxvyHhbE&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=29d5861b9ff94d14b0f463c1129011a3&quot;&gt;j2sdk&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;attr-container_22wB9&quot;&gt;&lt;p class=&quot;attr-text_3jLeU&quot;&gt;sun公司开发编程工具&lt;/p&gt;&lt;!--19--&gt;&lt;/div&gt;&lt;!--18--&gt;&lt;/div&gt;&lt;/section&gt;&lt;section data-click=&quot;&#123; &#x27;rsv_item_index&#x27;: 1 &#125;&quot;&gt;&lt;div class=&quot;c-span2 container_f_bS8&quot; data-click=&quot;&#123;&amp;quot;rsv_re_ename&amp;quot;:&amp;quot;PythonWin&amp;quot;,&amp;quot;rsv_re_uri&amp;quot;:&amp;quot;4ab40fa61802411e82889aaac1428974&amp;quot;&#125;&quot;&gt;&lt;div class=&quot;img-container_2JSl6&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-img c-img2 c-img-s c-img-radius-large cover-img_PLe_S&quot; href=&quot;/s?wd=PythonWin&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=dbfeZL2CxS3Uk2594ohlJvEooa1Ju0BYeb4x5MEYcvlLqkKOJZHkxvyHhbE&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=4ab40fa61802411e82889aaac1428974&quot;&gt;&lt;span class=&quot;cover-img-boder_1-OG1 c-img-radius-large&quot;&gt;&lt;/span&gt;&lt;img src=&quot;https://t12.baidu.com/it/u=1526885684,164265061&amp;amp;fm=58&quot; class=&quot;c-img c-img2 c-img-radius-large&quot;&gt;&lt;/a&gt;&lt;a class=&quot;img-container-mask_1S9Kw c-img-radius-large&quot; target=&quot;_blank&quot; href=&quot;/s?wd=PythonWin&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=dbfeZL2CxS3Uk2594ohlJvEooa1Ju0BYeb4x5MEYcvlLqkKOJZHkxvyHhbE&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=4ab40fa61802411e82889aaac1428974&quot;&gt;&lt;/a&gt;&lt;!--21--&gt;&lt;/div&gt;&lt;div class=&quot;title_1v7d9&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-font-medium inc_rs_a&quot; title=&quot;PythonWin&quot; href=&quot;/s?wd=PythonWin&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=dbfeZL2CxS3Uk2594ohlJvEooa1Ju0BYeb4x5MEYcvlLqkKOJZHkxvyHhbE&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=4ab40fa61802411e82889aaac1428974&quot;&gt;PythonWin&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;attr-container_22wB9&quot;&gt;&lt;p class=&quot;attr-text_3jLeU&quot;&gt;Python集成开发环境&lt;/p&gt;&lt;!--23--&gt;&lt;/div&gt;&lt;!--22--&gt;&lt;/div&gt;&lt;/section&gt;&lt;section data-click=&quot;&#123; &#x27;rsv_item_index&#x27;: 2 &#125;&quot;&gt;&lt;div class=&quot;c-span2 container_f_bS8 c-span-last-s&quot; data-click=&quot;&#123;&amp;quot;rsv_re_ename&amp;quot;:&amp;quot;mySQL&amp;quot;,&amp;quot;rsv_re_uri&amp;quot;:&amp;quot;9773c871a0a642f0b481e5f2d8755490&amp;quot;&#125;&quot;&gt;&lt;div class=&quot;img-container_2JSl6&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-img c-img2 c-img-s c-img-radius-large cover-img_PLe_S&quot; href=&quot;/s?wd=mySQL&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=dbfeZL2CxS3Uk2594ohlJvEooa1Ju0BYeb4x5MEYcvlLqkKOJZHkxvyHhbE&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=9773c871a0a642f0b481e5f2d8755490&quot;&gt;&lt;span class=&quot;cover-img-boder_1-OG1 c-img-radius-large&quot;&gt;&lt;/span&gt;&lt;img src=&quot;https://t12.baidu.com/it/u=949912871,2851013736&amp;amp;fm=58&quot; class=&quot;c-img c-img2 c-img-radius-large&quot;&gt;&lt;/a&gt;&lt;a class=&quot;img-container-mask_1S9Kw c-img-radius-large&quot; target=&quot;_blank&quot; href=&quot;/s?wd=mySQL&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=dbfeZL2CxS3Uk2594ohlJvEooa1Ju0BYeb4x5MEYcvlLqkKOJZHkxvyHhbE&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=9773c871a0a642f0b481e5f2d8755490&quot;&gt;&lt;/a&gt;&lt;!--25--&gt;&lt;/div&gt;&lt;div class=&quot;title_1v7d9&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-font-medium inc_rs_a&quot; title=&quot;mySQL&quot; href=&quot;/s?wd=mySQL&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=dbfeZL2CxS3Uk2594ohlJvEooa1Ju0BYeb4x5MEYcvlLqkKOJZHkxvyHhbE&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=9773c871a0a642f0b481e5f2d8755490&quot;&gt;mySQL&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;attr-container_22wB9&quot;&gt;&lt;p class=&quot;attr-text_3jLeU&quot;&gt;关系型数据库管理系统&lt;/p&gt;&lt;!--27--&gt;&lt;/div&gt;&lt;!--26--&gt;&lt;/div&gt;&lt;/section&gt;&lt;section data-click=&quot;&#123; &#x27;rsv_item_index&#x27;: 3 &#125;&quot;&gt;&lt;div class=&quot;c-span2 container_f_bS8 c-span-last last-item_cG9Ps&quot; data-click=&quot;&#123;&amp;quot;rsv_re_ename&amp;quot;:&amp;quot;PyScripter&amp;quot;,&amp;quot;rsv_re_uri&amp;quot;:&amp;quot;8076a6780c194b188088d1556da59fae&amp;quot;&#125;&quot;&gt;&lt;div class=&quot;img-container_2JSl6&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-img c-img2 c-img-s c-img-radius-large cover-img_PLe_S&quot; href=&quot;/s?wd=PyScripter&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=0954IDkQWSYx%2BvAgJjIlQlpaYENK81UNEaWdeHBR4JjCqMvPzJxPsyNJJDY&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=8076a6780c194b188088d1556da59fae&quot;&gt;&lt;span class=&quot;cover-img-boder_1-OG1 c-img-radius-large&quot;&gt;&lt;/span&gt;&lt;img src=&quot;https://t11.baidu.com/it/u=3630809422,288105807&amp;amp;fm=58&quot; class=&quot;c-img c-img2 c-img-radius-large&quot;&gt;&lt;/a&gt;&lt;a class=&quot;img-container-mask_1S9Kw c-img-radius-large&quot; target=&quot;_blank&quot; href=&quot;/s?wd=PyScripter&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=0954IDkQWSYx%2BvAgJjIlQlpaYENK81UNEaWdeHBR4JjCqMvPzJxPsyNJJDY&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=8076a6780c194b188088d1556da59fae&quot;&gt;&lt;/a&gt;&lt;!--29--&gt;&lt;/div&gt;&lt;div class=&quot;title_1v7d9&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-font-medium inc_rs_a&quot; title=&quot;PyScripter&quot; href=&quot;/s?wd=PyScripter&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=0954IDkQWSYx%2BvAgJjIlQlpaYENK81UNEaWdeHBR4JjCqMvPzJxPsyNJJDY&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=8076a6780c194b188088d1556da59fae&quot;&gt;PyScripter&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;attr-container_22wB9&quot;&gt;&lt;p class=&quot;attr-text_3jLeU&quot;&gt;语法自动补全功能&lt;/p&gt;&lt;!--31--&gt;&lt;/div&gt;&lt;!--30--&gt;&lt;/div&gt;&lt;/section&gt;&lt;!--15--&gt;&lt;/div&gt;&lt;!--14--&gt;&lt;/div&gt;&lt;div class=&quot;c-row row_19xr-&quot;&gt;&lt;div&gt;&lt;section data-click=&quot;&#123; &#x27;rsv_item_index&#x27;: 4 &#125;&quot;&gt;&lt;div class=&quot;c-span2 container_f_bS8&quot; data-click=&quot;&#123;&amp;quot;rsv_re_ename&amp;quot;:&amp;quot;矿工三兄弟2&amp;quot;,&amp;quot;rsv_re_uri&amp;quot;:&amp;quot;6e13e1056e7a46df80255f3948ba3379&amp;quot;&#125;&quot;&gt;&lt;div class=&quot;img-container_2JSl6&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-img c-img2 c-img-s c-img-radius-large cover-img_PLe_S&quot; href=&quot;/s?wd=%E7%9F%BF%E5%B7%A5%E4%B8%89%E5%85%84%E5%BC%9F2&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=0954IDkQWSYx%2BvAgJjIlQlpaYENK81UNEaWdeHBR4JjCqMvPzJxPsyNJJDY&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=6e13e1056e7a46df80255f3948ba3379&quot;&gt;&lt;span class=&quot;cover-img-boder_1-OG1 c-img-radius-large&quot;&gt;&lt;/span&gt;&lt;img src=&quot;https://t11.baidu.com/it/u=2848745716,3683045690&amp;amp;fm=58&quot; class=&quot;c-img c-img2 c-img-radius-large&quot;&gt;&lt;/a&gt;&lt;a class=&quot;img-container-mask_1S9Kw c-img-radius-large&quot; target=&quot;_blank&quot; href=&quot;/s?wd=%E7%9F%BF%E5%B7%A5%E4%B8%89%E5%85%84%E5%BC%9F2&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=0954IDkQWSYx%2BvAgJjIlQlpaYENK81UNEaWdeHBR4JjCqMvPzJxPsyNJJDY&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=6e13e1056e7a46df80255f3948ba3379&quot;&gt;&lt;/a&gt;&lt;!--35--&gt;&lt;/div&gt;&lt;div class=&quot;title_1v7d9&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-font-medium inc_rs_a&quot; title=&quot;矿工三兄弟2&quot; href=&quot;/s?wd=%E7%9F%BF%E5%B7%A5%E4%B8%89%E5%85%84%E5%BC%9F2&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=0954IDkQWSYx%2BvAgJjIlQlpaYENK81UNEaWdeHBR4JjCqMvPzJxPsyNJJDY&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=6e13e1056e7a46df80255f3948ba3379&quot;&gt;矿工三兄弟2&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;attr-container_22wB9&quot;&gt;&lt;p class=&quot;attr-text_3jLeU&quot;&gt;益智类游戏&lt;/p&gt;&lt;!--37--&gt;&lt;/div&gt;&lt;!--36--&gt;&lt;/div&gt;&lt;/section&gt;&lt;section data-click=&quot;&#123; &#x27;rsv_item_index&#x27;: 5 &#125;&quot;&gt;&lt;div class=&quot;c-span2 container_f_bS8&quot; data-click=&quot;&#123;&amp;quot;rsv_re_ename&amp;quot;:&amp;quot;MyEclipse&amp;quot;,&amp;quot;rsv_re_uri&amp;quot;:&amp;quot;218fcdd0de454010be92fe4fc28ad846&amp;quot;&#125;&quot;&gt;&lt;div class=&quot;img-container_2JSl6&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-img c-img2 c-img-s c-img-radius-large cover-img_PLe_S&quot; href=&quot;/s?wd=MyEclipse&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=0954IDkQWSYx%2BvAgJjIlQlpaYENK81UNEaWdeHBR4JjCqMvPzJxPsyNJJDY&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=218fcdd0de454010be92fe4fc28ad846&quot;&gt;&lt;span class=&quot;cover-img-boder_1-OG1 c-img-radius-large&quot;&gt;&lt;/span&gt;&lt;img src=&quot;https://t10.baidu.com/it/u=1611440940,2767759072&amp;amp;fm=58&quot; class=&quot;c-img c-img2 c-img-radius-large&quot;&gt;&lt;/a&gt;&lt;a class=&quot;img-container-mask_1S9Kw c-img-radius-large&quot; target=&quot;_blank&quot; href=&quot;/s?wd=MyEclipse&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=0954IDkQWSYx%2BvAgJjIlQlpaYENK81UNEaWdeHBR4JjCqMvPzJxPsyNJJDY&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=218fcdd0de454010be92fe4fc28ad846&quot;&gt;&lt;/a&gt;&lt;!--39--&gt;&lt;/div&gt;&lt;div class=&quot;title_1v7d9&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-font-medium inc_rs_a&quot; title=&quot;MyEclipse&quot; href=&quot;/s?wd=MyEclipse&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=0954IDkQWSYx%2BvAgJjIlQlpaYENK81UNEaWdeHBR4JjCqMvPzJxPsyNJJDY&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=218fcdd0de454010be92fe4fc28ad846&quot;&gt;MyEclipse&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;attr-container_22wB9&quot;&gt;&lt;p class=&quot;attr-text_3jLeU&quot;&gt;软件编程开发服务平台&lt;/p&gt;&lt;!--41--&gt;&lt;/div&gt;&lt;!--40--&gt;&lt;/div&gt;&lt;/section&gt;&lt;section data-click=&quot;&#123; &#x27;rsv_item_index&#x27;: 6 &#125;&quot;&gt;&lt;div class=&quot;c-span2 container_f_bS8 c-span-last-s&quot; data-click=&quot;&#123;&amp;quot;rsv_re_ename&amp;quot;:&amp;quot;netbeans&amp;quot;,&amp;quot;rsv_re_uri&amp;quot;:&amp;quot;0223caf24051401c82d912a6f4c0dc55&amp;quot;&#125;&quot;&gt;&lt;div class=&quot;img-container_2JSl6&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-img c-img2 c-img-s c-img-radius-large cover-img_PLe_S&quot; href=&quot;/s?wd=netbeans&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=0954IDkQWSYx%2BvAgJjIlQlpaYENK81UNEaWdeHBR4JjCqMvPzJxPsyNJJDY&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=0223caf24051401c82d912a6f4c0dc55&quot;&gt;&lt;span class=&quot;cover-img-boder_1-OG1 c-img-radius-large&quot;&gt;&lt;/span&gt;&lt;img src=&quot;https://t12.baidu.com/it/u=385794101,2115048122&amp;amp;fm=58&quot; class=&quot;c-img c-img2 c-img-radius-large&quot;&gt;&lt;/a&gt;&lt;a class=&quot;img-container-mask_1S9Kw c-img-radius-large&quot; target=&quot;_blank&quot; href=&quot;/s?wd=netbeans&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=0954IDkQWSYx%2BvAgJjIlQlpaYENK81UNEaWdeHBR4JjCqMvPzJxPsyNJJDY&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=0223caf24051401c82d912a6f4c0dc55&quot;&gt;&lt;/a&gt;&lt;!--43--&gt;&lt;/div&gt;&lt;div class=&quot;title_1v7d9&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-font-medium inc_rs_a&quot; title=&quot;netbeans&quot; href=&quot;/s?wd=netbeans&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=0954IDkQWSYx%2BvAgJjIlQlpaYENK81UNEaWdeHBR4JjCqMvPzJxPsyNJJDY&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=0223caf24051401c82d912a6f4c0dc55&quot;&gt;netbeans&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;attr-container_22wB9&quot;&gt;&lt;p class=&quot;attr-text_3jLeU&quot;&gt;世界级的Java IDE&lt;/p&gt;&lt;!--45--&gt;&lt;/div&gt;&lt;!--44--&gt;&lt;/div&gt;&lt;/section&gt;&lt;section data-click=&quot;&#123; &#x27;rsv_item_index&#x27;: 7 &#125;&quot;&gt;&lt;div class=&quot;c-span2 container_f_bS8 c-span-last last-item_cG9Ps&quot; data-click=&quot;&#123;&amp;quot;rsv_re_ename&amp;quot;:&amp;quot;WinRAR&amp;quot;,&amp;quot;rsv_re_uri&amp;quot;:&amp;quot;298fb6b007c34e01adc9253773989edf&amp;quot;&#125;&quot;&gt;&lt;div class=&quot;img-container_2JSl6&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-img c-img2 c-img-s c-img-radius-large cover-img_PLe_S&quot; href=&quot;/s?wd=WinRAR&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=b034dvWyplUCRtFu9m5cPScxeb7SX%2B7FHh0cNDEnVX6GWWV2olDKGGIGlB4&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=298fb6b007c34e01adc9253773989edf&quot;&gt;&lt;span class=&quot;cover-img-boder_1-OG1 c-img-radius-large&quot;&gt;&lt;/span&gt;&lt;img src=&quot;https://t10.baidu.com/it/u=2082045759,3140308789&amp;amp;fm=58&quot; class=&quot;c-img c-img2 c-img-radius-large&quot;&gt;&lt;/a&gt;&lt;a class=&quot;img-container-mask_1S9Kw c-img-radius-large&quot; target=&quot;_blank&quot; href=&quot;/s?wd=WinRAR&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=b034dvWyplUCRtFu9m5cPScxeb7SX%2B7FHh0cNDEnVX6GWWV2olDKGGIGlB4&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=298fb6b007c34e01adc9253773989edf&quot;&gt;&lt;/a&gt;&lt;!--47--&gt;&lt;/div&gt;&lt;div class=&quot;title_1v7d9&quot;&gt;&lt;a target=&quot;_blank&quot; class=&quot;c-font-medium inc_rs_a&quot; title=&quot;WinRAR&quot; href=&quot;/s?wd=WinRAR&amp;amp;usm=2&amp;amp;ie=utf-8&amp;amp;rsv_pq=bd1060300003d291&amp;amp;oq=xpath&amp;amp;rsv_t=b034dvWyplUCRtFu9m5cPScxeb7SX%2B7FHh0cNDEnVX6GWWV2olDKGGIGlB4&amp;amp;rsv_cq=&amp;amp;rsv_dl=0_right_recommends_merge_21102&amp;amp;euri=298fb6b007c34e01adc9253773989edf&quot;&gt;WinRAR&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;attr-container_22wB9&quot;&gt;&lt;p class=&quot;attr-text_3jLeU&quot;&gt;压缩包管理器&lt;/p&gt;&lt;!--49--&gt;&lt;/div&gt;&lt;!--48--&gt;&lt;/div&gt;&lt;/section&gt;&lt;!--33--&gt;&lt;/div&gt;&lt;!--32--&gt;&lt;/div&gt;&lt;!--13--&gt;&lt;/div&gt;&lt;/section&gt;&lt;!--5--&gt;&lt;/div&gt; &lt;/div&gt;&lt;!-- more html ... --&gt; 1//div[contains(@class,&quot;xpath-log&quot;)]//div[contains(@class,&quot;c-span2&quot;)]","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"XPath","slug":"技术向/XPath","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/XPath/"},{"name":"20分钟带你搞懂XPath-Scrapy数据解析神器","slug":"技术向/XPath/20分钟带你搞懂XPath-Scrapy数据解析神器","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/XPath/20%E5%88%86%E9%92%9F%E5%B8%A6%E4%BD%A0%E6%90%9E%E6%87%82XPath-Scrapy%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E7%A5%9E%E5%99%A8/"}],"tags":[{"name":"智能学院","slug":"智能学院","permalink":"http://blog.hooy.xyz/tags/%E6%99%BA%E8%83%BD%E5%AD%A6%E9%99%A2/"}],"author":"hooy"},{"title":"P032 引导类、扩展类、系统类加载器的使用及演示","slug":"技术向/Java/尚硅谷宋红康JVM全套教程（详解java虚拟机）/P032 引导类、扩展类、系统类加载器的使用及演示","date":"2022-03-09T16:00:00.000Z","updated":"2022-06-15T08:32:50.198Z","comments":true,"path":"技术向/Java/尚硅谷宋红康JVM全套教程（详解java虚拟机）/P032 引导类、扩展类、系统类加载器的使用及演示/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%AE%8B%E7%BA%A2%E5%BA%B7JVM%E5%85%A8%E5%A5%97%E6%95%99%E7%A8%8B%EF%BC%88%E8%AF%A6%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89/P032%20%E5%BC%95%E5%AF%BC%E7%B1%BB%E3%80%81%E6%89%A9%E5%B1%95%E7%B1%BB%E3%80%81%E7%B3%BB%E7%BB%9F%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BC%94%E7%A4%BA/","excerpt":"","text":"视频源：尚硅谷宋红康JVM全套教程（详解java虚拟机） 1. 启动类加载器（引导类加载器 Bootstrap ClassLoader） 这个类加载使用 C&#x2F;C++ 语言实现，嵌套在 JVM 内部； 它用来加载 Java 的核心库（JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;rt.jar、resources.jar 或 sun.boot.class.path 路径下的内容），用于提供 JVM 自身需要的类； 并不继承自 java.lang.ClassLoader，没有父加载器； 处于安全考虑，Bootstrap 启动类加载器只能加载包名为 java、javax、sun等开头的类。 2. 扩展类加载器（Extension ClassLoader） Java 语言编写，由 sun.misc.Launcher$ExtClassLoader 实现； 派生于 ClassLoader 类； 父类加载器为启动类加载器； 从 java.ext.dirs 系统属性所指定的目录中加载类库，或从 JDK 的安装目录 jre&#x2F;lib&#x2F;ext 子目录（扩展目录）下加载类库。如果用户创建的 JAR 放在此目录下，也会自动由扩展类加载器加载。 3. 应用程序类加载器（系统类加载器 AppClassLoader） Java 语言编写，由 sun.misc.Launcher$AppClassLoader 实现； 派生于 ClassLoader 类； 父类加载器为扩展类加载器； 它负责加载环境变量 classpath 或系统属性 java.class.path 指定路径下的类库； 该类加载是程序中默认的类加载器，一般来说，Java应用的类都是由它来完成加载的； 通过 ClassLoader#getSystemClassLoader() 方法可以获取到该类加载器。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷宋红康JVM全套教程（详解java虚拟机）","slug":"技术向/Java/尚硅谷宋红康JVM全套教程（详解java虚拟机）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%AE%8B%E7%BA%A2%E5%BA%B7JVM%E5%85%A8%E5%A5%97%E6%95%99%E7%A8%8B%EF%BC%88%E8%AF%A6%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"},{"name":"宋红康","slug":"宋红康","permalink":"http://blog.hooy.xyz/tags/%E5%AE%8B%E7%BA%A2%E5%BA%B7/"}],"author":"hooy"},{"title":"P035 双亲委派机制的工作原理及演示","slug":"技术向/Java/尚硅谷宋红康JVM全套教程（详解java虚拟机）/P035 双亲委派机制的工作原理及演示","date":"2022-03-09T16:00:00.000Z","updated":"2022-06-15T08:32:50.198Z","comments":true,"path":"技术向/Java/尚硅谷宋红康JVM全套教程（详解java虚拟机）/P035 双亲委派机制的工作原理及演示/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%AE%8B%E7%BA%A2%E5%BA%B7JVM%E5%85%A8%E5%A5%97%E6%95%99%E7%A8%8B%EF%BC%88%E8%AF%A6%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89/P035%20%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BC%94%E7%A4%BA/","excerpt":"","text":"视频源：尚硅谷宋红康JVM全套教程（详解java虚拟机） 工作原理 如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行； 如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器； 如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。 优势 避免类的重复加载； 保护程序安全，防止核心 API 被随意篡改。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷宋红康JVM全套教程（详解java虚拟机）","slug":"技术向/Java/尚硅谷宋红康JVM全套教程（详解java虚拟机）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%AE%8B%E7%BA%A2%E5%BA%B7JVM%E5%85%A8%E5%A5%97%E6%95%99%E7%A8%8B%EF%BC%88%E8%AF%A6%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"},{"name":"宋红康","slug":"宋红康","permalink":"http://blog.hooy.xyz/tags/%E5%AE%8B%E7%BA%A2%E5%BA%B7/"}],"author":"hooy"},{"title":"P039 运行时数据区内部结构","slug":"技术向/Java/尚硅谷宋红康JVM全套教程（详解java虚拟机）/P039 运行时数据区内部结构","date":"2022-03-09T16:00:00.000Z","updated":"2022-06-15T08:32:50.199Z","comments":true,"path":"技术向/Java/尚硅谷宋红康JVM全套教程（详解java虚拟机）/P039 运行时数据区内部结构/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%AE%8B%E7%BA%A2%E5%BA%B7JVM%E5%85%A8%E5%A5%97%E6%95%99%E7%A8%8B%EF%BC%88%E8%AF%A6%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89/P039%20%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/","excerpt":"","text":"视频源：尚硅谷宋红康JVM全套教程（详解java虚拟机） 简图 Java 虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。 线程私有（灰色）：程序计数器、本地方法栈、虚拟机栈； 线程共享（红色）：堆、堆外内存（永久代或元空间、代码缓存）。 虚拟机结构图 运行时数据区（Runtime Data Areas）","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷宋红康JVM全套教程（详解java虚拟机）","slug":"技术向/Java/尚硅谷宋红康JVM全套教程（详解java虚拟机）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%AE%8B%E7%BA%A2%E5%BA%B7JVM%E5%85%A8%E5%A5%97%E6%95%99%E7%A8%8B%EF%BC%88%E8%AF%A6%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"},{"name":"宋红康","slug":"宋红康","permalink":"http://blog.hooy.xyz/tags/%E5%AE%8B%E7%BA%A2%E5%BA%B7/"}],"author":"hooy"},{"title":"P097 深入理解HashMap与Hash算法","slug":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P097 深入理解HashMap与Hash算法","date":"2022-03-09T16:00:00.000Z","updated":"2022-06-15T08:32:50.266Z","comments":true,"path":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P097 深入理解HashMap与Hash算法/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86_%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/P097%20%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3HashMap%E4%B8%8EHash%E7%AE%97%E6%B3%95/","excerpt":"","text":"视频源：阿里P8爆肝2个月呕心整理，挑战30天打卡春招上岸！ 1. HashMap 的数据结构 JDK 1.7 及以前 HashMap 底层是 数组 和 链表； JDK 1.8 以后 HashMap 底层是 数组 和 链表 以及 红黑树。 JDK 1.8 什么时候链表会转化成红黑树HashMap在元素比较少的时候，也只会有数组 + 链表的结构。 当链表的长度大于 8，HashMap 可能会做树化（链表转变成红黑树），不过就是需要再满足一个条件，就是数组长度必须大于等于 64 （初始是 16，经过两次扩容后），链表才会转变为红黑树。否则，只会触发数组的扩容。 2. 讲一讲 HashMap 中的 hash 算法下图是 HashMap 的 put 和 get 方法流程：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸","slug":"技术向/Java/阿里P8爆肝2个月呕心整理-挑战30天打卡春招上岸","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86-%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/"}],"tags":[{"name":"图灵课堂","slug":"图灵课堂","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E8%AF%BE%E5%A0%82/"},{"name":"周瑜","slug":"周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%91%A8%E7%91%9C/"}],"author":"hooy"},{"title":"P044-P066 MySQL","slug":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P044-P066 MySQL","date":"2022-03-08T16:00:00.000Z","updated":"2022-06-15T08:32:50.266Z","comments":true,"path":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P044-P066 MySQL/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86_%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/P044-P066%20MySQL/","excerpt":"","text":"视频源：阿里P8爆肝2个月呕心整理，挑战30天打卡春招上岸！ P044 B 树和 B+ 树之间的区别B 树（B-Trees） B+ 树（B+Trees） B 树和 B+ 树的结点有多个元素； B+ 树在叶子结点有非叶子结点的元素冗余； B+ 树的叶子节点有指针（MySQL是双向指针）。 P045 Innodb 中的 B+ 树是怎么产生的 INSERT 向 用户数据区域 插入数据时，会根据主键值排序，因此是有序的； 为了加快查询速度，会对 用户数据区域 分组，将目录写到 页目录； 当页（MySQL默认 16 KB）满了存不下数据时，会新建一个页，指针连接。 从内存向磁盘写入，从磁盘向内存读取，都是按 页 作为单位操作。 P046 高度为 3 的 B+ 树能存多少条数据MySQL 的 B+ 树的结构 每个结点都是一页（MySQL默认 16 KB）。 P047 Innodb 是如何支持范围查找能走索引的 Innodb B+ 树结点分为：索引页 和 数据页； 主键默认使用 主键索引，只有查询条件为主键才能使用主键索引加快查询速度。若查询条件为其他字段，则是全表扫描。 主键索引：从树的根结点开始向下查找数据； 全表扫描：从树的左侧叶结点向右侧叶节点扫描。 P054 MySQL 中有哪些存储引擎1. InnoDB 存储引擎InnoDB 是 MySQL 默认事务形引擎，也是最重要、使用最广泛的存储引擎。 它被设计用来处理大量的短期（short-lived）事物，应该优先考虑 InnoDB 引擎。 2. MyISAM 存储引擎在 MySQL 5.1 及之前的版本，MyISAM 是默认的存储引擎。 但是 MyISAM 不支持事物和行级锁，而且崩溃后无法安全恢复。 同时 MyISAM 对整张表加锁，很容易因为表锁的问题导致典型的性能问题。 3. Memory 引擎4. Archive 引擎5. CSV 引擎P056 MyISAM 和 InnoDB 的区别是什么 InnoDB 支持事物，MyISAM 不支持事物； InnoDB 支持外键，MyISAM 不支持外键； InnoDB 是聚集索引，MyISAM 是非聚集索引； InnoDB 不保存表的具体行数，执行 select count(*) from table 时需要全表扫描。MyISAM 用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度块； InnoDB 最小的锁粒度是行锁，MyISAM 最小的锁粒度是表锁。 P057 数据表设计时，字段你会如何选择字段类型优先级整型 &gt; date,time &gt; enum,char &gt; varchar &gt; blob,text 选用字段长度最小、优先使用定长型、数值型字段中避免使用 “ZEROFILL” ； P059 请说一下事物的基本特性ACID：原子性、一致性、隔离性、持久性。 原子性：一个事物中的操作要么全部成功，要么全部失败； 一致性：数据库总是从一个一致性的状态转换到另一个一致性的状态； eg：比如 A 转账给 B 100 块钱，假设中间sql执行过程中系统崩溃 A 也不会损失 100 块钱，因为事物没有提交，修改也就不会保存到数据库。 隔离性：一个事务的修改在提交之前，对其他事物是不可见的； 持久性：一旦事务提交，所做的修改就会永久保存到数据库中。 P060 事务并发可能会引发什么问题1. 脏读1、在事物 A 执行过程中，事物 A 对数据资源进行了修改，事物 B 读取了事物 A 修改后的数据； 2、由于某些原因，事物 A 并没有完成提交，发生了 RollBack 操作，则事物 B 读取的数据就是脏读数据。 这种 读取到另一个事物未提交的数据的现象 就是脏读（Dirty Read）。 2. 不可重复读事物 B 读取了两次数据资源，在这两次读取的过程中事物 A 修改了数据，导致事物 B 在这两次读取出来的数据不一致。 这种在 同一事物中，前后两次读取的数据不一致的现象 就是不可重复读（Nonrepeatable Read）。 3. 幻读事物 B 前后两次读取同一个范围的数据，在事物 B 两次读取的过程中事物 A 新增了数据，导致事物 B 后一次读取到前一次查询没有看到的行。 幻读和不可重复读有些类似，但是 幻读强调的是集合的增减，而不是单条数据的更新。 P061 简单描述下 MySQL 各种索引1. 主键索引建立在主键上的索引被称为主键索引，一张数据表只能有一个主键索引，索引列值不允许有空值，通常在创建表时一起创建。 2. 唯一索引建立在 UNIQUE 字段上的索引被成为唯一索引，一张表可以有多个唯一索引，索引列值允许为空，列值中出现多个空值不会发生重复冲突。 3. 普通索引建立在普通字段上的索引被称为普通索引。 4. 前缀索引前缀索引是指对字符类型字段的前几个字符或对二进制类型字段的前几个 bytes 建立的索引，而不是在整个字段上建立索引。前缀索引可以建立在类型为 char、varchar、binary、varbinary 的列上，可以大大减少索引占用的存储空间，也能提升索引查询效率。 前缀索引是一种能使索引更小更快的有效方法，但是也包含缺点：MySQL 无法使用前缀索引做 order by 和 group by。 P065 什么是全局锁、共享锁、排他锁1. 全局锁对整个数据库实例加锁，它的典型使用场景就是做全库逻辑备份。这个命令可以使整个库处于只读状态。使用该命令之后，数据更新语句、数据定义语句、更新类事物的提交语句等操作都会被阻塞。 2. 共享锁又称读锁（read lock），是读取操作创建的锁。其他用户可以并发的读取数据，但任何事物都不能对数据进行修改（获取数据上的排他锁），直到已释放所有共享锁。当如果事物对读锁进行修改操作，很可能会造成死锁。 3. 排他锁又称写锁（writer lock），若某个事物对某一行加上了排他锁，只能这个事物对其进行读写，在此事物结束之前，其他事物不能对其进行加任何锁，其他进程可以读取，不能进行写操作，需等待其释放。排他锁是悲观锁的一种实现。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸","slug":"技术向/Java/阿里P8爆肝2个月呕心整理-挑战30天打卡春招上岸","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86-%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/"}],"tags":[{"name":"图灵课堂","slug":"图灵课堂","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E8%AF%BE%E5%A0%82/"},{"name":"周瑜","slug":"周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%91%A8%E7%91%9C/"}],"author":"hooy"},{"title":"P001 面向对象","slug":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P001 面向对象","date":"2022-03-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.261Z","comments":true,"path":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P001 面向对象/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86_%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/P001%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"视频源：阿里P8爆肝2个月呕心整理，挑战30天打卡春招上岸！ “面向过程”和“面向对象”的区别 面向过程：更注重事情的每一个步骤及顺序； 面向对象：更注重事情有哪些参与者（对象），及各自需要做什么。 eg：洗衣机洗衣服面向过程：将任务拆解成一系列的步骤：1.打开洗衣机，2.放衣服，3.放洗衣粉，4.清洗，5.烘干。 面向对象：拆出人和洗衣机两个对象： 人：打开洗衣机，放衣服，放洗衣服； 洗衣机：清洗，烘干。 各自的优势 面向过程：直接高效； 面向对象：更易于复用、扩展和维护。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸","slug":"技术向/Java/阿里P8爆肝2个月呕心整理-挑战30天打卡春招上岸","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86-%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/"}],"tags":[{"name":"图灵课堂","slug":"图灵课堂","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E8%AF%BE%E5%A0%82/"},{"name":"周瑜","slug":"周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%91%A8%E7%91%9C/"}],"author":"hooy"},{"title":"P003 JDK JRE JVM","slug":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P003 JDK JRE JVM","date":"2022-03-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.262Z","comments":true,"path":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P003 JDK JRE JVM/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86_%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/P003%20JDK%20JRE%20JVM/","excerpt":"","text":"视频源：阿里P8爆肝2个月呕心整理，挑战30天打卡春招上岸！ JDK JRE JVM 区别 JDK：Java Develpment Kit，Java 开发工具； JRE：Java Runtime Environment，Java 运行时环境； JVM：Java Virtual Machine，Java 虚拟机。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸","slug":"技术向/Java/阿里P8爆肝2个月呕心整理-挑战30天打卡春招上岸","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86-%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/"}],"tags":[{"name":"图灵课堂","slug":"图灵课堂","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E8%AF%BE%E5%A0%82/"},{"name":"周瑜","slug":"周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%91%A8%E7%91%9C/"}],"author":"hooy"},{"title":"P004 ==和equals","slug":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P004 ==和equals","date":"2022-03-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.263Z","comments":true,"path":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P004 ==和equals/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86_%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/P004%20==%E5%92%8Cequals/","excerpt":"","text":"视频源：阿里P8爆肝2个月呕心整理，挑战30天打卡春招上岸！ &#x3D;&#x3D; 和 equals 区别 &#x3D;&#x3D;：对比的是 栈中的值 ，基本数据类型是变量值，引用类型是堆中内存对象的地址； equals：Object 中默认也是采用 &#x3D;&#x3D; 比较，通常会重写。 eg：String 类的 equals 方法重写 判断字符串地址是否一样； 判断字符串长度、每个字符是否一样。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸","slug":"技术向/Java/阿里P8爆肝2个月呕心整理-挑战30天打卡春招上岸","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86-%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/"}],"tags":[{"name":"图灵课堂","slug":"图灵课堂","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E8%AF%BE%E5%A0%82/"},{"name":"周瑜","slug":"周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%91%A8%E7%91%9C/"}],"author":"hooy"},{"title":"P005 final","slug":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P005 final","date":"2022-03-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.263Z","comments":true,"path":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P005 final/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86_%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/P005%20final/","excerpt":"","text":"视频源：阿里P8爆肝2个月呕心整理，挑战30天打卡春招上岸！ final 修饰位置的区别 修饰类：表示类不可被继承； 修饰方法：表示方法不可被子类覆盖，但可以重载； 修饰变量：表示变量一旦被赋值就不可以更改它的值。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸","slug":"技术向/Java/阿里P8爆肝2个月呕心整理-挑战30天打卡春招上岸","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86-%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/"}],"tags":[{"name":"图灵课堂","slug":"图灵课堂","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E8%AF%BE%E5%A0%82/"},{"name":"周瑜","slug":"周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%91%A8%E7%91%9C/"}],"author":"hooy"},{"title":"P006 String、StringBuffer、StringBuilder区别及使用场景","slug":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P006 String、StringBuffer、StringBuilder区别及使用场景","date":"2022-03-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.264Z","comments":true,"path":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P006 String、StringBuffer、StringBuilder区别及使用场景/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86_%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/P006%20String%E3%80%81StringBuffer%E3%80%81StringBuilder%E5%8C%BA%E5%88%AB%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/","excerpt":"","text":"视频源：阿里P8爆肝2个月呕心整理，挑战30天打卡春招上岸！ String：final 修饰，每次操作都会产生新 String 对象； StringBuffer：synchronized 修饰，线程安全，在原对象上操作； StringBuilder：线程不安全，在原对象上操作。 性能：StringBuilder &gt; StringBuffer &gt; String 单线程用 StringBuilder，多线程用 StringBuffer。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸","slug":"技术向/Java/阿里P8爆肝2个月呕心整理-挑战30天打卡春招上岸","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86-%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/"}],"tags":[{"name":"图灵课堂","slug":"图灵课堂","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E8%AF%BE%E5%A0%82/"},{"name":"周瑜","slug":"周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%91%A8%E7%91%9C/"}],"author":"hooy"},{"title":"P009 List和Set","slug":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P009 List和Set","date":"2022-03-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.264Z","comments":true,"path":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P009 List和Set/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86_%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/P009%20List%E5%92%8CSet/","excerpt":"","text":"视频源：阿里P8爆肝2个月呕心整理，挑战30天打卡春招上岸！ List 和 Set 的区别 List：有序，按对象进入的顺序保存对象，可重复，允许多个 Null 元素对象，可以使用 Iterator（迭代器）取出所有元素，再逐一遍历，还可以使用 get(int index) 获取指定下标的元素。 Set：无序，不可重复，最多允许一个 Null 元素对象，取元素只能用 Iterator（迭代器），再逐一遍历各个元素。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸","slug":"技术向/Java/阿里P8爆肝2个月呕心整理-挑战30天打卡春招上岸","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86-%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/"}],"tags":[{"name":"图灵课堂","slug":"图灵课堂","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E8%AF%BE%E5%A0%82/"},{"name":"周瑜","slug":"周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%91%A8%E7%91%9C/"}],"author":"hooy"},{"title":"P010 hashCode和equals","slug":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P010 hashCode和equals","date":"2022-03-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.265Z","comments":true,"path":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P010 hashCode和equals/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86_%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/P010%20hashCode%E5%92%8Cequals/","excerpt":"","text":"视频源：阿里P8爆肝2个月呕心整理，挑战30天打卡春招上岸！ hashCode 介绍hashCode() 的作用是获取哈希码，也称散列码。它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在 JDK 的 Object.java 中，java 中的任何类都包含有 hashCode() 方法。 为什么要有 hashCode以 “HashSet 如何检测重复” 为例子来说明为什么要有hashCode：对象加入 HashSet 时，HashSet 会先计算对象的 hashCode 值来判断对象加入的位置，看该位置是否有值，如果没有、HashSet 会假设对象没有重复出现。但是如果发现有值，这时会调用 equals() 方法来检查两个对象是否真的相同。如果两者相同，HashSet就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。这就大大减少了 equals 的次数，相应就大大提高了执行速度。 equals方法被覆盖过，则hashCode方法也必须被覆盖。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸","slug":"技术向/Java/阿里P8爆肝2个月呕心整理-挑战30天打卡春招上岸","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86-%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/"}],"tags":[{"name":"图灵课堂","slug":"图灵课堂","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E8%AF%BE%E5%A0%82/"},{"name":"周瑜","slug":"周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%91%A8%E7%91%9C/"}],"author":"hooy"},{"title":"P029-P043 Spring","slug":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P029-P043 Spring","date":"2022-03-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.265Z","comments":true,"path":"技术向/Java/阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸/P029-P043 Spring/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86_%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/P029-P043%20Spring/","excerpt":"","text":"视频源：阿里P8爆肝2个月呕心整理，挑战30天打卡春招上岸！ P029 Spring 是如何创建一个Bean对象的 UserService类 推断构造方法 普通对象 依赖注入 初始化前方法（@PostConstruct）[P032] 初始化方法（InitializingBean）[P033] 初始化后方法（AOP） 代理对象 放入Map单例池 Bean对象 P032 @PostConstruct 注解是如何工作的1234@PostConstruct public void pc() &#123; // more code ...&#125; P033 Bean 的初始化是如何工作的让 Bean 类实现 InitializingBean 接口，实现 afterPropertiesSet() 方法。 123456public class UserService implements InitializingBean &#123; @Override public void afterPropertiesSet() throws Exception &#123; // more code ... &#125;&#125; P035 什么是初始化后初始化后由 AOP 实现，生成代理对象，后将代理对象放入 Map单例池。 P036 推断构造方法是什么意思Bean 类里有多个构造方法，默认使用 无参构造方法 。 若要指定哪个构造方法，再构造方法上加 @Autowired 注解。 构造方法可以带有“入参”，遵循依赖注入。 P037 什么是先 byType 再 byName依赖注入时，在 Bean 单例池中先根据 type 查找 Bean，若有多个同类型的 Bean，再根据 name 查找 Bean。 12@Autowiredprivate OrderService orderService; // 先查找 OrderService 类型的 Bean 。若有多个，再查找 name 为 orderService 的 Bean。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸","slug":"技术向/Java/阿里P8爆肝2个月呕心整理-挑战30天打卡春招上岸","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86-%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/"}],"tags":[{"name":"图灵课堂","slug":"图灵课堂","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E8%AF%BE%E5%A0%82/"},{"name":"周瑜","slug":"周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%91%A8%E7%91%9C/"}],"author":"hooy"},{"title":"Untitled","slug":"技术向/Java/HashMap全B站最细致源码分析课程_看完月薪最少涨5k/Untitled","date":"2022-02-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.159Z","comments":true,"path":"技术向/Java/HashMap全B站最细致源码分析课程_看完月薪最少涨5k/Untitled/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/HashMap%E5%85%A8B%E7%AB%99%E6%9C%80%E7%BB%86%E8%87%B4%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E8%AF%BE%E7%A8%8B_%E7%9C%8B%E5%AE%8C%E6%9C%88%E8%96%AA%E6%9C%80%E5%B0%91%E6%B6%A85k/Untitled/","excerpt":"","text":"视频源：HashMap全B站最细致源码分析课程，看完月薪最少涨5k！","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"HashMap全B站最细致源码分析课程_看完月薪最少涨5k","slug":"技术向/Java/HashMap全B站最细致源码分析课程-看完月薪最少涨5k","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/HashMap%E5%85%A8B%E7%AB%99%E6%9C%80%E7%BB%86%E8%87%B4%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E8%AF%BE%E7%A8%8B-%E7%9C%8B%E5%AE%8C%E6%9C%88%E8%96%AA%E6%9C%80%E5%B0%91%E6%B6%A85k/"}],"tags":[{"name":"小刘讲源码","slug":"小刘讲源码","permalink":"http://blog.hooy.xyz/tags/%E5%B0%8F%E5%88%98%E8%AE%B2%E6%BA%90%E7%A0%81/"}],"author":"hooy"},{"title":"P02 框架概述","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P02 框架概述","date":"2022-02-18T16:00:00.000Z","updated":"2022-06-15T08:32:50.638Z","comments":true,"path":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P02 框架概述/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P02%20%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/","excerpt":"","text":"视频源：尚硅谷Spring框架视频教程（spring5源码级讲解） Spring两个核心部分： IOC：控制反转，把创建对象的过程交给Spring进行管理； AOP：面向切面，不修改源代码进行功能增强。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringFramework","slug":"技术向/SpringFramework","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"},{"name":"尚硅谷Spring框架视频教程（spring5源码级讲解）","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P03 入门案例","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P03 入门案例","date":"2022-02-18T16:00:00.000Z","updated":"2022-06-15T08:32:50.638Z","comments":true,"path":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）/P03 入门案例/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P03%20%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/","excerpt":"","text":"视频源：尚硅谷Spring框架视频教程（spring5源码级讲解） Step 01：下载Spring：https://spring.io/ Spring Framework：https://spring.io/projects/spring-framework CURRENT 当前版本；SNAPSHOT 快照版本；GA 稳定版本。 Spring 仓库：https://repo.spring.io/ui/packages Spring Framework 仓库：https://repo.spring.io/ui/native/release/org/springframework/spring/ Step 02：创建工程创建一个新 Java 空白项目。 Spring Framework 结构图：Core Container 包括 IOC 和 AOP 所必须的组件。 解压刚才下载的 Spring Framework 压缩包，打开 libs 目录。 javadoc 文档；sources 源码。 将 Jar 包复制到工程的 libs 目录。commons-logging 从Maven下载：https://mvnrepository.com/artifact/commons-logging/commons-logging commons-logging spring-beans spring-context spring-core spring-expression File -&gt; Project Structure -&gt; Modules -&gt; Dependencies -&gt; + -&gt; JARs or directories Step 03：Spring 配置文件1234567package com.atguigu.spring5;public class User &#123; public void add()&#123; System.out.println(&quot;add...&quot;); &#125;&#125; 创建一个 Spring Config 类型的 XML 文件，文件名任意。 123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;!-- 配置User对象创建 --&gt; &lt;bean id=&quot;user&quot; class=&quot;com.atguigu.spring5.User&quot;&gt;&lt;/bean&gt; &lt;/beans&gt; id 任意名称；class 类路径 根据配置文件创建bean对象，测试类。 123456789101112131415161718192021package com.atguigu.spring5.testdemo;import com.atguigu.spring5.User;import org.junit.Test;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class TestSpring5 &#123; @Test public void testAdd()&#123; // 1. 加载 spring 配置文件 // src 下的 bean1.xml ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;); // 2. 获取配置创建的对象 // 参数1：&lt;bean&gt;标签中的id值；参数2：Class类型 User user = context.getBean(&quot;user&quot;,User.class); System.out.println(user); user.add(); &#125;&#125; 运行结果： 1234com.atguigu.spring5.User@6a1aab78add...Process finished with exit code 0","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringFramework","slug":"技术向/SpringFramework","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"},{"name":"尚硅谷Spring框架视频教程（spring5源码级讲解）","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"C语言考研速成","slug":"技术向/Cpp/黑马程序员匠心之作_C++教程从0到1入门编程_学习编程不再难/C语言考研速成","date":"2021-08-31T16:00:00.000Z","updated":"2022-06-15T08:32:50.096Z","comments":true,"path":"技术向/Cpp/黑马程序员匠心之作_C++教程从0到1入门编程_学习编程不再难/C语言考研速成/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Cpp/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98%E5%8C%A0%E5%BF%83%E4%B9%8B%E4%BD%9C_C++%E6%95%99%E7%A8%8B%E4%BB%8E0%E5%88%B01%E5%85%A5%E9%97%A8%E7%BC%96%E7%A8%8B_%E5%AD%A6%E4%B9%A0%E7%BC%96%E7%A8%8B%E4%B8%8D%E5%86%8D%E9%9A%BE/C%E8%AF%AD%E8%A8%80%E8%80%83%E7%A0%94%E9%80%9F%E6%88%90/","excerpt":"","text":"黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难 1 C++初识1.1 第一个C++程序1.1.1 创建项目文件 -&gt; 项目 -&gt; 空项目（使用C++ for Windows从头开始操作。不提供基础文件） 解决方案资源管理器 -&gt; 源文件 -&gt; 添加 -&gt; 新建项 -&gt; C++ 文件（.cpp） 12345678# include &lt;iostream&gt;using namespace std;int main() &#123; cout &lt;&lt; &quot;Hello World&quot; &lt;&lt; endl; // 文字输出 system(&quot;pause&quot;); return 0;&#125; 1.4 常量作用：记录程序中不可更改的数据。 语法：两种方式： #define 宏常量：#define 常量名 常量值 ​ 通常在函数的上面定义 const 修饰变量：const 数据类型 常量名 = 常量值 ​ 通常在变量定义前加关键字 const 示例： 1234567891011121314# include &lt;iostream&gt;using namespace std;// 1. #define 宏常量#define DAY 7int main() &#123; // 2. const 修饰变量 const int MONTH = 12; cout &lt;&lt; &quot;一周总共有：&quot; &lt;&lt; DAY &lt;&lt; &quot;天,一年有：&quot; &lt;&lt; MONTH &lt;&lt; &quot;月&quot; &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 2 数据类型2.2 sizeof 关键字作用：利用sizeof关键字可以统计数据类型所占内存大小 语法：sizeof(数据类型 / 变量) 示例： 12345678910# include &lt;iostream&gt;using namespace std;int main() &#123; // short 占2字节 short num = 10; cout &lt;&lt; sizeof(short) &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 2.4 字符型作用：字符型变量用于显示单个字符 语法：char ch = &#39;a&#39; 注意： 在显示字符型变量只占用1个字节 字符型变量并不是把字符本身放到内存的储存中，而是将对应的ASCII编码放到存储单元 8 结构体8.2 结构体定义和使用作用：结构体属于用户自定义的数据类型，允许用户存储不同的数据类型 语法：struct 结构体名 &#123; 结构体成员列表 &#125; 通过结构体创建变量的方式有三种： struct 结构体名 变量名 struct 结构体名 变量名 &#x3D; { 成员1值 , 成员2值 } 定义结构体时顺便创建变量 示例： 12345678910111213141516171819202122232425262728293031# include &lt;iostream&gt;# include&lt;string&gt;using namespace std;struct Student &#123; string name; int age; int score;&#125;s3;// 3. 定义结构体时顺便创建变量int main() &#123; // 1. struct 结构体名 变量名 struct Student s1; s1.name = &quot;Hooy&quot;; s1.age = 23; s1.score = 100; cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; s1.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; s1.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; s1.score &lt;&lt; endl; // 2. struct 结构体名 变量名 = &#123; 成员1值 , 成员2值 &#125; struct Student s2 = &#123;&quot;Yan&quot; , 20 , 90&#125;; cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; s2.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; s2.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; s2.score &lt;&lt; endl; // 3. 定义结构体时顺便创建变量 s3.name = &quot;Tsing&quot;; s3.age = 80; s3.score = 123; cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; s3.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; s3.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; s3.score &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 8.3 结构体数组作用：将自定义的结构体放入到数组中方便维护 语法：struct 结构体名 数组名[元素个数] = &#123; &#123;&#125; , &#123;&#125; , &#123;&#125; &#125; 示例： 1234567891011121314151617181920212223242526272829# include &lt;iostream&gt;# include&lt;string&gt;using namespace std;// 1. 定义结构体struct Student &#123; string name; int age; int score;&#125;;int main() &#123; // 2. 创建结构体数组 struct Student stuArray[3] = &#123; &#123;&quot;Hooy&quot;,20,60&#125;, &#123;&quot;Yan&quot;,30,54&#125;, &#123;&quot;Tsing&quot;,78,12&#125; &#125;; // 3. 给结构体中的元素赋值 stuArray[1].name = &quot;燕&quot;; stuArray[1].age = 15; stuArray[1].score = 3; // 4. 遍历结构体数组 for (int i = 0;i &lt; 3;i++) &#123; cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stuArray[i].name &lt;&lt; &quot;年龄：&quot; &lt;&lt; stuArray[i].age &lt;&lt; &quot;分数：&quot; &lt;&lt; stuArray[i].score &lt;&lt; endl; &#125;&#125; 8.4 结构体指针作用：通过指针访问结构体中的成员 利用操作符 -&gt; 可以通过结构体指针访问结构体属性 示例： 12345678910111213141516171819# include &lt;iostream&gt;# include&lt;string&gt;using namespace std;// 1. 定义结构体struct Student &#123; string name; int age; int score;&#125;;int main() &#123; // 2. 创建学生结构体变量 struct Student s = &#123;&quot;张三&quot;,18,70&#125;; // 3. 通过指针指向结构体变量 struct Student* p = &amp;s; // 4.通过指针访问结构体变量中的数据 cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p-&gt;name &lt;&lt; endl;&#125; 8.5 结构体嵌套结构体作用：结构体中的成员可以是另一个结构体 示例：每一个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体 12345678910111213141516171819202122232425262728# include &lt;iostream&gt;# include&lt;string&gt;using namespace std;// 定义学生结构体struct Student &#123; string name; int age; int score;&#125;;// 定义老师结构体struct Teacher &#123; int id; string name; int age; struct Student stu;&#125;;int main() &#123; struct Teacher t; t.id = 1; t.name = &quot;老王&quot;; t.age = 30; t.stu.name = &quot;张三&quot;; t.stu.age = 18; t.stu.score = 70;&#125; 8.6 结构体做函数参数作用：将结构体作为参数向函数中传递 传递方式有两种： 值传递 地址传递 示例： 123456789101112131415161718192021222324252627#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;// 定义学生结构体struct Student &#123; string name; int age; int score;&#125;;// 1. 值传递：由于将对象复制一份，因此修改操作不影响原对象void printStudent1(struct Student s) &#123; s.age = 100; cout &lt;&lt; s.name &lt;&lt; &quot; &quot; &lt;&lt; s.age &lt;&lt; &quot; &quot; &lt;&lt; s.score &lt;&lt; endl;&#125;// 2. 地址传递：由于是原对象地址，因此修改操作是对原对象修改void printStudent2(struct Student* s) &#123; s-&gt;age = 120; cout &lt;&lt; s-&gt;name &lt;&lt; &quot; &quot; &lt;&lt; s-&gt;age &lt;&lt; &quot; &quot; &lt;&lt; s-&gt;score &lt;&lt; endl;&#125;int main() &#123; struct Student s = &#123;&quot;张三&quot;,18,70&#125;; printStudent1(s); printStudent2(&amp;s);&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Cpp","slug":"技术向/Cpp","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Cpp/"},{"name":"黑马程序员匠心之作_C++教程从0到1入门编程_学习编程不再难","slug":"技术向/Cpp/黑马程序员匠心之作-C-教程从0到1入门编程-学习编程不再难","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Cpp/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98%E5%8C%A0%E5%BF%83%E4%B9%8B%E4%BD%9C-C-%E6%95%99%E7%A8%8B%E4%BB%8E0%E5%88%B01%E5%85%A5%E9%97%A8%E7%BC%96%E7%A8%8B-%E5%AD%A6%E4%B9%A0%E7%BC%96%E7%A8%8B%E4%B8%8D%E5%86%8D%E9%9A%BE/"}],"tags":[{"name":"黑马程序员","slug":"黑马程序员","permalink":"http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"}],"author":"hooy"},{"title":"00008_由硬盘掉盘引起的Win10蓝屏故障","slug":"创作集/00008_由硬盘掉盘引发的Win10蓝屏故障","date":"2021-06-04T16:00:00.000Z","updated":"2022-05-10T01:02:37.905Z","comments":true,"path":"创作集/00008_由硬盘掉盘引发的Win10蓝屏故障/","link":"","permalink":"http://blog.hooy.xyz/%E5%88%9B%E4%BD%9C%E9%9B%86/00008_%E7%94%B1%E7%A1%AC%E7%9B%98%E6%8E%89%E7%9B%98%E5%BC%95%E5%8F%91%E7%9A%84Win10%E8%93%9D%E5%B1%8F%E6%95%85%E9%9A%9C/","excerpt":"","text":"结论先说结论，如果你的电脑出现以下症状： 开机一分钟左右硬盘占用率100%，鼠标拖动缓慢甚至无法移动。 Win10蓝屏，并且恢复进度始终为零，只能强制重启电脑。包括但不限于以下蓝屏代码： critical process died system service expection critical service failed 解决方案很可能是由硬盘掉盘引起的故障，有以下两种方案可选： 将硬盘拆下，使用酒精擦拭硬盘“金手指”，然后装回去（可以考虑换一个插槽）。 直接更换硬盘。 我的经历最近一段时间，我的笔记本蓝屏是越来越频繁，令人恼火。根据蓝屏代码查询相关资料，也没一个靠谱的，通常都是什么杀毒、重装系统云云，基本上没什么实质性帮助。 经过我的观察，在电脑蓝屏前，固态硬盘占用率经常飙至100%，不一会就蓝屏。后来，又一次蓝屏后，进入BIOS发现安装系统的固态硬盘无法识别，我恍然大悟，原来是硬盘掉盘了。 废话不多说，打开电脑后盖，将固态硬盘取下来，用蘸了酒精的棉签擦了擦金手指，又装到另一个插槽上。截至写稿，蓝屏不再复现，故障完美解决。","categories":[{"name":"创作集","slug":"创作集","permalink":"http://blog.hooy.xyz/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"}],"tags":[],"author":"hooy"},{"title":"00007_又到一年毕业季","slug":"创作集/00007_又到一年毕业季","date":"2021-05-24T16:00:00.000Z","updated":"2022-07-14T09:29:33.375Z","comments":true,"path":"创作集/00007_又到一年毕业季/","link":"","permalink":"http://blog.hooy.xyz/%E5%88%9B%E4%BD%9C%E9%9B%86/00007_%E5%8F%88%E5%88%B0%E4%B8%80%E5%B9%B4%E6%AF%95%E4%B8%9A%E5%AD%A3/","excerpt":"","text":"正文昨天公开答辩后，我在寝室躺了整整一天。 很开心，在大学四年结束之际，有幸参加了院里组织的公开答辩。为准备公开答辩，最近的一周真是吃尽苦头，编写代码、撰写论文和制作演示文稿（PPT），三管齐下，忙得不可开交。 毕业设计课题是“基于SSM技术的个人博客的设计与实现”，啊没错，做的就是当前这个博客软件，工作量就不多说了，前后做了七八个月。论文也写了一个月，记得是四月二十五号，我去石家庄找女朋友玩，结果学校催得紧要交初稿，只好在女友的出租屋内撰写论文，哪儿也去不了。至于演示文稿嘛，花了一天时间就做完了，学校要求做十页就行，很轻松，在答辩前一天就搞定了。 要说公开答辩紧张不紧张，还用问，去之前紧张到连续上厕所。毕竟答辩时下面坐着几排院里的领导和老师，像我这种没见过大场面的小老弟儿，不慌是不可能的。上午八点半，我们寝室四人倾巢出动，寝室里只有我一个人参加公开答辩，其他三个兄弟都是陪我去的，真吉尔感动，大早上的都爬起来了。信息楼的会议厅并不大，最前面是一个椭圆会议桌，没啥好说的，后面就是几排观众椅，不得不说，这椅子坐着挺舒服。九点钟，老师简单致辞说了几句，公开答辩就开始了，首先上来的是一个妹子，也是本次公开答辩唯一的一个妹子，上来就是一口英文介绍，当时就给我整蒙了，好家伙公开答辩果然是群魔乱舞，神仙打架。不过好在后面，妹子还是使用的中文做的答辩。让我印象最为深刻的是一个做游戏的老哥，他的项目跟我们这种用Java做开发的臭鱼烂虾没法比，使用的是Unity游戏引擎做的小游戏，就像我小时候在4399上面玩过的一样，不单单是他的项目，更是他语出惊人。我也记不太清评委老师是提了个什么问题，反正他的反应十分强烈，大声说道：“啊？帧数不是越高越好吗？”，一个啊字震惊全场，让原本严肃的答辩现场瞬间充满了欢声笑语。最后一个上场的是我们工作室的“项目经理”，他将我们之前一起做的项目作为了毕设，当然了这个项目的百分之七十的工作都是由他完成的，他作为毕设也无可厚非。要知道，之前的同学介绍项目后，下面的评委老师都要指点项目的不足，但是到了他这里情况就有所不同了，居然有两个老师站出来为他说话。一位是我们计信学院的D老师，另一位是经管学院的Y老师，真是神助攻，项目再好，也不如老师站出来打配合，真是让人羡慕啊，哈哈哈。要问我为什么不写自己的答辩情况，给大伙丢人了，给全国人民谢罪了嗷。 答辩顺利结束了，在某种意义上已经毕业了。回首大学四年，时间过得真快，从踏入校门的第一天，马上又到了在校的最后一天。接下来的几天，和大学里的同学们吃几顿饭，拍拍毕业照，领了毕业证和学位证大家就散伙了，祝愿在未来的日子里大家的工作和学习能够顺利。","categories":[{"name":"创作集","slug":"创作集","permalink":"http://blog.hooy.xyz/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"}],"tags":[],"author":"hooy"},{"title":"00006_AndroidTV树莓派实战","slug":"创作集/00006_AndroidTV树莓派实战","date":"2021-02-18T16:00:00.000Z","updated":"2022-07-14T09:27:49.711Z","comments":true,"path":"创作集/00006_AndroidTV树莓派实战/","link":"","permalink":"http://blog.hooy.xyz/%E5%88%9B%E4%BD%9C%E9%9B%86/00006_AndroidTV%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%9E%E6%88%98/","excerpt":"","text":"- 注意！本博文前提路由器全局科学上网，路由器全局科学上网，路由器全局科学上网 - 前言家里之前一直使用的是歌华有线数字电视，随着互联网的快速发展，网络电视盒子进入千家万户。歌华有线作为传统的电视服务，逐渐不能满足人们对文娱节目日益提高的需求。因此，父母也提议将机顶盒换置为网络电视盒子。在这里，我将DIY一个。 操作步骤前期准备 TF（microSD）32G 1件 U盘 8G 1件 支持TF卡转USB读卡器 1件 电脑 1台 树莓派4B（RaspBerry 4 Pi model B）1台 Step01 下载及烧录 AndroidTV 镜像文件镜像下载地址：https://konstakang.com/devices/rpi4/ 选择TV版本，即 LineageOS 17.1 Android TV - KonstaKANG (Android 10) 下载好镜像后，还需要一个烧录工具，推荐使用 balenaEtcher 烧录工具下载地址：https://www.balena.io/etcher/ 接下来开始烧录。将TF卡插入到读卡器，再将读卡器插入电脑，打开 balenaEtcher 软件 选择镜像文件，选择TF卡，开始烧录。待烧录完成即可。 Step02 首次进入 AndroidTV将TF卡取出，插入到树莓派的插槽里，给树莓派连接显示器、连接鼠标键盘，最后通电（使用的是Type-C供电，5V3A）。 开机后，简单的设置，部分可以直接跳过。最后进入系统。 可以看到“空空如也”，甚至没有谷歌商店（Google Play Store）。 Android 热键：F1 &#x3D; Home F2 &#x3D; Back F3 &#x3D; Multi-tasking F4 &#x3D; Menu F5 &#x3D; Power F11 &#x3D; Volume down F12 &#x3D; Volume up Step03 安装谷歌套件进入恢复模式前准备 回到电脑 根据需求下载谷歌套件（gapp），拷贝至U盘。 谷歌套件下载地址：https://opengapps.org/?arch=arm&amp;api=10.0&amp;variant=tvstock 回到树莓派。 打开 设置 ，选择 设备偏好设置 -&gt; 关于 ，连续点击 内部版本号 多次，激活开发者模式。 后退回上一级，可以看到多了条 开发者选项 选项，进入。 打开 Root access 、USB调试 、本地终端 和 Advanced reboot 。 需要在电脑上使用adb工具修改下网络，否则在安装谷歌套件时会出现 “您的以太网无法连接互联网” 的问题。 回到电脑 adb工具下载地址：https://drive.google.com/drive/folders/1PIT3issyC3qD_mjt9HRVJkM2qTlphXWk 下载好后，运行 cmd-here.exe 可执行程序。 输入以下指令： 12# 连接adbadb connect 192.168.1.100 注意，这里的IP地址是你的 AndroidTV 的地址。可通过 设置 -&gt; 网络和互联网 查看。 12345678910111213141516# 写入新的ntp服务器地址adb shell settings put global ntp_server ntp1.aliyun.com# 备用地址dns1.synet.edu.cnnews.neu.edu.cndns.sjtu.edu.cmdns2.synet.edu.cnntp.glnet.edu.cnntp1.aliyun.comntp2.aliyun.comntp3.aliyun.comntp4.aliyun.comntp5.aliyun.comntp6.aliyun.comntp7.aliyun.com 恢复模式 回到树莓派 进入恢复模式有两种方法： 方法一：设置 -&gt; 设备偏好设置 -&gt; 关于 -&gt; 重新启动 -&gt; Recovery 进入恢复模式。 方法二：应用 -&gt; 终端，进入终端界面。 输入以下指令： 1234# 一行一行输入surpi4-recovery.shreboot 树莓派重启，即可进入恢复模式。 重启完毕，可以看到一个滑动条，快速滑动至右侧。 插上U盘，选择 install 。因为谷歌套件在U盘上，所以点击 select storage，选择U盘。 可以看到屏幕中间的 zip 文件，选择它。快速滑动滑动条，开始安装。 安装完成后，点击 Wipe Dalvik ，再次快速滑动滑动条。 最后，点击 Reboot ，重启。 Step04 再次进入 AndroidTV重启后再次进入 AndroidTV，相较第一次有所不同，这一次包含了谷歌方面的一些设置。常规的如选择语言，选择网络（请确保已经完成adb步骤，否则可能卡在这里），登录谷歌等等。 终于，看到了梦寐以求的谷歌商店。那么需要什么就去商店里下载即可。 注：可以下载如TouTube、KODI等国外软件。如：BiliBili和爱奇艺（银河奇异果）等需要借助当贝市场，原生谷歌商店是没有的。 参考及鸣谢 重要性降序排序，越靠上越具有参考价值。 Instalar LineageOS 17.1 Android TV (Android 10) Raspberry Pi 4 https://www.youtube.com/watch?v=5ppW77_0vJI Shield TV 出现已连接但无法访问 要怎么解决？Android TV的通用解决办法看这里！再说一遍~ https://www.youtube.com/watch?v=Hsmp0IfCZfw [老李‘s] 自制电视盒子 写入谷歌框架和Google Play商店 做一只Android手机的门槛有多低？ https://www.youtube.com/watch?v=lspKV-7YV18&amp;list=WL&amp;index=7&amp;t=839s 樹莓派4安裝Android 10完整Google服務及Play商店 Raspberry Pi 4【中文字幕】 https://www.youtube.com/watch?v=w7akBzdsiYI&amp;t=193s","categories":[{"name":"创作集","slug":"创作集","permalink":"http://blog.hooy.xyz/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"}],"tags":[],"author":"hooy"},{"title":"P25 code split","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P25 code split","date":"2020-12-01T16:00:00.000Z","updated":"2022-06-15T08:32:50.663Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P25 code split/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P25%20code%20split/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 什么是code split以前输出的js只有一个 built.js 文件。code split是将它们分割开来，分成多个代码文件。 编写配置文件： 12345678910111213141516171819202122232425262728293031323334353637383940414243const &#123; resolve &#125; = require(&quot;path&quot;);const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);module.exports = &#123; entry: &#123; // 多入口：有一个入口，最终输出一个bundle // main test 取什么都可以，这是用于 [name] index: &#x27;./src/js/index.js&#x27;, // 删除入口文件内的引入test.js语句 test: &#x27;./src/js/test.js&#x27; &#125;, output: &#123; // 取文件名[name] filename: &#x27;js/[name].[contenthash:10].js&#x27;, path: resolve(__dirname, &#x27;build&#x27;), publicPath:&#x27;./&#x27; &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27;, minify: &#123; collapseWhitespace: true, removeComments: true &#125; &#125;) ], /* 可以将node_modules中代码单独打包一个chunk最终输出 自动分析多入口chunk中，有没有公共的文件。如果有会打包成单独一个chunk */ optimization: &#123; splitChunks: &#123; chunks: &#x27;all&#x27; &#125; &#125;, mode: &#x27;production&#x27;, devServer: &#123; contentBase: resolve(__dirname,&#x27;build&#x27;), compress: true, port: 3000 &#125;&#125;;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"README","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/README","date":"2020-12-01T16:00:00.000Z","updated":"2022-06-15T08:32:50.664Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/README/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/README/","excerpt":"","text":"实在是看不下去了，webpack老师讲的很好，但webpack配置起来就像是一坨shift，F**k！ 目前根据教程 尚硅谷2020最新版Webpack5实战教程 看到了 P25，暂时停止学习。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"Untitled","slug":"技术向/MySQL/MySQL数据库（mysql安装_基础_高级_优化）/Untitled","date":"2020-11-30T16:00:00.000Z","updated":"2022-06-15T08:32:50.332Z","comments":true,"path":"技术向/MySQL/MySQL数据库（mysql安装_基础_高级_优化）/Untitled/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88mysql%E5%AE%89%E8%A3%85_%E5%9F%BA%E7%A1%80_%E9%AB%98%E7%BA%A7_%E4%BC%98%E5%8C%96%EF%BC%89/Untitled/","excerpt":"","text":"视频源：MySQL数据库（mysql安装&#x2F;基础&#x2F;高级&#x2F;优化）","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"MySQL","slug":"技术向/MySQL","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/"},{"name":"MySQL数据库（mysql安装_基础_高级_优化）","slug":"技术向/MySQL/MySQL数据库（mysql安装-基础-高级-优化）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88mysql%E5%AE%89%E8%A3%85-%E5%9F%BA%E7%A1%80-%E9%AB%98%E7%BA%A7-%E4%BC%98%E5%8C%96%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"},{"name":"宋红康","slug":"宋红康","permalink":"http://blog.hooy.xyz/tags/%E5%AE%8B%E7%BA%A2%E5%BA%B7/"}],"author":"hooy"},{"title":"P20 HMR","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P20 HMR","date":"2020-11-30T16:00:00.000Z","updated":"2022-06-15T08:32:50.660Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P20 HMR/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P20%20HMR/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 什么是HMR用于开发环境下。 模块热更新。修改某个文件的源码，仅重新打包修改文件，不会导致全部文件重新打包。 如何开启在 devServer 内配置 hot:true即可。 编写配置文件： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071/* HMR： hot module replacement 热模块替换 作用：一个模块发生变化，只会重新打包这一模块（而不是打包所有模块） 极大的提升构建速度 css文件：可以使用HMR功能，因为style-loader内部实现了 js文件：默认不能使用HMR功能 html文件：默认不能使用HMR功能，同时会导致问题：html不能热更新了*/const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);const &#123; resolve &#125; = require(&#x27;path&#x27;);module.exports = &#123; // 解决html不能热更新，放入数组中 // [&#x27;./src/js/index.js&#x27;,&#x27;./src/js/index.html&#x27;] entry: &#x27;./src/js/index.js&#x27;, output: &#123; filename: &#x27;js/built.js&#x27;, path: resolve(__dirname,&#x27;build&#x27;), publicPath:&#x27;./&#x27; &#125;, module: &#123; rules: [ &#123; test: /\\.less$/, use: [&#x27;style-loader&#x27;,&#x27;css-loader&#x27;,&#x27;less-loader&#x27;] &#125;, &#123; test: /\\.css$/, use: [&#x27;style-loader&#x27;,&#x27;css-loader&#x27;] &#125;, &#123; test: /\\.(jpg|png|gif)$/, loader: &#x27;url-loader&#x27;, options: &#123; limit: 8 * 1024, name: &#x27;[hash:10].[ext]&#x27;, esModule: false, outputPath: &#x27;imgs&#x27; &#125; &#125;, &#123; test: /\\.html$/, loader: &#x27;html-loader&#x27; &#125;, &#123; exclude: /\\.(html|js|css|less|jpg|png|gif)/, loader: &#x27;file-loader&#x27;, options: &#123; name: &#x27;[hash:10].[ext]&#x27;, outputPath: &#x27;media&#x27; &#125; &#125; ] &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;) ], mode: &#x27;development&#x27;, devServer: &#123; contentBase: resolve(__dirname,&#x27;build&#x27;), compress: true, port: 3000, // 开启HMR功能 // 当修改了 webpack，新配置要想生效，必须重启webpack服务 hot: true &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P21 source-map","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P21 source-map","date":"2020-11-30T16:00:00.000Z","updated":"2022-06-15T08:32:50.661Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P21 source-map/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P21%20source-map/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 什么是source-map构建后的代码与源代码之间的映射关系表。方便透过构建后的代码调试源代码。同时可选隐藏源代码的功能。 如何使用在 webpack.config.js 中加入 devtool: &#39;source-map&#39; 即可，参数根据不同需求可选。 编写配置文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);const &#123; resolve &#125; = require(&#x27;path&#x27;);module.exports = &#123; entry: &#x27;./src/js/index.js&#x27;, output: &#123; filename: &#x27;js/built.js&#x27;, path: resolve(__dirname,&#x27;build&#x27;), publicPath:&#x27;./&#x27; &#125;, module: &#123; rules: [ &#123; test: /\\.less$/, use: [&#x27;style-loader&#x27;,&#x27;css-loader&#x27;,&#x27;less-loader&#x27;] &#125;, &#123; test: /\\.css$/, use: [&#x27;style-loader&#x27;,&#x27;css-loader&#x27;] &#125;, &#123; test: /\\.(jpg|png|gif)$/, loader: &#x27;url-loader&#x27;, options: &#123; limit: 8 * 1024, name: &#x27;[hash:10].[ext]&#x27;, esModule: false, outputPath: &#x27;imgs&#x27; &#125; &#125;, &#123; test: /\\.html$/, loader: &#x27;html-loader&#x27; &#125;, &#123; exclude: /\\.(html|js|css|less|jpg|png|gif)/, loader: &#x27;file-loader&#x27;, options: &#123; name: &#x27;[hash:10].[ext]&#x27;, outputPath: &#x27;media&#x27; &#125; &#125; ] &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;) ], mode: &#x27;development&#x27;, devServer: &#123; contentBase: resolve(__dirname,&#x27;build&#x27;), compress: true, port: 3000, hot: true &#125;, devtool: &#x27;source-map&#x27; // devtool: &#x27;inlinesourece-map&#x27;&#125;/* source-map：一种提供源代码到构建后代码映射技术（如果构建后代码出错了，通过映射可以追踪到源代码错误） [inline-|hidden-|eval-][nosources-][cheap-[module-]]sourece-map source-map：外部 错误代码准确信息 和 源代码的错误位置 inlinesourece-map：内联 只生成一个内联 source-map 错误代码准确信息 和 源代码的错误位置 hidden-sourece-map：外部 错误代码准确信息，但是没有错误位置 不能追踪源代码错误，只能提示到构建后代码错误位置 eval-sourece-map：内联 每一个文件都生成对应的source-map，都在eval 错误代码准确信息 和 源代码的错误位置 nosources-sourece-map 错误代码准确信息，但没有任何源代码信息 cheap-sourece-map 错误代码准确信息 和 源代码的错误位置 只能精确到行 cheap-module-sourece-map 错误代码准确信息 和 源代码的错误位置 module 会将 lodaer 的 source map 加入进来 内联和外部区别：1.外部生成了文件，内联没有 2.内联构建速度更快 如何选择？ 开发环境：速度快，调试更友好 速度快（eval &gt; inline &gt; cheap &gt; ...） 最快：eval-cheap-source-map &gt; eval-source-map 调试友好：source-map &gt; cheap-module-sourece-map &gt; cheap-sourece-map 综合考虑，推荐：eval-source-map 生产环境：源代码要不要隐藏？调试要不要更友好 内联会让代码体积非常大，内联全部排除 隐藏源代码：nosources-sourece-map hidden-sourece-map*/","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P22 oneOf","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P22 oneOf","date":"2020-11-30T16:00:00.000Z","updated":"2022-06-15T08:32:50.661Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P22 oneOf/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P22%20oneOf/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 什么是oneOf优化匹配loader，loader 只会匹配一个，避免多个loader多次匹配，提升速度。 注意：不能有两个配置处理同一个类型文件，第二个loader将失效。 如何使用编写配置文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117const &#123; resolve &#125; = require(&quot;path&quot;);const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);const OptimizeCssAssetsWebpackPlugin = require(&#x27;optimize-css-assets-webpack-plugin&#x27;);const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);process.env.NODE_ENV = &#x27;production&#x27;;const commonCssLoader = [ MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;, &#x27;postcss-loader&#x27;];module.exports = &#123; entry: &#x27;./src/js/index.js&#x27;, output: &#123; filename: &#x27;js/built.js&#x27;, path: resolve(__dirname, &#x27;build&#x27;), publicPath:&#x27;./&#x27; &#125;, module: &#123; rules: [ &#123; test: /\\.js$/, exclude: /node_modules/, enforce: &#x27;pre&#x27;, loader: &#x27;eslint-loader&#x27;, options: &#123; fix: true &#125; &#125;, &#123; /* [优化]oneOf 以下 loader 只会匹配一个，避免多个loader多次匹配 注意：不能有两个配置处理同一个类型文件 */ oneOf: [ &#123; test: /\\.css$/, use: [...commonCssLoader] &#125;, &#123; test: /\\.less$/, use: [...commonCssLoader, &#x27;less-loader&#x27;] &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: &#x27;babel-loader&#x27;, options: &#123; presets: [ [ &#x27;@babel/preset-env&#x27;, &#123; useBuiltIns: &#x27;entry&#x27;, corejs: &#123; version: 3 &#125;, targets: &#123; chrome: &#x27;60&#x27;, firefox: &quot;60&quot;, ie: &#x27;9&#x27;, safari: &#x27;10&#x27;, edge: &#x27;17&#x27; &#125; &#125; ] ], &quot;plugins&quot;: [&quot;@babel/plugin-transform-runtime&quot;] &#125; &#125;, &#123; test: /\\.(jpg|png|gif)/, loader: &#x27;url-loader&#x27;, options: &#123; limit: 8 * 1024, name: &#x27;[hash:10].[ext]&#x27;, outputPath: &#x27;imgs&#x27;, esModule: false &#125; &#125;, &#123; test: /\\.html$/, loader: &#x27;html-loader&#x27; &#125;, &#123; exclude: /\\.(js|css|less|html|jpg|png|gif)/, loader: &#x27;file-loader&#x27;, options: &#123; outputPath: &#x27;media&#x27; &#125; &#125; ] &#125; ] &#125;, plugins: [ new MiniCssExtractPlugin(&#123; filename: &#x27;css/built.css&#x27; &#125;), new OptimizeCssAssetsWebpackPlugin(), new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27;, minify: &#123; collapseWhitespace: true, removeComments: true &#125; &#125;) ], mode: &#x27;production&#x27;, devServer: &#123; contentBase: resolve(__dirname,&#x27;build&#x27;), compress: true, port: 3000 &#125;&#125;;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P23 缓存","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P23 缓存","date":"2020-11-30T16:00:00.000Z","updated":"2022-06-15T08:32:50.662Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P23 缓存/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P23%20%E7%BC%93%E5%AD%98/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 两种缓存 babel缓存：js兼容低版本浏览器相关的js文件，第二次打包速度更快 文件资源缓存：解决用户浏览器第一次请求资源后，将缓存在用户本地。当资源文件需要更新时，及时让用户浏览器请求最新的资源文件。 编写配置文件webpack.config.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129const &#123; resolve &#125; = require(&quot;path&quot;);const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);const OptimizeCssAssetsWebpackPlugin = require(&#x27;optimize-css-assets-webpack-plugin&#x27;);const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);process.env.NODE_ENV = &#x27;production&#x27;;/* 两种缓存： babel 缓存 --&gt; 让第二次打包速度更快 cacheDirectory: true 文件资源缓存 --&gt; 上线代码优化，多使用用户浏览器本地缓存，并且解决当服务端资源更新时，及时获取新版本的资源 hash: 每次webpack构建时会生成一个唯一的hash值 问题：因为js和css同时使用一个hash值，如果重新打包，会导致所有缓存失效。 chunkhash：根据chunk生成的hash值。如果打包来源同一个chunk，那么hash值就一样 问题：js和css的值还是一样的，因为css是在js中被引入的，所以同属于一个chunk (推荐)contenthash：根据文件的内容生成hash值。不同文件hash值一定不一样。*/const commonCssLoader = [ MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;, &#x27;postcss-loader&#x27;];module.exports = &#123; entry: &#x27;./src/js/index.js&#x27;, output: &#123; // contenthash变化，表示js缓存更新 filename: &#x27;js/built.[contenthash:10].js&#x27;, path: resolve(__dirname, &#x27;build&#x27;), publicPath:&#x27;./&#x27; &#125;, module: &#123; rules: [ &#123; test: /\\.js$/, exclude: /node_modules/, enforce: &#x27;pre&#x27;, loader: &#x27;eslint-loader&#x27;, options: &#123; fix: true &#125; &#125;, &#123; oneOf: [ &#123; test: /\\.css$/, use: [...commonCssLoader] &#125;, &#123; test: /\\.less$/, use: [...commonCssLoader, &#x27;less-loader&#x27;] &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: &#x27;babel-loader&#x27;, options: &#123; presets: [ [ &#x27;@babel/preset-env&#x27;, &#123; useBuiltIns: &#x27;entry&#x27;, corejs: &#123; version: 3 &#125;, targets: &#123; chrome: &#x27;60&#x27;, firefox: &quot;60&quot;, ie: &#x27;9&#x27;, safari: &#x27;10&#x27;, edge: &#x27;17&#x27; &#125; &#125; ] ], &quot;plugins&quot;: [&quot;@babel/plugin-transform-runtime&quot;], // 开启babel缓存 // 第二次构建时，会读取之前的缓存 cacheDirectory: true &#125; &#125;, &#123; test: /\\.(jpg|png|gif)/, loader: &#x27;url-loader&#x27;, options: &#123; limit: 8 * 1024, name: &#x27;[hash:10].[ext]&#x27;, outputPath: &#x27;imgs&#x27;, esModule: false &#125; &#125;, &#123; test: /\\.html$/, loader: &#x27;html-loader&#x27; &#125;, &#123; exclude: /\\.(js|css|less|html|jpg|png|gif)/, loader: &#x27;file-loader&#x27;, options: &#123; outputPath: &#x27;media&#x27; &#125; &#125; ] &#125; ] &#125;, plugins: [ new MiniCssExtractPlugin(&#123; // contenthash变化，表示css缓存更新 filename: &#x27;css/built.[contenthash:10].css&#x27; &#125;), new OptimizeCssAssetsWebpackPlugin(), new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27;, minify: &#123; collapseWhitespace: true, removeComments: true &#125; &#125;) ], mode: &#x27;production&#x27;, devServer: &#123; contentBase: resolve(__dirname,&#x27;build&#x27;), compress: true, port: 3000 &#125;&#125;; 这里使用 nodejs 开启服务器。可以看到，使用js写的服务器开启了强制用户浏览器缓存资源，时效是1小时。 server.js 1234567891011121314151617/* 服务器代码 启动服务器指令： 方式一： npm i nodemon -g nodemon server.js 方式二： node server.js*/const express = require(&#x27;express&#x27;);const app = express();app.use(express.static(&#x27;build&#x27;, &#123; maxAge: 1000 * 3600 &#125;));app.listen(3000);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P24 tree shaking","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P24 tree shaking","date":"2020-11-30T16:00:00.000Z","updated":"2022-06-15T08:32:50.663Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P24 tree shaking/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P24%20tree%20shaking/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 什么是tree shaking树摇。使用到的组件相当于绿色的树叶，未使用到的组件相当于枯萎的树叶。通过摇晃树，去除枯萎的树叶。在这里，就是去除未使用的代码，精简代码体积。 如何使用满足以下两个条件，即默认开启： 必须使用 ES6 模块化 开启 production 环境 如果遇到问题，可以尝试在 package.json 加入： 1&quot;sideEffects&quot;:false 所有代码都没有副作用，都进行 tree shaking。 问题：可能会把 css&#x2F;@babel&#x2F;polyfill文件干掉。 为了避免以上问题，可以排除： 1&quot;sideEffects&quot;:[&quot;*.css&quot;]","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P15 js语法检查eslint","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P15 js语法检查eslint","date":"2020-11-29T16:00:00.000Z","updated":"2022-06-15T08:32:50.658Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P15 js语法检查eslint/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P15%20js%E8%AF%AD%E6%B3%95%E6%A3%80%E6%9F%A5eslint/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 #### 步骤下载包： 1npm i eslint eslint-loader eslint-config-airbnb-base eslint-plugin-import -D 编写配置文件： webpack.config.js 123456789101112131415161718192021222324252627282930313233343536373839const &#123; resolve &#125; = require(&#x27;path&#x27;);const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);module.exports = &#123; entry: &#x27;./src/js/index.js&#x27;, output: &#123; filename: &#x27;js/built.js&#x27;, path: resolve(__dirname, &#x27;build&#x27;) &#125;, module: &#123; rules: [ /* 语法检查：eslint-loader 依赖于 eslint 注意：只检查自己写的源代码，第三方的库是不检查的 设置检查规则： package.json 中 eslintConfig 中设置 airbnb 代码风格的一种 airbnb --&gt; eslint-config-airbnb-base eslint-plugin-import eslint */ &#123; test: /\\.js$/, // 排除检查第三方库 exclude: /node_modules/, loader: &#x27;eslint-loader&#x27;, options: &#123; // 自动修复 eslint 错误 fix: true &#125; &#125; ] &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;) ], mode: &#x27;development&#x27;,&#125; 还需要在 package.json 加入eslintConfig浏览器配置 package.json 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&#123; &quot;name&quot;: &quot;webpack_code&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; &#125;, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;devDependencies&quot;: &#123; &quot;@babel/core&quot;: &quot;^7.12.9&quot;, &quot;@babel/preset-env&quot;: &quot;^7.12.7&quot;, &quot;babel-loader&quot;: &quot;^8.2.2&quot;, &quot;css-loader&quot;: &quot;^5.0.1&quot;, &quot;eslint&quot;: &quot;^7.14.0&quot;, &quot;eslint-config-airbnb-base&quot;: &quot;^14.2.1&quot;, &quot;eslint-loader&quot;: &quot;^4.0.2&quot;, &quot;eslint-plugin-import&quot;: &quot;^2.22.1&quot;, &quot;file-loader&quot;: &quot;^6.2.0&quot;, &quot;html-loader&quot;: &quot;^1.3.2&quot;, &quot;html-webpack-plugin&quot;: &quot;^5.0.0-alpha.14&quot;, &quot;less&quot;: &quot;^3.12.2&quot;, &quot;less-loader&quot;: &quot;^7.1.0&quot;, &quot;mini-css-extract-plugin&quot;: &quot;^1.3.1&quot;, &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^5.0.4&quot;, &quot;postcss-loader&quot;: &quot;^4.1.0&quot;, &quot;postcss-preset-env&quot;: &quot;^6.7.0&quot;, &quot;style-loader&quot;: &quot;^2.0.0&quot;, &quot;url-loader&quot;: &quot;^4.1.1&quot;, &quot;webpack&quot;: &quot;^5.9.0&quot;, &quot;webpack-cli&quot;: &quot;^4.2.0&quot;, &quot;webpack-dev-server&quot;: &quot;^3.11.0&quot; &#125;, &quot;dependencies&quot;: &#123;&#125;, &quot;browserslist&quot;: &#123; &quot;development&quot;: [ &quot;last 1 chrome version&quot;, &quot;last 1 firefox version&quot;, &quot;last 1 safari version&quot; ], &quot;production&quot;: [ &quot;&gt;0.2%&quot;, &quot;not dead&quot;, &quot;not op_mini all&quot; ] &#125;, &quot;eslintConfig&quot;: &#123; &quot;extends&quot;: &quot;airbnb-base&quot; &#125; &#125; 例如 JavaScript 代码写的不规范： 缺少空格，不好看，也算入不规范。 12345function add(x,y)&#123; return x+y;&#125;console.log(add(2,3)); 报错信息： 123456789101112131415161718192021222324252627282930313233PS E:\\Project_atguigu_webpack\\12.js语法检查&gt; webpack[webpack-cli] Compilation finishedasset js/built.js 845 bytes [emitted] (name: main)asset index.html 278 bytes [emitted]./src/js/index.js 1 bytes [built] [code generated]webpack 5.9.0 compiled successfully in 1555 msPS E:\\Project_atguigu_webpack\\12.js语法检查&gt; webpack[webpack-cli] Compilation finishedasset js/built.js 917 bytes [emitted] (name: main)asset index.html 278 bytes [compared for emit]./src/js/index.js 64 bytes [built] [code generated] [1 error]ERROR in ./src/js/index.jsModule Error (from ../node_modules/eslint-loader/dist/cjs.js):E:\\Project_atguigu_webpack\\12.js语法检查\\src\\js\\index.js 1:15 error A space is required after &#x27;,&#x27; comma-spacing 1:18 error Missing space before opening brace space-before-blocks 1:19 error Expected linebreaks to be &#x27;LF&#x27; but found &#x27;CRLF&#x27; linebreak-style 2:1 error Expected indentation of 2 spaces but found 4 indent 2:13 error Operator &#x27;+&#x27; must be spaced space-infix-ops 2:16 error Expected linebreaks to be &#x27;LF&#x27; but found &#x27;CRLF&#x27; linebreak-style 3:2 error Expected linebreaks to be &#x27;LF&#x27; but found &#x27;CRLF&#x27; linebreak-style 4:1 error Expected linebreaks to be &#x27;LF&#x27; but found &#x27;CRLF&#x27; linebreak-style 5:1 warning Unexpected console statement no-console 5:18 error A space is required after &#x27;,&#x27; comma-spacing 5:23 error Newline required at end of file but not found eol-last✖ 11 problems (10 errors, 1 warning) 10 errors and 0 warnings potentially fixable with the `--fix` option.webpack 5.9.0 compiled with 1 error in 813 ms 使用 fix: true 可以让 eslint 自动修复不规范的地方。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P17 压缩html和js","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P17 压缩html和js","date":"2020-11-29T16:00:00.000Z","updated":"2022-06-15T08:32:50.659Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P17 压缩html和js/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P17%20%E5%8E%8B%E7%BC%A9html%E5%92%8Cjs/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 压缩js压缩JavaScript非常简单，只需要把开发模式改为 生产模式 即可。 编写配置文件： 123456789101112131415161718const &#123; resolve &#125; = require(&#x27;path&#x27;);const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);module.exports = &#123; entry: &#x27;./src/js/index.js&#x27;, output: &#123; filename: &#x27;js/built.js&#x27;, path: resolve(__dirname, &#x27;build&#x27;) &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;) ], // 生产环境下会自动压缩js代码 mode: &#x27;production&#x27;,&#125; 压缩html配置 HtmlWebpackPlugin 插件即可。 1234567891011121314151617181920212223const &#123; resolve &#125; = require(&#x27;path&#x27;);const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);module.exports = &#123; entry: &#x27;./src/js/index.js&#x27;, output: &#123; filename: &#x27;js/built.js&#x27;, path: resolve(__dirname, &#x27;build&#x27;) &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27;, minify: &#123; // 移除空格 collapseWhitespace: true, // 移除注释 removeComments: true &#125; &#125;) ], mode: &#x27;production&#x27;,&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P16 js兼容性处理eslint","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P16 js兼容性处理eslint","date":"2020-11-29T16:00:00.000Z","updated":"2022-06-15T08:32:50.659Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P16 js兼容性处理eslint/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P16%20js%E5%85%BC%E5%AE%B9%E6%80%A7%E5%A4%84%E7%90%86eslint/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 #### 步骤共同的依赖1npm i babel-loader @babel/core -D 1.基本js兼容性处理 基本js兼容性处理 –&gt; @babel&#x2F;preset-env 问题：只能转换基本的语法，如promise不能转换 下载包： 1npm i @babel/preset-env -D 编写配置文件： 123456789101112131415161718192021222324252627282930313233343536const &#123; resolve &#125; = require(&#x27;path&#x27;);const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);module.exports = &#123; entry: &#x27;./src/js/index.js&#x27;, output: &#123; filename: &#x27;js/built.js&#x27;, path: resolve(__dirname, &#x27;build&#x27;) &#125;, module: &#123; rules: [ /* js兼容性处理：babel-loader @babel/core @babel/preset-env 1. 基本js兼容性处理 --&gt; @babel/preset-env 问题：只能转换基本的语法，如promise不能转换 */ &#123; test: /\\.js$/, // 防止转换第三方库 exclude: /node_modules/, loader: &#x27;babel-loader&#x27;, options: &#123; // 预设：指示 babel 做怎么样的兼容性处理 presets: [&#x27;@babel/preset-env&#x27;] &#125; &#125; ] &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;) ], mode: &#x27;development&#x27;,&#125; 2.全部js兼容性处理 全部js兼容性处理 –&gt; @babel&#x2F;polyfill 问题：我只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大 下载包： 1npm i @babel/polyfill -D 只需要在webpack执行入口js文件内引入： 1import &#x27;@babel/polyfill&#x27; 3.按需加载 需要做兼容性处理的就做：按需加载 –&gt; corejs 下载包： 1npm i core-js -D @babel&#x2F;core7以上版本，还需要下载 @babel/plugin-transform-runtime 包 1npm i @babel/plugin-transform-runtime -D 编写配置文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657const &#123; resolve &#125; = require(&#x27;path&#x27;);const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);module.exports = &#123; entry: &#x27;./src/js/index.js&#x27;, output: &#123; filename: &#x27;js/built.js&#x27;, path: resolve(__dirname, &#x27;build&#x27;) &#125;, module: &#123; rules: [ /* js兼容性处理：babel-loader @babel/core @babel/preset-env 1. 基本js兼容性处理 --&gt; @babel/preset-env 问题：只能转换基本的语法，如promise不能转换 2. 全部js兼容性处理 --&gt; @babel/polyfill 问题：我只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大 3. 需要做兼容性处理的就做：按需加载 --&gt; core-js */ &#123; test: /\\.js$/, // 防止转换第三方库 exclude: /node_modules/, loader: &#x27;babel-loader&#x27;, options: &#123; presets: [ [ &#x27;@babel/preset-env&#x27;, &#123; useBuiltIns: &#x27;entry&#x27;, corejs: &#123; version: 3 &#125;, targets: &#123; chrome: &#x27;60&#x27;, firefox: &quot;60&quot;, ie: &#x27;9&#x27;, safari: &#x27;10&#x27;, edge: &#x27;17&#x27; &#125; &#125; ] ], //利用 @babel/plugin-transform-runtime 插件还能以沙箱垫片的方式防止污染全局， 并抽离公共的 helper function , 以节省代码的冗余 &quot;plugins&quot;: [&quot;@babel/plugin-transform-runtime&quot;] &#125; &#125; ] &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;) ], mode: &#x27;development&#x27;,&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P18 生产环境基本配置","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P18 生产环境基本配置","date":"2020-11-29T16:00:00.000Z","updated":"2022-06-15T08:32:50.659Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P18 生产环境基本配置/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P18%20%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 项目结构– project&#x2F; |– build&#x2F; |– src&#x2F; ​ |– css&#x2F; ​ |– imgs&#x2F; ​ |– js&#x2F; ​ |– index.js （webpack启动入口） ​ |– media&#x2F; ​ |– index.html 编写配置文件webpack.config.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113const &#123; resolve &#125; = require(&quot;path&quot;);const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);const OptimizeCssAssetsWebpackPlugin = require(&#x27;optimize-css-assets-webpack-plugin&#x27;);const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);// 定义nodejs环境变量 决定使用 browserslist 哪个环境process.env.NODE_ENV = &#x27;production&#x27;;// 复用 loaderconst commonCssLoader = [ // package.json -&gt; browserslist MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;, &#x27;postcss-loader&#x27;];module.exports = &#123; entry: &#x27;./src/js/index.js&#x27;, output: &#123; filename: &#x27;js/built.js&#x27;, path: resolve(__dirname, &#x27;build&#x27;), publicPath:&#x27;./&#x27; &#125;, module: &#123; rules: [ &#123; test: /\\.css$/, use: [...commonCssLoader] &#125;, &#123; test: /\\.less$/, use: [...commonCssLoader, &#x27;less-loader&#x27;] &#125;, &#123; // package.json -&gt; eslintConfig test: /\\.js$/, exclude: /node_modules/, // 优先执行 enforce: &#x27;pre&#x27;, loader: &#x27;eslint-loader&#x27;, options: &#123; fix: true &#125; &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: &#x27;babel-loader&#x27;, options: &#123; presets: [ [ &#x27;@babel/preset-env&#x27;, &#123; useBuiltIns: &#x27;entry&#x27;, corejs: &#123; version: 3 &#125;, targets: &#123; chrome: &#x27;60&#x27;, firefox: &quot;60&quot;, ie: &#x27;9&#x27;, safari: &#x27;10&#x27;, edge: &#x27;17&#x27; &#125; &#125; ] ], &quot;plugins&quot;: [&quot;@babel/plugin-transform-runtime&quot;] &#125; &#125;, &#123; test: /\\.(jpg|png|gif)/, loader: &#x27;url-loader&#x27;, options: &#123; limit: 8 * 1024, name: &#x27;[hash:10].[ext]&#x27;, outputPath: &#x27;imgs&#x27;, esModule: false &#125; &#125;, &#123; test: /\\.html$/, loader: &#x27;html-loader&#x27; &#125;, &#123; exclude: /\\.(js|css|less|html|jpg|png|gif)/, loader: &#x27;file-loader&#x27;, options: &#123; outputPath: &#x27;media&#x27; &#125; &#125; ] &#125;, plugins: [ new MiniCssExtractPlugin(&#123; filename: &#x27;css/built.css&#x27; &#125;), new OptimizeCssAssetsWebpackPlugin(), new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27;, minify: &#123; collapseWhitespace: true, removeComments: true &#125; &#125;) ], mode: &#x27;production&#x27;, devServer: &#123; contentBase: resolve(__dirname,&#x27;build&#x27;), compress: true, port: 3000 &#125;&#125;; postcss.config.js 12345module.exports = &#123; plugins: [ require(&#x27;postcss-preset-env&#x27;) ]&#125; package.json 123456789101112131415&quot;browserslist&quot;: &#123; &quot;development&quot;: [ &quot;last 1 chrome version&quot;, &quot;last 1 firefox version&quot;, &quot;last 1 safari version&quot; ], &quot;production&quot;: [ &quot;&gt;0.2%&quot;, &quot;not dead&quot;, &quot;not op_mini all&quot; ]&#125;,&quot;eslintConfig&quot;: &#123; &quot;extends&quot;: &quot;airbnb-base&quot;&#125; 注意，已知存在的问题。 css内引用的图片，错误路径 css&#x2F;imgs&#x2F;xxx.jpg ，导致图片无法正常显示。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P09 devServer","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P09 devServer ","date":"2020-11-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.656Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P09 devServer /","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P09%20devServer%20/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 搭建devServer编写webpack配置文件1234567891011121314151617181920212223242526272829303132333435const &#123; resolve &#125; = require(&#x27;path&#x27;);const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);module.exports = &#123; entry: &#x27;./src/index.js&#x27;, output: &#123; filename: &#x27;built.js&#x27;, path: resolve(__dirname,&#x27;build&#x27;) &#125;, module: &#123; rules: [ ] &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template:&#x27;./src/index.html&#x27; &#125;) ], mode: &#x27;development&#x27;, // 开发服务器 devServer：用来自动化（自动编译，自动打开浏览器，自动刷新浏览器） // 特点：指挥在内存中编译打包，不会有任何输出 // 启动devServer指令为： npx webpack-dev-server // webpack-cli4 启动devServer指令为： npx webpack serve devServer: &#123; contentBase: resolve(__dirname,&#x27;build&#x27;), // 启动 gzip 压缩 compress: true, // 端口号 port: 3000 // 自动打开浏览器 // open: true &#125;&#125; 下载安装npm包： 1npm i webpack-dev-server -D 踩坑执行devServer命令： 1npx webpack-dev-server 报错信息： 123456789101112131415161718192021222324PS E:\\Project_atguigu_webpack\\08.devServer&gt; npx webpack-dev-serverinternal/modules/cjs/loader.js:883 throw err; ^Error: Cannot find module &#x27;webpack-cli/bin/config-yargs&#x27;Require stack:- E:\\Project_atguigu_webpack\\node_modules\\webpack-dev-server\\bin\\webpack-dev-server.js at Function.Module._resolveFilename (internal/modules/cjs/loader.js:880:15) at Function.Module._load (internal/modules/cjs/loader.js:725:27) at Module.require (internal/modules/cjs/loader.js:952:19) at require (internal/modules/cjs/helpers.js:88:18) at Object.&lt;anonymous&gt; (E:\\Project_atguigu_webpack\\node_modules\\webpack-dev-server\\bin\\webpack-dev-server.js:65:1) at Module._compile (internal/modules/cjs/loader.js:1063:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10) at Module.load (internal/modules/cjs/loader.js:928:32) at Function.Module._load (internal/modules/cjs/loader.js:769:14) at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12) &#123; code: &#x27;MODULE_NOT_FOUND&#x27;, requireStack: [ &#x27;E:\\\\Project_atguigu_webpack\\\\node_modules\\\\webpack-dev-server\\\\bin\\\\webpack-dev-server.js&#x27; ]&#125; 这是由于 webpack-cli4 和 webpack-dev-server 不兼容导致的。 在 webpack-cli4 中，执行devServer命令： 1npx webpack serve 项目正常启动。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P10 开发环境基本配置","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P10 开发环境基本配置","date":"2020-11-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.656Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P10 开发环境基本配置/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P10%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 通用配置文件以下可作为开发时webpack配置文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566/** * 开发环境配置：能让代码运行即可 */const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);const &#123; resolve &#125; = require(&#x27;path&#x27;);module.exports = &#123; entry: &#x27;./src/js/index.js&#x27;, output: &#123; filename: &#x27;js/built.js&#x27;, path: resolve(__dirname,&#x27;build&#x27;), publicPath:&#x27;./&#x27; &#125;, module: &#123; rules: [ &#123; // 处理less test: /\\.less$/, use: [&#x27;style-loader&#x27;,&#x27;css-loader&#x27;,&#x27;less-loader&#x27;] &#125;, &#123; // 处理css test: /\\.css$/, use: [&#x27;style-loader&#x27;,&#x27;css-loader&#x27;] &#125;, &#123; // 处理css中的图片 test: /\\.(jpg|png|gif)$/, loader: &#x27;url-loader&#x27;, options: &#123; limit: 8 * 1024, name: &#x27;[hash:10].[ext]&#x27;, esModule: false, outputPath: &#x27;imgs&#x27; &#125; &#125;, &#123; // 处理html中的图片 test: /\\.html$/, loader: &#x27;html-loader&#x27; &#125;, &#123; // 处理其他资源 exclude: /\\.(html|js|css|less|jpg|png|gif)/, loader: &#x27;file-loader&#x27;, options: &#123; name: &#x27;[hash:10].[ext]&#x27;, outputPath: &#x27;media&#x27; &#125; &#125; ] &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;) ], mode: &#x27;development&#x27;, devServer: &#123; contentBase: resolve(__dirname,&#x27;build&#x27;), compress: true, port: 3000 &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P12 提取css成单独文件","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P12 提取css成单独文件","date":"2020-11-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.657Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P12 提取css成单独文件/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P12%20%E6%8F%90%E5%8F%96css%E6%88%90%E5%8D%95%E7%8B%AC%E6%96%87%E4%BB%B6/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 编写webpack配置文件之前的css样式直接写到html中。现在要将css单独以文件的形式输出。 12345678910111213141516171819202122232425262728293031323334353637383940414243const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);const &#123; resolve &#125; = require(&#x27;path&#x27;);module.exports = &#123; entry: &#x27;./src/js/index.js&#x27;, output: &#123; filename: &#x27;js/built.js&#x27;, path: resolve(__dirname,&#x27;build&#x27;) &#125;, module: &#123; rules: [ &#123; test: /\\.css$/, use: [ // 创建 style 标签，将样式放入 // &#x27;style-loader&#x27;, // 取代 style-loader ， 提取js中的css成单独文件 MiniCssExtractPlugin.loader, // 将css文件整合到js文件中 &#x27;css-loader&#x27; ] &#125; ] &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;), new MiniCssExtractPlugin(&#123; // 对输出的css文件重命名 // filename: &#x27;static/css/[name].[chunkhash:8].css&#x27; filename: &#x27;css/built.css&#x27; &#125;) ], mode: &#x27;development&#x27;, devServer: &#123; contentBase: resolve(__dirname,&#x27;build&#x27;), compress: true, port: 3000 &#125;&#125; 控制台下载插件： 1npm i mini-css-extract-plugin -D 踩坑webpack5 与 mini-css-extract-plugin 插件不兼容，目前还未找到解决办法。 报错信息： 12345678910111213141516171819202122232425262728293031323334353637383940414243PS E:\\Project_atguigu_webpack\\09.提取css成单独文件&gt; webpack(node:17692) [DEP_WEBPACK_SINGLE_ENTRY_PLUGIN] DeprecationWarning: SingleEntryPlugin was renamed to EntryPlugin(Use `node --trace-deprecation ...` to show where the warning was created)[webpack-cli] Compilation finishedasset js/built.js 8.52 KiB [compared for emit] (name: main)asset index.html 304 bytes [compared for emit]runtime modules 931 bytes 4 modulescacheable modules 126 bytes ./src/js/index.js 48 bytes [built] [code generated] ./src/css/a.css 39 bytes [built] [code generated] [1 error] ./src/css/b.css 39 bytes [built] [code generated] [1 error]ERROR in ./src/css/a.cssModule build failed (from ../node_modules/mini-css-extract-plugin/dist/loader.js): TypeError: The &#x27;compilation&#x27; argument must be an instance of Compilation at getCompilationHooks (E:\\Project_atguigu_webpack\\node_modules\\webpack\\lib\\javascript\\JavascriptModulesPlugin.js:119:10) at E:\\Project_atguigu_webpack\\node_modules\\webpack\\lib\\javascript\\CommonJsChunkFormatPlugin.js:30:19 at Hook.eval [as call] (eval at create (C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\node_modules\\tapable\\lib\\HookCodeFactory.js:19:10), &lt;anonymous&gt;:7:1) at Hook.CALL_DELEGATE [as _call] (C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\node_modules\\tapable\\lib\\Hook.js:14:14) at Compiler.newCompilation (C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\lib\\Compiler.js:942:30) at C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\lib\\Compiler.js:984:29 at Hook.eval [as callAsync] (eval at create (C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\node_modules\\tapable\\lib\\HookCodeFactory.js:33:10), &lt;anonymous&gt;:6:1) at Hook.CALL_ASYNC_DELEGATE [as _callAsync] (C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\node_modules\\tapable\\lib\\Hook.js:18:14) at Compiler.compile (C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\lib\\Compiler.js:979:28) at Compiler.runAsChild (C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\lib\\Compiler.js:494:8) @ ./src/js/index.js 1:0-22ERROR in ./src/css/b.cssModule build failed (from ../node_modules/mini-css-extract-plugin/dist/loader.js): TypeError: The &#x27;compilation&#x27; argument must be an instance of Compilation at getCompilationHooks (E:\\Project_atguigu_webpack\\node_modules\\webpack\\lib\\javascript\\JavascriptModulesPlugin.js:119:10) at E:\\Project_atguigu_webpack\\node_modules\\webpack\\lib\\javascript\\CommonJsChunkFormatPlugin.js:30:19 at Hook.eval [as call] (eval at create (C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\node_modules\\tapable\\lib\\HookCodeFactory.js:19:10), &lt;anonymous&gt;:7:1) at Hook.CALL_DELEGATE [as _call] (C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\node_modules\\tapable\\lib\\Hook.js:14:14) at Compiler.newCompilation (C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\lib\\Compiler.js:942:30) at C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\lib\\Compiler.js:984:29 at Hook.eval [as callAsync] (eval at create (C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\node_modules\\tapable\\lib\\HookCodeFactory.js:33:10), &lt;anonymous&gt;:6:1) at Hook.CALL_ASYNC_DELEGATE [as _callAsync] (C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\node_modules\\tapable\\lib\\Hook.js:18:14) at Compiler.compile (C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\lib\\Compiler.js:979:28) at Compiler.runAsChild (C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules\\webpack\\lib\\Compiler.js:494:8) @ ./src/js/index.js 2:0-22webpack 5.8.0 compiled with 2 errors in 309 ms 临时解决方案（可能存在问题，不推荐）： 为了后续的学习，webpack降级至4，webpack-cli降级至3 1npm i webpack@4 webpack-cli@3 -g 控制台的webpack和webpack-cli是全局安装的，安装路径为：C:\\Users\\Hooyantsing\\AppData\\Roaming\\npm\\node_modules 完成降级后，html-webpack-plugin 插件也需要降级。（之前为了兼容webpack5，使用的是测试版本，版本相对高，详见 P06 打包html资源） 1npm install html-webpack-plugin -D","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P13 css兼容性处理","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P13 css兼容性处理","date":"2020-11-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.657Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P13 css兼容性处理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P13%20css%E5%85%BC%E5%AE%B9%E6%80%A7%E5%A4%84%E7%90%86/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 #### 步骤下载包： 1npm i postcss-loader postcss-preset-env -D 编写配置文件： webpack.config.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);const &#123; resolve &#125; = require(&#x27;path&#x27;);// 设置node.js环境变量process.env.NODE_ENV = &#x27;development&#x27;;module.exports = &#123; entry: &#x27;./src/js/index.js&#x27;, output: &#123; filename: &#x27;js/built.js&#x27;, path: resolve(__dirname, &#x27;build&#x27;) &#125;, module: &#123; rules: [ &#123; test: /\\.css$/, use: [ MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;, /* css兼容性处理：postcss --&gt; postcss-loader postcss-preset-env 帮postcss找到package.json中的browserslist里面的配置，通过配置加载指定的css兼容性样式 package.json 加入以下配置 &quot;browserslist&quot; : &#123; // 开发环境配置 &quot;development&quot;: [ &quot;last 1 chrome version&quot;, &quot;last 1 firefox version&quot;, &quot;last 1 safari version&quot; ], // 生产环境配置（默认） &quot;production&quot;: [ &quot;&gt;0.2%&quot;, &quot;not dead&quot;, &quot;not op_mini all&quot; ] &#125; 选择开发环境，需要配置 process.env.NODE_ENV = &#x27;development&#x27;; */ // 使用loader默认配置 // &#x27;postcss-loader&#x27; // 修改loader配置 &#123; loader: &#x27;postcss-loader&#x27;, options: &#123; ident: &#x27;postcss&#x27;, plugins: () =&gt; &#123; // postcss 的插件 postcss-preset-env require(&#x27;postcss-preset-env&#x27;) &#125; &#125; &#125; ] &#125; ] &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;), new MiniCssExtractPlugin(&#123; filename: &#x27;css/built.css&#x27; &#125;) ], mode: &#x27;development&#x27;, devServer: &#123; contentBase: resolve(__dirname, &#x27;build&#x27;), compress: true, port: 3000 &#125;&#125; 还需要在 package.json 加入browserslist浏览器配置 package.json 1234567891011121314151617181920212223242526272829303132333435363738394041424344&#123; &quot;name&quot;: &quot;webpack_code&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; &#125;, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;devDependencies&quot;: &#123; &quot;css-loader&quot;: &quot;^5.0.1&quot;, &quot;file-loader&quot;: &quot;^6.2.0&quot;, &quot;html-loader&quot;: &quot;^1.3.2&quot;, &quot;html-webpack-plugin&quot;: &quot;^5.0.0-alpha.14&quot;, &quot;less&quot;: &quot;^3.12.2&quot;, &quot;less-loader&quot;: &quot;^7.1.0&quot;, &quot;mini-css-extract-plugin&quot;: &quot;^1.3.1&quot;, &quot;postcss-loader&quot;: &quot;^4.1.0&quot;, &quot;postcss-preset-env&quot;: &quot;^6.7.0&quot;, &quot;style-loader&quot;: &quot;^2.0.0&quot;, &quot;url-loader&quot;: &quot;^4.1.1&quot;, &quot;webpack&quot;: &quot;^5.9.0&quot;, &quot;webpack-cli&quot;: &quot;^4.2.0&quot;, &quot;webpack-dev-server&quot;: &quot;^3.11.0&quot; &#125;, &quot;dependencies&quot;: &#123;&#125;, &quot;browserslist&quot; : &#123; &quot;development&quot;: [ &quot;last 1 chrome version&quot;, &quot;last 1 firefox version&quot;, &quot;last 1 safari version&quot; ], &quot;production&quot;: [ &quot;&gt;0.2%&quot;, &quot;not dead&quot;, &quot;not op_mini all&quot; ] &#125; &#125; 踩坑以上配置在新版本里报错。 报错信息： 1234567891011121314151617181920212223242526272829303132333435363738PS E:\\Project_atguigu_webpack\\10.css兼容性处理&gt; webpack[webpack-cli] Compilation finishedasset js/built.js 7.21 KiB [compared for emit] (name: main)asset index.html 304 bytes [compared for emit]runtime modules 931 bytes 4 modulescacheable modules 126 bytes ./src/js/index.js 48 bytes [built] [code generated] ./src/css/a.css 39 bytes [built] [code generated] [1 error] ./src/css/b.css 39 bytes [built] [code generated] [1 error]ERROR in ./src/css/a.cssModule build failed (from ../node_modules/mini-css-extract-plugin/dist/loader.js): ModuleBuildError: Module build failed (from ../node_modules/postcss-loader/dist/cjs.js):ValidationError: Invalid options object. PostCSS Loader has been initialized using an options object that does not match the API schema. - options has an unknown property &#x27;plugins&#x27;. These properties are valid: object &#123; postcssOptions?, execute?, sourceMap? &#125; at validate (E:\\Project_atguigu_webpack\\node_modules\\schema-utils\\dist\\validate.js:104:11) at Object.loader (E:\\Project_atguigu_webpack\\node_modules\\postcss-loader\\dist\\index.js:43:29) at processResult (E:\\Project_atguigu_webpack\\node_modules\\webpack\\lib\\NormalModule.js:583:19) at E:\\Project_atguigu_webpack\\node_modules\\webpack\\lib\\NormalModule.js:676:5 at E:\\Project_atguigu_webpack\\node_modules\\loader-runner\\lib\\LoaderRunner.js:397:11 at E:\\Project_atguigu_webpack\\node_modules\\loader-runner\\lib\\LoaderRunner.js:252:18 @ ./src/js/index.js 1:0-22ERROR in ./src/css/b.cssModule build failed (from ../node_modules/mini-css-extract-plugin/dist/loader.js): ModuleBuildError: Module build failed (from ../node_modules/postcss-loader/dist/cjs.js):ValidationError: Invalid options object. PostCSS Loader has been initialized using an options object that does not match the API schema. - options has an unknown property &#x27;plugins&#x27;. These properties are valid: object &#123; postcssOptions?, execute?, sourceMap? &#125; at validate (E:\\Project_atguigu_webpack\\node_modules\\schema-utils\\dist\\validate.js:104:11) at Object.loader (E:\\Project_atguigu_webpack\\node_modules\\postcss-loader\\dist\\index.js:43:29) at processResult (E:\\Project_atguigu_webpack\\node_modules\\webpack\\lib\\NormalModule.js:583:19) at E:\\Project_atguigu_webpack\\node_modules\\webpack\\lib\\NormalModule.js:676:5 at E:\\Project_atguigu_webpack\\node_modules\\loader-runner\\lib\\LoaderRunner.js:397:11 at E:\\Project_atguigu_webpack\\node_modules\\loader-runner\\lib\\LoaderRunner.js:252:18 @ ./src/js/index.js 2:0-222 ERRORS in child compilationswebpack 5.9.0 compiled with 4 errors in 251 ms 解决方案： 123456789如果按照老师的做法没有成功的，那是用法改变了。你需要在webpack.config.js文件所在目录下创建一个同级的postcss.config.js文件然后写入一下内容module.exports = &#123; plugins: [ //使用postcss插件 require(&#x27;postcss-preset-env&#x27;) ]&#125;最后将webpack文件中的其他配置去掉，改用默认配置&#x27;postcss-loader&#x27; 如下配置 编写配置文件： webpack.config.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);const &#123; resolve &#125; = require(&#x27;path&#x27;);// 设置node.js环境变量process.env.NODE_ENV = &#x27;development&#x27;;module.exports = &#123; entry: &#x27;./src/js/index.js&#x27;, output: &#123; filename: &#x27;js/built.js&#x27;, path: resolve(__dirname, &#x27;build&#x27;) &#125;, module: &#123; rules: [ &#123; test: /\\.css$/, use: [ MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;, /* css兼容性处理：postcss --&gt; postcss-loader postcss-preset-env 帮postcss找到package.json中的browserslist里面的配置，通过配置加载指定的css兼容性样式 package.json 加入以下配置 &quot;browserslist&quot; : &#123; // 开发环境配置 &quot;development&quot;: [ &quot;last 1 chrome version&quot;, &quot;last 1 firefox version&quot;, &quot;last 1 safari version&quot; ], // 生产环境配置（默认） &quot;production&quot;: [ &quot;&gt;0.2%&quot;, &quot;not dead&quot;, &quot;not op_mini all&quot; ] &#125; 选择开发环境，需要配置 process.env.NODE_ENV = &#x27;development&#x27;; */ // 使用loader默认配置 &#x27;postcss-loader&#x27; ] &#125; ] &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;), new MiniCssExtractPlugin(&#123; filename: &#x27;css/built.css&#x27; &#125;) ], mode: &#x27;development&#x27;, devServer: &#123; contentBase: resolve(__dirname, &#x27;build&#x27;), compress: true, port: 3000 &#125;&#125; postcss.config.js 123456module.exports = &#123; plugins: [ //使用postcss插件 require(&#x27;postcss-preset-env&#x27;) ]&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P14 压缩css","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P14 压缩css","date":"2020-11-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.658Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P14 压缩css/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P14%20%E5%8E%8B%E7%BC%A9css/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 #### 步骤下载包： 1npm i optimize-css-assets-webpack-plugin -D 编写配置文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445const &#123; resolve &#125; = require(&#x27;path&#x27;);const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);const OptimizeCssAssetsWebpackPlugin = require(&#x27;optimize-css-assets-webpack-plugin&#x27;);// 设置node.js环境变量process.env.NODE_ENV = &#x27;development&#x27;;module.exports = &#123; entry: &#x27;./src/js/index.js&#x27;, output: &#123; filename: &#x27;js/built.js&#x27;, path: resolve(__dirname, &#x27;build&#x27;) &#125;, module: &#123; rules: [ &#123; test: /\\.css$/, use: [ MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;, &#x27;postcss-loader&#x27; ] &#125; ] &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;), new MiniCssExtractPlugin(&#123; filename: &#x27;css/built.css&#x27; &#125;), // 压缩css new OptimizeCssAssetsWebpackPlugin() ], mode: &#x27;development&#x27;, devServer: &#123; contentBase: resolve(__dirname, &#x27;build&#x27;), compress: true, port: 3000 &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P05 打包样式资源","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P05 打包样式资源","date":"2020-11-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.654Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P05 打包样式资源/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P05%20%E6%89%93%E5%8C%85%E6%A0%B7%E5%BC%8F%E8%B5%84%E6%BA%90/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 引言原生的webpack不能处理css&#x2F;less&#x2F;scss文件，因此需要以下方法。 编写webpack配置文件webpack配置文件名：webpack.config.js 默认采用 commonjs 模块。 module.exports对象包含一下五个属性： entry 执行入口 output 文件输出 module 模块 plugins 插件 mode 模式 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/* webpack.config.js webpack的配置文件 作用：指示webpack干哪些活（当你运行webpack指令时，会加载里面的配置） 所有构建工具都是基于 nodejs 平台运行的 模块默认采用 commonjs */const &#123;resolve&#125; = require(&#x27;path&#x27;);module.exports = &#123; // webpack 配置 // 入口起点 entry:&#x27;./src/index.js&#x27;, // 输出 output:&#123; // 输入文件名 filename:&#x27;built.js&#x27;, // 输出路径 // __dirname (两个_) nodejs 的变量，代表当前文件的目录绝对路径 path:resolve(__dirname,&#x27;build&#x27;) &#125;, module:&#123; rules:[ // 详细 loader 配置 &#123; // 正则，匹配哪些文件 test: /\\.css$/, // 使用哪些 loader 处理 use:[ // use数组中的loader执行顺序：从右至左，从下到上 // 创建 style 标签，将js中的样式资源插入进行，添加到 head 中生效 &#x27;style-loader&#x27;, // 将 css 文件变成 commonjs 模块加载到js中，里面内容是样式字符串 &#x27;css-loader&#x27; ] &#125;, &#123; test:/\\.less$/, use:[ &#x27;style-loader&#x27;, &#x27;css-loader&#x27;, // 将 less 文件编译成 css 文件 // 注意：下载依赖 less 和 less-loader &#x27;less-loader&#x27; ] &#125; ] &#125;, // 插件配置 plugins:[ // 详细插件配置 ], // 模式 &#x27;production&#x27; 生产环境 mode: &#x27;development&#x27;&#125; CSS想要打包css文件，需要使用css-loader和 style-loader 两个loader。 控制台下载loader依赖： 12npm i css-loader -Dnpm i style-loader -D LESS想要打包less文件，需要使用css-loader style-loader和less-loader 三个loader。 控制台下载loader依赖： 其中 less-loader 包含 less 和 less-loader 两个依赖。 1234npm i less -Dnpm i less-loader -Dnpm i css-loader -Dnpm i style-loader -D 打包控制台输入： 1webpack 完成打包。 最后，html直接引用生成的js文件即可。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P06 打包html资源","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P06 打包html资源","date":"2020-11-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.655Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P06 打包html资源/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P06%20%E6%89%93%E5%8C%85html%E8%B5%84%E6%BA%90/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 编写webpack配置文件想要打包html资源，需要使用到 html-webpack-plugin 插件。 12345678910111213141516171819202122232425262728293031/* loader：1.下载 2.使用（配置loader） plugins：1.下载 2.引入 3.使用*/const &#123; resolve &#125; = require(&#x27;path&#x27;);const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);module.exports = &#123; entry: &#x27;./src/index.js&#x27;, output: &#123; filename: &#x27;built.js&#x27;, path: resolve(__dirname,&#x27;build&#x27;) &#125;, module: &#123; rules: [ ] &#125;, plugins: [ // 插件配置 // html-webpack-plugin // 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS） // 需求：需要有结构的HTML文件 new HtmlWebpackPlugin(&#123; // 复制 &#x27;./src/index.html&#x27; 文件，并自动引入打包输出的所有资源（JS/CSS） template:&#x27;./src/index.html&#x27; &#125;) ], mode: &#x27;development&#x27;&#125; 踩坑开发环境： webpack 5.8.0 webpack-cli 4.2.0 控制台下载插件： 1npm i html-webpack-plugin -D 插件默认下载的版本是：4.5.0 和 webpack5不兼容 使用命令卸载上面安装的版本 1npm uninstall html-webpack-plugin 下载兼容版本： 1npm install html-webpack-plugin@5.0.0-alpha.9 这样，就可以正常编译了。 参考：https://blog.csdn.net/Kindergarten_Sir/article/details/110083041 打包默认会创建一个空的HTML，自动引入打包输出的所有资源（JS&#x2F;CSS）","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P07 打包图片资源","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P07 打包图片资源","date":"2020-11-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.655Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P07 打包图片资源/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P07%20%E6%89%93%E5%8C%85%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 编写webpack配置文件想要打包图片资源，需要使用到 url-loader和html-loader两个loader。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253const &#123; resolve &#125; = require(&#x27;path&#x27;);const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);module.exports = &#123; entry: &#x27;./src/index.js&#x27;, output: &#123; filename: &#x27;built.js&#x27;, path: resolve(__dirname,&#x27;build&#x27;), publicPath:&#x27;./&#x27; &#125;, module: &#123; rules: [ &#123; test:/\\.less$/, use:[&#x27;style-loader&#x27;,&#x27;css-loader&#x27;,&#x27;less-loader&#x27;] &#125;, &#123; // 处理图片资源 test:/\\.(jpg|png|gif)$/, // 下载 url-loader file-loader loader: &#x27;url-loader&#x27;, options: &#123; // 图片大小小于kb，就会被base64处理 // 有点：减少请求数量（减轻服务器压力） // 缺点：图片体积更大（文件请求速度更慢） limit: 8 * 1024, // webpack5 以后的版本，不存在以下问题： // 问题：因为url-loader默认使用使用es6模块解析，html-loader引用图片是commonjs模块 // 解析时会出问题：[object Module] // 解决：关闭url-loader的es6模块化，使用commonjs解析 // esModule: false // 给图片重命名，取hash前10位 name: &#x27;[hash:10].[ext]&#x27; &#125; &#125;, &#123; test:/\\.html$/, // 处理html文件的img图片（负责引入img，从而能被url-loader进行处理） loader: &#x27;html-loader&#x27; &#125; ] &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template:&#x27;./src/index.html&#x27; &#125;) ], mode: &#x27;development&#x27;&#125; 控制台下载loader依赖： 其中 url-loader 包含 url-loader 和 file-loader 两个依赖。 123npm i url-loader -Dnpm i file-loader -Dnpm i html-loader -D","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P04 webpack的初体验","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P04 webpack的初体验","date":"2020-11-26T16:00:00.000Z","updated":"2022-06-15T08:32:50.654Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/P04 webpack的初体验/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/P04%20webpack%E7%9A%84%E5%88%9D%E4%BD%93%E9%AA%8C/","excerpt":"","text":"尚硅谷2020最新版Webpack5实战教程 创建工程创建工程，项目控制台输入： 1npm init 安装webpack软件包： 123# -g 全局安装 -D 本地安装npm i webpack webpack-cli -gnpm i webpack webpack-cli -D 文件目录 src：源码目录 build：webpack打包后输出目录 总结 原生的webpack能处理 javascript&#x2F;json ，不能处理css&#x2F;img等其他资源。 生产环境和开发环境将 ES6 模块化编译成浏览器能识别的模块化 生产环境比开发环境多一个压缩js代码","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"环境准备","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/环境准备","date":"2020-11-26T16:00:00.000Z","updated":"2022-06-15T08:32:50.665Z","comments":true,"path":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程/环境准备/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/","excerpt":"","text":"1.开发环境Visual Studio Code 2.依赖软件包Node 温馨提示nodejs安装过程可参考：https://www.cnblogs.com/jianguo221/p/11487532.html","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P39 SpringBoot微服务打包Docker镜像","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P39 SpringBoot微服务打包Docker镜像","date":"2020-11-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.114Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P39 SpringBoot微服务打包Docker镜像/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P39%20SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%89%93%E5%8C%85Docker%E9%95%9C%E5%83%8F/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 步骤1.构建springboot项目开发的项目。 2.打包应用使用maven的install打包成jar包。 3.编写Dockerfile12345678910FROM java:8# 当前拷贝目录的jar包放入容器COPY *.jar /app.jarCMD [&quot;-server.port=8080&quot;]EXPOSE 8080ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;] 4.构建镜像将 xxx.jar（项目jar包） 和 Dockerfile 文件发送至服务器。 在服务器终端构建镜像 12# xxx 是新镜像名docker build -t xxx . 5.发布运行启动容器 12# xxxname 是新容器名docker run -d -P --name xxxname xxx","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P37 网络连通","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P37 网络连通","date":"2020-11-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.114Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P37 网络连通/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P37%20%E7%BD%91%E7%BB%9C%E8%BF%9E%E9%80%9A/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 本网络外容器连入此网络两个位于不同网络的容器之间，是不能相互ping通的。但是可以经过设置后，ping通。 配置连接12# docker network connect 网络名 把哪个容器连接到前面那个网络docker network connect mynet tomcat01 查看配置好后，可以查看 mynet 的元数据 1docker network inspect mynet 可以看到，位于docker0的tomcat01已经加入到了mynet网络。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P35 容器互联--link","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P35 容器互联--link","date":"2020-11-24T16:00:00.000Z","updated":"2022-06-15T08:32:50.111Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P35 容器互联--link/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P35%20%E5%AE%B9%E5%99%A8%E4%BA%92%E8%81%94--link/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 –link命令 思考一个厂家，我们编写了一个微服务，database url&#x3D;ip，项目不重启，数据库ip换掉了，我们希望可以处理这个问题，可以用名字来访问容器 1234# 在使用 --link 之前，是不能 ping 容器名的。docker exec -it tomcat02 ping tomcat01# 失败ping: tomcat01: Name or service not known 如何解决123456# 通过 --link 命令docker run -d -P -name tomcat03 --link tomcat02 tomcat# 再次测试 pingdocker exec -it tomcat03 ping tomcat02# 成功64 bytes from tomcat02(172.18.0.3) icmp_seq=1 ttl=64 time=0.100ms 既然是 tomcat03 link tomcat02 ，因此03可以ping通02，但02不能ping通03，因为还没给02配置link命令。 探究link本质–link就是我们在hosts配置中增加了一条 172.18.0.3 tomcat02 31257784cd4，映射。 1234# 可以通过命令查看，tomcat03已经配置了 --link命令docker exec -it tomcat03 cat /etc/hosts# 可以看到一条记录172.18.0.3 tomcat02 31257784cd4 后记现在Docker已经不建议使用 –link 了。 docker0的问题：它不支持容器名连接访问。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P36 自定义网络","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P36 自定义网络","date":"2020-11-24T16:00:00.000Z","updated":"2022-06-15T08:32:50.111Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P36 自定义网络/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P36%20%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 基础–link 和 自定义网络 都叫做 容器互联。 网络模式 bridge：桥接，docker默认 none：不配置网络 host：和宿主机共享网络 container：容器网络连通 测试123docker run -d -P -name tomcat01 tomcat# 上面的命令其实已经配置了 --net，完整的命令如下：docker run -d -P -name tomcat01 --net bridge tomcat 自定义网络12# --driver 模式名 --subnet 网络段 --gateway 网关 网络名docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet 使用 docker network ls 可以查看所有的网络信息，如果创建成功，可以看到mynet网络。 使用 docker network inspect mynet 查看mynet网络详细信息。 容器放入自定义网络1docker run -d -P -name tomcat-net-01 --net mynet tomcat 这样，tomcat-net-01容器就被丢入进了mynet网络。 自定义网络，不但可以直接ping通ip，也可以直接ping通容器名，这是docker0所不具备的 适用场景 给不同的基础设施创建自定义网络，隔离。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P29 CMD和ENTRYPOINT的区别","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P29 CMD和ENTRYPOINT的区别","date":"2020-11-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.107Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P29 CMD和ENTRYPOINT的区别/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P29%20CMD%E5%92%8CENTRYPOINT%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 区别CMD：命令完整的被替换，在启动容器时需要写完整的命令。 ENTRYPOINT：命令追加，再启动容器时只需要追加参数即可。 测试CMD： 12FROM centosCMD [&quot;ls&quot;,&quot;-a&quot;] 1234567# 构建镜像docker build -f dockerfile-cmd -t cmdtest .# 运行docker run dd8e4401d27f -l# 追加 -l 命令，报错# 因为想要覆盖cmd命令，需要重写完整的命令 正确写法如下：docker run dd8e4401d27f ls -al 测试ENTRYPOINT： 12FROM centosENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;] 1234# 构建对象docker file -f dockerfile-entrypoint -t entrypointtest .# 运行，正常运行。因为 -l 追加到 ls -a 上了。 docker run dd8e4401d27f -l","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P31 发布镜像到DockerHub","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P31 发布镜像到DockerHub","date":"2020-11-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.107Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P31 发布镜像到DockerHub/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P31%20%E5%8F%91%E5%B8%83%E9%95%9C%E5%83%8F%E5%88%B0DockerHub/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 推送到DockerHub登录帮助1docker login --help 登录123# docker login -u 用户名docker login -u kuangshen# 回车后输入密码 推送123456# 首先规范化# docker tag 镜像ID 用户名字/镜像名字:版本号docker tag f8559daf1fc2 kuangshen/tomcat:1.0# 再push# docker push 用户名字/镜像名字:版本号docker push kuangshen/tomcat:1.0","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P32 发布镜像到阿里云容器服务","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P32 发布镜像到阿里云容器服务","date":"2020-11-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.108Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P32 发布镜像到阿里云容器服务/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P32%20%E5%8F%91%E5%B8%83%E9%95%9C%E5%83%8F%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 推送到阿里云创建 登录阿里云 找到容器镜像服务 创建命名空间 创建容器镜像 完成后，根据阿里云提供的文档操作即可。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P34 Docker0网络详解","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P34 Docker0网络详解","date":"2020-11-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.110Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P34 Docker0网络详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P34%20Docker0%E7%BD%91%E7%BB%9C%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 原理 我们只要安装了docker，就会有一个网卡docker0。 lo：回环，eth0：本机网卡，docker0：docker网卡 我们每启动一个docker容器，docker就会给docker容器分配一个ip。网卡桥接模式，使用veth-pair技术。 什么是veth-pair就是一对对虚拟设备接口，他们都是成对出现。 测试 tomcat01 和 tomcat02 是否可以ping通 结论：容器之间是可以互相ping通的。 所有容器在不指定网络的情况下，都是由docker0路由，docker会给我们的容器分配一个默认可用的IP。 Docker 中的所有的网络接口都是虚拟的，虚拟的转发效率高。 只要容器删除，对应的网桥一对就没了。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P23 具名挂载和匿名挂载","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P23 具名挂载和匿名挂载","date":"2020-11-22T16:00:00.000Z","updated":"2022-06-15T08:32:50.102Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P23 具名挂载和匿名挂载/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P23%20%E5%85%B7%E5%90%8D%E6%8C%82%E8%BD%BD%E5%92%8C%E5%8C%BF%E5%90%8D%E6%8C%82%E8%BD%BD/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 匿名挂载、具名挂载和指定路径挂载123456789# 匿名挂载 不写主机路径，-v后面紧跟容器路径# docker自动生成字符串作为挂载名-v 容器内路径# 具名挂载 主机路径在：/var/lib/docker/volumes/xxx/.data-v 卷名:容器内路径# 指定路径挂载-v /主机路径:容器内路径 ro和rw关键字的区别1234567# ro 只要看到ro就说明这个路径仅能主机操作，容器内部无法操作ro readonly 只读rw readwrite 读写# 例如docker run -d -P --name nginx02 juming-nginx:/etc/nginx:ro nginxdocker run -d -P --name nginx02 juming-nginx:/etc/nginx:rw nginx","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P24 数据卷之Dockerfile","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P24 数据卷之Dockerfile","date":"2020-11-22T16:00:00.000Z","updated":"2022-06-15T08:32:50.103Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P24 数据卷之Dockerfile/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P24%20%E6%95%B0%E6%8D%AE%E5%8D%B7%E4%B9%8BDockerfile/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 什么是Dockerfile就是用来构建docker镜像的构建文件，命令脚本。 通过这个脚本可以生成镜像，镜像是一层一层的，脚本就是一个一个命令。 12345# VOLUME 创建两个匿名挂载，分别是 volume01 volume02FROM centosVOLUME [&quot;volume01&quot;,&quot;volume02&quot;]CMD echo &quot;----- end -----&quot;CMD /bin/bash dockerfile生成image12# -f dockerfile路径 注意，最后有个. 表示生成的镜像放在当前目录docker build -f /root/docker-test-volume/dockerfile1 -t kuangshen/centos:1.0 . 生成后，可通过docker images命令查看已存在的镜像。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P25 多个容器共享数据卷","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P25 多个容器共享数据卷","date":"2020-11-22T16:00:00.000Z","updated":"2022-06-15T08:32:50.103Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P25 多个容器共享数据卷/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P25%20%E5%A4%9A%E4%B8%AA%E5%AE%B9%E5%99%A8%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%8D%B7/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 原题目：数据卷容器。 volumes-from12# volumes-fromdocker run -it --name docker02 --volumes-from docker01 kuangshen/centos:1.0 来自B站用户评论：感谢狂神分享，关于数据卷容器这一段，容器3和容器2从容器1挂载数据卷的操作，包括容器4从容器3挂载数据，经过实验是对容器1的外部匿名数据卷的挂载的共享，通过inspect查看容器1、2、3、4的mounts挂载配置，可以看到他们的source地址都是宿主机上的同一个匿名卷。猜测，–volume-from的命令其实是新容器通过复制了旧容器中的mounts配置的source和destination来实现的，并且优先于dockerfile中的卷挂载定义（根据视频演示中的centos容器镜像是包含启动时挂载的），所以可能称这种操作为挂载共享（复制）可能更容易理解 本人测试创建两个容器centos1和centos2，分别为他们设置具名数据卷test，结果发现他们都共用test，里面创建&#x2F;删除&#x2F;修改文件，centos1、centos2和主机均受到影响。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P26 DockerFile介绍","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P26 DockerFile介绍","date":"2020-11-22T16:00:00.000Z","updated":"2022-06-15T08:32:50.104Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P26 DockerFile介绍/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P26%20DockerFile%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 构建步骤 编写一个 dockerfile 文件 docker build 构建成一个镜像 docker run 创建及运行容器 docker push 发布镜像（DockerHub，阿里云镜像仓库） 书写基础 每个保留关键字（指令）都必须是大写字母 执行从上到下顺序执行 # 表示注释 每个指令都会创建提交一个新的镜像层，并提交 名词解释DockerFile：构建文件，定义步骤，相当于源代码。 DockerImages：通过DockerFile生成镜像，最终发布和运行产品。 Docker容器：容器是镜像运行起来提供服务","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P28 实战：构建自己的centos","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P28 实战：构建自己的centos","date":"2020-11-22T16:00:00.000Z","updated":"2022-06-15T08:32:50.107Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P28 实战：构建自己的centos/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P28%20%E5%AE%9E%E6%88%98%EF%BC%9A%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84centos/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 尝试写DockerFile我们已经知道docker提供的centos是非常精简的，不提供vim或ifconfig命令。因此我们做一个已经安装以上命令的centos。 1234567891011FROM centosMAINTAINER hooy&lt;584945164@qq.com&gt;# 环境变量ENV MYPATH /user/local# 工作目录，进入容器默认在的目录 $占位符WORKDIR $MYPATHRUN yum -y install vimRUN yum -y install net-toolsEXPOSE 80CMD echo $MYPATHCMD /bin/bash 生成镜像 1docker build -f /root/mycentos -t mycentos:1.0 . 执行完毕，可通过docker images查看到已经生成的镜像。 运行，创建容器即可使用。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P27 DockerFile指令说明","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P27 DockerFile指令说明","date":"2020-11-22T16:00:00.000Z","updated":"2022-06-15T08:32:50.106Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P27 DockerFile指令说明/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P27%20DockerFile%E6%8C%87%E4%BB%A4%E8%AF%B4%E6%98%8E/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 指令保留关键字 123456789101112FROM # 基础镜像，地基MAINTAINER # 作者，谁写的镜像 姓名+邮箱RUN # 镜像构建时需要运行的命令ADD # 添加内容，自动解压WORKDIR # 镜像工作目录VOLUME # 挂载目录EXPOSE # 端口配置CMD # 指定这个容器启动时要运行的命令，只有最后一个会生效，命令可被替代ENTRYPOINT # 指定这个容器启动时要运行的命令，可以追加命令ONBUILD # 当构建一个被继承 DockerFile 时会运行，触发指令COPY # 类似ADD，不会自动解压ENV # 构建时设置环境变量","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P10 容器的基本命令","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P10 容器的基本命令","date":"2020-11-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.097Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P10 容器的基本命令/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P10%20%E5%AE%B9%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 容器命令有了镜像才可以创建容器。 下载 centos 镜像测试学习docker run 根据镜像创建一个容器 12345678910docker run [可选参数] image# 参数说明：--name=&quot;Name&quot; 容器名字 用来区分容器--d 后台运行-it 使用交互方式运行，进入容器查看内容-p 指定容器端口 -p 8080:8080-P 随机容器端口# 测试 创建容器并使用bash进入容器docker run -it centos /bin/bash docker ps 查看容器 1234docker ps [可选参数]# 参数说明 空，列出正在运行的容器-a 列出所有容器，包括运行和停止的容器 退出容器 12exit # 容器停止并退出快捷键：Ctrl + P + Q # 容器不停止退出 删除容器 12345# 删除指定容器 运行中的容器不可删除，可通过强制删除将其删除docker rm 容器ID# 删除所有容器 先查出容器ID，再执行删除 # -f强制删除 -r递归删除docker rm -f $&#123;docker ps -aq&#125; 启动和停止容器 12345678# 启动docker start 容器ID# 重启docker restart 容器ID# 停止docker stop 容器ID# 强制停止docker kill 容器ID","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P11 日志、元数据、进程的查看","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P11 日志、元数据、进程的查看","date":"2020-11-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.097Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P11 日志、元数据、进程的查看/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P11%20%E6%97%A5%E5%BF%97%E3%80%81%E5%85%83%E6%95%B0%E6%8D%AE%E3%80%81%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%9F%A5%E7%9C%8B/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 后台启动容器 1234# 命令 docker run -d 镜像名docker run -d centos# 发现问题：centos容器自动停止了# docker容器后台运行，必须有一个前台进程，否则docker发现没有应用，就会自动停止 查看日志 12345docker logs# 例如-ft # 带上时间戳--tail num # 显示条数docker logs -ft --tail 10 容器ID 查看docker容器内部的进程信息 1docker top 容器ID 查看元数据，容器属性的详细信息 1docker inspect 容器ID","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P12 进入容器的命令和拷贝命令","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P12 进入容器的命令和拷贝命令","date":"2020-11-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.098Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P12 进入容器的命令和拷贝命令/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P12%20%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E5%92%8C%E6%8B%B7%E8%B4%9D%E5%91%BD%E4%BB%A4/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 进入当前正在运行的容器 1234# 进入容器后开启一个新的终端，可以在里面操作docker exec -it 容器ID /bin/bash# 进入容器正在执行的终端，不会启动新的进程docker attach 容器ID 将容器内的文件拷到主机上 123456docker cp 从哪 到哪# 测试# 在centos容器创建一个文件，将其拷贝至主机上[root@78453025116 home]\\# touch test.java[root@kuangshen home]\\# docker cp 78453025116:/home/test.java /home 拷贝是一种手动过程，后面使用卷技术实现容器内目录和主机目录同步。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P15 作业二：部署Tomcat","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P15 作业二：部署Tomcat","date":"2020-11-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.100Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P15 作业二：部署Tomcat/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P15%20%E4%BD%9C%E4%B8%9A%E4%BA%8C%EF%BC%9A%E9%83%A8%E7%BD%B2Tomcat/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 1234# 官方命令docker run -it --rm tomcat:9.0# --rm 参数，类似阅后即焚，一般用来测试，用完就删除# 正式使用，不能加--rm 启动，对外提供服务 12# -p 后台启动 -p 指定端口 --name 别名docker run -d -p 3355:8080 --name tomcat01 tomcat 主机开放3355端口，容器开放8080端口，端口映射。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P17 Portainer可视化面板安装","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P17 Portainer可视化面板安装","date":"2020-11-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.100Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P17 Portainer可视化面板安装/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P17%20Portainer%E5%8F%AF%E8%A7%86%E5%8C%96%E9%9D%A2%E6%9D%BF%E5%AE%89%E8%A3%85/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 安装1docker run -d -p 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer 主机8088端口转容器的9000端口。 容器运行起来后，可以访问http://192.168.8.106:8088/进入后台，第一次进入设置管理员账户密码。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P20 Commit镜像","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P20 Commit镜像","date":"2020-11-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.101Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P20 Commit镜像/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P20%20Commit%E9%95%9C%E5%83%8F/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 如何提交自己的镜像1234# 提交容器称为一个新镜像docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 目标镜像名:[TAG版本]# 测试docker comiit -a=&quot;kuangshen&quot; -m=&quot;add webapps app&quot; 7e11gb82cff6 tomcat02:1.0 提交后，就可以使用docker images命令查看本地已存在的镜像。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P21 容器数据卷的使用","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P21 容器数据卷的使用","date":"2020-11-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.101Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P21 容器数据卷的使用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P21%20%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 什么是容器数据卷双向同步 容器之间可以有一个数据共享的技术，容器产生的数据可以同步到本地。 将应用和数据分离，应用被删除不会导致数据丢失。 方式一 使用命令来挂载123docker run -it -v 主机内目录:容器内目录# 例如docker run -it -v /home/ceshi:/home centos /bin/bash 查看挂载，查看容器元数据，里面键Mounts 12345678910&quot;Mounts&quot;:[ &#123; &quot;Type&quot;:&quot;bind&quot;, &quot;Source&quot;:&quot;/home/ceshi&quot;, // 源 &quot;Destination&quot;:&quot;/home&quot;, // 目的地 &quot;Mode&quot;:&quot;&quot;, &quot;RW&quot;:true, &quot;Propagation&quot;:&quot;rprivate&quot; &#125;]","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P13 常用命令小结","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P13 常用命令小结","date":"2020-11-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.099Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P13 常用命令小结/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P13%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 123456789101112131415161718192021222324252627282930exec Run a command in an existing container #在已存在的容器上运行命令export Stream the contents of a container as a tar archive #导出容器的内容流作为一个tar归档文件[对应import]history show the history of an image #展示一个镜像形成历史images List images #列出系统当前镜像import create a new filesystem image from the contents of a tarball #从tar包中的内容创建一个新的文件系统映像[对应export]info Display system-wide information #显示系统相关信息inspect Return low-leve1 information on a container #查看容器详细信息kill Kill a running container #ki11指定docker容器1oad Load an image from a tar archive #从一个tar包中加载一个镜像[对应save]login Register or Login to the docker registry server #注册或者登陆一个docker源服务器logout Log out from a Docker registry server #从当前Docker registry退出logs Fetch the logs of a container #输出当前容器日志信息port Lookup the public-facing port which is NAT-ed to PRIVATE_PORT #查看映射端口对应的容器内部源端口pause Pause al1 processes within a container #暂停容器ps List containers #列出容器列表pu11 Pu1l an image or a repository from the docker registry server #从docker镜像源服务器拉取指定镜像或者库镜像push Push an image or a repository to the docker registry server #推送指定镜像或者库镜像至docker源服务器restart Restart a running container #重启运行的容器rm Remove one or more containers #移除一个或者多个容器rmi Remove one or more images #移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或-f强制删除]run Run a command in a new container #创建一个新的容器并运行一个命令save save an image to a tar archive #保存一个镜像为一个tar包[对应1oad]search Search for an image on the Docker Hub #在docker hub中搜索镜像start Start a stopped containers #启动容器stop Stop a running containers #停止容器tag Tag an image into a repository #给源中镜像打标签top Lookup the running processes of a container #查看容器中运行的进程信息unpause Unpause a paused container #取消暂停容器version Show the docker wersion information #查看docker版本号wait Block until a container stops,then print its exit code #截取容器停止时的退出状态值","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P22 实战：MySQL同步数据","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P22 实战：MySQL同步数据","date":"2020-11-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.102Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P22 实战：MySQL同步数据/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P22%20%E5%AE%9E%E6%88%98%EF%BC%9AMySQL%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 将MySQL容器数据持久化，将conf目录和data目录数据卷到本地，这样删除容器也不会造成数据库数据丢失。 123docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7# 解释# 创建容器 后台运行 指定端口 主机3310映射容器3306 数据卷conf 数据卷data 设置 别名 镜像：版本","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P9 镜像的基本命令","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P9 镜像的基本命令","date":"2020-11-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.115Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P9 镜像的基本命令/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P9%20%E9%95%9C%E5%83%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 常用基本命令命令官方文档https://docs.docker.com/reference/ 123456# 查看版本docker version# 查看详细信息 包含容器有多少镜像多少容器等等docker info# 帮助docker 命令 --help docker images 查看所有镜像 官方仓库https://hub.docker.com/ docker search 搜索镜像 1docker search mysql docker pull 下载镜像 1234# 如果不写 tag 默认下载最新版docker pull mysql# 指定版本 版本号必须在hub上是存在的，可参考hub镜像文档docker pull mysql:5.7 docker rmi 删除对象，i代表镜像 12345docker rmi -f 镜像ID# 删除全部镜像 查出所有镜像ID，然后再执行删除docker rmi -f $&#123;docker image -aq&#125;# 删除多个镜像docker rmi -f 镜像ID 镜像ID ...","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P6 安装Docker","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P6 安装Docker","date":"2020-11-19T16:00:00.000Z","updated":"2022-06-15T08:32:50.114Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/P6 安装Docker/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P6%20%E5%AE%89%E8%A3%85Docker/","excerpt":"","text":"【狂神说Java】Docker最新超详细版教程通俗易懂 安装（可选）Linux更换yum源12345678910# 1.备份原来的yum源mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup# 2.下载阿里云的CentOS-Base.repo 到/etc/yum.repos.d/wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo或者curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo# 3.清理缓存sudo yum clean all# 4.生成新的缓存sudo yum makecache Docker下载及安装官网教程https://docs.docker.com/engine/install/ 123456789101112131415161718192021# 1.卸载旧的版本sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine # 2.安装 yum-utils，它提供了 yum-config-manager，可用来管理yum源sudo yum install -y yum-utils# 3.添加yum源sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# 4.下载sudo yum install docker-ce docker-ce-cli containerd.io# 5.启动systemctl start docker 判断是否安装成功123docker -v# 打印以下信息Docker version 19.03.13, build 4484c46d9d 尝试下载第一个镜像相当于demo镜像 1docker run hello-world 查看当前系统存在的docker镜像1docker images 卸载12345# 1.卸载依赖yum remove docker-ce docker-ce-cli containerd.io# 2.删除资源rm -rf /var/lib/docker","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P101 命令模式（1）-工作原理","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P101 命令模式（1）-工作原理","date":"2020-11-11T16:00:00.000Z","updated":"2022-06-15T08:32:50.163Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P101 命令模式（1）-工作原理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P101%20%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F%EF%BC%881%EF%BC%89-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 项目需求 我们买了一套智能家电，有照明灯、风扇、冰箱、洗衣机，我们只要在手机上安装app就可以控制对这些家电工作。 这些智能家电来自不同的厂商，我们不想针对每一种家电都安装一个App，分别控制，我们希望只要一个App就可以控制全部家电。 要实现一个App控制所有智能家电的需要，则每个智能家电厂家都要提供一个统一的接口给App调用，这时就可以考虑使用命令模式。 在我们的例子中，动作的请求者是手机App，动作的执行者是每个厂商的一个家电产品。 命令模式 Comand Pattern基本介绍 在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接受者是谁，也不知道被请求的操作是哪个。 命令模式使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦。 在命令模式中，会将一个请求封装为一个对象，以便使用不同参数来表示不同的请求（即命令），同时命令模式也支持可撤销操作。 通俗易懂的理解：将军发布命令，士兵去执行。其中有几个角色： Invoker是调用者（将军） Receiver是被调用者（士兵） MyCommand是命令，实现了Command接口，持有接收对象 角色123456789101112131415classDiagramclass Command&#123; &lt;&lt;interface&gt;&gt; +execute() void +undo() void&#125;class ConcreteCommand&#123; +execult() void +undo() void&#125;class Invokerclass ReceiverCommand &lt;|.. ConcreteCommandConcreteCommand o-- ReceiverInvoker o-- Command Invoker：是调用者角色 Command：是命令角色，需要执行的所有命令都在这里，克一实接口或抽象类 Receiver：接收者角色，知道如何实施和执行一个请求相关的操作 ConcreteCommand：将一个接收者对象与一个动作绑定，调用接受相应的操作，实现execute","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P96  模板模式（1）-工作原理","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P96  模板模式（1）-工作原理","date":"2020-11-11T16:00:00.000Z","updated":"2022-06-15T08:32:50.184Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P96  模板模式（1）-工作原理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P96%20%20%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F%EF%BC%881%EF%BC%89-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 基本介绍 模板方法模式（Template Method Pattern），又叫模板模式（Template Pattern），在一个抽象类公开定义了执行它的方法的模板。它的子类可以按照需要重写方法实现，但调用将以抽象类中定义的方式进行。 简单说，模板方法模式定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重新定义该算法的某些特定步骤。 12345678910111213141516classDiagramclass AbstractClass&#123; &lt;&lt;abstract&gt;&gt; +template() void +operation2()* void +operation3()* void +operation4()* void&#125;class ConcreteClass&#123; +operation2() void +operation3() void +operation4() void&#125;class ClientAbstractClass &lt;|.. ConcreteClassConcreteClass &lt;.. Client AbstractClass抽象类，类中实现了模板方法，定义了算法的骨架，具体子类需要去实现其他的抽象方法operation2&#x2F;3&#x2F;4 ConcreteClass实现抽象方法operation2&#x2F;3&#x2F;4，以完成算法中特点子类的步骤","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P97 模板模式（2）-豆浆制作","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P97 模板模式（2）-豆浆制作","date":"2020-11-11T16:00:00.000Z","updated":"2022-06-15T08:32:50.185Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P97 模板模式（2）-豆浆制作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P97%20%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F%EF%BC%882%EF%BC%89-%E8%B1%86%E6%B5%86%E5%88%B6%E4%BD%9C/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 案例 豆浆制作12345678classDiagramclass SoyaMilk&#123; &lt;&lt;abstract&gt;&gt;&#125;class RedBeanSoyaMilkclass PeanutSoyaMilkSoyaMilk &lt;|.. RedBeanSoyaMilkSoyaMilk &lt;|.. PeanutSoyaMilk 抽象类，抽象方法是子代实现之间的差异。 123456789101112131415161718192021222324public abstract class SoyaMilk &#123; // 防止子类覆盖 final void make()&#123; select(); addCondiments(); soak(); beat(); &#125; void select()&#123; System.out.println(&quot;第一步，选好新鲜黄豆&quot;); &#125; // 添加不同配料，抽象方法，由子类实现 abstract void addCondiments(); void soak()&#123; System.out.println(&quot;第三步，黄豆和配料浸泡&quot;); &#125; void beat()&#123; System.out.println(&quot;第四步，黄豆和配料放入豆浆机打碎&quot;); &#125;&#125; 子类实现 123456public class RedBeanSoyaMilk extends SoyaMilk &#123; @Override void addCondiments() &#123; System.out.println(&quot;加入红豆&quot;); &#125;&#125; 123456public class PeanutSoyaMilk extends SoyaMilk &#123; @Override void addCondiments() &#123; System.out.println(&quot;加入花生&quot;); &#125;&#125; 调用测试： 12345678910111213public class Client &#123; public static void main(String[] args) &#123; // 制作红豆豆浆 System.out.println(&quot;---------- 红豆豆浆 ----------&quot;); SoyaMilk redBeanSoyaMilk = new RedBeanSoyaMilk(); redBeanSoyaMilk.make(); // 制作花生豆浆 System.out.println(&quot;---------- 花生豆浆 ----------&quot;); SoyaMilk peanutSoyaMilk = new PeanutSoyaMilk(); peanutSoyaMilk.make(); &#125;&#125; 执行结果： 12345678910---------- 红豆豆浆 ----------第一步，选好新鲜黄豆加入红豆第三步，黄豆和配料浸泡第四步，黄豆和配料放入豆浆机打碎---------- 花生豆浆 ----------第一步，选好新鲜黄豆加入花生第三步，黄豆和配料浸泡第四步，黄豆和配料放入豆浆机打碎","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P83 外观模式（3）-影院管理","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P83 外观模式（3）-影院管理","date":"2020-11-10T16:00:00.000Z","updated":"2022-06-15T08:32:50.180Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P83 外观模式（3）-影院管理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P83%20%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%EF%BC%883%EF%BC%89-%E5%BD%B1%E9%99%A2%E7%AE%A1%E7%90%86/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 外观模式 Facade外观模式就是解决多个复杂接口带来的使用困难，起到简化用户操作的作用 12345678910classDiagramclass 外观类class 子系统1class 子系统2class 子系统3class Client外观类 o-- 子系统1外观类 o-- 子系统2外观类 o-- 子系统3外观类 &lt;.. Client 应用场景有很多子系统提供功能，而上层调用时是根据不同阶段来调用。比如预先准备放电影，就会将打开DVD，制作爆米花，打开投影仪，将荧幕升上去等等。这样就可以把子系统在这一阶段提供的功能封装成一个方法，方便上层调用。 案例 影院管理子系统类，这里使用单例饿汉模式 123456789101112131415161718192021222324// DVDpublic class DVDPlayer &#123; private static DVDPlayer instance = new DVDPlayer(); public static DVDPlayer getInstance()&#123; return instance; &#125; public void on()&#123; System.out.println(&quot;dvd on&quot;); &#125; public void off()&#123; System.out.println(&quot;dvd off&quot;); &#125; public void play()&#123; System.out.println(&quot;dvd playing&quot;); &#125; public void pause()&#123; System.out.println(&quot;dvd pause&quot;); &#125;&#125; 1234567891011121314151617181920// 爆米花public class Popcorn &#123; private static Popcorn instance = new Popcorn(); public static Popcorn getInstance()&#123; return instance; &#125; public void on()&#123; System.out.println(&quot;popcorn on&quot;); &#125; public void off()&#123; System.out.println(&quot;popcorn off&quot;); &#125; public void pop()&#123; System.out.println(&quot;popcorn pop&quot;); &#125;&#125; 1234567891011121314151617181920// 投影仪public class Projector &#123; private static Projector instance = new Projector(); public static Projector getInstance()&#123; return instance; &#125; public void on()&#123; System.out.println(&quot;projector on&quot;); &#125; public void off()&#123; System.out.println(&quot;projector off&quot;); &#125; public void focus()&#123; System.out.println(&quot;projector focus&quot;); &#125;&#125; 123456789101112131415public class Screen &#123; private static Screen instance = new Screen(); public static Screen getInstance()&#123; return instance; &#125; public void up()&#123; System.out.println(&quot;screen up&quot;); &#125; public void down()&#123; System.out.println(&quot;screen down&quot;); &#125;&#125; 以上子系统的功能，按照不同阶段使用的功能封装在这个类里 123456789101112131415161718192021222324252627282930313233public class HomeTheaterFacade &#123; private DVDPlayer dvdPlayer; private Popcorn popcorn; private Projector projector; private Screen screen; public HomeTheaterFacade()&#123; this.dvdPlayer = DVDPlayer.getInstance(); this.popcorn = Popcorn.getInstance(); this.projector = Projector.getInstance(); this.screen = Screen.getInstance(); &#125; public void ready()&#123; dvdPlayer.on(); popcorn.on(); projector.on(); screen.up(); &#125; public void play()&#123; dvdPlayer.play(); popcorn.pop(); projector.focus(); &#125; public void end()&#123; dvdPlayer.off(); popcorn.off(); projector.off(); screen.down(); &#125;&#125; 调用测试： 1234567891011public class Client &#123; public static void main(String[] args) &#123; HomeTheaterFacade homeTheaterFacade = new HomeTheaterFacade(); homeTheaterFacade.ready(); System.out.println(&quot;-----------------------------------&quot;); homeTheaterFacade.play(); System.out.println(&quot;-----------------------------------&quot;); homeTheaterFacade.end(); &#125;&#125; 执行结果： 12345678910111213dvd onpopcorn onprojector onscreen up-----------------------------------dvd playingpopcorn popprojector focus-----------------------------------dvd offpopcorn offprojector offscreen down","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P91 代理模式（1）-基本介绍","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P91 代理模式（1）-基本介绍","date":"2020-11-10T16:00:00.000Z","updated":"2022-06-15T08:32:50.182Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P91 代理模式（1）-基本介绍/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P91%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%EF%BC%881%EF%BC%89-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 代理模式 Proxy基本介绍 作为一个对象提供一个替身，以控制对这个被代理对象的访问，即通过代理对象访问目标对象，这样做的好处是：可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。 被代理的对象可以是远程对象，创建开销大的对象或需要安全控制的对象 代理模式有不同的形式，主要有三种静态代理、动态代理（也叫JDK代理、接口代理）和Cglib代理（可以在内存动态的创建对象，而不需要实现接口，它是属于动态代理的范畴）","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P92 代理模式（2）-静态代理","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P92 代理模式（2）-静态代理","date":"2020-11-10T16:00:00.000Z","updated":"2022-06-15T08:32:50.183Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P92 代理模式（2）-静态代理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P92%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%EF%BC%882%EF%BC%89-%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 静态代理优点：在不修改目标对象的功能前提下，能通过代理对象对目标功能扩展。 缺点：因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类。 一旦接口增加方法，目标对象与代理对象都要维护 12345678910111213141516classDiagramclass ITeacherDao&#123; &lt;&lt;interface&gt;&gt; +teach() void&#125;class TeacherDao&#123; +teach() void&#125;class TeacherDaoProxy&#123; +teach() void&#125;class ClientITeacherDao &lt;|.. TeacherDaoITeacherDao &lt;|.. TeacherDaoProxyTeacherDaoProxy o-- TeacherDaoTeacherDaoProxy &lt;.. Client 案例 课堂共同实现的接口 123public interface ITeacherDao &#123; void teach();&#125; 被代理类 123456public class TeacherDao implements ITeacherDao &#123; @Override public void teach() &#123; System.out.println(&quot;上课中&quot;); &#125;&#125; 代理类 1234567891011121314public class TeacherDaoProxy implements ITeacherDao &#123; private TeacherDao teacherDao; public TeacherDaoProxy(TeacherDao teacherDao) &#123; this.teacherDao = teacherDao; &#125; @Override public void teach() &#123; System.out.println(&quot;代理：准备上课&quot;); teacherDao.teach(); System.out.println(&quot;代理：准备下课&quot;); &#125;&#125; 调用测试： 1234567public class Client &#123; public static void main(String[] args) &#123; TeacherDao teacherDao = new TeacherDao(); ITeacherDao teacherDaoProxy = new TeacherDaoProxy(teacherDao); teacherDaoProxy.teach(); &#125;&#125; 执行结果： 123代理：准备上课上课中代理：准备下课","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P93 代理模式（3）-动态代理","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P93 代理模式（3）-动态代理","date":"2020-11-10T16:00:00.000Z","updated":"2022-06-15T08:32:50.183Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P93 代理模式（3）-动态代理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P93%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%EF%BC%883%EF%BC%89-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 动态代理基本介绍 代理对象，不需要实现接口，但是目标对象要实现接口，否则不能用动态代理 代理对象的生成，是利用JDK的API，动态的在内存中构建代理对象 动态代理也叫做：JDK代理，接口代理 JDK中生成代理对象的API 代理类所在包：java.lang.reflect.Proxy JDK实现代理只需要使用newProxyInstance方法，但是该方法需要接收三个参数 案例 课堂123456789101112131415classDiagramclass ITeacherDao&#123; &lt;&lt;interface&gt;&gt; +teach() void&#125;class TeacherDao&#123; +teach() void&#125;class ProxyFactory&#123; +ProxyFactory() +getProxyInstance() Object&#125;class ClientITeacherDao &lt;|.. TeacherDaoProxyFactory &lt;.. Client 共同实现的接口 123public interface ITeacherDao &#123; void teach();&#125; 被代理类 123456public class TeacherDao implements ITeacherDao &#123; @Override public void teach() &#123; System.out.println(&quot;上课中&quot;); &#125;&#125; 动态代理类 123456789101112131415161718192021public class ProxyFactory &#123; private Object target; public ProxyFactory(Object target) &#123; this.target = target; &#125; public Object getProxyInstance() &#123; /* 1. ClassLoader loader : 指定当前目标对象使用的类加载器，获取加载器的固定方法 2. Class&lt;?&gt;[] interfaces : 目标对象实现的接口类型，使用泛型方法确认类型 3. InvocationHandler h : 事情处理，执行目标对象的方法时，会触发事情处理器方法 */ return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), (proxy, method, args) -&gt; &#123; System.out.println(&quot;准备上课&quot;); Object methodVal = method.invoke(target,args); System.out.println(&quot;准备下课&quot;); return methodVal; &#125;); &#125;&#125; 调用测试： 123456789101112public class Client &#123; public static void main(String[] args) &#123; // 创建目标对象 ITeacherDao teacherDao = new TeacherDao(); // 给目标对象，创建代理对象 ITeacherDao proxyInstance = (ITeacherDao) new ProxyFactory(teacherDao).getProxyInstance(); // 类名 $Proxy0 表示一个代理对象 System.out.println(&quot;proxyInstance=&quot; + proxyInstance.getClass()); proxyInstance.teach(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P87 享元模式（2）-工作原理","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P87 享元模式（2）-工作原理","date":"2020-11-10T16:00:00.000Z","updated":"2022-06-15T08:32:50.182Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P87 享元模式（2）-工作原理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P87%20%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F%EF%BC%882%EF%BC%89-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 享元模式 Flyweight Pattern 也叫蝇量模式：运用共享技术有效地支持大量细粒度的对象 常用于系统底层开发，解决系统的性能问题。像数据库连接池，里面都是创建好的连接对象，在这些连接对象中有我们需要的则直接拿来用，避免重新创建，如果没有我们需要的，则创建一个 享元模式能够解决重复对象的内存浪费的问题，当系统中有大量相似对象，需要缓冲池时。不需总是创建新对象，可以从缓冲池里拿。这样可以降低系统内存，同时提高效率 享元模式经典的应用场景就是池技术了，string常量池、数据库连接池、缓冲池等等都是享元模式的应用，享元模式是池技术的重要实现方式。 角色 FlyWeight 是抽象的享元角色，他是产品的抽象类，同时定义出对象的外部状态和内部状态的接口或实现。 ConcreteFlyweight 是具体的享元角色，是具体的产品类，实现抽象角色定义相关业务。 UnsharedConcreteFlyWeight 是不可共享的角色，一般不会出现在享元工厂。 FlyWeightFactory 享元工厂类，用于构建一个池容器（集合），同时提供从池中获取对象的方法。 内部状态和外部状态 享元模式提出了两个要求：细粒度和共享对象。这里就涉及到内部状态和外部状态，即将对象的信息分为两个部分：内部状态和外部状态 内部状态：指对象共享出来的信息，储存在享元对象内部且不会随环境的改变而改变 外部状态：指对象得以以来的一个标记，是随环境改变而改变的，不可共享的状态 举个例子。围棋理论上有361个空位可以放棋子，每盘棋都有可能有两三百个棋子对像产生，因为内存空间有限，一台服务器很难支持更多的玩家玩围棋游戏，如果用享元模式来处理棋子，那么棋子对象就可以减少到只有两个实例，这样就很好的解决了对象开销问题 案例 网站外包抽象类 1234public abstract class WebSite &#123; // 抽象方法 public abstract void use(User user);&#125; 具体子类 [内部状态] 1234567891011121314// 具体的子类public class ConcreteWebSite extends WebSite&#123; // [内部状态] private String type = &quot;&quot;; public ConcreteWebSite(String type) &#123; this.type = type; &#125; @Override public void use(User user) &#123; System.out.println(&quot;网站的发布形式：&quot; + type + &quot; 正在使用的是：&quot; + user.getName()); &#125;&#125; 工厂类，提供具体子类 123456789101112131415161718// 工厂类public class WebSiteFactory &#123; // 集合，充当池的作用 private Map&lt;String,WebSite&gt; pool = new HashMap&lt;&gt;(); public WebSite getWebSiteCategory(String type)&#123; if (!pool.containsKey(type))&#123; // 如果不存在，就存一个进去 pool.put(type,new ConcreteWebSite(type)); &#125; return pool.get(type); &#125; // 获取池中对象数量 public int getWebSiteCount()&#123; return pool.size(); &#125;&#125; [外部状态] 12345678910111213141516// [外部状态]public class User &#123; private String name; public User(String name) &#123; this.name = name; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125;&#125; 调用测试： 12345678910111213141516171819public class Client &#123; public static void main(String[] args) &#123; // 创建一个工厂 WebSiteFactory webSiteFactory = new WebSiteFactory(); // 客户要以新闻形式发布网站 WebSite webSite1 = webSiteFactory.getWebSiteCategory(&quot;新闻&quot;); webSite1.use(new User(&quot;Hooy&quot;)); // 客户要以博客形式发布网站 WebSite webSite2 = webSiteFactory.getWebSiteCategory(&quot;博客&quot;); webSite2.use(new User(&quot;小明&quot;)); // 客户要以博客形式发布网站 WebSite webSite3 = webSiteFactory.getWebSiteCategory(&quot;博客&quot;); webSite3.use(new User(&quot;小红&quot;)); System.out.println(webSiteFactory.getWebSiteCount()); &#125;&#125; 执行结果： 1234网站的发布形式：新闻 正在使用的是：Hooy网站的发布形式：博客 正在使用的是：小明网站的发布形式：博客 正在使用的是：小红2 可见到内部状态对象的个数为2，实际上被3个对象使用。共享了对象资源。 享元模式在Integer类中的应用1234567891011public class IntegerTest &#123; public static void main(String[] args) &#123; Integer x = Integer.valueOf(127); Integer y = Integer.valueOf(127); Integer z = new Integer(127); Integer w = new Integer(127); System.out.println(x == y); // true IntegerCache范围在[-128,127] 使用享元模式 System.out.println(x == z); // false System.out.println(z == w); // false &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P94 代理模式（4）-Cglib代理","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P94 代理模式（4）-Cglib代理","date":"2020-11-10T16:00:00.000Z","updated":"2022-06-15T08:32:50.184Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P94 代理模式（4）-Cglib代理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P94%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%EF%BC%884%EF%BC%89-Cglib%E4%BB%A3%E7%90%86/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） Cglib代理基本介绍 静态代理和JDK代理模式都要求目标对象是实现一个接口，但是有时候目标对象只是一个单独的对象，并没有实现任何的接口，这个时候可使用目标对象子类来实现代理-这就是Cglib代理。 Cglib代理也叫做子类代理，他是在内存中建立一个子类对象从而实现对目标对象功能扩展，有些书也将Cglib代理归属到动态代理。 Cglib是一个强大的高性能的代码生成包，它可以在运行期扩展java类与实现java接口，它广泛的被许多AOP的框架使用，例如SpringAOP，实现方法拦截。 在AOP编程中如何选择代理模式： 目标对象需要实现接口，JDK代理 目标对象不需要实现接口，Cglib代理 Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类。 重点 需要引入Cglib的jar文件 asm.jar asm-commons.jar asm-tree.jar cglib-2.2.jar 在内存中动态构建子类，注意代理类不能为final，否则报错java.lang.illegalArgumentException 目标对象的方法如果为final&#x2F;static，那么不会执行目标对象额外的业务方法。 案例 课堂案例代码详见视频。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P66 桥接模式-手机问题","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P66 桥接模式-手机问题","date":"2020-11-09T16:00:00.000Z","updated":"2022-06-15T08:32:50.176Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P66 桥接模式-手机问题/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P66%20%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F-%E6%89%8B%E6%9C%BA%E9%97%AE%E9%A2%98/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 本节涉及P66~P68内容。 传统方式遇到的问题12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152classDiagramclass Phone&#123; +call() void&#125;class Folded&#123; +call() void&#125;class UpRight&#123; +call() void&#125;class Silde&#123; +call() void&#125;class Huawei1&#123; +call() void&#125;class Vivo1&#123; +call() void&#125;class Xiaomi1&#123; +call() void&#125;class Huawei2&#123; +call() void&#125;class Vivo2&#123; +call() void&#125;class Xiaomi2&#123; +call() void&#125;class Huawei3&#123; +call() void&#125;class Vivo3&#123; +call() void&#125;class Xiaomi3&#123; +call() void&#125;Phone &lt;|-- FoldedPhone &lt;|-- UpRightPhone &lt;|-- SildeFolded &lt;|-- Huawei1Folded &lt;|-- Vivo1Folded &lt;|-- Xiaomi1UpRight &lt;|-- Huawei2UpRight &lt;|-- Vivo2UpRight &lt;|-- Xiaomi2Silde &lt;|-- Huawei3Silde &lt;|-- Vivo3Silde &lt;|-- Xiaomi3 可以看到“手机类型”和“手机品牌”十分臃肿，每增加一种“手机类型”，都会导致重复创建新的“手机品牌”类，m*n 最后造成“类爆炸”。使用桥接模式可以将类的数量减少至 m+n 的等级。 桥接模式 Bridge1234567891011121314151617181920classDiagramclass Brand&#123; &lt;&lt;interface&gt;&gt; +call() void&#125;class Vivoclass Xiaomiclass Phone&#123; &lt;&lt;abstract&gt;&gt; -Brand brand&#125;class FoldPhoneclass UpRightPhoneclass ClientBrand &lt;|.. VivoBrand &lt;|.. XiaomiPhone &lt;|-- FoldPhonePhone &lt;|-- UpRightPhonePhone o-- BrandPhone &lt;.. Client 代码实现行为实现的接口 12345public interface Brand &#123; void open(); void close(); void call();&#125; 行为具体实现A 12345678910111213141516public class Xiaomi implements Brand &#123; @Override public void open() &#123; System.out.println(&quot;小米手机开机&quot;); &#125; @Override public void close() &#123; System.out.println(&quot;小米手机关机&quot;); &#125; @Override public void call() &#123; System.out.println(&quot;小米手机打电话&quot;); &#125;&#125; 行为具体实现B 12345678910111213141516public class Vivo implements Brand &#123; @Override public void open() &#123; System.out.println(&quot;Vivo手机开机&quot;); &#125; @Override public void close() &#123; System.out.println(&quot;Vivo手机关机&quot;); &#125; @Override public void call() &#123; System.out.println(&quot;Vivo手机打电话&quot;); &#125;&#125; Phone和Brand是聚合关系 123456789101112131415161718public abstract class Phone &#123; private Brand brand; public Phone(Brand brand)&#123; this.brand = brand; &#125; public void open() &#123; brand.open(); &#125; public void close() &#123; brand.close(); &#125; public void call() &#123; brand.call(); &#125;&#125; 抽象类的子类 折叠手机： 1234567891011121314151617181920212223public class FoldPhone extends Phone &#123; public FoldPhone(Brand brand) &#123; super(brand); &#125; @Override public void open() &#123; super.open(); System.out.println(&quot;折叠手机&quot;); &#125; @Override public void close() &#123; super.close(); System.out.println(&quot;折叠手机&quot;); &#125; @Override public void call() &#123; super.call(); System.out.println(&quot;折叠手机&quot;); &#125;&#125; 直立手机： 1234567891011121314151617181920212223public class UpRightPhone extends Phone &#123; public UpRightPhone(Brand brand) &#123; super(brand); &#125; @Override public void open() &#123; super.open(); System.out.println(&quot;直立手机&quot;); &#125; @Override public void close() &#123; super.close(); System.out.println(&quot;直立手机&quot;); &#125; @Override public void call() &#123; super.call(); System.out.println(&quot;直立手机&quot;); &#125;&#125; 桥接模式调用者 使用时，从Phone的继承类里选一个，从Brand的实现类里选一个，组合成想要的手机。 12345678910111213public class Client &#123; public static void main(String[] args) &#123; Phone xiaomiPhone = new FoldPhone(new Xiaomi()); xiaomiPhone.open(); xiaomiPhone.call(); xiaomiPhone.close(); Phone vivoPhone = new UpRightPhone(new Vivo()); vivoPhone.open(); vivoPhone.call(); vivoPhone.close(); &#125;&#125; 执行结果： 小米手机开机折叠手机小米手机打电话折叠手机小米手机关机折叠手机Vivo手机开机直立手机Vivo手机打电话直立手机Vivo手机关机直立手机","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P77 组合模式（1）-院校展示","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P77 组合模式（1）-院校展示","date":"2020-11-09T16:00:00.000Z","updated":"2022-06-15T08:32:50.178Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P77 组合模式（1）-院校展示/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P77%20%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%EF%BC%881%EF%BC%89-%E9%99%A2%E6%A0%A1%E5%B1%95%E7%A4%BA/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 组合模式 Composite Pattern又叫部分整体模式，它创建对象组的树形结构，将对象组合成树状结构以表示“整体-部分”的层次关系。 组合模式原理类图12345678910111213classDiagramclass component&#123; +add(component c) +remove(component c)&#125;class composite&#123; +add(component c) +remove(component c)&#125;class Leafcomponent &lt;|-- compositecomponent &lt;|-- Leafcomposite o-- Leaf Component:这是组合中对象声明接口，在适当情况下，实现所有类共有的接口默认行为，用于访问和管理Component子部件，Component克一实抽象类或接口。 Leaf：在组合中表示叶子节点，叶子节点没有子节点。 Composite：非叶子节点，用于储存子部件，在Component接口中实现。 组合模式解决的问题当我们要处理的对象可以生成一棵树形结构，而我们要对树上的节点和叶子进行操作时，它能够提供一致的方式，而不用考虑它是节点还是叶子。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P78 组合模式（2）-院校展示","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P78 组合模式（2）-院校展示","date":"2020-11-09T16:00:00.000Z","updated":"2022-06-15T08:32:50.179Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P78 组合模式（2）-院校展示/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P78%20%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%EF%BC%882%EF%BC%89-%E9%99%A2%E6%A0%A1%E5%B1%95%E7%A4%BA/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 案例 院校展示12345678910classDiagramclass OrganizationComponetclass Universityclass Collegeclass DepartmentOrganizationComponet &lt;|-- UniversityOrganizationComponet &lt;|-- CollegeOrganizationComponet &lt;|-- DepartmentUniversity o-- CollegeCollege o-- Department 树节点定义，共同特征。 12345678910111213141516171819202122232425262728293031323334public abstract class OrganizationComponet &#123; private String name; private String des; // add remove 默认方法，避免叶子节点也要实现方法 protected void add(OrganizationComponet o)&#123; throw new UnsupportedOperationException(); &#125; protected void remove(OrganizationComponet o)&#123; throw new UnsupportedOperationException(); &#125; protected abstract void print(); public OrganizationComponet(String name, String des) &#123; this.name = name; this.des = des; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getDes() &#123; return des; &#125; public void setDes(String des) &#123; this.des = des; &#125;&#125; 非叶子节点 12345678910111213141516171819202122232425public class University extends OrganizationComponet &#123; private List&lt;OrganizationComponet&gt; OrganizationComponets = new ArrayList&lt;&gt;(); public University(String name, String des) &#123; super(name, des); &#125; @Override protected void add(OrganizationComponet o) &#123; OrganizationComponets.add(o); &#125; @Override protected void remove(OrganizationComponet o) &#123; OrganizationComponets.remove(o); &#125; @Override protected void print() &#123; System.out.println(this.getName()); for(OrganizationComponet o : OrganizationComponets)&#123; o.print(); &#125; &#125;&#125; 12345678910111213141516171819202122232425public class College extends OrganizationComponet &#123; private List&lt;OrganizationComponet&gt; OrganizationComponets = new ArrayList&lt;&gt;(); public College(String name, String des) &#123; super(name, des); &#125; @Override protected void add(OrganizationComponet o) &#123; OrganizationComponets.add(o); &#125; @Override protected void remove(OrganizationComponet o) &#123; OrganizationComponets.remove(o); &#125; @Override protected void print() &#123; System.out.println(this.getName()); for(OrganizationComponet o : OrganizationComponets)&#123; o.print(); &#125; &#125;&#125; 叶子节点 1234567891011// 叶子节点public class Department extends OrganizationComponet &#123; public Department(String name, String des) &#123; super(name, des); &#125; @Override protected void print() &#123; System.out.println(this.getName()); &#125;&#125; 测试： 1234567891011121314151617181920212223public class Client &#123; public static void main(String[] args) &#123; // 创建大学 OrganizationComponet university = new University(&quot;湖南工学院&quot;,&quot;hnit&quot;); // 创建二级学院 OrganizationComponet computerCollege = new College(&quot;计算机学院&quot;,&quot;jisuanji&quot;); OrganizationComponet infoEngineerCollege = new College(&quot;信息学院&quot;,&quot;xinxi&quot;); // 创建专业 OrganizationComponet network = new Department(&quot;网络工程&quot;,&quot;wangluogongcheng&quot;); OrganizationComponet software = new Department(&quot;软件工程&quot;,&quot;ruanjiangongcheng&quot;); // 套娃 university.add(computerCollege); university.add(infoEngineerCollege); computerCollege.add(network); computerCollege.add(software); // 测试： university.print(); System.out.println(&quot;--------------------&quot;); computerCollege.print(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P73 装饰者模式（3）-工作原理","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P73 装饰者模式（3）-工作原理","date":"2020-11-09T16:00:00.000Z","updated":"2022-06-15T08:32:50.178Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P73 装饰者模式（3）-工作原理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P73%20%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%883%EF%BC%89-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 装饰者模式动态的将新功能附加到对象上。在对象扩展方面，它比继承更有弹性，装饰者模式以体现了开闭原则。 星巴克案例1234567891011121314151617classDiagramclass Drink&#123; &lt;&lt;abstract&gt;&gt;&#125;class Coffeeclass LongCoffeeclass Espressoclass Decoratorclass Chocolateclass MilkDrink &lt;|-- CoffeeDrink &lt;|-- DecoratorDecorator o-- CoffeeCoffee &lt;|-- LongCoffeeCoffee &lt;|-- EspressoDecorator &lt;|-- ChocolateDecorator &lt;|-- Milk 总基类 1234567891011121314151617181920212223242526package xyz.hooy.decorator;public abstract class Drink &#123; private String des; private float price = 0.0f; public String getDes() &#123; return des; &#125; public void setDes(String des) &#123; this.des = des; &#125; public float getPrice() &#123; return price; &#125; public void setPrice(float price) &#123; this.price = price; &#125; // 计算全部费用的抽象方法 // 子类实现 public abstract float cost();&#125; 单品基类 12345678// 单品public class Coffee extends Drink &#123; // 单品咖啡，全部费用就是它本身价格 @Override public float cost() &#123; return super.getPrice(); &#125;&#125; 单品A 123456public class LongCoffee extends Coffee &#123; public LongCoffee()&#123; super.setDes(&quot;美式咖啡&quot;); super.setPrice(2.0f); &#125;&#125; 单品B 123456public class Espresso extends Coffee &#123; public Espresso()&#123; super.setDes(&quot;意大利咖啡&quot;); super.setPrice(3.0f); &#125;&#125; 调味品基类 12345678910111213141516171819// 调味品public class Decorator extends Drink&#123; private Drink drink; public Decorator(Drink drink)&#123; this.drink = drink; &#125; @Override public float cost() &#123; // 调料价格 + 单品咖啡 return super.getPrice() + drink.cost(); &#125; @Override public String getDes() &#123; return super.getDes() + &quot;/&quot; + super.getPrice() + &quot; &amp;&amp; &quot; + drink.getDes(); &#125;&#125; 调味品A 1234567public class Chocolate extends Decorator &#123; public Chocolate(Drink drink) &#123; super(drink); super.setDes(&quot;巧克力&quot;); super.setPrice(4.0f); &#125;&#125; 调味品B 1234567public class Milk extends Decorator &#123; public Milk(Drink drink) &#123; super(drink); super.setDes(&quot;牛奶&quot;); super.setPrice(1.0f); &#125;&#125; 装饰模式调用者 1234567891011121314public class Client &#123; public static void main(String[] args) &#123; // 首先，创建单品 Drink drink = new LongCoffee(); System.out.println(&quot;总价格：&quot; + drink.cost()); System.out.println(&quot;账单：&quot; + drink.getDes()); drink = new Milk(drink); System.out.println(&quot;总价格：&quot; + drink.cost()); System.out.println(&quot;账单：&quot; + drink.getDes()); drink = new Chocolate(drink); System.out.println(&quot;总价格：&quot; + drink.cost()); System.out.println(&quot;账单：&quot; + drink.getDes()); &#125;&#125; 执行结果： 总价格：2.0账单：美式咖啡总价格：3.0账单：牛奶&#x2F;1.0 &amp;&amp; 美式咖啡总价格：7.0账单：巧克力&#x2F;4.0 &amp;&amp; 牛奶&#x2F;1.0 &amp;&amp; 美式咖啡 装饰者模式在JDK IO中的应用 InputStream 是抽象类，类似我们前面讲的 Drink FileInputStream 是 InputStream 子类，类似我们前面的 LongCoffee 、Espresso FilterInputStream 是 InputStream 子类，类似我们前面的 Decorator 修饰者 DataInputStream 是 FilterInputStream 子类，具体的修饰者，类似前面的 Milk FilterInputStream 类有 protected volatile InputStream in; 即含被装饰者","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P49 原型模式（1）-克隆羊","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P49 原型模式（1）-克隆羊","date":"2020-11-08T16:00:00.000Z","updated":"2022-06-15T08:32:50.173Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P49 原型模式（1）-克隆羊/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P49%20%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%EF%BC%881%EF%BC%89-%E5%85%8B%E9%9A%86%E7%BE%8A/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 传统方式解决克隆羊问题 优点是比较简单，简单易操作。 在创建新的对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂时，效率比较低。 总是需要重新初始化对象，而不是动态地获得对象运行时的状态，不够灵活。 思路：Java种Object类是所有类的根类（基类），Object类提供了一个clone()方法，该方法可以将一个Java对象复制一份，但是需要实现clone的Java类必须要实现一个接口Cloneable，该接口表示该类能够复制且具有复制的能力 &#x3D;&gt; 原型模式。 123456public class Sheep&#123; private String name; private int age; private String color; // getter setter toSting&#125; 1234567public class Test&#123; public static void main(String[] args)&#123; Sheep sheep = new Sheep(&quot;tom&quot;,1,&quot;白色&quot;); Sheep sheep1 = new Sheep(sheep.getName(),sheep.getAge(),sheep.getColor()); // more sheep* &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P50 原型模式（2）-克隆羊","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P50 原型模式（2）-克隆羊","date":"2020-11-08T16:00:00.000Z","updated":"2022-06-15T08:32:50.173Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P50 原型模式（2）-克隆羊/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P50%20%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%EF%BC%882%EF%BC%89-%E5%85%8B%E9%9A%86%E7%BE%8A/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 原型模式 Prototype 每次返回一个被复制对象的新对象。 bean类实现Cloneable接口，重写Object的clone()方法，即称为原型模式。 如果clone()方法重写仅是调用super.clone()方法，也就是使用父类（Object）的方法，即为浅拷贝。 如果bean类的成员变量存在引用变量，请使用深拷贝。 以下案例为浅拷贝： 1234567891011public class Sheep implements Cloneable&#123; private String name; private int age; private String color; // getter setter toSting @Override protected Object clone() throws CloneNotSupportedException &#123; return super.clone(); &#125;&#125; 获取新的拷贝对象： 1234567public class Test&#123; public static void main(String[] args) throws CloneNotSupportedException &#123; Sheep sheep = new Sheep(&quot;tom&quot;,1,&quot;白色&quot;); // Sheep是原型模式，因此直接通过clone()方法获取到新对象。 Sheep sheep1 = (Sheep) sheep.clone(); &#125;&#125; 两个对象并不是同一个对象： 12System.out.println(sheep.hashCode());System.out.println(sheep1.hashCode()); 执行结果： 11631578841956725890 单例模式和原型模式单例模式仅存在唯一对象，每次返回都是它自己。 原型模式可以复制，每次返回一个克隆的新对象。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P52 原型模式（4）-深拷贝","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P52 原型模式（4）-深拷贝","date":"2020-11-08T16:00:00.000Z","updated":"2022-06-15T08:32:50.173Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P52 原型模式（4）-深拷贝/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P52%20%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%EF%BC%884%EF%BC%89-%E6%B7%B1%E6%8B%B7%E8%B4%9D/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 深拷贝实现方式两种 重写clone()方法实现 通过对象序列化实现 1. 重写clone()方法实现1234567891011121314151617public class Sheep implements Cloneable&#123; private String name; private int age; private String color; private Human farmer; @Override protected Object clone() throws CloneNotSupportedException &#123; // 1.先拷贝自身的基础类型的成员变量 Sheep sheep = (Sheep)super.clone(); // 2.再拷贝自身的引用类型的成员变量 sheep.setFarmer((Human) this.farmer.clone()); return sheep; &#125; // getter setter toSting&#125; 12345678910public class Human implements Cloneable&#123; private String name; @Override protected Object clone() throws CloneNotSupportedException &#123; return super.clone(); &#125; // getter setter toSting&#125; 测试： 123456789public class Test&#123; public static void main(String[] args) throws CloneNotSupportedException &#123; Sheep sheep = new Sheep(&quot;tom&quot;,1,&quot;白色&quot;); sheep.setFarmer(new Human(&quot;hooy&quot;)); Sheep sheepClone = (Sheep)sheep.clone(); System.out.println(sheep.getFarmer() == sheepClone.getFarmer()); System.out.println(&quot;sheep:&quot; + sheep.getFarmer().hashCode() + &quot; //sheepClone:&quot; + sheepClone.getFarmer().hashCode()); &#125;&#125; 执行结果： falsesheep:1163157884 &#x2F;&#x2F;sheepClone:1956725890 2. 通过对象序列化实现原生写法：（建议直接使用第三方库的序列化&#x2F;反序列化，如：jackson、fastjson和gson） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public class Sheep implements Cloneable, Serializable &#123; private String name; private int age; private String color; private Human farmer; @Override protected Object clone() throws CloneNotSupportedException &#123; /* // 1.先拷贝自身的基础类型的成员变量 Sheep sheep = (Sheep)super.clone(); // 2.再拷贝自身的引用类型的成员变量 sheep.setFarmer((Human) this.farmer.clone()); return sheep; */ ByteArrayOutputStream bos = null; ObjectOutputStream oos = null; ByteArrayInputStream bis = null; ObjectInputStream ois = null; try &#123; // 序列化 bos = new ByteArrayOutputStream(); oos = new ObjectOutputStream(bos); oos.writeObject(this); // 反序列化 bis = new ByteArrayInputStream(bos.toByteArray()); ois = new ObjectInputStream(bis); return ois.readObject(); &#125; catch (IOException | ClassNotFoundException e) &#123; e.printStackTrace(); return null; &#125; finally &#123; try &#123; if (bos != null) &#123; bos.close(); &#125; if (oos != null) &#123; oos.close(); &#125; if (bis != null) &#123; bis.close(); &#125; if (ois != null) &#123; ois.close(); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125; 测试： 执行结果： falsesheep:2125039532 &#x2F;&#x2F;sheepClone:764977973","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P57 建造者模式（3）-盖房子","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P57 建造者模式（3）-盖房子","date":"2020-11-08T16:00:00.000Z","updated":"2022-06-15T08:32:50.174Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P57 建造者模式（3）-盖房子/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P57%20%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%883%EF%BC%89-%E7%9B%96%E6%88%BF%E5%AD%90/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 建造者模式 BuilderPattern产品和产品零件制作过程分离解耦。 建造者模式和工厂模式的区别工厂模式是产品和工厂的关系，建造者模式是产品和产品零件的关系。 角色 产品 所需零件模板 具体的产品零件生产方式 指挥者 案例产品是房子，产品零件是地基、墙和顶，指挥者是负责成产调度。 123456789101112131415161718192021classDiagramclass Houseclass HouseBuilder&#123; &lt;&lt;abstract&gt;&gt; #House house +buildBisic()* void +buildWall()* void +buildRoofed()* void +buildHouse() House;&#125;class CommonHouseclass HighHouseclass HouseDirector&#123; -HouseBuilder houseBuilder +setHouseBuilder() void +constructHouse() House&#125;HouseBuilder *-- HouseHouseBuilder &lt;|.. CommonHouseHouseBuilder &lt;|.. HighHouseHouseDirector o-- HouseBuilder 产品： 123456789// 产品public class House &#123; // 产品零件 private String baise; private String well; private String roofed; // more getter setter&#125; 所需零件模板： 1234567891011121314public abstract class HouseBuilder &#123; // 空产品 protected House house = new House(); // 生产零件 public abstract void buildBasic(); public abstract void buildWalls(); public abstract void buildRoofed(); // 产品出厂 public House buildHouse()&#123; return house; &#125;&#125; 具体的产品零件生产方式： 12345678910111213141516public class CommonHouse extends HouseBuilder &#123; @Override public void buildBasic() &#123; System.out.println(&quot;普通房子地基10米&quot;); &#125; @Override public void buildWalls() &#123; System.out.println(&quot;普通房子垒墙10米&quot;); &#125; @Override public void buildRoofed() &#123; System.out.println(&quot;普通房子封顶&quot;); &#125;&#125; 12345678910111213141516public class HighHouse extends HouseBuilder &#123; @Override public void buildBasic() &#123; System.out.println(&quot;大厦地基50米&quot;); &#125; @Override public void buildWalls() &#123; System.out.println(&quot;大厦垒墙50米&quot;); &#125; @Override public void buildRoofed() &#123; System.out.println(&quot;大厦封顶&quot;); &#125;&#125; 指挥者 1234567891011121314151617181920public class HouseDirector &#123; private HouseBuilder houseBuilder = null; public HouseDirector(HouseBuilder houseBuilder) &#123; this.houseBuilder = houseBuilder; &#125; // 切换 public void setHouseBuilder(HouseBuilder houseBuilder) &#123; this.houseBuilder = houseBuilder; &#125; // 如何建造房子，交给指挥者 public House constructHouse()&#123; houseBuilder.buildBasic(); houseBuilder.buildWalls(); houseBuilder.buildRoofed(); return houseBuilder.buildHouse(); &#125;&#125; 测试： 123456789101112131415public class Client &#123; public static void main(String[] args) &#123; // 建造普通房子 CommonHouse commonHouse = new CommonHouse(); // 准备创建房子指挥者 HouseDirector houseDirector = new HouseDirector(commonHouse); // 房子出厂 House houseC = houseDirector.constructHouse(); // 切换，建造大厦 HighHouse highHouse = new HighHouse(); houseDirector.setHouseBuilder(highHouse); House houseH = houseDirector.constructHouse(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P60 适配器模式-工作原理","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P60 适配器模式-工作原理","date":"2020-11-08T16:00:00.000Z","updated":"2022-06-15T08:32:50.175Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P60 适配器模式-工作原理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P60%20%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 工作原理 将一个类的接口转换成另一种接口，让原本接口不兼容的类可以兼容。 从用户的角度看不到被适配者，是解耦的。 用户调用适配器转化出来的目标接口方法，适配器再调用被适配者的相关接口方法。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P61 类适配器-电压问题","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P61 类适配器-电压问题","date":"2020-11-08T16:00:00.000Z","updated":"2022-06-15T08:32:50.175Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P61 类适配器-电压问题/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P61%20%E7%B1%BB%E9%80%82%E9%85%8D%E5%99%A8-%E7%94%B5%E5%8E%8B%E9%97%AE%E9%A2%98/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 类适配器模式介绍Adapter类，通过继承src类，实现dst类接口，完成src-&gt;dst的适配。 123456789101112131415classDiagramclass Voltage220V&#123; +output220V() void&#125;class Voltage5V&#123; &lt;&lt;Interface&gt;&gt; +output5V() void&#125;class VoltageAdapterclass Phone&#123; +charging() void&#125;Voltage220V &lt;|-- VoltageAdapterVoltage5V &lt;|.. VoltageAdapterVoltage5V &lt;.. Phone 角色 被适配类：某个类的方法提供的值不符合需求 符合需求的接口 适配类：继承”被适配类“，实现”符合需求的接口“ 被适配类 12345678public class Voltage220V &#123; // 输出220V public int output220V()&#123; int src = 220; System.out.println(&quot;电压&quot; + src); return src; &#125;&#125; 符合需求的接口 123public interface IVoltage5V &#123; public int output5V();&#125; 适配类 12345678public class VoltageAdapter extends Voltage220V implements IVoltage5V &#123; @Override public int output5V() &#123; int srcV = output220V(); int dstV = srcV / 44; return dstV; &#125;&#125; 需求 123456789public class Phone &#123; public void charging(IVoltage5V iVoltage5V)&#123; if (iVoltage5V.output5V() == 5)&#123; System.out.println(&quot;电压为5V&quot;); &#125; else &#123; System.out.println(&quot;电压非5V&quot;); &#125; &#125;&#125; 测试 1234567public class Client &#123; public static void main(String[] args) &#123; System.out.println(&quot;===== 类适配器模式 =====&quot;); Phone phone = new Phone(); phone.charging(new VoltageAdapter()); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P62 对象适配器-电压问题","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P62 对象适配器-电压问题","date":"2020-11-08T16:00:00.000Z","updated":"2022-06-15T08:32:50.175Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P62 对象适配器-电压问题/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P62%20%E5%AF%B9%E8%B1%A1%E9%80%82%E9%85%8D%E5%99%A8-%E7%94%B5%E5%8E%8B%E9%97%AE%E9%A2%98/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 对象适配器”对象适配器”对“类适配器“进行了改进。众所周知，使用”继承“的方式，会造成很高的耦合，因此替换成”聚合“。 大体代码和上节相同，仅展示改进的地方。 12345678910111213141516public class VoltageAdapter implements IVoltage5V &#123; private Voltage220V voltage220V; public VoltageAdapter(Voltage220V v)&#123; this.voltage220V = v; &#125; @Override public int output5V() &#123; if (voltage220V != null)&#123; int srcV = voltage220V.output220V(); int dstV = srcV / 44; return dstV; &#125; return 0; &#125;&#125; 测试 1234567public class Client &#123; public static void main(String[] args) &#123; System.out.println(&quot;===== 对象适配器模式 =====&quot;); Phone phone = new Phone(); phone.charging(new VoltageAdapter(new Voltage220V())); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P63 接口适配器-电压问题","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P63 接口适配器-电压问题","date":"2020-11-08T16:00:00.000Z","updated":"2022-06-15T08:32:50.176Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P63 接口适配器-电压问题/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P63%20%E6%8E%A5%E5%8F%A3%E9%80%82%E9%85%8D%E5%99%A8-%E7%94%B5%E5%8E%8B%E9%97%AE%E9%A2%98/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 接口适配器模式介绍 一些书籍称为：适配器模式（Default Adapter Pattern）或缺省适配器模式。 当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法）。那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求。 适用于一个接口不想使用其所有的方法的情况。 案例有很多方法的接口 12345public interface InterfaceDemo &#123; void a(); void b(); void c();&#125; 适配器 抽象类，将接口的方法全部空实现。 123456789// 重写接口方法，全空方法。public abstract class InterfaceAdapter implements InterfaceDemo&#123; @Override public void a() &#123;&#125; @Override public void b() &#123;&#125; @Override public void c() &#123;&#125;&#125; 测试 12345678910public class Client &#123; public static void main(String[] args) &#123; new InterfaceAdapter()&#123; @Override public void a() &#123; System.out.println(&quot;使用了 a 方法&quot;); &#125; &#125;; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P13 简单工厂","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P13 简单工厂","date":"2020-11-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.164Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P13 简单工厂/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P13%20%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/","excerpt":"","text":"Java设计模式-Mr.high 应用场景适用于未来产品种类不会改变。 工厂设计模式三种方式 简单工厂 工厂方法 抽象工厂 简单工厂优点： 把具体产品的类型，从客户端代码中解耦出来。 服务器端，如果修改了具体的产品的类名，客户端不知道。 符合“面向接口编程”的思想。 缺点： 客户端不得不死记硬背那些常量与具体产品的映射关系，比如1对应面条，2对应米饭。 如果具体产品特别多，则简单工厂就会变得十分臃肿。比如有100个具体产品，则需要在简单工厂的switch里写出100个case。 最重要的是，新的需求将不满足“开闭原则”。 工厂的初衷由于产品类名可能会经常发生变化，通过加入factory这一层将其于上层隔离，而factory作为约定，很小概率会改变。 1234567891011121314151617classDiagramclass Food&#123; &lt;&lt;interface&gt;&gt; +eat() void&#125;class Noodle&#123; +eat() void&#125;class Rice&#123; +eat() void&#125;class FoodFactory&#123; +getFood()$ Food&#125;Food &lt;|.. NoodleFood &lt;|.. RiceFood &lt;.. FoodFactory 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package xyz.hooy.woniuxueyuan;// 服务端// 抽象产品interface Food &#123; void eat();&#125;// 具体产品class Noodle implements Food&#123; @Override public void eat() &#123; System.out.println(&quot;面条&quot;); &#125;&#125;// 具体产品class Rice implements Food&#123; @Override public void eat() &#123; System.out.println(&quot;米饭&quot;); &#125;&#125;// 简单工厂class FoodFactory &#123; public static Food getFood(int n)&#123; Food food = null; switch (n)&#123; case 1: food = new Noodle(); break; case 2: food = new Rice(); break; &#125; return food; &#125;&#125;// ==========================================// 客户端public class AppTest &#123; public static void main(String[] args) &#123; Food food = FoodFactory.getFood(1); food.eat(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"蜗牛学院","slug":"蜗牛学院","permalink":"http://blog.hooy.xyz/tags/%E8%9C%97%E7%89%9B%E5%AD%A6%E9%99%A2/"}],"author":"hooy"},{"title":"P15 工厂方法设计模式","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P15 工厂方法设计模式","date":"2020-11-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.165Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P15 工厂方法设计模式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P15%20%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"Java设计模式-Mr.high 应用场景一个产品对应一种工厂。 工厂方法优点： 仍然具有简单工厂的特点，修改工厂内的产品不会影响上层的使用。 当需要扩展新的产品时，不需要修改原来的代码，扩展一个新的工厂就可以了。 缺点： 如果有多个产品等级，那么工厂类的数量就会爆炸式的增长。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package xyz.hooy.woniuxueyuan;// 抽象产品interface Food &#123; void eat();&#125;// 具体产品class Noodle implements Food&#123; @Override public void eat() &#123; System.out.println(&quot;面条&quot;); &#125;&#125;class Rice implements Food&#123; @Override public void eat() &#123; System.out.println(&quot;米饭&quot;); &#125;&#125;// 抽象工厂interface Factory &#123; Food getFood();&#125;// 具体工厂class NoodleFactory implements Factory&#123; @Override public Food getFood() &#123; return new Noodle(); &#125;&#125;class RiceFactory implements Factory&#123; @Override public Food getFood() &#123; return new Rice(); &#125;&#125;// ==========================================// 客户端public class AppTest &#123; public static void main(String[] args) &#123; Factory factory = new NoodleFactory(); Food food = factory.getFood(); food.eat(); &#125;&#125; 相较于简单工厂模式，工厂已经解耦，可以随意增加新的产品和工厂。 比如新增 123456789101112class Fish implements Food&#123; @Override public void eat() &#123; System.out.println(&quot;鱼肉&quot;); &#125;&#125;class FishFactory implements Factory&#123; @Override public Food getFood() &#123; return new Fish(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"蜗牛学院","slug":"蜗牛学院","permalink":"http://blog.hooy.xyz/tags/%E8%9C%97%E7%89%9B%E5%AD%A6%E9%99%A2/"}],"author":"hooy"},{"title":"P21 抽象工厂","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P21 抽象工厂","date":"2020-11-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.167Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P21 抽象工厂/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P21%20%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/","excerpt":"","text":"Java设计模式-Mr.high 应用场景如果业务里出现了固定规格的“套餐”，并且产品簇不会经常发生变化。 抽象工厂由于工厂方法设计模式在产品种类特别多的情况下，产品类和工厂类过多。通过抽象工厂设计模式来合并工厂，减少工厂类。 如果一个工厂仅生产一种产品叫工厂方法设计模式，一个工厂生产多种产品叫抽象工厂设计模式。 优点： 仍然具有简单工厂和工厂方法的优点。 工厂数量减少了。 产品簇套餐里产品的种类。种类增加&#x2F;减少都将修改所有的工厂。 产品等级单一产品类型，多种实现。只需要增加新的工厂实现即可。 123456789101112131415161718192021222324252627282930313233343536373839package xyz.hooy.woniuxueyuan;public class ScrewTest &#123;&#125;// 产品：螺丝interface Screw&#123;&#125;class SixmmScrew implements Screw&#123;&#125;class EightmmScrew implements Screw&#123;&#125;// 产品：螺母interface Nut&#123;&#125;class SixmmNut implements Nut&#123;&#125;class EightmmNut implements Nut&#123;&#125;// 抽象工厂interface Factory&#123; Screw getScrew(); Nut getNut();&#125;// 6mm工厂class SixmmFactory implements Factory&#123; @Override public Screw getScrew() &#123; return new SixmmScrew(); &#125; @Override public Nut getNut() &#123; return new SixmmNut(); &#125;&#125;// 8mm工厂class EightmmFactory implements Factory&#123; @Override public Screw getScrew() &#123; return new EightmmScrew(); &#125; @Override public Nut getNut() &#123; return new EightmmNut(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"蜗牛学院","slug":"蜗牛学院","permalink":"http://blog.hooy.xyz/tags/%E8%9C%97%E7%89%9B%E5%AD%A6%E9%99%A2/"}],"author":"hooy"},{"title":"P28 设计模式概述和分类","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P28 设计模式概述和分类","date":"2020-11-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.170Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P28 设计模式概述和分类/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P28%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0%E5%92%8C%E5%88%86%E7%B1%BB/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 设计模式分三种类型，共23种 创建型模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式。 结构性模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。 行为型模式：模板方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式（Interpreter模式）、状态模式、策略模式、职责链模式（责任链模式）","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P29 单例（静态常量饿汉式）","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P29 单例（静态常量饿汉式）","date":"2020-11-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.170Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P29 单例（静态常量饿汉式）/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P29%20%E5%8D%95%E4%BE%8B%EF%BC%88%E9%9D%99%E6%80%81%E5%B8%B8%E9%87%8F%E9%A5%BF%E6%B1%89%E5%BC%8F%EF%BC%89/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 什么是单例？所谓的类单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的静态方法。 比如Hibernate的SessionFactory，它充当数据存储源的代理，并负责创建Session对象，SessionFactory并不是轻量级的，一般情况下，一个项目通常只需要一个SessionFactory就够，这时就会使用到单例模式。 单例模式使用场景需要频繁的进行创建和销毁的对象，创建对象时耗时过多或耗费资源过多（即：重量级对象），但又经常使用到的对象、工具类对象、频繁访问的数据库或文件的对象（比如数据源、session工厂等）。 单例设计模式八种方式 饿汉式（静态常量） 饿汉式（静态代码块） 懒汉式（线程不安全） 懒汉式（线程安全，同步方法） [禁用]懒汉式（线程不安全，同步代码块） 双重检查 [推荐]静态内部类 **[最推荐]**枚举 饿汉式（静态常量）优点：写法简单，就是在类装载时就完成实例化，避免了线程同步的问题。 缺点：类装载时就完成实例化，没有达到Lazy Loading（懒加载）的效果，如果从始至终从未使用这个实例，则会造成内存浪费。 这种方式基于classloder机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化Instance就没达到懒加载的效果。 结论：这种单例模式可用，可能造成内存浪费。 123456789101112class Singleton &#123; // 1.构造器私有化，防止外部new private Singleton()&#123;&#125; // 2.类本身内部创建对象实例 private final static Singleton INSTANCE = new Singleton(); // 3.提供一个公有的静态方法，返回实例对象 public static Singleton getInstance()&#123; return INSTANCE; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P30 单例（静态代码块饿汉式）","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P30 单例（静态代码块饿汉式）","date":"2020-11-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.170Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P30 单例（静态代码块饿汉式）/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P30%20%E5%8D%95%E4%BE%8B%EF%BC%88%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E9%A5%BF%E6%B1%89%E5%BC%8F%EF%BC%89/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 饿汉式（静态代码块）和饿汉式（静态常量）是一样的，只不过将类实例化的过程放在了静态代码块中，也就是类加载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。 结论：这种单例模式可用，可能造成内存浪费。 12345678910111213141516class Singleton &#123; // 1.构造器私有化，防止外部new private Singleton()&#123;&#125; // 2.类本身内部的静态块创建对象实例 private static Singleton instance; static &#123; instance = new Singleton(); &#125; // 3.提供一个公有的静态方法，返回实例对象 public static Singleton getInstance()&#123; return instance; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P31 单例（线程不安全懒汉式）","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P31 单例（线程不安全懒汉式）","date":"2020-11-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.170Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P31 单例（线程不安全懒汉式）/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P31%20%E5%8D%95%E4%BE%8B%EF%BC%88%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E6%87%92%E6%B1%89%E5%BC%8F%EF%BC%89/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 懒汉式（线程不安全）优点：起到了懒加载的效果，但是只能在单线程下使用。 缺点：如果在多线程下，一个线程进入了if(singleton == null)判断语句块，还未来得及向下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式。 结论：在实际开发中，不要使用这种方式。 123456789101112131415class Singleton &#123; // 1.构造器私有化，防止外部new private Singleton()&#123;&#125; // 2.类本身内部创建对象实例 private static Singleton instance; // 3.提供一个公有的静态方法，当使用该方法时，才去创建 instance public static Singleton getInstance()&#123; if(instance == null)&#123; instance = new Singleton(); &#125; return instance; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P32 单例（线程安全懒汉式）","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P32 单例（线程安全懒汉式）","date":"2020-11-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.171Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P32 单例（线程安全懒汉式）/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P32%20%E5%8D%95%E4%BE%8B%EF%BC%88%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%87%92%E6%B1%89%E5%BC%8F%EF%BC%89/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 懒汉式（线程安全，同步方法）优点：解决了线程不安全的问题。 缺点：效率太低，每个线程在想获取实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化就够了，后面想获得该实例，直接return就行了。方法进行同步效率太低。 结论：在实际开发中，不推荐使用这种方式。 123456789101112131415class Singleton &#123; // 1.构造器私有化，防止外部new private Singleton()&#123;&#125; // 2.类本身内部创建对象实例 private static Singleton instance; // 3.提供一个公有的静态方法，当使用该方法时，才去创建 instance public static synchronized Singleton getInstance()&#123; if(instance == null)&#123; instance = new Singleton(); &#125; return instance; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P33 单例（同步代码块懒汉式）","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P33 单例（同步代码块懒汉式）","date":"2020-11-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.171Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P33 单例（同步代码块懒汉式）/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P33%20%E5%8D%95%E4%BE%8B%EF%BC%88%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E5%9D%97%E6%87%92%E6%B1%89%E5%BC%8F%EF%BC%89/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 懒汉式（线程不安全，同步代码块）这种同步并不能起到线程同步的作用。问题所在见代码。 结论：在实际开发中，不能使用这种方式。 123456789101112131415161718class Singleton &#123; // 1.构造器私有化，防止外部new private Singleton()&#123;&#125; // 2.类本身内部创建对象实例 private static Singleton instance; // 3.提供一个公有的静态方法，当使用该方法时，才去创建 instance public static Singleton getInstance()&#123; if(instance == null)&#123; // 有很大问题，多个线程都停在这里，轮流创建新对象 synchronized (Singleton.class)&#123; instance = new Singleton(); &#125; &#125; return instance; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P34 单例（DoubleCheck）","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P34 单例（DoubleCheck）","date":"2020-11-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.171Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P34 单例（DoubleCheck）/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P34%20%E5%8D%95%E4%BE%8B%EF%BC%88DoubleCheck%EF%BC%89/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 双重检查优点：线程安全；延迟加载；效率较高 结论：在实际开发中，推荐使用这种单例设计模式 12345678910111213141516171819class Singleton &#123; // 1.构造器私有化，防止外部new private Singleton()&#123;&#125; // 2.类本身内部创建对象实例 private static volatile Singleton instance; // 3.提供一个公有的静态方法，当使用该方法时，才去创建 instance public static Singleton getInstance()&#123; if(instance == null)&#123; synchronized (Singleton.class)&#123; if(instance == null)&#123; instance = new Singleton(); &#125; &#125; &#125; return instance; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P35 单例（静态内部类）","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P35 单例（静态内部类）","date":"2020-11-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.172Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P35 单例（静态内部类）/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P35%20%E5%8D%95%E4%BE%8B%EF%BC%88%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%89/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 静态内部类这种方式采用了类装载的机制来保证初始化实例只有一个线程。 静态内部类方式在Singleton类被装在时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。 类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮我们保证了线程的安全，在类进行初始化时，别的线程是无法进入的。 优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高。 结论：推荐使用 1234567891011121314class Singleton &#123; // 1.构造器私有化，防止外部new private Singleton()&#123;&#125; // 2.实现内部类。外部类加载的时候不会加载内部类，只有当调用getInstance方法时，才调用内部类。懒加载效果。 private static class SingleInstance &#123; private static final Singleton INSTANCE = new Singleton(); &#125; // 3.提供一个公有的静态方法，返回实例对象 public static Singleton getInstance()&#123; return SingleInstance.INSTANCE; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P36 单例（枚举方式）","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P36 单例（枚举方式）","date":"2020-11-07T16:00:00.000Z","updated":"2022-06-15T08:32:50.172Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P36 单例（枚举方式）/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P36%20%E5%8D%95%E4%BE%8B%EF%BC%88%E6%9E%9A%E4%B8%BE%E6%96%B9%E5%BC%8F%EF%BC%89/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 枚举这借助JDK1.5中添加到枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建对象。 这种方式是Effective Java作者Josh Bloch提倡的方式 结论：推荐使用 [本节内容建议查阅相关博客]","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P11 依赖倒转原则","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P11 依赖倒转原则","date":"2020-11-06T16:00:00.000Z","updated":"2022-06-15T08:32:50.163Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P11 依赖倒转原则/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P11%20%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC%E5%8E%9F%E5%88%99/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 依赖倒转原则非依赖倒转原则1234567891011121314151617181920package xyz.hooy.principle.inversion;public class DependecyInversion &#123; public static void main(String[] args) &#123; Person person = new Person(); person.receive(new Email()); &#125;&#125;class Email&#123; public String getInfo()&#123; return &quot;电子邮件信息：hello，world&quot;; &#125;&#125;class Person&#123; public void receive(Email email)&#123; System.out.println(email.getInfo()); &#125;&#125; 依赖倒转原则12345678910111213141516171819202122232425262728293031323334package xyz.hooy.principle.inversion;public class DependecyInversion &#123; public static void main(String[] args) &#123; Person person = new Person(); person.receive(new Email()); person.receive(new Wechat()); &#125;&#125;interface IReceive&#123; String getInfo();&#125;class Email implements IReceive&#123; @Override public String getInfo()&#123; return &quot;邮件信息：hello，world&quot;; &#125;&#125;class Wechat implements IReceive&#123; @Override public String getInfo()&#123; return &quot;微信信息：hello，world&quot;; &#125;&#125;class Person&#123; // 依赖接口 public void receive(IReceive iReceive)&#123; System.out.println(iReceive.getInfo()); &#125;&#125; 依赖关系传递的三种方式1.接口传递1234567891011121314151617181920212223242526272829303132package xyz.hooy.principle.inversion;public class Dependecy &#123; public static void main(String[] args) &#123; OpenAndClose openAndClose = new OpenAndClose(); Changhong changhong = new Changhong(); openAndClose.open(changhong); &#125;&#125;interface IOpenAndClose &#123; void open(ITV tv);&#125;interface ITV &#123; void play();&#125;class OpenAndClose implements IOpenAndClose &#123; // 接口传递依赖 @Override public void open(ITV tv) &#123; tv.play(); &#125;&#125;class Changhong implements ITV &#123; @Override public void play() &#123; System.out.println(&quot;长虹电视开机&quot;); &#125;&#125; 2.构造方法传递1234567891011121314151617181920212223242526272829303132333435package xyz.hooy.principle.inversion;public class Dependecy &#123; public static void main(String[] args) &#123; OpenAndClose openAndClose = new OpenAndClose(new Changhong()); openAndClose.open(); &#125;&#125;interface IOpenAndClose &#123; void open();&#125;interface ITV &#123; void play();&#125;class OpenAndClose implements IOpenAndClose &#123; public ITV tv; // 构造方法传递依赖 public OpenAndClose(ITV tv)&#123; this.tv = tv; &#125; @Override public void open() &#123; this.tv.play(); &#125;&#125;class Changhong implements ITV &#123; @Override public void play() &#123; System.out.println(&quot;长虹电视开机&quot;); &#125;&#125; 3.setter方法传递12345678910111213141516171819202122232425262728293031323334353637383940package xyz.hooy.principle.inversion;public class Dependecy &#123; public static void main(String[] args) &#123; OpenAndClose openAndClose = new OpenAndClose(); openAndClose.setTV(new Changhong()); openAndClose.open(); &#125;&#125;interface IOpenAndClose &#123; void open(); void setTV(ITV tv);&#125;interface ITV &#123; void play();&#125;class OpenAndClose implements IOpenAndClose &#123; public ITV tv; @Override public void open() &#123; this.tv.play(); &#125; // setter方法传递依赖 @Override public void setTV(ITV tv) &#123; this.tv = tv; &#125;&#125;class Changhong implements ITV &#123; @Override public void play() &#123; System.out.println(&quot;长虹电视开机&quot;); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P14 里氏替换原则","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P14 里氏替换原则","date":"2020-11-06T16:00:00.000Z","updated":"2022-06-15T08:32:50.164Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P14 里氏替换原则/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P14%20%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 里氏替换原则所有引用基类的地方必须能透明地使用其子类的对象。 在子类中尽量不要重写父类的方法。 继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合、组合、依赖来解决问题。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P16 开闭原则","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P16 开闭原则","date":"2020-11-06T16:00:00.000Z","updated":"2022-06-15T08:32:50.166Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P16 开闭原则/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P16%20%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 开闭原则类、模块和函数应该对扩展开放，修改关闭。用抽象构建框架，用实现扩展细节。 非开闭原则123456789101112131415161718192021222324252627282930313233343536373839404142package xyz.hooy.principle.ocp;public class Ocp &#123; public static void main(String[] args) &#123; GraphicEditor graphicEditor = new GraphicEditor(); graphicEditor.drawRectangle(new Rectangle()); graphicEditor.drawCircle(new Circle()); &#125;&#125;class GraphicEditor &#123; public void drawShape(Shape s)&#123; if (s.m_type == 1)&#123; drawRectangle(s); &#125; else &#123; drawCircle(s); &#125; &#125; public void drawRectangle(Shape r)&#123; System.out.println(&quot;矩形&quot;); &#125; public void drawCircle(Shape r)&#123; System.out.println(&quot;圆形&quot;); &#125;&#125;class Shape &#123; int m_type;&#125;class Rectangle extends Shape &#123; Rectangle() &#123; super.m_type = 1; &#125;&#125;class Circle extends Shape &#123; Circle() &#123; super.m_type = 2; &#125;&#125; 开闭原则12345678910111213141516171819202122232425262728293031323334353637383940package xyz.hooy.principle.ocp;public class Ocp &#123; public static void main(String[] args) &#123; GraphicEditor graphicEditor = new GraphicEditor(); graphicEditor.drawShape(new Rectangle()); graphicEditor.drawShape(new Circle()); &#125;&#125;class GraphicEditor &#123; public void drawShape(Shape s)&#123; s.draw(); &#125;&#125;abstract class Shape &#123; int m_type; public abstract void draw();&#125;class Rectangle extends Shape &#123; Rectangle() &#123; super.m_type = 1; &#125; @Override public void draw() &#123; System.out.println(&quot;矩形&quot;); &#125;&#125;class Circle extends Shape &#123; Circle() &#123; super.m_type = 2; &#125; @Override public void draw() &#123; System.out.println(&quot;圆形&quot;); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P19 迪米特法则","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P19 迪米特法则","date":"2020-11-06T16:00:00.000Z","updated":"2022-06-15T08:32:50.166Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P19 迪米特法则/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P19%20%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 迪米特法则一个对象应该对其他对象保持最少的了解 迪米特法则又叫最少知道原则，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供public方法，不对外泄露任何信息。 更简单的定义：只与直接朋友通信。 什么是直接朋友？每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称成员变量，方法参数，方法返回值中的类称为直接朋友，而出现在局部变量中的类不是直接朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P22 合成复用原则","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P22 合成复用原则","date":"2020-11-06T16:00:00.000Z","updated":"2022-06-15T08:32:50.168Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P22 合成复用原则/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P22%20%E5%90%88%E6%88%90%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 合成复用原则继承耦合性很高。 尽量使用依赖&#x2F;聚合&#x2F;组合的方式，而不是使用继承。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P23 UML基本介绍","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P23 UML基本介绍","date":"2020-11-06T16:00:00.000Z","updated":"2022-06-15T08:32:50.168Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P23 UML基本介绍/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P23%20UML%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） UML符号含义 Entity Class 类 Interface 接口 Relation Dependency 依赖（使用） 实现 Association 关联 Generalization 泛化（继承） Aggregation 聚合 Composite 组合","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P25 类的依赖、泛化和实现","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P25 类的依赖、泛化和实现","date":"2020-11-06T16:00:00.000Z","updated":"2022-06-15T08:32:50.168Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P25 类的依赖、泛化和实现/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P25%20%E7%B1%BB%E7%9A%84%E4%BE%9D%E8%B5%96%E3%80%81%E6%B3%9B%E5%8C%96%E5%92%8C%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 依赖关系只要是在类中用到了对方，那么他们之间就存在依赖关系。如果没有对方，连编译都通过不了。 123456789101112131415classDiagramclass PersonServiceBean&#123; -PersonDao persionDao +save(Person person) void +getDCard(Integer personid) IDCard +modify() void&#125;class IDCardclass Personclass PersonDaoclass DepartmentIDCard &lt;.. PersonServiceBeanPerson &lt;.. PersonServiceBeanPersonDao &lt;.. PersonServiceBeanDepartment &lt;.. PersonServiceBean 类中用到了对方 类的成员变量属性 方法的返回类型 方法接收参数类型 方法中的局部变量 泛化关系泛化关系实际上就是继承关系，他是依赖关系的特例 1234567classDiagramclass DaoSupport&#123; +save() void +delete() void&#125;class PersonServiceBeanDaoSupport &lt;|-- PersonServiceBean 1.如果A类继承了B类，那么就说A和B存在泛化关系 实现关系实现关系实际上就是A类实现B类，他是依赖关系的特例 123456789classDiagramclass PersonService&#123; &lt;&lt;interface&gt;&gt; +delete(Integer id) void&#125;class PersonServiceBean&#123; +delete(Integer id) void&#125;PersonService &lt;|.. PersonServiceBean","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P26 类的关联、聚合和组合","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P26 类的关联、聚合和组合","date":"2020-11-06T16:00:00.000Z","updated":"2022-06-15T08:32:50.169Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P26 类的关联、聚合和组合/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P26%20%E7%B1%BB%E7%9A%84%E5%85%B3%E8%81%94%E3%80%81%E8%81%9A%E5%90%88%E5%92%8C%E7%BB%84%E5%90%88/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 关联关系关联关系实际上就是类与类之间的联系，他是依赖关系的特例 单向一对一关系1234classDiagramclass Personclass IDCardIDCard &quot;1&quot;&lt;--&quot;1&quot; Person 双向一对一关系1234classDiagramclass Personclass IDCardIDCard &quot;1&quot;--&quot;1&quot; Person 聚合关系表示的是整体和部分的关系，整体和部分可以分开。他是关联关系的特例 可以分开，就是聚合。不可分开，就是组合 1234567891011public class Computer &#123; private Mouse mouse; private Monter monter; public void setMouse(Mouse mouse) &#123; this.mouse = mouse; &#125; public void setMonter(Monter monter) &#123; this.monter = monter; &#125;&#125; 123456789classDiagramclass Computer&#123; -Mouse mouse -Moniter moniter&#125;class Mouseclass MoniterComputer o-- MouseComputer o-- Moniter 组合关系组合关系，也是整体与部分的关系，但是整体与部分不可以分开 认为Mouse、Monitor和Computer是不可分离的，则升级为组合关系 12345678910public class Computer &#123; private Mouse mouse = new Mouse(); private Monitor monitor = new Monitor();&#125;public class Client &#123; public static void main(String[] args) &#123; Computer computer = new Computer(); &#125;&#125; 123456789classDiagramclass Computer&#123; -Mouse mouse -Moniter moniter&#125;class Mouseclass MoniterComputer *-- MouseComputer *-- Moniter 聚合和组合关系辨析如果在程序中Person实体中定义了对IDCard进行联级删除，即删除Person时连同IDCard一起删除，那么IDCard和Person就是组合了（两个对象同生共死） 12345678public class Person &#123; private IDCard card; // 聚合关系，人不一定持有身份证 private Head head = new Head(); // 组合关系，人一定不能没有脑袋 public void setIDCard(IDCard card) &#123; this.card = card; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P6 单一职责原则","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P6 单一职责原则","date":"2020-11-05T16:00:00.000Z","updated":"2022-06-15T08:32:50.174Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P6 单一职责原则/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P6%20%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 单一职责原则 降低类的复杂度，一个类只负责一项职责。 提高类的可读性，可维护性。 降低变更引起的风险。 通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中方法数量足够少，可以在方法级别保持单一职责原则。 标准的单一职责原则演示一个类负责一项职责。 12345678910111213141516171819202122package xyz.hooy.principle.singleresponsibility;public class SingleResponsibility1 &#123; public static void main(String[] args) &#123; RoadVehicle roadVehicle = new RoadVehicle(); roadVehicle.run(&quot;汽车&quot;); AirVehicle airVehicle = new AirVehicle(); airVehicle.run(&quot;飞机&quot;); &#125;&#125;class RoadVehicle&#123; public void run(String venicle)&#123; System.out.println(venicle + &quot;公路运行&quot;); &#125;&#125;class AirVehicle&#123; public void run(String venicle)&#123; System.out.println(venicle + &quot;天空运行&quot;); &#125;&#125; 非标准的单一职责原则演示只有类中方法数量足够少，可以在方法级别保持单一职责原则。 12345678910111213141516171819package xyz.hooy.principle.singleresponsibility;public class SingleResponsibility2 &#123; public static void main(String[] args) &#123; Vehicle vehicle = new Vehicle(); vehicle.runRoad(&quot;汽车&quot;); vehicle.runAir(&quot;飞机&quot;); &#125;&#125;class Vehicle &#123; public void runRoad(String venicle) &#123; System.out.println(venicle + &quot;公路运行&quot;); &#125; public void runAir(String venicle) &#123; System.out.println(venicle + &quot;天空运行&quot;); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P8 接口隔离原则","slug":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P8 接口隔离原则","date":"2020-11-05T16:00:00.000Z","updated":"2022-06-15T08:32:50.180Z","comments":true,"path":"技术向/Java/尚硅谷Java设计模式（图解+框架源码剖析）/P8 接口隔离原则/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3+%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/P8%20%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/","excerpt":"","text":"尚硅谷Java设计模式（图解+框架源码剖析） 接口隔离原则 类A通过接口Interface1依赖类B，类C通过接口Interface1依赖类D，如果接口Interface1对于类A和类C来说不是最小接口，那么类B和类D必须去实现他们不需要的方法。 将接口Interface1拆分为独立的几个接口，类A和类B分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。 接口Interface1中出现的方法，根据实际情况拆分为三个接口。 非接口隔离原则不满足最小接口，实现类还要实现根本用不到的方法。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394package xyz.hooy.principle.segregation;public class Segregation1 &#123;&#125;interface Interface1 &#123; void operation1(); void operation2(); void operation3(); void operation4(); void operation5();&#125;// B 只想实现接口 1 2 3 方法class B implements Interface1&#123; @Override public void operation1() &#123; System.out.println(&quot;B 实现了 operation1&quot;); &#125; @Override public void operation2() &#123; System.out.println(&quot;B 实现了 operation2&quot;); &#125; @Override public void operation3() &#123; System.out.println(&quot;B 实现了 operation3&quot;); &#125; @Override public void operation4() &#123; System.out.println(&quot;B 实现了 operation4&quot;); &#125; @Override public void operation5() &#123; System.out.println(&quot;B 实现了 operation5&quot;); &#125;&#125;// D 只想实现接口 1 4 5 方法class D implements Interface1&#123; @Override public void operation1() &#123; System.out.println(&quot;D 实现了 operation1&quot;); &#125; @Override public void operation2() &#123; System.out.println(&quot;D 实现了 operation2&quot;); &#125; @Override public void operation3() &#123; System.out.println(&quot;D 实现了 operation3&quot;); &#125; @Override public void operation4() &#123; System.out.println(&quot;D 实现了 operation4&quot;); &#125; @Override public void operation5() &#123; System.out.println(&quot;D 实现了 operation5&quot;); &#125;&#125;// A 依赖接口 1 2 3 方法class A &#123; public void depend1(Interface1 i)&#123; i.operation1(); &#125; public void depend2(Interface1 i)&#123; i.operation2(); &#125; public void depend3(Interface1 i)&#123; i.operation3(); &#125;&#125;// C 依赖接口 1 4 5 方法class C &#123; public void depend1(Interface1 i)&#123; i.operation1(); &#125; public void depend4(Interface1 i)&#123; i.operation4(); &#125; public void depend5(Interface1 i)&#123; i.operation5(); &#125;&#125; 接口隔离原则将原来的接口拆分成三个更细的接口。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192package xyz.hooy.principle.segregation.improve;public class Segregation2 &#123; public static void main(String[] args) &#123; A a = new A(); a.depend1(new B()); // A 通过接口去依赖（使用） B a.depend2(new B()); a.depend3(new B()); C c = new C(); c.depend1(new D()); // C 通过接口去依赖（使用） D c.depend4(new D()); c.depend5(new D()); &#125;&#125;interface Interface1 &#123; void operation1();&#125;interface Interface2 &#123; void operation2(); void operation3();&#125;interface Interface3 &#123; void operation4(); void operation5();&#125;// B 只想实现接口 1 2 3 方法class B implements Interface1,Interface2&#123; @Override public void operation1() &#123; System.out.println(&quot;B 实现了 operation1&quot;); &#125; @Override public void operation2() &#123; System.out.println(&quot;B 实现了 operation2&quot;); &#125; @Override public void operation3() &#123; System.out.println(&quot;B 实现了 operation3&quot;); &#125;&#125;// D 只想实现接口 1 4 5 方法class D implements Interface1,Interface3&#123; @Override public void operation1() &#123; System.out.println(&quot;D 实现了 operation1&quot;); &#125; @Override public void operation4() &#123; System.out.println(&quot;D 实现了 operation4&quot;); &#125; @Override public void operation5() &#123; System.out.println(&quot;D 实现了 operation5&quot;); &#125;&#125;// A 依赖接口 1 2 3 方法class A &#123; public void depend1(Interface1 i)&#123; i.operation1(); &#125; public void depend2(Interface2 i)&#123; i.operation2(); &#125; public void depend3(Interface2 i)&#123; i.operation3(); &#125;&#125;// C 依赖接口 1 4 5 方法class C &#123; public void depend1(Interface1 i)&#123; i.operation1(); &#125; public void depend4(Interface3 i)&#123; i.operation4(); &#125; public void depend5(Interface3 i)&#123; i.operation5(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"}],"author":"hooy"},{"title":"P58_展开语法真好用啊","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P58_展开语法真好用啊","date":"2020-11-04T16:00:00.000Z","updated":"2022-06-15T08:32:50.290Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P58_展开语法真好用啊/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P58_%E5%B1%95%E5%BC%80%E8%AF%AD%E6%B3%95%E7%9C%9F%E5%A5%BD%E7%94%A8%E5%95%8A/","excerpt":"","text":"展开语法真好用啊 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 展开语法... 三个点，代表展开语法。 案例 两个数组合并将数组 hd 追加到 arr 的后面。 12let arr = [&quot;hdcms&quot;,&quot;houdunren&quot;];let hd = [&quot;js&quot;,&quot;css&quot;]; 常规方式： 123for(const value of hd)&#123; arr.push(value);&#125; 展开语法 方式： 相当于把原数组展开（拆开）了，然后放了进去。 拆包 1arr = [... arr,... hd]; 案例 函数参数个数不确定时输入的参数自动转换为 args 数组。 装包 123456function sum(... args)&#123; return args.reduce((s,v) -&gt; &#123; return (s += v); &#125;,0);&#125;console.log(sum(1,2,34,54,5));","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P60_使用解构赋值提高效率","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P60_使用解构赋值提高效率","date":"2020-11-04T16:00:00.000Z","updated":"2022-06-15T08:32:50.291Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P60_使用解构赋值提高效率/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P60_%E4%BD%BF%E7%94%A8%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/","excerpt":"","text":"使用解构赋值提高效率 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 解构赋值一一对应，代码更优雅。 1234// 数组let arr = [&quot;后盾人&quot;,2010];let [name,year] = arr;console.log(name,year); 执行结果： 后盾人 2010 123456// 也适用于函数，返回值为数组function get()&#123; return [&quot;后盾人&quot;,2010];&#125;let [name,year] = get();console.log(name); 执行结果： 后盾人 2010 解构里面的展开语法放在 变量 时，吸收。 12let [name, ... args] = [&quot;后盾人&quot;,&quot;houdunren.com&quot;,2010];console(args); 执行结果： [“houdunren.com”,2010] 放在 值 时，打散。 1console.log(...&quot;hdcms&quot;); 执行结果： [“h”,”d”,”c”,”c”,”m”,”s”] 解构默认值当解构为 underfunded 时，使用默认值。 12let [name,year = 2010] = [&quot;后盾人&quot;];console(year); 执行结果： 2010 解构在函数中应用1234function show([name,year])&#123; console.log(name,year);&#125;show([&quot;后盾人&quot;,2010]); 执行结果： 后盾人 2010","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P59_点语法操作DOM节点元素","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P59_点语法操作DOM节点元素","date":"2020-11-04T16:00:00.000Z","updated":"2022-06-15T08:32:50.291Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P59_点语法操作DOM节点元素/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P59_%E7%82%B9%E8%AF%AD%E6%B3%95%E6%93%8D%E4%BD%9CDOM%E8%8A%82%E7%82%B9%E5%85%83%E7%B4%A0/","excerpt":"","text":"点语法操作DOM节点元素 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） DOM节点转成数组DOM节点不能直接使用 map() 方法，因为节点原型链没有这个方法。而数组有。 12345678910111213141516const div = document.querySelectorAll(&quot;div&quot;);// 1.Array.from(div).map(function(item) &#123; console.log(item);&#125;);// 2.Array.prototype.map.call(div,function(item)&#123; console.log(item);&#125;);// 3.[... div].map(function(item) &#123; console.log(item);&#125;);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P61_添加元素的多种操作技巧","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P61_添加元素的多种操作技巧","date":"2020-11-04T16:00:00.000Z","updated":"2022-06-15T08:32:50.291Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P61_添加元素的多种操作技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P61_%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/","excerpt":"","text":"添加元素的多种操作技巧 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 向数组内追加元素push() 向数组 后面 追加元素，返回值：合并后数组内元素的个数。 方法一 array.length最后的下标向后追加 123let array = [&quot;hdcms&quot;,&quot;houudnren&quot;];array[array.length] = &quot;cms&quot;;console.log(array); 方法二 展开语法（数组合并） 123let array = [&quot;hdcms&quot;,&quot;houudnren&quot;];let hd = [&quot;shop&quot;,&quot;cms&quot;];array = [...arrray,...hd]; 方法三 推荐，使用对象方法 12let array = [&quot;hdcms&quot;,&quot;houudnren&quot;];array.push(&quot;shop&quot;,&quot;php&quot;,&quot;js&quot;); 123let array = [&quot;hdcms&quot;,&quot;houudnren&quot;];let hd = [&quot;shop&quot;,&quot;cms&quot;];array.push(...hd); // &quot;shop&quot;,&quot;cms&quot;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P62_数据出栈与入栈及填充操作","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P62_数据出栈与入栈及填充操作","date":"2020-11-04T16:00:00.000Z","updated":"2022-06-15T08:32:50.292Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P62_数据出栈与入栈及填充操作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P62_%E6%95%B0%E6%8D%AE%E5%87%BA%E6%A0%88%E4%B8%8E%E5%85%A5%E6%A0%88%E5%8F%8A%E5%A1%AB%E5%85%85%E6%93%8D%E4%BD%9C/","excerpt":"","text":"数据出栈与入栈及填充操作 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） push() 方法，上节说到，向数组后面追加元素。 pop() 方法，从数组后面弹出元素。 unshift() 方法，向数组前面压入元素。 shift() 方法，从数组前面弹出元素。填充元素 1console.log(Array(5)); 执行结果： [empty x 5] fill() 方法，填充。 1console.log(Array(5).fill(&quot;后盾人&quot;)); 执行结果： [“后盾人”,”后盾人”,”后盾人”,”后盾人”,”后盾人”]","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P64_数组移动实例","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P64_数组移动实例","date":"2020-11-04T16:00:00.000Z","updated":"2022-06-15T08:32:50.293Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P64_数组移动实例/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P64_%E6%95%B0%E7%BB%84%E7%A7%BB%E5%8A%A8%E5%AE%9E%E4%BE%8B/","excerpt":"","text":"数组移动实例 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 案例 元素移动到某个位置1234567891011121314151617function move(array, from, to)&#123; if(from &lt; 0 || to &gt;= array.length)&#123; console.error(&quot;参数错误&quot;); return; &#125; // 创建一个新数组，不影响原数组 const newArray = [...array]; // 从数组里取出要移动的元素 from下标，取1个 let item = newArray.splice(from,1); // 插入到新位置 to下标 newArray.splice(to, 0 ,...item); return newArray;&#125;let array = [1,2,3,4];console.table(move(array,1,3)); 执行结果： |0|1||1|3||2|4||3|2| 注意：移动不是互换！","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P63_splice与slice实现数组的增删改查","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P63_splice与slice实现数组的增删改查","date":"2020-11-04T16:00:00.000Z","updated":"2022-06-15T08:32:50.292Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P63_splice与slice实现数组的增删改查/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P63_splice%E4%B8%8Eslice%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/","excerpt":"","text":"splice与slice实现数组的增删改查 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） splice与slice区别slice() P38 字符串截取操作 已经讲过，截取字符串，也可以用于截取数组。原数组不做改变。 splice() 从原数组拿走元素。原数组发生改变。参数：第一个参数数组下标，第二个参数向后多少个元素。 splice方法删除操作1234let arr = [1,2,3,4,5];// 将下标为 1 位置的元素删除arr.splice(1,1);console.table(arr); 执行结果： |0|1||1|3||2|4||3|5| 增加操作123456789let arr = [1,2,3,4,5];// 向下标为 1 的位置添加一个元素arr.splice(1,0,&quot;后盾人&quot;);console.table(arr);// 头增加arr.splice(0,0,&quot;后盾人&quot;);// 尾增加arr.splice(arr.length,0,&quot;后盾人&quot;); 执行结果： |0|1 ||1|”后盾人”||2|2 ||3|3 ||4|4 ||5|5 | 替换操作1234let arr = [1,2,3,4,5];// 向下标为 1 的位置替换元素arr.splice(1,1,&quot;后盾人&quot;);console.table(arr); 执行结果： |0|1 ||1|”后盾人”||2|3 ||3|4 ||4|5 |","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P65_清空数组的多种处理方式","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P65_清空数组的多种处理方式","date":"2020-11-04T16:00:00.000Z","updated":"2022-06-15T08:32:50.293Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P65_清空数组的多种处理方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P65_%E6%B8%85%E7%A9%BA%E6%95%B0%E7%BB%84%E7%9A%84%E5%A4%9A%E7%A7%8D%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/","excerpt":"","text":"清空数组的多种处理方式 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 清空数组最简单的方式： 12345678let hd = [1,2,3,4,5]// 1.hd = [];// 2. 推荐hd.length = 0;console.log(hd);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"00005_浅谈Spring数据绑定","slug":"创作集/00005_浅谈Spring数据绑定","date":"2020-10-31T16:00:00.000Z","updated":"2022-05-10T01:02:26.898Z","comments":true,"path":"创作集/00005_浅谈Spring数据绑定/","link":"","permalink":"http://blog.hooy.xyz/%E5%88%9B%E4%BD%9C%E9%9B%86/00005_%E6%B5%85%E8%B0%88Spring%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/","excerpt":"","text":"不使用任何注解单值对应单键后端用例： POJO类-User 12345678@Data@NoArgsConstructor@AllArgsConstructorpublic class User &#123; private String name; private Integer age; private String sex;&#125; 基本类型和对象类型混合 1234@RequestMapping(&#123;&quot;/&quot;,&quot;index&quot;,&quot;index.html&quot;&#125;)public ResponseResult index(User user,String name,String age)&#123; return new ResponseResult(200,name + &quot; | &quot; + age,user);&#125; 编码类型：QueryStringURL：http://127.0.0.1/index?name=hooy&amp;age=18 数据存放：请求行 请求类型：Get Post Put Delete 编码类型：application&#x2F;x-www-from-urlencodedURL：http://127.0.0.1/index 数据存放：请求体 请求类型：Post Put Delete 编码类型：multipart&#x2F;form-dataURL：http://127.0.0.1/index 数据存放：请求体 请求类型：Get Post Put Delete 编码类型：application&#x2F;jsonURL：http://127.0.0.1/index 数据存放：请求体 请求类型：无 多值共用同一个键编码类型：QueryString 1name = hooy &amp; age = 18 &amp; age = 21 后端用例： 1234@RequestMapping(&#123;&quot;/&quot;,&quot;index&quot;,&quot;index.html&quot;&#125;)public ResponseResult index(String name,int[] age)&#123; return new ResponseResult(200,name + &quot; | &quot; + age[0] + &quot; | &quot; + age[1]);&#125; 总结前端传过来的key与后端接收的变量名&#x2F;对象内变量名一致，将自动赋值。 可以读取 请求行 和 请求体 中的数据。 支持QueryString和application&#x2F;x-www-from-urlencoded、multipart&#x2F;form-data。 不支持application&#x2F;json，无法赋值。 RequestParam 注解用于前端传过来的key映射到不同名的变量名上。 1234@RequestMapping(&#123;&quot;/&quot;,&quot;index&quot;,&quot;index.html&quot;&#125;)public ResponseResult index(User user, @RequestParam(&quot;name&quot;) String username, String age)&#123; return new ResponseResult(200,username + &quot; | &quot; + age,user);&#125; 注解有三个参数，分别是： value：参数名 required：是否包含该参数，默认为true，表示该请求路径中必须包含该参数，如果不包含就报错 defaultValue：默认参数值，如果设置了该值，required&#x3D;true将失效，自动为false,如果没有传该参数，就使用默认值 RequestBody 注解用于批量插入数据（适合使用json数列） 1234@RequestMapping(&#123;&quot;/&quot;,&quot;index&quot;,&quot;index.html&quot;&#125;)public ResponseResult index(@RequestBody List&lt;User&gt; listUser)&#123; return new ResponseResult(200,&quot;&quot;,listUser);&#125; 结语如 QueryString 和 application/x-www-from-urlencoded、multipart/form-data格式传递数据，后端接收变量可以不加注解或者使用 RequestParam(key) 注解。 如果有需要批量插入数据，推荐使用 application/json 这种Json格式传递数据，后端接收变量需加上 RequestBody 注解。 最后，如有纰漏，欢迎指正，共同进步。","categories":[{"name":"创作集","slug":"创作集","permalink":"http://blog.hooy.xyz/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"}],"tags":[],"author":"hooy"},{"title":"00004_常见的三种请求体编码方式","slug":"创作集/00004_常见的三种请求体编码方式","date":"2020-10-31T16:00:00.000Z","updated":"2022-05-10T01:02:23.254Z","comments":true,"path":"创作集/00004_常见的三种请求体编码方式/","link":"","permalink":"http://blog.hooy.xyz/%E5%88%9B%E4%BD%9C%E9%9B%86/00004_%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E8%AF%B7%E6%B1%82%E4%BD%93%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/","excerpt":"","text":"编码类型对应 请求头 里的 Content-Type。 当数据放入 请求体 里时，才需要编码方式。 multipart&#x2F;form-data格式：支持 key-value，支持上传多个文件。 application&#x2F;x-www-from-urlencoded格式： 1name = hooy &amp; age = 18 仅支持 key-value，不支持文件。 application&#x2F;json格式： 1&#123;&quot;name&quot;:hooy,&quot;age&quot;:18,&quot;sex&quot;:&quot;boy&quot;&#125;","categories":[{"name":"创作集","slug":"创作集","permalink":"http://blog.hooy.xyz/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"}],"tags":[],"author":"hooy"},{"title":"Hooyblog项目生产环境部署","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/HooyBlog项目生产环境部署","date":"2020-10-31T16:00:00.000Z","updated":"2022-06-15T08:32:50.097Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/HooyBlog项目生产环境部署/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/HooyBlog%E9%A1%B9%E7%9B%AE%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/","excerpt":"","text":"1 HooyBlog项目构建镜像及容器1.1 OpenWRT-Docker IP Address : 192.168.100.4 12docker build -t hooyblog .docker run -d -p 8888:8888 -v /opt/hooy/hooyblog/HooyBlogPhoto:/opt/hooy/hooyblog/HooyBlogPhoto --name hooyblog hooyblog 1.2 CentOS7-Docker12docker build -t hooyblog .docker run -d -p 8888:8888 -v /opt/hooyblog/HooyBlogPhoto:/opt/hooyblog/HooyBlogPhoto --name hooyblog hooyblog 2 依赖技术2.1 MySQL数据库1docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=huyanqing --name mysql mysql:5.7 2.2 Redis数据库1docker run -d -p 6379:6379 --name redis redis 2.3网易云音乐开源项目支持12docker pull binaryify/netease_cloud_music_apidocker run -d -p 3000:3000 --name netease_cloud_music_api binaryify/netease_cloud_music_api","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"常见问题汇总","slug":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/常见问题汇总","date":"2020-10-31T16:00:00.000Z","updated":"2022-06-15T08:32:50.115Z","comments":true,"path":"技术向/Docker/狂神说Java_Docker最新超详细版教程通俗易懂/常见问题汇总/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/","excerpt":"","text":"1.报错：Cannot connect to the Docker daemon at unix:&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock. Is the docker daemon running ?已知触发条件： 12# 拉取镜像时docker pull centos 解决方法： 12# 重启服务service docker restart","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P54_课程介绍与数组引用类型分析","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P54_课程介绍与数组引用类型分析","date":"2020-10-29T16:00:00.000Z","updated":"2022-06-15T08:32:50.289Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P54_课程介绍与数组引用类型分析/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P54_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%95%B0%E7%BB%84%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%88%86%E6%9E%90/","excerpt":"","text":"课程介绍与数组引用类型分析 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 数组标准方式： 1const array = new Array(&#x27;hdcms&#x27;,&#x27;houdunren&#x27;); 简易方式： 1const array = [1,2,3,4]; 控制台更清晰的查看数组使用 console.table(array) 可以更为清晰的查看数组。 多维数组 存数组12let array = [ [&quot;hdcms&quot;] , [ &quot;houdunren&quot; , &quot;cms&quot; ] ];console.log(array[1][1]); 执行结果： cms 存对象 1let array = [ &#123;name:&quot;php&quot;,click:33&#125; , &#123;name:&quot;js&quot;,click:99&#125; ];","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P56_Array-of与数组创建细节","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P56_Array-of与数组创建细节","date":"2020-10-29T16:00:00.000Z","updated":"2022-06-15T08:32:50.289Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P56_Array-of与数组创建细节/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P56_Array-of%E4%B8%8E%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA%E7%BB%86%E8%8A%82/","excerpt":"","text":"Array.of与数组创建细节 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 创建Array存在的缺陷注意坑。 当 多 个参数时，所有参数作为数组元素存入数组。 当 单 个参数时，作为数组长度，全部内容均为 undefined。多参数 123let cms = new Array(1,23,34,4);console.log(cms.length);console.table(cms); 执行结果： 4 |0|1 ||1|23||2|34||3|4 | 单参数123let cms = new Array(6);console.log(cms.length);console.table(cms); 执行结果： 6 空 Array.of解决单参数时的问题单参数时，作为单个元素存入数组种。 123let arr = Array.of(6);console.log(arr.length);console.table(arr); 1 |0|1|","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P57_类型检测与转换","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P57_类型检测与转换","date":"2020-10-29T16:00:00.000Z","updated":"2022-06-15T08:32:50.290Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P57_类型检测与转换/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P57_%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%BD%AC%E6%8D%A2/","excerpt":"","text":"类型检测与转换 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） Array类型检测Array.isArray() 方法。 123456// 数值console.log(Array.isArray(23));// 对象console.log(Array.isArray(&#123;&#125;));// 数组console.log(Array.isArray([])); 执行结果： false false true 数组转字符串1234567let hd = [1,3,4];// 1.hd.toString();// 2.String(hd);// 3.hd.join(&quot;&quot;); 案例location.href 获取当前url 12let hd = [1,3,4].join(&quot;-&quot;);console.log(location.href + &quot;?id=&quot; + hd); 执行结果： http://127.0.0.1/4html?id=1-3-4","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P48_Math数学计算","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P48_Math数学计算","date":"2020-10-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.287Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P48_Math数学计算/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P48_Math%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97/","excerpt":"","text":"Math数学计算 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 常用函数 最大值 Math.max() 最小值 Math.min() 向上取整 Math.ceil() 向下取整 Math.floor() 四舍五入 Math.round()1234567891011121314// 最大值/最小值// 多参数Math.max(1,2,3,4,5); // 5Math.min(1,2,3,4,5); // 1// 数组 默认参数是不能为数组的let grade = [12,3,2,124];Math.max.apply(null,grade);// 向上取整Math.ceil(5.01); // 6// 向下取整Math.floor(5.01); // 5// 四舍五入Math.round(5.56) // 6","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P49_Math-random随机点名操作","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P49_Math-random随机点名操作","date":"2020-10-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.287Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P49_Math-random随机点名操作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P49_Math-random%E9%9A%8F%E6%9C%BA%E7%82%B9%E5%90%8D%E6%93%8D%E4%BD%9C/","excerpt":"","text":"Math.random随机点名操作 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 随机数随即范围：[0,1) 返回的是 浮点数。 范围通用公式1234567// [min,max)min + Math.floor(Math.random() * (max - min))// [min,max]min + Math.floor(Math.random() * (max - min))// [2,5)const index = 2 + Math.floor(Math.random() * (5 - 2));","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P50_日期时间戳的使用与计算脚本执行时间","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P50_日期时间戳的使用与计算脚本执行时间","date":"2020-10-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.287Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P50_日期时间戳的使用与计算脚本执行时间/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P50_%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E6%88%B3%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E8%AE%A1%E7%AE%97%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4/","excerpt":"","text":"日期时间戳的使用与计算脚本执行时间 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） Date() 时间对象获取事件对象的两种方式： new Date() 返回 object 对象 Date() 返回 string 对象1234567891011let date1 = new Date();console.log(typeof date1); // objectconsole.log(date1);// object 获取当前时间戳的方法console.log(date1 * 1);let data2 = Date();console.log(typeof data2); // stringconsole.log(data2); // string 获取不到时间戳 返回 NaNconsole.log(data2 * 1); 执行结果： Thu Oct 29 2020 17:04:58 GMT+0800 (中国标准时间) 获取时间戳123// 直接获取当前时间戳方式et time = Date.now();console.log(time); 获取脚本运行时间参数字符串是名字，可以任意取，但开始结束名必须一致。 12345// 计算脚本执行时间// 开始console.time(&quot;runtime&quot;);// 结束console.timeEnd(&quot;runtime&quot;); 执行结果： runtime:0.005126953125 ms 修改时间某个时间点 12345678910111213// 字符串参数const date = new Date(&quot;1990-9-22 3:22:18&quot;);console.log(date);console.log(date.getMonth()); // 获取月份 从0开始 返回8// 多数值参数const date = new Date(1990,2,22,13,22,19);console.log(date);// 数组参数，展开语法 ...const param = [1990,2,22,13,22,19];const date = new Date(... param);console.log(date);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P52_封装日期格式化函数","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P52_封装日期格式化函数","date":"2020-10-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.288Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P52_封装日期格式化函数/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P52_%E5%B0%81%E8%A3%85%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%87%BD%E6%95%B0/","excerpt":"","text":"封装日期格式化函数 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 年月日时分秒及格式12345678910111213141516const date = new Date(&quot;1992-2-12 10:22:18&quot;); function dateFormat(date,format = &quot;YYYY-MM-DD HH:mm:ss&quot;) &#123; const config = &#123; YYYY : date.getFullYear(), MM : date.getMonth(), DD : date.getDate(), HH : date.getHours(), mm : date.getMinutes(), ss : date.getSeconds() &#125;; for (const key in config)&#123; format = format.replace(key,config[key]) &#125; return format; &#125;console.log(dateFormat(date,&quot;YYYY年MM月&quot;));","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P53_优秀的日期处理库momentjs","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P53_优秀的日期处理库momentjs","date":"2020-10-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.288Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P53_优秀的日期处理库momentjs/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P53_%E4%BC%98%E7%A7%80%E7%9A%84%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86%E5%BA%93momentjs/","excerpt":"","text":"优秀的日期处理库momentjs 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 官网momentjs","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P51_ISO与TIMESTAMP格式互换","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P51_ISO与TIMESTAMP格式互换","date":"2020-10-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.288Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P51_ISO与TIMESTAMP格式互换/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P51_ISO%E4%B8%8ETIMESTAMP%E6%A0%BC%E5%BC%8F%E4%BA%92%E6%8D%A2/","excerpt":"","text":"ISO与TIMESTAMP格式互换 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） ISO 与 TIMESTAMP|ISO |标准时间|Fri Jul 12 1996 08:22:12 GMT+0800||TIMESTAMP|时间戳 |837130932000 | ISO 转 TIMESTAMP有以下四种方式： 123456789const date = new Date();// 1.console.log(date * 1);// 2.console.log(Number(date));// 3.console.log(date.valueOf());// 4.console.log(date.getTime()); TIMESTAMP 转 ISO123// 创建一个时间戳const timestamp = Date.;console.log(new Date(timestamp));","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P34_字符串转义与模板字面量使用","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P34_字符串转义与模板字面量使用","date":"2020-10-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.282Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P34_字符串转义与模板字面量使用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P34_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89%E4%B8%8E%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F%E4%BD%BF%E7%94%A8/","excerpt":"","text":"字符串转义与模板字面量使用 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 字符串标准方式： 12let hd = new String(&quot;houdunren.com&quot;);console.log(hd.toString()); 简易写法（推荐）： 12let hd = &quot;houdunren.com&quot;;console.log(hd); 执行结果： houdunren.com 拼接字符串常规方式：使用 + 符号拼接。 123let year = &quot;2010年&quot;;let site = &quot;后盾人&quot;;console.log(site + &quot;成立于&quot; + year); ES6方式（推荐）：使用 （反引号）和${}&#96; 占位符。 提示：占位符内可以调用 函数 。 123let year = &quot;2010年&quot;;let site = &quot;后盾人&quot;;console.log($&#123;site&#125;成立于$&#123;year&#125;);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P36_神奇的标签模板","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P36_神奇的标签模板","date":"2020-10-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.282Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P36_神奇的标签模板/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P36_%E7%A5%9E%E5%A5%87%E7%9A%84%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF/","excerpt":"","text":"神奇的标签模板 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章）","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P37_字符串基本函数使用","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P37_字符串基本函数使用","date":"2020-10-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.283Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P37_字符串基本函数使用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P37_%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/","excerpt":"","text":"字符串基本函数使用 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 字符串基本函数12345678let name = &quot;houDUNren&quot;;// 获取长度console.log(name.length);// 转大写console.log(name.toUpperCase());// 转小写console.log(name.toLowerCase()); length 案例1234567891011121314&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;script&gt; let ps = document.querySelector(&quot;[name=&#x27;password&#x27;]&quot;); ps.addEventListener(&quot;keyup&quot;,function () &#123; this.value = this.value.trim(); let span = document.getElementsByTagName(&quot;span&quot;); let error = &quot;&quot;; if (this.value.length &lt; 5)&#123; error = &quot;密码不能小于5位&quot;; &#125; span[0].innerHTML = error; &#125;);&lt;/script&gt; 执行结果： 当输入字符串长度小于5时，会出现”密码不能小于5位”。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P38_字符串截取操作","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P38_字符串截取操作","date":"2020-10-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.283Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P38_字符串截取操作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P38_%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96%E6%93%8D%E4%BD%9C/","excerpt":"","text":"字符串截取操作 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 截取方法 slice() substr() substring()1let hd = &quot;houdunren.com&quot;; 单参数1234// 从第 1 个位置开始取console.log(hd.slice(1));console.log(hd.substring(1));console.log(hd.substr(1)); 执行结果： oudunren.com oudunren.com oudunren.com 双参数12345// 从第 1 个位置开始取，到第 3 个位置停止console.log(hd.slice(1,3));console.log(hd.substring(1,3));// 从第 1 个位置开始取，仅取 3 个字符console.log(hd.substr(1,3)); 执行结果： ou ou oud 负单参数123456// 倒数第 3 个位置开始取console.log(hd.slice(-3));// 无意义，和0一致console.log(hd.substring(-3));// 倒数第 3 个位置开始取console.log(hd.substr(-3)); 执行结果： com houdunren.com com 负双参数123456// 倒数第 3 个位置开始取，到倒数第 1 个位置停止console.log(hd.slice(-3,-1));// 无意义 0 到 0console.log(hd.substring(1));// 倒数第 3 个位置开始取，仅取 2 个字符console.log(hd.substr(-3，2)); 执行结果： co co","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P39_检索字符串使用技巧","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P39_检索字符串使用技巧","date":"2020-10-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.284Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P39_检索字符串使用技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P39_%E6%A3%80%E7%B4%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/","excerpt":"","text":"检索字符串使用技巧 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 检索字符indexOf() 方法。 从左向右查找。 第一个参数 查找的字符 第二个参数 从第几个字符开始查找。 找到返回位置值，未找到返回 -1。 lastIndexOf() 方法。 从右向左查找。 12const hd = &quot;houdunren.com&quot;;console.log(hd.indexOf(&quot;0&quot;,10)); 字符是否存在includes() 方法。 第一个参数 查找的字符 第二个参数 从第几个字符开始查找。 找到返回true，未找到返回false。 12const hd = &quot;houdunren.com&quot;;console.log(hd.includes(&quot;h&quot;)); 执行结果： true 字符是否在开始出现startsWith() 方法。 区分大小写。 如果想要不区分大小写，可以在调用这个函数之前使用大小写转换函数。 12const hd = &quot;houdunren.com&quot;;console.log(hd.startsWith(&quot;h&quot;)); 执行结果： true 字符是否在结束出现endsWith() 方法。 略。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P40_字符串替换标题关键字","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P40_字符串替换标题关键字","date":"2020-10-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.284Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P40_字符串替换标题关键字/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P40_%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2%E6%A0%87%E9%A2%98%E5%85%B3%E9%94%AE%E5%AD%97/","excerpt":"","text":"字符串替换标题关键字 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 字符串替换replace() 方法。 第一个","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P41_电话号码模糊处理","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P41_电话号码模糊处理","date":"2020-10-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.284Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P41_电话号码模糊处理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P41_%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E6%A8%A1%E7%B3%8A%E5%A4%84%E7%90%86/","excerpt":"","text":"电话号码模糊处理 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 重复repeat() 方法。 1console.log(&quot;*&quot;.repeat(3)); 执行结果： 案例1234function phone(mobile,len = 3)&#123; return mobile.slice(0,len * -1) + &quot;*&quot;.repeat(len);&#125;console.log(&quot;98765432101&quot;); 98765432***","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P42_类型转换使用技巧","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P42_类型转换使用技巧","date":"2020-10-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.285Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P42_类型转换使用技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P42_%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/","excerpt":"","text":"类型转换使用技巧 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 字符串转数值12345const string = &quot;99&quot;;// 1.隐式转换console.log(string * 1);// 2.Number 构造函数console.log(Number(string)); 数值转字符串1234567const number = 66;// 1.隐式转换console.log(number + &quot;&quot;);// 2.String 构造函数console.log(String(number));// 3.对象方法console.log(); 字符串内获取数值parseInt() 方法，获取整数。 parseFloat() 方法，获取浮点数。 仅能应用于以数值开始的字符串。 如果非以数值开始，则返回 NaN。 12345const string = &quot;99houdunren&quot;;// 整数型console.log(parseInt(string));// 浮点型console.log(parseFloat(string)); 执行结果： 99 字符串转数组12const cms = &quot;hdcms&quot;;console.log(cms.split(&quot;&quot;)); 执行结果： [“h”,”d”,”c”,”m”,”s”] 数组转字符串12const array = [&quot;hdcms&quot;,&quot;houdunren&quot;];console.log(array.join(&quot;&quot;)); 执行结果： hdcmshoudunren","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P43_Boolean隐式转换原理","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P43_Boolean隐式转换原理","date":"2020-10-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.285Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P43_Boolean隐式转换原理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P43_Boolean%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%8E%9F%E7%90%86/","excerpt":"","text":"Boolean隐式转换原理 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 布尔类型标准方式： 123const boolean = new Boolean(true);console.log(typeof boolean);console.log(boolean.valueOf()); 执行结果： object true 简易方式（推荐）： 12let hd = true;console.log(typeof hd); 执行结果： boolean 转布尔Boolean() 12let number = 88;Boolean(number); 执行结果： true IF判断123if( flag )&#123; // more code&#125; |true |非0|非空字符串|引用对象||false|0 |空字符串 |null |","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P44_显示转换布尔类型","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P44_显示转换布尔类型","date":"2020-10-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.285Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P44_显示转换布尔类型/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P44_%E6%98%BE%E7%A4%BA%E8%BD%AC%E6%8D%A2%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"显示转换布尔类型 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 转布尔类型两种方式： !! 自动转换双重取反。 Boolean() 布尔构造方法。1234567891011121314151617181920// 数值转布尔let number = 0;console.log(!!number);console.log(Boolean(number));// 字符串转布尔let string = &quot;houdunren&quot;;console.log(!!string);console.log(Boolean(string));// 数组转布尔let array = [];console.log(!!array);console.log(Boolean(array));// 对象转布尔let object = &#123;&#125;;let data = new Data();console.log(!!data);console.log(Boolean(data));","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P46_Number声明方式与基本函数","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P46_Number声明方式与基本函数","date":"2020-10-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.286Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P46_Number声明方式与基本函数/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P46_Number%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F%E4%B8%8E%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B0/","excerpt":"","text":"Number声明方式与基本函数 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 声明方式标准方式： 12345let number = new Number(99);// 返回 number 数值number.valueOf();// 返回 string 字符串number.toString(); 简易方式： 1let number = 99; 基本函数isInteger() 判断是否是整数型，是返回true，否返回false。 to.Fixed() 保留几位小数。 123let number = 99.556;console.log(Number.isInteger(number));console.log(number.toFixed(2)); 执行结果： false","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P45_boolean实例操作","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P45_boolean实例操作","date":"2020-10-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.286Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P45_boolean实例操作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P45_boolean%E5%AE%9E%E4%BE%8B%E6%93%8D%E4%BD%9C/","excerpt":"","text":"boolean实例操作 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 实例123456while (true)&#123; const year = prompt(&quot;后盾人哪年成立的？&quot;).trim(); if (!year) continue; console.log(year == &quot;2010&quot; ? &quot;回答正确&quot; : &quot;输入错误&quot;); break;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P47_数值类型转换技巧与NaN","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P47_数值类型转换技巧与NaN","date":"2020-10-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.286Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P47_数值类型转换技巧与NaN/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P47_%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%8A%80%E5%B7%A7%E4%B8%8ENaN/","excerpt":"","text":"数值类型转换技巧与NaN 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） NaNNaN &#x3D; Not a Number 判断NaN的两种方式 Number.isNaN() Object.is()123let string = &quot;houdunren&quot;;console.log(Number.isNaN(2 / string));console.log(Object.is(2 / string,NaN)); 执行结果： true true","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P13_const常量声明一探究竟","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P13_const常量声明一探究竟","date":"2020-10-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.279Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P13_const常量声明一探究竟/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P13_const%E5%B8%B8%E9%87%8F%E5%A3%B0%E6%98%8E%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F/","excerpt":"","text":"const常量声明一探究竟 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 123456const URL = &quot;houdunren&quot;;URL = &quot;hooy&quot;; // 报错const OBJ = &#123;&#125;;OBJ.NAME = &quot;hooy&quot;; // 正常OBJ.AGE = &quot;18&quot;; // 正常 这是因为，使用 const 定义的变量，禁止改变引用。而对象的改变，只是在地址空间里修改，并没有改变引用。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P14_Object-freeze冻结变量","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P14_Object-freeze冻结变量","date":"2020-10-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.279Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P14_Object-freeze冻结变量/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P14_Object-freeze%E5%86%BB%E7%BB%93%E5%8F%98%E9%87%8F/","excerpt":"","text":"Object.freeze冻结变量 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） Object.freeze锁住对象，使对象里的成员变量禁止修改。 12345678910const HOST = &#123; url : &quot;https://www.houdunren.com/api&quot;, port : 443 &#125;;// 锁住Object.freeze(HOST);HOST.port = 80;console.log(HOST); 执行输出： {url : “https://www.houdunren.com/api&quot;,port : 443} 可以看到，port 并没有被改变。如果使用 严格模式 ，将直接通过报错的方式告诉你 port 不可改变。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P17_null与undefined详解","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P17_null与undefined详解","date":"2020-10-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.279Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P17_null与undefined详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P17_null%E4%B8%8Eundefined%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"17 null与undefined详解 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） null 与 undefined 区别 unll：引用类型（对象）不存在 undefined：基本类型不存在12let object = null;let name = undefined; 函数没有返回值，默认 undefined 调用函数没有参数，默认 undefined 1234function show(name) &#123; console.log(name);&#125;console.log(show()); 执行结果： undefined undefined typeof 未声明的变量&#x2F;未定义的变量，默认 undefined 123let a;console.log(typeof a);console.log(typeof b); 执行结果： undefined undefined 函数参数默认值12345function star(num) &#123; if(num==undefined)&#123; num = 5; &#125;&#125; 精简： 123function star(num) &#123; num = num || 5;&#125; 进一步精简： 123function star(num = 5) &#123; &#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P18_use_strict严格模式高质量代码守卫","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P18_use_strict严格模式高质量代码守卫","date":"2020-10-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.280Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P18_use_strict严格模式高质量代码守卫/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P18_use_strict%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81%E5%AE%88%E5%8D%AB/","excerpt":"","text":"use strict严格模式高质量代码守卫 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） “use strict”对当前作用域和子代","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P23_短路运算的妙用","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P23_短路运算的妙用","date":"2020-10-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.281Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P23_短路运算的妙用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P23_%E7%9F%AD%E8%B7%AF%E8%BF%90%E7%AE%97%E7%9A%84%E5%A6%99%E7%94%A8/","excerpt":"","text":"短路运算的妙用 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） prompt(&quot;提示信息&quot;) 含输入框的弹窗。 如果第一个参数为空或者为0，那么就会判断第二个参数。将为真的值赋值给变量。 通常将第二个参数作为 默认值 12let sex = prompt(&quot;请输入性别&quot;) || &quot;保密&quot;;console.log(sex); 执行结果： 输入男：男 如果不输入值，为空：保密","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P33_章节介绍与类型判断","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P33_章节介绍与类型判断","date":"2020-10-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.281Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P33_章节介绍与类型判断/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P33_%E7%AB%A0%E8%8A%82%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/","excerpt":"","text":"章节介绍与类型判断 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） typeof123456789let hdn = 3; // numberlet hds = &quot;3&quot;; // stringlet arr = [1,23,3]; //objectlet obj = &#123;&#125;; //objectfunction run()&#123;&#125; // functionlet houdunren; // undefined// 测试console.log(hdn); 可以看到，在判断 arr 和 obj 时都输出 object。无法区分，可以使用 instanceof 来判断。 instanceof判断对象是否在原型链上。（盲猜应该是指类似Java语言中的继承链） 12345let hd = [];let hdcms = &#123;&#125;;// 测试console.log(hd instanceof Array); 返回 true &#x2F; false。 123456function User()&#123;&#125;let xj = new User;console.log(xj instanceof User); 执行结果： true","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P32_for-in与for-of使用方法操作","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P32_for-in与for-of使用方法操作","date":"2020-10-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.281Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P32_for-in与for-of使用方法操作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P32_for-in%E4%B8%8Efor-of%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%93%8D%E4%BD%9C/","excerpt":"","text":"for-in与for-of使用方法操作 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） for-in与for-of区别for-in 遍历取列表数组的下标。 123for (let index in list)&#123; let value = list[index];&#125; for-of 遍历取列表数组的值。 123for (const obj of list)&#123; let value = obj;&#125; 测试用例： 1234567891011121314151617181920212223242526272829303132333435363738&lt;script&gt; /* for-in 取键名（下标） */ let hd = [ &#123;title:&quot;第一章 走进JAVASCRIPT黑洞&quot;,lesson:3&#125;, &#123;title:&quot;ubuntu19.10 配置好用的编程工作站&quot;,lesson:5&#125;, &#123;title:&quot;媒体查询响应式布局&quot;,lesson:8&#125;, ]; document.write(` &lt;table border=&quot;1&quot; width=&quot;100%&quot;&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;标题&lt;/th&gt;&lt;th&gt;课程数量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; `); for(let i in hd)&#123; document.write(` &lt;tr&gt;&lt;td&gt;$&#123;hd[i].title&#125;&lt;/td&gt;&lt;td&gt;$&#123;hd[i].lesson&#125;&lt;/td&gt;&lt;/tr&gt; `); &#125; document.write(` &lt;/table&gt; `); /* for-of 取值（对象） */ let houdunren = [&quot;hdcms&quot;,&quot;houdunren.com&quot;]; for (const iterator of houdunren)&#123; console.log(iterator); &#125; for (const iterable of &quot;houdunren&quot;)&#123; console.log(iterable); &#125; &lt;/script&gt; 注意： $&#123;&#125; 是占位符，和EL表达式类似。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P11_可怕的全局污染","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P11_可怕的全局污染","date":"2020-10-24T16:00:00.000Z","updated":"2022-06-15T08:32:50.277Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P11_可怕的全局污染/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P11_%E5%8F%AF%E6%80%95%E7%9A%84%E5%85%A8%E5%B1%80%E6%B1%A1%E6%9F%93/","excerpt":"","text":"可怕的全局污染 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） base.js 123function show() &#123; web = &quot;houdunren.com&quot;&#125; main.js 123web = &quot;后盾人&quot;;show();console.log(web); 执行结果： houdunren.com 分析： 由于没有声明 var &#x2F; let &#x2F;const ，导致作用于全局唯一变量。 严格模式必须进行声明，否则报错。 123&lt;script&gt;&quot;use strict&quot;&lt;/script&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P12_块作用域这个先进特性","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P12_块作用域这个先进特性","date":"2020-10-24T16:00:00.000Z","updated":"2022-06-15T08:32:50.278Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P12_块作用域这个先进特性/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P12_%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%BF%99%E4%B8%AA%E5%85%88%E8%BF%9B%E7%89%B9%E6%80%A7/","excerpt":"","text":"块作用域这个先进特性 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 为了防止全局污染，该怎么做？每个js文件都作为独立的作用域。 比较旧的方式是通过将作用域限制在 function 里，防止变量污染到全局。 12345678(function () &#123; var $ = (window.$ = &#123;&#125;); $.web = &quot;hdcms&quot;; var url = &quot;hdcms.com&quot;; $.getUrl = function () &#123; return url; &#125;;&#125;.bind(window)()); 推荐使用 let 将作用域限制在 &#123;&#125; 里，防止变量污染到全局。 12345678&#123; let $ = (window.$ = &#123;&#125;); $.web = &quot;hdcms&quot;; let url = &quot;hdcms.com&quot;; $.getUrl = function () &#123; return url; &#125;;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P7_变量声明基础知识","slug":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P7_变量声明基础知识","date":"2020-10-24T16:00:00.000Z","updated":"2022-06-15T08:32:50.293Z","comments":true,"path":"技术向/JavaScript/海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点/P7_变量声明基础知识/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0_%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A_JAVASCRIPT_%E7%9F%A5%E8%AF%86%E7%82%B9/P7_%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"变量声明基础知识 海豚日记 学习JS看这个就够了，全面打通 JAVASCRIPT 知识点（更新到17章） 1234567// 多个变量同时赋值var web = &quot;hdcms&quot;, name = &quot;后盾人编程&quot;, url = &quot;houdunren.com&quot;; // 多个变量共用同一值var web = url = name = &quot;hdcms&quot;; typeof获取变量类型 123456var web = &quot;hdcms&quot;;console.log(typeof web);web = 99;console.log(typeof web);web = &#123;&#125;;console.log(typeof web); 执行结果： string number objcet","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"复习_HashMap","slug":"技术向/Java/源辰课程记录/复习_HashMap","date":"2020-09-09T16:00:00.000Z","updated":"2022-05-11T01:39:26.988Z","comments":true,"path":"技术向/Java/源辰课程记录/复习_HashMap/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E5%A4%8D%E4%B9%A0_HashMap/","excerpt":"","text":"源辰复习课 HashMap 2020.09.10 ** ** ** ** ** **","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"复习_JUC框架","slug":"技术向/Java/源辰课程记录/复习_JUC框架","date":"2020-09-06T16:00:00.000Z","updated":"2022-05-11T01:39:41.699Z","comments":true,"path":"技术向/Java/源辰课程记录/复习_JUC框架/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E5%A4%8D%E4%B9%A0_JUC%E6%A1%86%E6%9E%B6/","excerpt":"","text":"源辰复习课 JUC框架 2020.09.07 ** ** ** **","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"10_MySAM和InnoDB区别","slug":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/10_MySAM和InnoDB区别","date":"2020-09-04T16:00:00.000Z","updated":"2022-06-15T08:32:50.333Z","comments":true,"path":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/10_MySAM和InnoDB区别/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/10_MySAM%E5%92%8CInnoDB%E5%8C%BA%E5%88%AB/","excerpt":"","text":"10 MySAM和InnoDB区别 狂神说Java MySQL最新教程通俗易懂 查看查看创建数据库语句 1SHOW CREATE DATABASE shool 查看数据表的定义语句 1SHOW CREATE TABLE shudent 显示表的结构（设计表）1DESC student 数据库引擎 INNODB：MySQL默认使用。 MYISAM：MySQL早年使用。差别 |事务支持 |不支持|支持 ||数据行锁定|不支持|支持 ||外键约束 |不支持|支持 ||全文索引 |支持 |不支持 ||表空间大小|较小 |较大，约为2倍| 使用场景： INNODB：安全性高，事务处理，多表多用户。 MYISAM：节约空间，速度较快。所有的数据库文件都存在data目录下，一个文件夹对应一个数据库 MySQL引擎在物理文件上的区别： INNODB * \\*.frm 文件 MYISAM * \\*.frm 表结构定义文件 \\*MYD 数据文件(data) \\*.MYI 索引文件(index)数据库字符集编码 在创建表末尾设置编码1CHARSET=utf8 若不设置，将使用默认字符集编码 MySQL的默认编码是：Latin1，不支持中文。 在 my.ini 中设置默认编码1character-set-server=utf8","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"MySQL","slug":"技术向/MySQL","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/"},{"name":"狂神说Java_MySQL最新教程通俗易懂","slug":"技术向/MySQL/狂神说Java-MySQL最新教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"11_修改和删除数据表字段","slug":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/11_修改和删除数据表字段","date":"2020-09-04T16:00:00.000Z","updated":"2022-06-15T08:32:50.334Z","comments":true,"path":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/11_修改和删除数据表字段/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/11_%E4%BF%AE%E6%94%B9%E5%92%8C%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AD%97%E6%AE%B5/","excerpt":"","text":"11 修改和删除数据表字段 狂神说Java MySQL最新教程通俗易懂 创建表引用 9 创建数据库表 提到的创建表。 12345678910CREATE TABLE IF NOT EXISTS `student` ( `id` INT(4) NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27; , `name` VARCHAR(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27; , `pwd` VARCHAR(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27; , `sex` VARCHAR(2) NOT NULL DEFAULT &#x27;女&#x27; COMMENT &#x27;性别&#x27; , `birthday` DATETIME DEFAULT NULL COMMENT &#x27;出生日期&#x27; , `address` VARCHAR(100) DEFAULT NULL COMMENT &#x27;家庭地址&#x27; , `email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27; , PRIMARY KEY(`id`))ENGINE=INNODB DEFAULT CHARSET=utf8 修改表修改表名ALTER TABLE 旧表名 RENAME AS 新表名 1ALTER TABLE student RENAME AS student1 增加字段ALTER TABLE 表名 ADD 字段名 列属性 1ALTER TABLE student1 ADD age INT(10) 修改字段名和列属性ALTER TABLE 表名 CHANGE 旧字段名 新字段名 新列属性 1ALTER TABLE student1 CHANGE age age1 INT(1) 修改列属性ALTER TABLE 表名 MODIFY 字段名 新列属性 1ALTER TABLE student1 MODIFY age VARCHAR(11) 删除字段ALTER TABLE 表名 DROP 字段名 1ALTER TABLE student1 DROP age1 删除表1DROP TABLE IF EXISTS student","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"MySQL","slug":"技术向/MySQL","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/"},{"name":"狂神说Java_MySQL最新教程通俗易懂","slug":"技术向/MySQL/狂神说Java-MySQL最新教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"12_数据库级别的外键","slug":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/12_数据库级别的外键","date":"2020-09-04T16:00:00.000Z","updated":"2022-06-15T08:32:50.334Z","comments":true,"path":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/12_数据库级别的外键/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/12_%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BA%A7%E5%88%AB%E7%9A%84%E5%A4%96%E9%94%AE/","excerpt":"","text":"12 数据库级别的外键 狂神说Java MySQL最新教程通俗易懂 方式一：创建表时设置外键123456789101112131415161718192021CREATE TABLE IF NOT EXISTS `grade` ( `id` INT(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;年级id&#x27; , `name` VARCHAR(50) NOT NULL COMMENT &#x27;年级名称&#x27; , PRIMARY KEY(`id`))ENGINE=INNODB DEFAULT CHARSET=utf8CREATE TABLE IF NOT EXISTS `student` ( `id` INT(4) NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27; , `name` VARCHAR(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27; , `pwd` VARCHAR(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27; , `sex` VARCHAR(2) NOT NULL DEFAULT &#x27;女&#x27; COMMENT &#x27;性别&#x27; , `birthday` DATETIME DEFAULT NULL COMMENT &#x27;出生日期&#x27; , `address` VARCHAR(100) DEFAULT NULL COMMENT &#x27;家庭地址&#x27; , `email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27; , `gradeid` INT(10) NOT NULL COMMENT &#x27;年级id&#x27; , PRIMARY KEY(`id`) , KEY `FK_gradeid`(`gradeid`) , CONSTRAINT `FK_gradeid` FOREIGN KEY(`gradeid`) REFERENCES `grade`(`id`) )ENGINE=INNODB DEFAULT CHARSET=utf8 方式二：表外设置外键123456789101112131415161718192021CREATE TABLE IF NOT EXISTS `grade` ( `id` INT(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;年级id&#x27; , `name` VARCHAR(50) NOT NULL COMMENT &#x27;年级名称&#x27; , PRIMARY KEY(`id`))ENGINE=INNODB DEFAULT CHARSET=utf8CREATE TABLE IF NOT EXISTS `student` ( `id` INT(4) NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27; , `name` VARCHAR(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27; , `pwd` VARCHAR(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27; , `sex` VARCHAR(2) NOT NULL DEFAULT &#x27;女&#x27; COMMENT &#x27;性别&#x27; , `birthday` DATETIME DEFAULT NULL COMMENT &#x27;出生日期&#x27; , `address` VARCHAR(100) DEFAULT NULL COMMENT &#x27;家庭地址&#x27; , `email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27; , `gradeid` INT(10) NOT NULL COMMENT &#x27;年级id&#x27; , PRIMARY KEY(`id`))ENGINE=INNODB DEFAULT CHARSET=utf8-- 表外设置外键ALTER TABLE `student`ADD CONSTRAINT `FK_gradeid` FOREIGN KEY(`gradeid`) REFERENCES `grade`(`id`) 总结不建议使用 以上操作，都是物理外键，数据库级别的外键。 最佳实践 数据库就是单独的表， 只用来存数据，只有行（数据）和列（字段） 如果需要外键功能，使用程序逻辑实现。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"MySQL","slug":"技术向/MySQL","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/"},{"name":"狂神说Java_MySQL最新教程通俗易懂","slug":"技术向/MySQL/狂神说Java-MySQL最新教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"9_创建数据库表","slug":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/9_创建数据库表","date":"2020-09-04T16:00:00.000Z","updated":"2022-06-15T08:32:50.337Z","comments":true,"path":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/9_创建数据库表/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/9_%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8/","excerpt":"","text":"9 创建数据库表 狂神说Java MySQL最新教程通俗易懂 创建表样例1234567891011USE kuangCREATE TABLE IF NOT EXISTS `student` ( `id` INT(4) NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27; , `name` VARCHAR(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27; , `pwd` VARCHAR(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27; , `sex` VARCHAR(2) NOT NULL DEFAULT &#x27;女&#x27; COMMENT &#x27;性别&#x27; , `birthday` DATETIME DEFAULT NULL COMMENT &#x27;出生日期&#x27; , `address` VARCHAR(100) DEFAULT NULL COMMENT &#x27;家庭地址&#x27; , `email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27; , PRIMARY KEY(`id`))ENGINE=INNODB DEFAULT CHARSET=utf8","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"MySQL","slug":"技术向/MySQL","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/"},{"name":"狂神说Java_MySQL最新教程通俗易懂","slug":"技术向/MySQL/狂神说Java-MySQL最新教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"狂神说MySQL01：初识MySQL","slug":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/狂神说MySQL01：初识MySQL","date":"2020-09-04T16:00:00.000Z","updated":"2022-06-15T08:32:50.356Z","comments":true,"path":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/狂神说MySQL01：初识MySQL/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/%E7%8B%82%E7%A5%9E%E8%AF%B4MySQL01%EF%BC%9A%E5%88%9D%E8%AF%86MySQL/","excerpt":"","text":"狂神说MySQL01：初识MySQL原创狂神说 狂神说 4月27日 狂神说MySQL系列连载课程，通俗易懂，基于MySQL5.7.19版本，欢迎各位狂粉转发关注学习。禁止随意转载，转载记住贴出B站视频链接及公众号链接！ 狂神说MySQL 如果你只会写代码的是码农；要学好数据库，才能基本能混口饭吃；在此基础上如果再学好操作系统和计算机网络，就能当一个不错的程序员。如果能再把离散数学、数字电路、体系结构、数据结构&#x2F;算法、编译原理学通透，再加上丰富的实践经验与领域特定知识，就能算是一个优秀的工程师了。 上课视频同步文档 初识MySQL 为什么学习数据库 1、岗位技能需求 2、现在的世界,得数据者得天下 3、存储数据的方法 4、程序,网站中,大量数据如何长久保存? 5、数据库是几乎软件体系中最核心的一个存在。 什么是数据库 数据库 ( DataBase , 简称DB ) 概念 : 长期存放在计算机内,有组织,可共享的大量数据的集合,是一个数据 “仓库” 作用 : 保存,并能安全管理数据(如:增删改查等),减少冗余… 数据库总览 : 关系型数据库 ( SQL ) MySQL , Oracle , SQL Server , SQLite , DB2 , … 关系型数据库通过外键关联来建立表与表之间的关系 非关系型数据库 ( NOSQL ) Redis , MongoDB , … 非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定 什么是DBMS 数据库管理系统 ( DataBase Management System ) 数据库管理软件 , 科学组织和存储数据 , 高效地获取和维护数据 为什么要说这个呢? 因为我们要学习的MySQL应该算是一个数据库管理系统. MySQL简介 概念 : 是现在流行的开源的,免费的 关系型数据库 历史 : 由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。 特点 : 免费 , 开源数据库 小巧 , 功能齐全 使用便捷 可运行于Windows或Linux操作系统 可适用于中小型甚至大型网站应用 官网 : https://www.mysql.com/ 安装MySQL 这里建议大家使用压缩版,安装快,方便.不复杂. 软件下载 mysql5.7 64位下载地址: https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip 电脑是64位的就下载使用64位版本的！ 安装步骤 1、下载后得到zip压缩包. 2、解压到自己想要安装到的目录，本人解压到的是D:\\Environment\\mysql-5.7.19 3、添加环境变量：我的电脑-&gt;属性-&gt;高级-&gt;环境变量 1选择PATH,在其后面添加: 你的mysql 安装文件下面的bin文件夹 4、编辑 my.ini 文件 ,注意替换路径位置 1[mysqld]basedir=D:\\Program Files\\mysql-5.7\\datadir=D:\\Program Files\\mysql-5.7\\data\\port=3306skip-grant-tables 5、启动管理员模式下的CMD，并将路径切换至mysql下的bin目录，然后输入mysqld –install (安装mysql) 6、再输入 mysqld –initialize-insecure –user&#x3D;mysql 初始化数据文件 7、然后再次启动mysql 然后用命令 mysql –u root –p 进入mysql管理界面（密码可为空） 8、进入界面后更改root密码 1update mysql.user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27; and Host = &#x27;localhost&#x27;; 9、刷新权限 1flush privileges; 10、修改 my.ini文件删除最后一句skip-grant-tables 11、重启mysql即可正常使用 1net stop mysqlnet start mysql 12、连接上测试出现以下结果就安装好了 一步步去做 , 理论上是没有任何问题的 . 如果您以前装过,现在需要重装,一定要将环境清理干净 . 好了,到这里大家都装好了,因为刚接触,所以我们先不学习命令. 这里给大家推荐一个工具 : SQLyog . 即便有了可视化工具,可是基本的DOS命名大家还是要记住! SQLyog 可手动操作,管理MySQL数据库的软件工具 特点 : 简洁 , 易用 , 图形化 使用SQLyog管理工具自己完成以下操作 : 连接本地MySQL数据库 新建MySchool数据库 字段 GradeID : int(11) , Primary Key (pk) GradeName : varchar(50) 数据库名称MySchool 新建数据库表(grade) 在历史记录中可以看到相对应的数据库操作的语句 . 连接数据库 打开MySQL命令窗口 在DOS命令行窗口进入 安装目录\\mysql\\bin 可设置环境变量，设置了环境变量，可以在任意目录打开！ 连接数据库语句 : mysql -h 服务器主机地址 -u 用户名 -p 用户密码 注意 : -p后面不能加空格,否则会被当做密码的内容,导致登录失败 ! 几个基本的数据库操作命令 : 1update user set password=password(&#x27;123456&#x27;)where user=&#x27;root&#x27;; 修改密码flush privileges; 刷新数据库show databases; 显示所有数据库use dbname；打开某个数据库show tables; 显示数据库mysql中所有的表describe user; 显示表mysql数据库中user表的列信息create database name; 创建数据库use databasename; 选择数据库exit; 退出Mysql? 命令关键词 : 寻求帮助-- 表示注释 视频同步更新 如果觉得帮助到了您，不妨赞赏支持一下吧！","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"MySQL","slug":"技术向/MySQL","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/"},{"name":"狂神说Java_MySQL最新教程通俗易懂","slug":"技术向/MySQL/狂神说Java-MySQL最新教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"6_操作数据库语句","slug":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/6_操作数据库语句","date":"2020-09-03T16:00:00.000Z","updated":"2022-06-15T08:32:50.335Z","comments":true,"path":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/6_操作数据库语句/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/6_%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E5%8F%A5/","excerpt":"","text":"6 操作数据库语句 狂神说Java MySQL最新教程通俗易懂 操作数据库 -&gt; 操作数据库中的表 -&gt; 操作数据库中表的数据 如果表名或字段名是一个特殊字符，用 &#96; (反引号) 将其包裹。 操作数据库创建数据库 1CREATE DATABASE [IF NOT EXISTS] westos; 删除数据库 1DROP DATABASE [IF EXISTS] westos 使用数据库 1USER westos 查看所有数据库 1SHOW DATABASE","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"MySQL","slug":"技术向/MySQL","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/"},{"name":"狂神说Java_MySQL最新教程通俗易懂","slug":"技术向/MySQL/狂神说Java-MySQL最新教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"8_数据库字段熟悉","slug":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/8_数据库字段熟悉","date":"2020-09-03T16:00:00.000Z","updated":"2022-06-15T08:32:50.336Z","comments":true,"path":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/8_数据库字段熟悉/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/8_%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%86%9F%E6%82%89/","excerpt":"","text":"8 数据库字段熟悉 狂神说Java MySQL最新教程通俗易懂 Unsigned 无符号整数 声明了该列不能为负数 zerofill 填充0 不足的位数，使用0来填充：int(3) 5 -&gt; 005 自增 AUTO_INCREMENT 通常理解为自增，自动在一条记录的基础上+1 通常用来设计唯一的主键 index，必须是整数类型 可以自定义主键自增的起始值和步长非空 Null not null NOT NULL 如果不填写值，将报错默认值 DEFAULT &#39;默认值&#39; 设置默认值，如果不指定该列的值，将填充默认值 注释COMMENT &#39;注释&#39; 主键PRIMARY KEY (&#39;字段名&#39;) 规范每张表应该有以下字段 id 主键 version 乐观锁 gmt_create 创建时间 gmt_update 修改时间","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"MySQL","slug":"技术向/MySQL","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/"},{"name":"狂神说Java_MySQL最新教程通俗易懂","slug":"技术向/MySQL/狂神说Java-MySQL最新教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"7_列的数据类型讲解","slug":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/7_列的数据类型讲解","date":"2020-09-03T16:00:00.000Z","updated":"2022-06-15T08:32:50.335Z","comments":true,"path":"技术向/MySQL/狂神说Java_MySQL最新教程通俗易懂/7_列的数据类型讲解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/7_%E5%88%97%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%AE%B2%E8%A7%A3/","excerpt":"","text":"7 列的数据类型讲解 狂神说Java MySQL最新教程通俗易懂 数值|tinyint |1|十分小的数据 | ||smallint |2|较小的数据 | ||mediumint|3|中等大小的数据 | ||int |4|标准的整数 |常用，等价int||bigint |8|较大的数据 | ||float |4|单精度浮点数 | ||double |8|双精度浮点数 | ||decimal | |字符串形式的浮点数|金融计算 | 字符串|char |0255 |字符串固定大小| ||varchar |065535|可变字符串 |常用，等价String||tinytext|2^8-1 |微型文本 | ||text |65535 |文本 |保存大文本 | 时间日期|date |YYYY-MM-DD |年月日 | ||time |HH:mm:ss |时分秒 | ||datetime |YYYY-MM-DD HH:mm:ss|年月日时分秒|常用 ||timestamp| |时间戳 |常用，全球统一，1970.1.1到现在的毫秒数||year | |年份表示 | | null 没有值，未知 注意，不要使用NULL进行运算。结果一定为NULL。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"MySQL","slug":"技术向/MySQL","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/"},{"name":"狂神说Java_MySQL最新教程通俗易懂","slug":"技术向/MySQL/狂神说Java-MySQL最新教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"38_死锁排查","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/38_死锁排查","date":"2020-08-29T16:00:00.000Z","updated":"2022-06-15T08:32:50.210Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/38_死锁排查/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/38_%E6%AD%BB%E9%94%81%E6%8E%92%E6%9F%A5/","excerpt":"","text":"38 死锁排查 狂神说Java JUC并发编程最新版通俗易懂 图解 案例后面将通过工具排查死锁。 1234567891011121314151617181920212223242526272829303132333435363738package deadelock;import lombok.AllArgsConstructor;import java.util.concurrent.TimeUnit;public class Deadlock &#123; public static void main(String[] args) &#123; String lockA = &quot;lockA&quot;; String lockB = &quot;lockB&quot;; new Thread(new MyThread(lockA,lockB)).start(); new Thread(new MyThread(lockB,lockA)).start(); &#125;&#125;@AllArgsConstructorclass MyThread implements Runnable&#123; private String lockA; private String lockB; @Override public void run() &#123; // 锁的是地址 synchronized (lockA)&#123; System.out.println(&quot;get:&quot; + lockA + &quot;need:&quot; + lockB); try &#123; TimeUnit.SECONDS.sleep(2); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; synchronized (lockB)&#123; System.out.println(&quot;get:&quot; + lockB + &quot;need:&quot; + lockA); &#125; &#125; &#125;&#125; 排查死锁的方法在控制台输入 jps -l 查找进程号。 jstack 进程号 查看堆栈信息。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"33_彻底玩转单例模式","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/33_彻底玩转单例模式","date":"2020-08-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.208Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/33_彻底玩转单例模式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/33_%E5%BD%BB%E5%BA%95%E7%8E%A9%E8%BD%AC%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"33 彻底玩转单例模式 狂神说Java JUC并发编程最新版通俗易懂 先说结论：枚举 是创建单例的不二之选。 单例模式： 饿汉式 （类一加载，就创建对象） DCL懒汉式 （当调用时才创建对象。DCL双重检测锁） 静态内部类式 （通过内部类的final来确保唯一）以上均会被 反射 机制破坏单例。 枚举式 （反射 newInstance方法源码写明遇到枚举将异常） 案例 饿汉式 123456789101112131415161718192021222324package single;/** * [饿汉式] * 优点：线程安全 * 缺点：不能延时加载，浪费内存 */public class HungryMan &#123; private HungryMan()&#123;&#125; private static HungryMan instance = new HungryMan(); public static HungryMan getInstance()&#123; return instance; &#125;&#125;class HungryManTest&#123; // 测试 public static void main(String[] args) &#123; HungryMan hungryMan1 = HungryMan.getInstance(); HungryMan hungryMan2 = HungryMan.getInstance(); System.out.println(hungryMan1 == hungryMan2); &#125;&#125; DCL懒汉式 123456789101112131415161718192021222324252627282930313233343536373839package single;/** * [DCL懒汉式] * DCL：双重检测锁模式 * 优点：线程安全，延时加载 */public class LazyMan &#123; private LazyMan()&#123;&#125; // 为什么加入 volatile 关键字 看下面 private static volatile LazyMan instance; public static LazyMan getInstance()&#123; if(instance == null)&#123; synchronized (LazyMan.class)&#123; if (instance == null)&#123; /* 创建对象需要散步操作，涉及到指令重排 1. 分配内存 2. 执行构造方法，初始化对象 3. 把这个对象指向内存空间 如果123执行还正常，如果指令重排132，就会造成其他线程使用时出现异常，因为对象还没初始化好。使用 volatile 关键字禁止指令重排。 */ instance = new LazyMan(); &#125; &#125; &#125; return instance; &#125;&#125;class LazyManTest &#123; // 测试 public static void main(String[] args) &#123; LazyMan instance1 = LazyMan.getInstance(); LazyMan instance2 = LazyMan.getInstance(); System.out.println(instance1 == instance2); &#125;&#125; 静态内部类式 123456789101112131415161718192021222324package single;/** * [静态内部类式] * 优点：线程安全，延时加载 */public class StaticInner &#123; private StaticInner()&#123;&#125; private static class InnerClass&#123; private static final StaticInner instance = new StaticInner(); &#125; public static StaticInner getInstance()&#123; return InnerClass.instance; &#125;&#125;class StaticInnerTest &#123; // 测试 public static void main(String[] args) &#123; StaticInner instance1 = StaticInner.getInstance(); StaticInner instance2 = StaticInner.getInstance(); System.out.println(instance1 == instance2); &#125;&#125; 枚举式 1234567891011121314151617181920212223package single;/** * [枚举式] * 优点：枚举是创建单例的不二之选 * 缺点：不能延时加载 */public enum Enum &#123; INSTANCE; public static Enum getInstance()&#123; return INSTANCE; &#125;&#125;class EnumTest&#123; // 测试 public static void main(String[] args) &#123; Enum hungryMan1 = Enum.getInstance(); Enum hungryMan2 = Enum.getInstance(); System.out.println(hungryMan1 == hungryMan2); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"35_原子引用解决ABA问题","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/35_原子引用解决ABA问题","date":"2020-08-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.209Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/35_原子引用解决ABA问题/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/35_%E5%8E%9F%E5%AD%90%E5%BC%95%E7%94%A8%E8%A7%A3%E5%86%B3ABA%E9%97%AE%E9%A2%98/","excerpt":"","text":"35 原子引用解决ABA问题 狂神说Java JUC并发编程最新版通俗易懂 什么是ABA问题","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"37_自旋锁","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/37_自旋锁","date":"2020-08-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.209Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/37_自旋锁/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/37_%E8%87%AA%E6%97%8B%E9%94%81/","excerpt":"","text":"37 自旋锁 狂神说Java JUC并发编程最新版通俗易懂 什么是自旋锁自旋锁（spinlock）：是指当一个线程在获取锁的时候，如果锁已经被其它线程获取，那么该线程将循环等待，然后不断的判断锁是否能够被成功获取，直到获取到锁才会退出循环。 自旋锁和互斥锁的区别互斥锁：线程会从sleep（加锁）——&gt;running（解锁），过程中有上下文的切换，cpu的抢占，信号的发送等开销。 自旋锁：线程一直是running(加锁——&gt;解锁)，死循环检测锁的标志位，机制不复杂。 案例手写自旋锁，并测试。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package spinlock;import java.util.concurrent.TimeUnit;import java.util.concurrent.atomic.AtomicReference;public class Spinlock &#123; // 原子类 AtomicReference private AtomicReference cas = new AtomicReference(); public void lock()&#123; Thread thread = Thread.currentThread(); // CAS(Compare And Swap 比较并替换) 实现 while (!cas.compareAndSet(null,thread))&#123; // 自旋 &#125; &#125; public void unlock()&#123; Thread thread = Thread.currentThread(); cas.compareAndSet(thread,null); &#125;&#125;class SpinlockTest&#123; public static void main(String[] args) throws InterruptedException &#123; Spinlock spinlock = new Spinlock(); new Thread( () -&gt; &#123; spinlock.lock(); try &#123; System.out.println(Thread.currentThread().getName() + &quot;Open&quot;); TimeUnit.SECONDS.sleep(5); System.out.println(Thread.currentThread().getName() + &quot;Close&quot;); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; finally &#123; spinlock.unlock(); &#125; &#125;,&quot;T1&quot; ).start(); // 让 T1 线程抢到锁 Thread.sleep(3); new Thread( () -&gt; &#123; // 当 T1 线程抢到锁，T2 将在这里自旋。当 T1 释放锁，自旋结束。 spinlock.lock(); try &#123; System.out.println(Thread.currentThread().getName()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; spinlock.unlock(); &#125; &#125;,&quot;T2&quot; ).start(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"24_CPU密集型和IO密集型","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/24_CPU密集型和IO密集型","date":"2020-08-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.205Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/24_CPU密集型和IO密集型/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/24_CPU%E5%AF%86%E9%9B%86%E5%9E%8B%E5%92%8CIO%E5%AF%86%E9%9B%86%E5%9E%8B/","excerpt":"","text":"24 CPU密集型和IO密集型 狂神说Java JUC并发编程最新版通俗易懂 线程池最大线程数如何设置 CPU密集型 CPU有多少条线程（逻辑处理器），就设置为多少。使用 Runtime.getRuntime().availableProcessors 获取当前计算机CPU的逻辑处理器数目。 IO密集型 如果存在15个大型任务，那么应设置为大于15个线程。因为留出线程给比较轻的任务。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"25_函数型接口、断定型接口、消费型接口和","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/25_函数型接口、断定型接口、消费型接口和","date":"2020-08-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.206Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/25_函数型接口、断定型接口、消费型接口和/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/25_%E5%87%BD%E6%95%B0%E5%9E%8B%E6%8E%A5%E5%8F%A3%E3%80%81%E6%96%AD%E5%AE%9A%E5%9E%8B%E6%8E%A5%E5%8F%A3%E3%80%81%E6%B6%88%E8%B4%B9%E5%9E%8B%E6%8E%A5%E5%8F%A3%E5%92%8C/","excerpt":"","text":"25 函数型接口、断定型接口、消费型接口和 狂神说Java JUC并发编程最新版通俗易懂 案例里的泛型使用的都是String，也可以使用其他的。 4大基本函数式接口 Function 函数型接口 Predicate 断定型接口 Consumer 消费型接口 Supplier 供给型接口Function 函数型接口 输入一种类型对象，返回另一种类型对象。 12345678910package function;import java.util.function.Function;public class Demo01 &#123; public static void main(String[] args) &#123; Function&lt;String,String&gt; function = (str) -&gt; &#123;return str;&#125;; System.out.println(function.apply(&quot;Hooy&quot;)); &#125;&#125; Predicate 断定型接口返回的是 true &#x2F; false。 12345678910package function;import java.util.function.Predicate;public class Demo02 &#123; public static void main(String[] args) &#123; Predicate&lt;String&gt; predicate = (str) -&gt; &#123;return str.isEmpty();&#125;; System.out.println(predicate.test(&quot;Hooy&quot;)); &#125;&#125; Consumer 消费型接口相当于消费者。只有输入参数，没有返回值。 123456789101112package function;import java.util.function.Consumer;public class Demo03 &#123; public static void main(String[] args) &#123; Consumer&lt;String&gt; consumer = (str) -&gt; &#123; System.out.println(str); &#125;; consumer.accept(&quot;Hooy&quot;); &#125;&#125; Supplier 供给型接口相当于生产者。不需要输入参数，有返回值。 12345678910package function;import java.util.function.Supplier;public class Demo04 &#123; public static void main(String[] args) &#123; Supplier&lt;String&gt; supplier = () -&gt; &#123;return &quot;Hooy&quot;;&#125;; System.out.println(supplier.get()); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"27_Stream流式计算","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/27_Stream流式计算","date":"2020-08-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.206Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/27_Stream流式计算/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/27_Stream%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/","excerpt":"","text":"27 Stream流式计算 狂神说Java JUC并发编程最新版通俗易懂 流嘛，就是方法所有的元素都将执行一遍，就像是河流流过水车一样。 Stream常用方法前提：熟练使用函数式接口，如4种类型接口 _（详见 25 函数型接口、断定型接口、消费型接口和供给型接口）_。 stream() 转换为 Stream 流。想要使用 Stream 首先使用这个方法。 filter(Predicate) 过滤器，参数是 Predicate 断定型接口 填写规则。 map(Function) 映射，参数是 Function 函数型接口 填写规则。 sorted(Comparator) 排序，参数填写比较规则。 forEach 参数是 Consumer 消费型接口。 案例Stream 计算。 12345678910111213141516171819202122232425262728293031323334package stream;import java.util.Arrays;import java.util.List;public class Test &#123; public static void main(String[] args) &#123; User u1 = new User(1,&quot;a&quot;,21); User u2 = new User(2,&quot;b&quot;,22); User u3 = new User(3,&quot;c&quot;,23); User u4 = new User(4,&quot;d&quot;,24); User u5 = new User(6,&quot;e&quot;,25); // Arrays.asList -&gt; ArrayList List&lt;User&gt; list = Arrays.asList(u1,u2,u3,u4,u5); /** * 条件： * 1.编号为偶数 * 2.年龄必须大于23岁 * 3.用户名转为大写字母 * 4.用户名字母倒着排序 * 5.只输出一个用户 */ // Stream list.stream() // list 转为 stream流 .filter(u -&gt; u.getId() % 2 == 0) // 过滤 Predicate *断定型接口 .filter(u -&gt; u.getAge() &gt; 23) .map(u -&gt; u.getName().toUpperCase()) // 映射 Function *函数型接口 .sorted((user1,user2) -&gt; user2.compareTo(user1)) // 排序 Comparator 排序接口，排序规则 .forEach(System.out::println); // Consumer *消费型接口 &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"29_异步回调","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/29_异步回调","date":"2020-08-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.206Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/29_异步回调/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/29_%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83/","excerpt":"","text":"29 异步回调 狂神说Java JUC并发编程最新版通俗易懂 详见 辅佐资料_Java CompletableFuture 使用详解 - 简书 CompletableFuture 类提供了两类异步操作： runAsync 无返回值异步操作 supplyAsync 有返回值异步操作案例 两类异步操作。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package future;import java.util.concurrent.CompletableFuture;import java.util.concurrent.ExecutionException;import java.util.concurrent.Future;import java.util.concurrent.TimeUnit;/** * Ajax 类似 */public class Demo1 &#123; public static void main(String[] args) throws ExecutionException, InterruptedException &#123; /** * 没有返回值 */ CompletableFuture&lt;Void&gt; cf1 = CompletableFuture.runAsync( () -&gt; &#123; try &#123; TimeUnit.SECONDS.sleep(2); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(Thread.currentThread().getName() + &quot;runAsync -&gt; Void&quot;); &#125; ); System.out.println(&quot;没有返回值异步调用&quot;); cf1.get(); /** * 有返回值 * 成功 / 失败回调 */ CompletableFuture&lt;Integer&gt; cf2 = CompletableFuture.supplyAsync( () -&gt; &#123; System.out.println(Thread.currentThread().getName() + &quot;supplyAsync -&gt; Integer&quot;); return 1024; &#125; ); // 回调 // whenComplete t接收成功回调，u接收失败回调 // exceptionally e 接收失败回调 Future&lt;Integer&gt; future = cf2.whenComplete( (t,u) -&gt; &#123; System.out.println(&quot;T=&gt; &quot; + t); System.out.println(&quot;U=&gt; &quot; + u); &#125; ).exceptionally( (e) -&gt; &#123; e.getMessage(); return 0; &#125; ); System.out.println(future.get()); &#125;&#125; 运行结果：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"30_理解JMM","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/30_理解JMM","date":"2020-08-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.207Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/30_理解JMM/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/30_%E7%90%86%E8%A7%A3JMM/","excerpt":"","text":"30 理解JMM 狂神说Java JUC并发编程最新版通俗易懂 详见 辅佐资料_Java JMM和底层实现原理 - 简书 JMM和JVM不一样，它是一种规定，并非像JVM一样存在的东西。 图解JMM“工作内存”就是： CPU Cache CPU高速缓存。 Java内存模型中定义了8种操作来完成，虚拟机保证了每种操作都是原子的。 lock（锁定）：作用于主存的变量，把一个变量标识为一条线程独占状态。 unlock（解锁）：作用于主存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。 read（读取）：作用于主存变量，把一个变量的值从主存传输到工作内存。 load（载入）：作用于工作内存变量，把 read 来的值放入工作内存的变量副本中。 use（使用）：作用于工作内存变量，把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。 assign store（存储）：作用于工作内存变量，把工作内存中一个变量的值传送到主存。 write（写入）：作用于主存变量，把 store 操作从工作内存中得到的变量的值放入主存的变量中。案例，验证JMM 即便是num已经发生改变，这个线程的工作内存也是 num&#x3D;0 1234567891011121314151617package tvolatile;public class JMMDemo &#123; private static int num = 0; public static void main(String[] args) throws InterruptedException &#123; // 即便是num已经发生改变，这个线程的工作内存也是 num=0 new Thread( () -&gt; &#123; while (num==0)&#123;&#125; &#125; ).start(); Thread.sleep(1000); num++; System.out.println(num); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"32_指令重排详解","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/32_指令重排详解","date":"2020-08-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.208Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/32_指令重排详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/32_%E6%8C%87%E4%BB%A4%E9%87%8D%E6%8E%92%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"32 指令重排详解 狂神说Java JUC并发编程最新版通俗易懂 详见 辅佐资料_Java 阿里面试官没想到，一个Volatile我能跟他扯半个小时 - 知乎","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"31_Volatile可见性及非原子性验证","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/31_Volatile可见性及非原子性验证","date":"2020-08-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.208Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/31_Volatile可见性及非原子性验证/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/31_Volatile%E5%8F%AF%E8%A7%81%E6%80%A7%E5%8F%8A%E9%9D%9E%E5%8E%9F%E5%AD%90%E6%80%A7%E9%AA%8C%E8%AF%81/","excerpt":"","text":"31 Volatile可见性及非原子性验证 狂神说Java JUC并发编程最新版通俗易懂 Volatile 的认识 保证可见性 不保证原子性 禁止指令重排原子性 原子性：某个时刻，只有一个线程能够执行一段代码，这段代码通过一个 monitor object 保护。 Java代码 mun++ 看着是一行代码，实际上是多步操作。 通过解析字节码文件，可以看到 mun++ 对应的操作： 使用条件，应用场景 对变量的写操作不依赖于当前值。（也就是通过其他的变量来生成 volatile变量的值，而不是通过volatile值来生成volatile值） 该变量没有包含在具有其他变量的不变式中。案例 验证 volatile 的不保证原子性。 1234567891011121314151617181920212223242526272829package tvolatile;public class Demo02 &#123; private volatile static int num = 0; public static void add()&#123; num++; &#125; public static void main(String[] args) &#123; // 理论上num应该等于20000 for (int i = 0; i &lt; 20; i++) &#123; new Thread( () -&gt; &#123; for (int i1 = 0; i1 &lt; 1000; i1++) &#123; add(); &#125; &#125; ).start(); &#125; // 保证除了 main 和 gc 以外的线程均执行完毕 if(Thread.activeCount() &gt; 2)&#123; Thread.yield(); &#125; System.out.println(num); &#125;&#125; 运行结果： 17765 出现了线程不安全问题。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"17_Semaphore","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/17_Semaphore","date":"2020-08-26T16:00:00.000Z","updated":"2022-06-15T08:32:50.203Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/17_Semaphore/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/17_Semaphore/","excerpt":"","text":"17 Semaphore 狂神说Java JUC并发编程最新版通俗易懂 Semaphore 信号量多个共享资源互斥使用，并发限流，控制最大线程数目。 如果说 互斥锁 在同一时间仅让一个线程执行，那么 Semaphore 在同一时间仅让指定数量的线程并行执行，多余的等待，等待正在执行的线程执行完毕。 semaphore.acquire() 获得，假设已经满了，等待，等待有空位为止。 semaphore.release() 释放，会将当前的信号量释放 +1，然后唤醒等待线程。 案例1234567891011121314151617181920212223242526272829package add;import java.util.concurrent.Semaphore;import java.util.concurrent.TimeUnit;public class SemaphoreDemo &#123; public static void main(String[] args) &#123; Semaphore semaphore = new Semaphore(3); for (int i = 0; i &lt; 6; i++) &#123; new Thread( () -&gt; &#123; try &#123; // acquire() 得到 semaphore.acquire(); System.out.println(Thread.currentThread().getName() + &quot;抢到车位&quot;); TimeUnit.SECONDS.sleep(2); System.out.println(Thread.currentThread().getName() + &quot;离开车位&quot;); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; finally &#123; // release() 释放 semaphore.release(); &#125; &#125;,String.valueOf(i) ).start(); &#125; &#125;&#125; 运行结果：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"18_ReadWriteLock","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/18_ReadWriteLock","date":"2020-08-26T16:00:00.000Z","updated":"2022-06-15T08:32:50.203Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/18_ReadWriteLock/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/18_ReadWriteLock/","excerpt":"","text":"18 ReadWriteLock 狂神说Java JUC并发编程最新版通俗易懂 读写锁详见 辅佐资料_Java 并发库应用之五 &amp; ReadWriteLock场景应用 - 星火燎原智勇 - 博客园 与 Lock 锁的区别 两个线程执行的代码片段要实现同步，它们必须用同一个 Lock 对象。 读写锁，分为读锁和写锁，多个读锁不互斥，读锁与写锁、多个写锁互斥。 * “读-读” 不互斥 “读-写” 互斥 “写-写” 互斥 Lock 在任何条件下都是互斥的。ReadWriteLock 在使用 读锁 时不互斥，其他条件互斥。因此在读写效率方面 ReadWriteLock 更佳。 案例","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"20_BlockingQueue四组API","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/20_BlockingQueue四组API","date":"2020-08-26T16:00:00.000Z","updated":"2022-06-15T08:32:50.204Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/20_BlockingQueue四组API/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/20_BlockingQueue%E5%9B%9B%E7%BB%84API/","excerpt":"","text":"20 BlockingQueue四组API 狂神说Java JUC并发编程最新版通俗易懂 队列，先入先出（FIFO）。 四组 API|添加 |add() |offer()|put() |offer(,,)||移除 |remove() |poll() |take()|poll(,) ||检测队首元素|element()|peek() |- |- | 案例测试四种 入队 出队 方式。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485package bq;import java.util.concurrent.ArrayBlockingQueue;import java.util.concurrent.TimeUnit;public class BlockingQueueTest &#123; public static void main(String[] args) throws InterruptedException &#123; // test1(); // test2(); // test3(); test4(); &#125; /** * 抛出异常 */ public static void test1() &#123; ArrayBlockingQueue queue = new ArrayBlockingQueue(3); System.out.println(queue.add(&quot;a&quot;)); System.out.println(queue.add(&quot;b&quot;)); System.out.println(queue.add(&quot;c&quot;)); // java.lang.IllegalStateException: Queue full 队列满 // System.out.println(queue.add(&quot;d&quot;)); System.out.println(&quot;------------&quot;); System.out.println(queue.remove()); System.out.println(queue.remove()); System.out.println(queue.remove()); // java.util.NoSuchElementException 队列空 // System.out.println(queue.remove()); &#125; /** * 返回值 队满返回 false ， 队空返回 null */ public static void test2() &#123; ArrayBlockingQueue queue = new ArrayBlockingQueue(3); System.out.println(queue.offer(&quot;a&quot;)); System.out.println(queue.offer(&quot;b&quot;)); System.out.println(queue.offer(&quot;c&quot;)); // return false // System.out.println(queue.offer(&quot;d&quot;)); System.out.println(&quot;------------&quot;); System.out.println(queue.poll()); System.out.println(queue.poll()); System.out.println(queue.poll()); // return null // System.out.println(queue.poll()); &#125; /** * 阻塞 */ public static void test3() throws InterruptedException &#123; ArrayBlockingQueue queue = new ArrayBlockingQueue(3); queue.put(&quot;a&quot;); queue.put(&quot;b&quot;); queue.put(&quot;c&quot;); // 阻塞，程序不会停止 // queue.put(&quot;d&quot;); System.out.println(&quot;------------&quot;); System.out.println(queue.take()); System.out.println(queue.take()); System.out.println(queue.take()); // 阻塞，程序不会停止 // System.out.println(queue.take()); &#125; /** * 阻塞，超时等待 */ public static void test4() throws InterruptedException &#123; ArrayBlockingQueue queue = new ArrayBlockingQueue(3); System.out.println(queue.offer(&quot;a&quot;)); System.out.println(queue.offer(&quot;b&quot;)); System.out.println(queue.offer(&quot;c&quot;)); // 阻塞状态等待 2s ，然后 return false // System.out.println(queue.offer(&quot;d&quot;,2, TimeUnit.SECONDS)); System.out.println(&quot;------------&quot;); System.out.println(queue.poll()); System.out.println(queue.poll()); System.out.println(queue.poll()); // 阻塞状态等待 2s ，然后 return null // System.out.println(queue.poll(2, TimeUnit.SECONDS)); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"22_池化技术及线程池使用","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/22_池化技术及线程池使用","date":"2020-08-26T16:00:00.000Z","updated":"2022-06-15T08:32:50.204Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/22_池化技术及线程池使用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/22_%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF%E5%8F%8A%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8/","excerpt":"","text":"22 池化技术及线程池使用 狂神说Java JUC并发编程最新版通俗易懂 线程池的好处线程复用、可以控制最大并发数、管理线程。 线程池：3大方法、7大参数、4种拒绝策略3大方法 Executors.newSingleThreadExecutor() 单个线程 Executors.newFixedThreadPool(5) 创建一个固定线程数的线程池 Executors.newCachedThreadPool() 可伸缩线程池，遇强则强遇弱则弱。当任务量多时，扩充线程数3大方法 案例 12345678910111213141516171819202122232425262728293031package pool;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class Demo01 &#123; public static void main(String[] args) &#123; ExecutorService threadPool = null; // 1.单个线程 threadPool = Executors.newSingleThreadExecutor(); // 2.创建一个固定线程数的线程池 // threadPool = Executors.newFixedThreadPool(5); // 3.可伸缩线程池，遇强则强遇弱则弱。当任务量多时，扩充线程数。 // threadPool = Executors.newCachedThreadPool(); try &#123; for (int i = 0; i &lt; 10; i++) &#123; threadPool.execute( () -&gt; &#123; System.out.println(Thread.currentThread().getName()); &#125; ); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; // 线程池用完，关闭 threadPool.shutdown(); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"23_7大参数及自定义线程池","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/23_7大参数及自定义线程池","date":"2020-08-26T16:00:00.000Z","updated":"2022-06-15T08:32:50.205Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/23_7大参数及自定义线程池/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/23_7%E5%A4%A7%E5%8F%82%E6%95%B0%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/","excerpt":"","text":"23 7大参数及自定义线程池 狂神说Java JUC并发编程最新版通俗易懂 解释线程池内部 7大参数可以通过查看 3大方法的源码实现，发现都是使用的 ThreadPoolExecutor 对象，因此可以通过 ThreadPoolExecutor 自定义线程池。 阿里巴巴规范：禁止使用 Executors 工具类（3大方法）创建线程池，应使用 ThreadPoolExecutor 自定义线程池，详见开发手册 自定义线程池七大参数： 核心线程数 最大线程数 超时时间 时间单位 队列类型 线程工厂 拒绝策略ExecutorService threadPool &#x3D; new ThreadPoolExecutor( 2, &#x2F;&#x2F; 基础线程数，最小线程数 5, &#x2F;&#x2F; 扩容线程数，最大线程数。当队列满时，激活。 3, &#x2F;&#x2F; 时间。如果没有请求，超过时间后销毁扩容线程。 TimeUnit.SECONDS, &#x2F;&#x2F; 时间单位 new LinkedBlockingDeque&lt;&gt;(3), &#x2F;&#x2F; 队列类型 Executors.defaultThreadFactory(), &#x2F;&#x2F; 默认，线程工厂 new ThreadPoolExecutor.AbortPolicy() &#x2F;&#x2F; 4种拒绝策略 ); 案例1234567891011121314151617181920212223242526272829303132package pool;import java.util.concurrent.*;public class Demo02 &#123; public static void main(String[] args) &#123; ExecutorService threadPool = new ThreadPoolExecutor( 2, // 基础线程数，最小线程数 5, // 扩容线程数，最大线程数。当队列满时，激活。 3, // 时间。如果没有请求，超过时间后销毁扩容线程。 TimeUnit.SECONDS, // 时间单位 new LinkedBlockingDeque&lt;&gt;(3), // 队列类型 Executors.defaultThreadFactory(), // 默认，线程工厂 new ThreadPoolExecutor.AbortPolicy() // 4种拒绝策略 ); try &#123; for (int i = 0; i &lt; 100; i++) &#123; threadPool.execute( () -&gt; &#123; System.out.println(Thread.currentThread().getName()); &#125; ); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; // 线程池用完，关闭 threadPool.shutdown(); &#125; &#125;&#125; 4种拒绝策略查看源码，4种拒绝策略均实现了 RejectedExecutionHandler 接口。 AbortPolicy 直接抛出拒绝异常 CallerRunsPolicy 只会用调用者所在线程来运行任务，也就是说任务不会进入线程池。 DiscardOledestPolicy 丢弃队列中最老的，然后再次尝试提交新任务。 DiscardPolicy 默默丢弃无法加载的任务。详见 辅佐资料_Java java线程池的拒绝策略 - 简书","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"10_八锁现象彻底理解锁","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/10_八锁现象彻底理解锁","date":"2020-08-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.199Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/10_八锁现象彻底理解锁/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/10_%E5%85%AB%E9%94%81%E7%8E%B0%E8%B1%A1%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E9%94%81/","excerpt":"","text":"10 八锁现象彻底理解锁 狂神说Java JUC并发编程最新版通俗易懂 主要讲解的是 关于锁的8个问题 synchronized 详见 辅佐资料_Java 【Java并发编程之深入理解】Synchronized的使用_青苔小榭-CSDN博客_synchronized synchronized 锁： 当放在 普通方法 上时 (锁) 实例对象 当放在 静态方法 上时 (锁) Class对象本节要点： 当一个线程拥有某对象（实例对象或Class对象）锁后，其他线程将禁止访问该对象的任意 synchronized 方法，只能等待。 sleep方法，TimeUnit方法（JUC的sleep方法）均抱着锁睡觉，不释放锁。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"11_CopyOnWriteArrayList","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/11_CopyOnWriteArrayList","date":"2020-08-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.200Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/11_CopyOnWriteArrayList/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/11_CopyOnWriteArrayList/","excerpt":"","text":"11 CopyOnWriteArrayList 狂神说Java JUC并发编程最新版通俗易懂 ArrayList 是线程不安全的 使List线程安全的三种方式 List&lt;String&gt; list = new Vector&lt;&gt;(); 效率低，读写 synchronized 加锁，悲观锁 List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;()); 不安全List 转 安全List List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;(); 写入时复制，仅对写入 Lock 加锁案例 1234567891011121314151617181920212223242526package unsafe;import java.util.*;import java.util.concurrent.CopyOnWriteArrayList;public class ListTest &#123; public static void main(String[] args) &#123; // java.util.ConcurrentModificationException 并发修改异常：线程不安全 /** * 解决方案： * 1. List&lt;String&gt; list = new Vector&lt;&gt;(); 效率低，读写 synchronized 加锁，悲观锁 * 2. List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;()); 不安全List 转 安全List * 3. List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;(); 写入时复制，仅对写入 Lock 加锁 */ List&lt;String&gt; list = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; 10; i++) &#123; new Thread( () -&gt; &#123; list.add(UUID.randomUUID().toString().substring(0,5)); System.out.println(list); &#125;,String.valueOf(i) ).start(); &#125; &#125;&#125; 探究 CopyOnWriteArrayList（写入时复制）类","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"12_CopyOnWriteArraySet","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/12_CopyOnWriteArraySet","date":"2020-08-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.201Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/12_CopyOnWriteArraySet/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/12_CopyOnWriteArraySet/","excerpt":"","text":"12 CopyOnWriteArraySet 狂神说Java JUC并发编程最新版通俗易懂 HashSet 是线程不安全的 使Set线程安全的两种方式 Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;()); 不安全Set 转 安全Set Set&lt;String&gt; set = new CopyOnWriteArraySet&lt;&gt;(); 直接使用线程安全的 Set案例 123456789101112131415161718192021222324package unsafe;import java.util.*;import java.util.concurrent.CopyOnWriteArraySet;public class SetTest &#123; public static void main(String[] args) &#123; /** * 解决方案： * 1.Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;()); 不安全Set 转 安全Set * 2.Set&lt;String&gt; set = new CopyOnWriteArraySet&lt;&gt;(); 直接使用线程安全的 Set */ Set&lt;String&gt; set = new HashSet&lt;&gt;(); for (int i = 0; i &lt; 10; i++) &#123; new Thread( () -&gt; &#123; set.add(UUID.randomUUID().toString().substring(0,5)); System.out.println(set); &#125;,String.valueOf(i) ).start(); &#125; &#125;&#125; 初窥 HashSetHashSet 底层是 HashMap HashSet add 方法Map的key用来存放入的对象，value用一个Object占位。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"13_ConcurrentHashMap","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/13_ConcurrentHashMap","date":"2020-08-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.201Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/13_ConcurrentHashMap/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/13_ConcurrentHashMap/","excerpt":"","text":"13 ConcurrentHashMap 狂神说Java JUC并发编程最新版通俗易懂 HashMap 是线程不安全的 使Map线程安全的两种方式 Map&lt;String,String&gt; map = Collections.synchronizedMap(new HashMap&lt;&gt;()); 不安全Map 转 安全Map Map&lt;String,String&gt; map = new ConcurrentHashMap&lt;&gt;(); 直接使用线程安全的 Set案例 123456789101112131415161718192021222324package unsafe;import java.util.*;import java.util.concurrent.ConcurrentHashMap;public class MapTest &#123; public static void main(String[] args) &#123; /** * 解决方案： * 1.Map&lt;String,String&gt; map = Collections.synchronizedMap(new HashMap&lt;&gt;()); 不安全Map 转 安全Map * 2.Map&lt;String,String&gt; map = new ConcurrentHashMap&lt;&gt;(); 直接使用线程安全的 Map */ Map&lt;String,String&gt; map = new HashMap&lt;&gt;(); for (int i = 0; i &lt; 10; i++) &#123; new Thread( () -&gt; &#123; map.put(Thread.currentThread().getName(),UUID.randomUUID().toString().substring(0,5)); System.out.println(map); &#125;,String.valueOf(i) ).start(); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"14_走进Callable","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/14_走进Callable","date":"2020-08-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.201Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/14_走进Callable/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/14_%E8%B5%B0%E8%BF%9BCallable/","excerpt":"","text":"14 走进Callable 狂神说Java JUC并发编程最新版通俗易懂 像 Runnable 一样执行 Callable 线程中间有个适配类 FutureTask，他实现了 Runnable 接口，而他的构造参数是 Callable 接口。 案例12345678910111213141516171819202122232425262728package callable;import java.util.concurrent.Callable;import java.util.concurrent.ExecutionException;import java.util.concurrent.FutureTask;public class CallableTest &#123; public static void main(String[] args) throws ExecutionException, InterruptedException &#123; MyThread myThread = new MyThread(); FutureTask futureTask = new FutureTask(myThread); // FutureTask 是 Runnable接口的实现类。Callable - FutureTask - Thread // * call方法仅执行一次，缓存结果，其他线程将直接获得结果 new Thread(futureTask).start(); new Thread(futureTask).start(); // 获取返回值 get方法会阻塞，因为要等待 Callable 线程执行完才能获取到结果。通常将其放在最后方法代码块最后一行。 System.out.println(futureTask.get()); &#125;&#125;class MyThread implements Callable&lt;Integer&gt; &#123; @Override public Integer call() throws Exception &#123; System.out.println(&quot;call&quot;); return 1024; &#125;&#125; 使用 Callable 需要注意： call方法仅执行一次，缓存结果，其他线程将直接获得结果 获取返回值 get方法会阻塞，因为要等待 Callable 线程执行完才能获取到结果。通常将其放在最后方法代码块最后一行。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"15_CountDownLatch","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/15_CountDownLatch","date":"2020-08-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.202Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/15_CountDownLatch/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/15_CountDownLatch/","excerpt":"","text":"15 CountDownLatch 狂神说Java JUC并发编程最新版通俗易懂 当需要多个线程的业务执行完毕后再向下执行，可以使用 CountDownLatch 减法计数器 案例123456789101112131415161718192021222324252627package add;import java.util.concurrent.CountDownLatch;/** * 当需要多个线程的业务执行完毕后再向下执行，可以使用 CountDownLatch */public class CountDownLatchDemo &#123; public static void main(String[] args) throws InterruptedException &#123; // 减数计数器 CountDownLatch countDownLatch = new CountDownLatch(6); for (int i = 0; i &lt; 6; i++) &#123; new Thread( () -&gt; &#123; System.out.println(Thread.currentThread().getName() + &quot;GO&quot;); // -1 countDownLatch.countDown(); &#125; ).start(); &#125; // 等待计数器归零然后再向下执行。 countDownLatch.await(); System.out.println(&quot;Close Door&quot;); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"16_CyclicBarrier","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/16_CyclicBarrier","date":"2020-08-25T16:00:00.000Z","updated":"2022-06-15T08:32:50.202Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/16_CyclicBarrier/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/16_CyclicBarrier/","excerpt":"","text":"16 CyclicBarrier 狂神说Java JUC并发编程最新版通俗易懂 多个线程到达预定代码位置，将执行 CyclicBarrier 构造器参数线程，之后多个线程再继续执行。 加法计数器 案例1234567891011121314151617181920212223242526272829303132package add;import java.util.concurrent.BrokenBarrierException;import java.util.concurrent.CyclicBarrier;/** * 多个线程到达预定代码位置，将执行 CyclicBarrier 构造器参数线程，之后多个线程再继续执行。 */public class CyclicBarrierDemo &#123; public static void main(String[] args) &#123; // 集齐 7 龙珠，召唤神龙 CyclicBarrier cyclicBarrier = new CyclicBarrier(7,() -&gt; System.out.println(&quot;召唤神龙！&quot;)); for (int i = 0; i &lt; 7; i++) &#123; final int temp = i; new Thread( () -&gt; &#123; System.out.println(Thread.currentThread().getName() + &quot;收集第 &quot; + temp + &quot; 龙珠&quot;); try &#123; cyclicBarrier.await(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; catch (BrokenBarrierException e) &#123; e.printStackTrace(); &#125; // cyclicBarrier 通过 await 方法来计数，await之后当前线程会被阻塞，直到神龙召唤后才执行后面的代码 System.out.println(&quot;等待&quot;); &#125; ).start(); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"3_唠嗑：回顾多线程","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/3_唠嗑：回顾多线程","date":"2020-08-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.210Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/3_唠嗑：回顾多线程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/3_%E5%94%A0%E5%97%91%EF%BC%9A%E5%9B%9E%E9%A1%BE%E5%A4%9A%E7%BA%BF%E7%A8%8B/","excerpt":"","text":"3 唠嗑：回顾多线程 狂神说Java 多线程详解 wait&#x2F;sleep 区别1、来自的包不同wait -&gt; Object sleep -&gt; Thread 2、关于锁的释放wait 会释放锁 sleep 睡觉了，抱着锁睡觉 3、使用范围不同wait 必须在同步代码块中使用 sleep 可以在任何地方睡","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"7_传统的生产者消费者问题，防止虚假唤醒","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/7_传统的生产者消费者问题，防止虚假唤醒","date":"2020-08-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.211Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/7_传统的生产者消费者问题，防止虚假唤醒/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/7_%E4%BC%A0%E7%BB%9F%E7%9A%84%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98%EF%BC%8C%E9%98%B2%E6%AD%A2%E8%99%9A%E5%81%87%E5%94%A4%E9%86%92/","excerpt":"","text":"7 传统的生产者消费者问题，防止虚假唤醒 狂神说Java JUC并发编程最新版通俗易懂 虚假唤醒当使用 if 代码块内部含有 wait() 方法，线程被阻塞了，当被唤醒时并不会再次去判断是否需要被阻塞的条件，因此就直接向下执行了。 评论说： 用if判断的话，唤醒后线程会从wait之后的代码开始运行，但是不会重新判断if条件，直接继续运行if代码块之后的代码，而如果使用while的话，也会从wait之后的代码运行，但是唤醒后会重新判断循环条件，如果不成立再执行while代码块之后的代码块，成立的话继续wait。 JDK手册JDK 手册要求使用 while 来放 wait() 方法。 案例生产者和消费者案例，使用 while 解决虚假唤醒的问题。 将 资源 解耦出来，降低程序耦合性。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576package demo1;public class PC &#123; public static void main(String[] args) &#123; Date date = new Date(); new Thread( () -&gt; &#123; try &#123; for (int i = 0; i &lt; 10; i++) &#123; date.increment(); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;,&quot;A&quot; ).start(); new Thread( () -&gt; &#123; try &#123; for (int i = 0; i &lt; 10; i++) &#123; date.decrement(); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;,&quot;B&quot; ).start(); new Thread( () -&gt; &#123; try &#123; for (int i = 0; i &lt; 10; i++) &#123; date.increment(); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;,&quot;C&quot; ).start(); new Thread( () -&gt; &#123; try &#123; for (int i = 0; i &lt; 10; i++) &#123; date.decrement(); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;,&quot;D&quot; ).start(); &#125;&#125;class Date &#123; private int number = 1; public synchronized void increment() throws InterruptedException &#123; while (number != 0)&#123; this.wait(); &#125; number++; System.out.println(&quot;生产者&quot; + Thread.currentThread().getName() + &quot;--&gt;&quot; + number); this.notifyAll(); &#125; public synchronized void decrement() throws InterruptedException &#123; while (number == 0)&#123; this.wait(); &#125; number--; System.out.println(&quot;消费者&quot; + Thread.currentThread().getName() + &quot;--&gt;&quot; + number); this.notifyAll(); &#125;&#125; 运行结果：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"8_Lock版的生产者消程","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/8_Lock版的生产者消程","date":"2020-08-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.211Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/8_Lock版的生产者消程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/8_Lock%E7%89%88%E7%9A%84%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E7%A8%8B/","excerpt":"","text":"8 Lock版的生产者消程 狂神说Java JUC并发编程最新版通俗易懂 synchronized 替换成 Lock JDK 手册说明使用方式： 案例生产者消费者 Lock版。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596package demo1;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;public class B &#123; public static void main(String[] args) &#123; Date2 date = new Date2(); new Thread( () -&gt; &#123; try &#123; for (int i = 0; i &lt; 10; i++) &#123; date.increment(); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;,&quot;A&quot; ).start(); new Thread( () -&gt; &#123; try &#123; for (int i = 0; i &lt; 10; i++) &#123; date.decrement(); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;,&quot;B&quot; ).start(); new Thread( () -&gt; &#123; try &#123; for (int i = 0; i &lt; 10; i++) &#123; date.increment(); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;,&quot;C&quot; ).start(); new Thread( () -&gt; &#123; try &#123; for (int i = 0; i &lt; 10; i++) &#123; date.decrement(); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;,&quot;D&quot; ).start(); &#125;&#125;class Date2 &#123; private int number = 1; Lock lock = new ReentrantLock(); Condition condition = lock.newCondition(); public void increment() throws InterruptedException &#123; lock.lock(); try &#123; while (number != 0)&#123; condition.await(); &#125; number++; System.out.println(&quot;生产者&quot; + Thread.currentThread().getName() + &quot;--&gt;&quot; + number); condition.signalAll(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; finally &#123; lock.unlock(); &#125; &#125; public void decrement() throws InterruptedException &#123; lock.lock(); try &#123; while (number == 0)&#123; condition.await(); &#125; number--; System.out.println(&quot;消费者&quot; + Thread.currentThread().getName() + &quot;--&gt;&quot; + number); condition.signalAll(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; finally &#123; lock.unlock(); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"9_Condition实现精准通知唤醒","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/9_Condition实现精准通知唤醒","date":"2020-08-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.211Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/9_Condition实现精准通知唤醒/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/9_Condition%E5%AE%9E%E7%8E%B0%E7%B2%BE%E5%87%86%E9%80%9A%E7%9F%A5%E5%94%A4%E9%86%92/","excerpt":"","text":"9 Condition实现精准通知唤醒 狂神说Java JUC并发编程最新版通俗易懂 Condition 可以精准的唤醒或等待某个线程。 相互通信的线程共用同一个 Condition。 案例线程按照顺序执行，A -&gt; B -&gt; C 。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192package demo1;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;public class C &#123; public static void main(String[] args) &#123; Data3 data3 = new Data3(); new Thread( () -&gt; &#123; for (int i = 0; i &lt; 10; i++) &#123; data3.printC(); &#125; &#125; ).start(); new Thread( () -&gt; &#123; for (int i = 0; i &lt; 10; i++) &#123; data3.printB(); &#125; &#125; ).start(); new Thread( () -&gt; &#123; for (int i = 0; i &lt; 10; i++) &#123; data3.printA(); &#125; &#125; ).start(); &#125;&#125;class Data3 &#123; private Lock lock = new ReentrantLock(); Condition condition1 = lock.newCondition(); Condition condition2 = lock.newCondition(); Condition condition3 = lock.newCondition(); private int number = 1; public void printA() &#123; lock.lock(); try &#123; while (number != 1)&#123; condition1.await(); &#125; System.out.println(&quot;A&quot;); number = 2; condition2.signal(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; lock.unlock(); &#125; &#125; public void printB() &#123; lock.lock(); try &#123; while (number != 2)&#123; condition2.await(); &#125; System.out.println(&quot;B&quot;); number = 3; condition3.signal(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; lock.unlock(); &#125; &#125; public void printC() &#123; lock.lock(); try &#123; while (number != 3)&#123; condition3.await(); &#125; System.out.println(&quot;C&quot;); number = 1; condition1.signal(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; lock.unlock(); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"Maven工程开发环境_JDK8_的设定方式","slug":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/Maven工程开发环境_JDK8_的设定方式","date":"2020-08-23T16:00:00.000Z","updated":"2022-06-15T08:32:50.212Z","comments":true,"path":"技术向/Java/狂神说Java_JUC并发编程最新版通俗易懂/Maven工程开发环境_JDK8_的设定方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/Maven%E5%B7%A5%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83_JDK8_%E7%9A%84%E8%AE%BE%E5%AE%9A%E6%96%B9%E5%BC%8F/","excerpt":"","text":"Maven工程开发环境 JDK8 的设定方式 狂神说Java JUC并发编程最新版通俗易懂 第一步：右键项目，打开 打开模块设置。 Project 选择 项目 SDK 和 项目语言级别 均为 JDK8。 模块 选择 语言级别 为 JDK8。 第二步：文件 点击 设置。 Java 编译器 选择 JDK8。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"21_CopyOnWriteArrayList","slug":"技术向/Java/狂神说Java_多线程详解/21_CopyOnWriteArrayList","date":"2020-08-21T16:00:00.000Z","updated":"2022-06-15T08:32:50.225Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/21_CopyOnWriteArrayList/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/21_CopyOnWriteArrayList/","excerpt":"","text":"21 CopyOnWriteArrayList 狂神说Java 多线程详解 学习前面的章节，知道 ArrayList 是线程不安全的。 CopyOnWriteArrayList 是线程安全的。属于JUC（java.util.concurrent） 1234567891011121314151617package sync;import java.util.concurrent.CopyOnWriteArrayList;public class TestCopyOnWriteArrayList &#123; public static void main(String[] args) throws InterruptedException &#123; CopyOnWriteArrayList list = new CopyOnWriteArrayList(); for (int i = 0; i &lt; 10000; i++) &#123; new Thread( () -&gt; list.add(Thread.currentThread().getName()) ).start(); &#125; Thread.sleep(3000); System.out.println(list.size()); &#125;&#125; 运行结果：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"22_死锁","slug":"技术向/Java/狂神说Java_多线程详解/22_死锁","date":"2020-08-21T16:00:00.000Z","updated":"2022-06-15T08:32:50.225Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/22_死锁/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/22_%E6%AD%BB%E9%94%81/","excerpt":"","text":"22 死锁 狂神说Java 多线程详解 多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有“两个以上对象的锁”时，就可能会发生“死锁”的问题。案例 一般 嵌套同步代码块 容易引发死锁，因为一个线程占用两个或多个共享资源。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package sync;public class DeadLock &#123; public static void main(String[] args) &#123; new Makeup(1,&quot;灰姑娘&quot;).start(); new Makeup(0,&quot;白雪公主&quot;).start(); &#125;&#125;class Lipstick &#123;&#125;class Mirror &#123;&#125;class Makeup extends Thread&#123; // 需要的资源只有一份，用 static 来保证。 因为这个资源属于类并不属于实例化对象。 static Lipstick lipstick = new Lipstick(); static Mirror mirror = new Mirror(); int choice; String girlName; Makeup(int choice,String girlName)&#123; this.choice = choice; this.girlName = girlName; &#125; @Override public void run() &#123; try &#123; makeup(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; private void makeup() throws InterruptedException &#123; if (choice == 1)&#123; synchronized (lipstick)&#123; System.out.println(this.girlName + &quot;获得口红的锁&quot;); Thread.sleep(1000); synchronized (mirror)&#123; System.out.println(this.girlName + &quot;获得镜子的锁&quot;); &#125; &#125; &#125; else &#123; synchronized (mirror)&#123; System.out.println(this.girlName + &quot;获得镜子的锁&quot;); Thread.sleep(2000); synchronized (lipstick)&#123; System.out.println(this.girlName + &quot;获得口红的锁&quot;); &#125; &#125; &#125; &#125;&#125; 运行结果： 至此，两个线程都在互相等待对方持有的共享资源，导致两个线程卡死。 解决方法： 将 嵌套的同步代码块 并列写。 12345678910111213141516171819private void makeup() throws InterruptedException &#123; if (choice == 1)&#123; synchronized (lipstick)&#123; System.out.println(this.girlName + &quot;获得口红的锁&quot;); Thread.sleep(1000); &#125; synchronized (mirror)&#123; System.out.println(this.girlName + &quot;获得镜子的锁&quot;); &#125; &#125; else &#123; synchronized (mirror)&#123; System.out.println(this.girlName + &quot;获得镜子的锁&quot;); Thread.sleep(2000); &#125; synchronized (lipstick)&#123; System.out.println(this.girlName + &quot;获得口红的锁&quot;); &#125; &#125; &#125; 死锁避免方法产生死锁的四个必要条件： 互斥条件：一个资源每次只能被一个进程使用。 请求与保持条件：一个进程因请求资源而阻塞，对已获得的资源保持不放。 不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺。 循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。上面列出了死锁的四个必要条件，我们只要想办法破其中的任意一个或多个条件","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"23_Lock锁","slug":"技术向/Java/狂神说Java_多线程详解/23_Lock锁","date":"2020-08-21T16:00:00.000Z","updated":"2022-06-15T08:32:50.225Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/23_Lock锁/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/23_Lock%E9%94%81/","excerpt":"","text":"23 Lock锁 狂神说Java 多线程详解 Lock（锁） 从 JDK 5.0 开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象实现同步。同步锁使用Lock对象填充。 java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象 ReentrantLock（可重入锁） 类实现了 Lock，他拥有与 synchronized 相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是 ReentrantLock，可以显式加锁、释放锁。 synchronized 与 Lock 的对比 Lock是显式锁（手动开启和关闭锁，别忘记关闭锁） synchronized 是隐式锁，出了作用域自动释放 Lock只有代码块锁，synchronized有代码块锁和方法锁 使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多子类） 优先使用顺序： * Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源） &gt; 同步方法（在方法体之外）案例 多个线程操作同一实例对象。 12345678910111213141516171819202122232425262728293031323334353637383940package concurrent;import java.util.concurrent.locks.ReentrantLock;public class TestLock &#123; public static void main(String[] args) &#123; BuyTicket buyTicket = new BuyTicket(); new Thread(buyTicket).start(); new Thread(buyTicket).start(); new Thread(buyTicket).start(); &#125;&#125;class BuyTicket implements Runnable&#123; int ticket = 10; private final ReentrantLock lock = new ReentrantLock(); @Override public void run() &#123; while (true)&#123; try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; lock.lock(); try &#123; if (ticket &gt; 0)&#123; System.out.println(Thread.currentThread().getName() + &quot;:&quot; + ticket--); &#125;else &#123; break; &#125; &#125; finally &#123; lock.unlock(); &#125; &#125; &#125;&#125; 运行结果：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"24_生产者消费者问题","slug":"技术向/Java/狂神说Java_多线程详解/24_生产者消费者问题","date":"2020-08-21T16:00:00.000Z","updated":"2022-06-15T08:32:50.226Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/24_生产者消费者问题/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/24_%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/","excerpt":"","text":"24 生产者消费者问题 狂神说Java 多线程详解 线程通信Java提供了几个方法解决线程之间的通信问题 |wait() |表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁 ||wait(long timeout)|指定等待的毫秒数 ||notify() |唤醒一个处于等待状态的线程 ||notifyAll() |唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度|","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"25_管程法","slug":"技术向/Java/狂神说Java_多线程详解/25_管程法","date":"2020-08-21T16:00:00.000Z","updated":"2022-06-15T08:32:50.226Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/25_管程法/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/25_%E7%AE%A1%E7%A8%8B%E6%B3%95/","excerpt":"","text":"25 管程法 狂神说Java 多线程详解 生产者：负责生产数据模块（可能是方法，对象，线程，进程）； 消费者：负责处理数据的模块（可能是方法，对象，线程，进程）； 缓冲区：消费者不能直接使用生产者的数据，他们之间有个“缓冲区”。生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据。 狂神在这里讲了一个","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"26_信号灯法","slug":"技术向/Java/狂神说Java_多线程详解/26_信号灯法","date":"2020-08-21T16:00:00.000Z","updated":"2022-06-15T08:32:50.226Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/26_信号灯法/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/26_%E4%BF%A1%E5%8F%B7%E7%81%AF%E6%B3%95/","excerpt":"","text":"26 信号灯法 狂神说Java 多线程详解 管程法、信号灯法和线程池讲的都非常浅显，这里三个都是重难点，请","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"27_线程池","slug":"技术向/Java/狂神说Java_多线程详解/27_线程池","date":"2020-08-21T16:00:00.000Z","updated":"2022-06-15T08:32:50.227Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/27_线程池/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/27_%E7%BA%BF%E7%A8%8B%E6%B1%A0/","excerpt":"","text":"27 线程池 狂神说Java 多线程详解 线程池 背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。 思路：提前创建好多个线程，放入线程池中，使用时可以直接获取，使用完放回池中。可以避免频繁创建销毁，实现重复利用。类似生活中的公共交通工具。 好处： * 提高响应速度（减少了创建新线程的时间） 降低资源消耗（重复利用线程池中的线程，不需要每次都创建） 便于线程管理 * corePoolSize：核心池的大小 maximumPoolSize：最大线程池 keepAliveTime：线程没有任务时最多保持多长时间后回终止使用线程池 JDK 5.0起提供了线程池相关API： ExecutorService 和 Executors ExecutorService：真正的线程池接口。常见子类 ThreadPoolExecutor * void execute(Runnable command)：执行任务&#x2F;命令，没有返回值，一般用于执行Runnable Future submit(Callable task)：执行任务，有返回值，一般用来执行Callable void shutdown()：关闭连接池 Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池。 案例 创建、使用和关闭线程池，基本操作。 123456789101112131415161718192021222324package concurrent;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class TestPool &#123; public static void main(String[] args) &#123; // 1.创建服务，创建线程池 ExecutorService service = Executors.newFixedThreadPool(10); // 2.执行 service.execute(new MyThread()); service.execute(new MyThread()); service.execute(new MyThread()); // 3.关闭线程池 service.shutdown(); &#125;&#125;class MyThread implements Runnable&#123; @Override public void run() &#123; System.out.println(Thread.currentThread().getName()); &#125;&#125; 运行结果：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"12_线程休眠_sleep","slug":"技术向/Java/狂神说Java_多线程详解/12_线程休眠_sleep","date":"2020-08-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.221Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/12_线程休眠_sleep/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/12_%E7%BA%BF%E7%A8%8B%E4%BC%91%E7%9C%A0_sleep/","excerpt":"","text":"12 线程休眠_sleep 狂神说Java 多线程详解 线程休眠 sleep(时间)指定当前线程阻塞的毫秒数 sleep存在异常InterruptedException sleep时间达到后线程进入就绪状态 sleep可以模拟网络延时，倒计时等 每一个对象都有一个锁，sleep不会释放锁案例 模拟倒计时 10s倒计时 系统时间12345678910111213141516171819202122232425262728293031323334353637package demo2;import java.text.SimpleDateFormat;import java.util.Date;/** * 模拟倒计时 */public class TestSleep &#123; public static void main(String[] args) throws InterruptedException &#123; // 10s倒计时 tenDown(); // 系统时间 systemTimeDown(); &#125; public static void tenDown() throws InterruptedException &#123; int num = 10; while (true)&#123; System.out.println(num--); if(num &lt;= 0)&#123; break; &#125; Thread.sleep(1000); &#125; &#125; public static void systemTimeDown() throws InterruptedException &#123; SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;HH:mm:ss&quot;); while (true)&#123; Date startTime = new Date(System.currentTimeMillis()); System.out.println(simpleDateFormat.format(startTime)); Thread.sleep(1000); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"13_线程礼让_yield","slug":"技术向/Java/狂神说Java_多线程详解/13_线程礼让_yield","date":"2020-08-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.221Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/13_线程礼让_yield/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/13_%E7%BA%BF%E7%A8%8B%E7%A4%BC%E8%AE%A9_yield/","excerpt":"","text":"13 线程礼让_yield 狂神说Java 多线程详解 礼让线程，让正在执行的线程暂停，但不阻塞 将线程从运行状态转为就绪状态 让CPU重新调度，礼让不一定成功，看CPU心情","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"14_线程强制执行_join","slug":"技术向/Java/狂神说Java_多线程详解/14_线程强制执行_join","date":"2020-08-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.221Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/14_线程强制执行_join/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/14_%E7%BA%BF%E7%A8%8B%E5%BC%BA%E5%88%B6%E6%89%A7%E8%A1%8C_join/","excerpt":"","text":"14 线程强制执行_join 狂神说Java 多线程详解 阻塞当前线程，等待 join 方法的线程执行完后继续执行。 123456789101112131415161718192021package demo2;public class TestJoin implements Runnable&#123; @Override public void run() &#123; for (int i = 0; i &lt; 1000; i++) &#123; System.out.println(&quot;VIP &quot; + i); &#125; &#125; public static void main(String[] args) throws InterruptedException &#123; Thread thread = new Thread(new TestJoin()); for (int i = 0; i &lt; 100; i++) &#123; if(i == 50)&#123; thread.start(); thread.join(); &#125; System.out.println(&quot;A&quot; + i); &#125; &#125;&#125; 运行结果： main线程执行到其他线程的join方法，main线程阻塞等待，等其他线程执行完毕，main现在","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"15_观测线程状态","slug":"技术向/Java/狂神说Java_多线程详解/15_观测线程状态","date":"2020-08-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.222Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/15_观测线程状态/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/15_%E8%A7%82%E6%B5%8B%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/","excerpt":"","text":"15 观测线程状态 狂神说Java 多线程详解 Thread.State线程状态，线程可以处于以下状态之一： NEW 尚未启动的线程处于此状态。 RUNNABLE 在Java虚拟机中执行的线程处于此状态。 BLOCKED 被阻塞等待监视器的线程处于此状态。 WAITING 正在等待另一个线程执行待定动作的线程处于此状态。 TIMED_WAITING 正在等待另一个线程执行动作达到指定等待时间的线程处于此状态。 TERMINATED 已退出的线程处于此状态。一个线程可以在给定时间点处于一个状态。这些状态是不反应任何操作系统线程状态的虚拟机状态。 案例12345678910111213141516171819202122232425262728293031323334package demo2;public class TestState &#123; public static void main(String[] args) throws InterruptedException &#123; Thread thread = new Thread( () -&gt; &#123; for (int i = 0; i &lt; 5; i++) &#123; try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; System.out.println(&quot;/////&quot;); &#125; ); // 观察状态 Thread.State state = thread.getState(); System.out.println(state); // NEW // 观察启动后 thread.start(); state = thread.getState(); System.out.println(state); // RUN while (state != Thread.State.TERMINATED)&#123; Thread.sleep(100); state = thread.getState(); System.out.println(state); &#125; &#125;&#125; 运行结果： …","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"16_线程的优先级","slug":"技术向/Java/狂神说Java_多线程详解/16_线程的优先级","date":"2020-08-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.223Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/16_线程的优先级/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/16_%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/","excerpt":"","text":"16 线程的优先级 狂神说Java 多线程详解 线程优先级 Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。 线程的优先级用数字表示，范围从 1 ~ 10。超过范围将报异常。 * Thread.MIN_PRIORITY &#x3D; 1 Thread.MAX_PRIORITY &#x3D; 10 Thread.NORM_PRIORITY &#x3D; 5，默认情况下线程优先级为 5 使用以下方式改变或获取优先级 * getPriority() setPriority(int num)，参数值越大，优先级越高，被调度的可能性越大。优先级设定要在 start() 方法之前，否则无效 注意：优先级低意味着获得调度的概率低，并不是优先级低就不会被调用了，这都是看CPU的调度（看CPU心情） 从源码角度看优先级源码来源：java.lang Thread.java 优先级默认值： 优先级低于最小值或高于最大值都会抛异常： 案例1234567891011121314151617181920212223242526272829package demo2;public class TestPriority &#123; public static void main(String[] args) &#123; // main 线程优先级 System.out.println(Thread.currentThread().getName() + &quot;优先级：&quot; + Thread.currentThread().getPriority()); Runnable runnable = new MyPriority(); Thread t1 = new Thread(runnable); Thread t2 = new Thread(runnable); Thread t3 = new Thread(runnable); // 设置优先级 t1.setPriority(1); t2.setPriority(Thread.NORM_PRIORITY); t3.setPriority(10); t1.start(); t2.start(); t3.start(); &#125;&#125;class MyPriority implements Runnable&#123; @Override public void run() &#123; System.out.println(Thread.currentThread().getName() + &quot;优先级：&quot; + Thread.currentThread().getPriority()); &#125;&#125; 运行结果： 第一次： 第二次： 可见，优先级只是让线程更有可能被CPU调度，但实际调度还要看CPU。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"17_守护线程","slug":"技术向/Java/狂神说Java_多线程详解/17_守护线程","date":"2020-08-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.223Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/17_守护线程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/17_%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/","excerpt":"","text":"17 守护线程 狂神说Java 多线程详解 守护（daemon）线程不用考虑 守护线程 是否已经执行完毕，当全部的 用户线程 执行完毕时，自动结束所有的守护线程。 线程分为 用户线程 和 守护线程 虚拟机必须确保 用户线程 执行完毕 虚拟机不用等待 守护线程 执行完毕 守护线程如：后台记录操作日志，监控内存，垃圾回收等通过 setDaemon(boolean flag) 来设置。默认 false 用户线程，true 案例12345678910111213141516171819202122232425262728293031323334package demo2;public class TestDeamon &#123; public static void main(String[] args) &#123; // 上帝 守护线程 Thread god = new Thread(new God()); god.setDaemon(true); // 默认 false，用户线程。当为 true 时，设置为守护线程。 // 人类 用户线程 Thread human = new Thread(new Human()); god.start(); human.start(); &#125;&#125;class God implements Runnable&#123; @Override public void run() &#123; while (true)&#123; System.out.println(&quot;愿上帝保佑你！&quot;); &#125; &#125;&#125;class Human implements Runnable&#123; @Override public void run() &#123; for (int i = 0; i &lt; 30000; i++) &#123; System.out.println(&quot;人生已过&quot; + i + &quot;天。&quot;); &#125; System.out.println(&quot;离开了世界，再见。&quot;); &#125;&#125; 运行结果： 用户线程执行完毕后，稍过一会，守护线程也将结束。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"18_线程同步机制","slug":"技术向/Java/狂神说Java_多线程详解/18_线程同步机制","date":"2020-08-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.223Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/18_线程同步机制/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/18_%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/","excerpt":"","text":"18 线程同步机制 狂神说Java 多线程详解 线程同步 由于同一进程的多个线程共享同一块储存空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入 锁机制 synchronized ，当一个线程获取对象的排他锁，独占资源，其他线程必须等待，使用后释放锁即可，存在以下问题： * 一个线程持有锁会导致其他所有需要此锁的线程挂起。 在多线程竞争下，加锁，释放锁会导致比较多的上下文切换 和 调度延时，引起性能问题。 如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题。举个类似线程同步的例子： 旅游景点有个公共厕所，大家都想上厕所，那么大家需要排队（列队）。当一个人（线程）进了厕所，他需要把门关上（上锁），以防止其他人进来，当他解决了生理问题，就会从厕所里出来（解锁）把厕所让给别人。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"19_三大不安全案例","slug":"技术向/Java/狂神说Java_多线程详解/19_三大不安全案例","date":"2020-08-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.224Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/19_三大不安全案例/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/19_%E4%B8%89%E5%A4%A7%E4%B8%8D%E5%AE%89%E5%85%A8%E6%A1%88%E4%BE%8B/","excerpt":"","text":"19 三大不安全案例 狂神说Java 多线程详解 案例1.车站买票车站买票，多个线程同时抢票导致一票多卖，甚至出现负数票。 12345678910111213141516171819202122232425262728293031323334353637383940414243package sync;public class UnsafeBuyTicket &#123; public static void main(String[] args) &#123; BuyTicket station = new BuyTicket(); new Thread(station,&quot;苦逼的我&quot;).start(); new Thread(station,&quot;牛逼等你&quot;).start(); new Thread(station,&quot;可恶的黄牛党&quot;).start(); &#125;&#125;class BuyTicket implements Runnable&#123; // 票 private int ticketNums = 10; // 外部停止标志位 boolean flag = true; @Override public void run() &#123; // 买票 while (flag)&#123; try &#123; buy(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; private void buy() throws InterruptedException &#123; // 判断是否有票 if(ticketNums &lt;= 0)&#123; flag = false; return; &#125; // 模拟延时 Thread.sleep(100); System.out.println(Thread.currentThread().getName() + &quot;拿到&quot; + ticketNums--); &#125;&#125; 运行结果： 2.银行取钱银行账户里有50，但你和你女朋友同时取钱，取出了150，并且账户里余额出现的负数。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172package sync;public class UnsafeBank &#123; public static void main(String[] args) &#123; // 账户 Account account = new Account(100,&quot;结婚基金&quot;); Drawing you = new Drawing(account,50,&quot;你&quot;); Drawing girdFriend = new Drawing(account,100,&quot;女朋友&quot;); you.start(); girdFriend.start(); &#125;&#125;/** * 账户 */class Account&#123; // 余额 int money; // 卡名 String name; public Account(int money, String name) &#123; this.money = money; this.name = name; &#125;&#125;/** * 银行：模拟取钱 */class Drawing extends Thread&#123; // 账户 Account account; // 取了多少钱 int drawingMoney; // 现在手里有多少钱 int nowMoney; public Drawing(Account account,int drawingMoney,String name)&#123; super(name); this.account = account; this.drawingMoney = drawingMoney; &#125; //取钱 @Override public void run() &#123; // 判断有没有钱 if(account.money - drawingMoney &lt; 0)&#123; System.out.println(Thread.currentThread().getName() + &quot;钱不够，取不了&quot;); return; &#125; // sleep 可以放大问题 try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; // 卡内余额 = 余额 - 你取的钱 account.money = account.money - drawingMoney; // 你手里的钱 nowMoney = nowMoney + drawingMoney; System.out.println(account.name + &quot;余额为：&quot; + account.money); System.out.println(Thread.currentThread().getName() + &quot;手里的钱：&quot; + nowMoney); &#125;&#125; 运行结果： ArrayList 数组列表是线程不安全的开10000个线程向 ArrayList 数组列表加入元素，可能会出现同一个位置空间被多个线程重复占用，导致最后数组内元素个数少于10000个。 12345678910111213141516package sync;import java.util.ArrayList;import java.util.List;public class UnsafeList &#123; public static void main(String[] args) &#123; List&lt;String&gt; list = new ArrayList&lt;String&gt;(); for (int i = 0; i &lt; 10000; i++) &#123; new Thread( () -&gt; list.add(Thread.currentThread().getName()) ).start(); &#125; System.out.println(list.size()); &#125;&#125; 运行结果： %!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;)","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"20_同步方法及同步块","slug":"技术向/Java/狂神说Java_多线程详解/20_同步方法及同步块","date":"2020-08-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.224Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/20_同步方法及同步块/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/20_%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%8F%8A%E5%90%8C%E6%AD%A5%E5%9D%97/","excerpt":"","text":"20 同步方法及同步块 狂神说Java 多线程详解 这一节是 重难点 ，详见 Synchronized的使用 。 副本： 辅佐资料_Java笔记本 【Java并发编程之深入理解】Synchronized的使用_青苔小榭-CSDN博客_synchronized 同步方法 由于我们可以通过 private 关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是 synchronized 关键字，它包括两种用法：synchronized 方法 和 synchronized 块。 1同步方法： public synchronized void method(int args) &#123;&#125; synchronized 方法控制对”对象”的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行。 1缺陷： 若将一个大的方法申明为 synchronized 将会影响效率 方法里面需要 修改 的内容才需要锁，锁的太多，浪费资源。 同步块 同步块：synchronized(Obj){} Obj 称之为 同步监视器 * Obj 可以是任何对象，但是推荐使用共享资源作为同步监视器 同步方法中无需指定同步监视器，因为同步方法的同步监视器就是 this，就是这个对象本身，或者是 class 同步监视器的执行过程 1. 第一个线程访问，锁定同步监视器，执行其中的代码。 第二个线程访问，发现同步监视器锁定，无法访问。 第一个线程访问完毕，解锁同步监视器。 第二个线程访问，发现同步监视器没有锁，然后锁定并访问。第三方资料 这一节是 重难点 ，详见 Synchronized的使用 。 副本： 辅佐资料_Java笔记本 【Java并发编程之深入理解】Synchronized的使用_青苔小榭-CSDN博客_synchronized 对于普通同步方法，锁是当前实例对象。 如果有多个实例 那么锁对象必然不同无法实现同步。 对于静态同步方法，锁是当前类的Class对象。有多个实例 但是锁对象是相同的 可以完成同步。 对于同步方法块，锁是Synchonized括号里配置的对象。对象最好是只有一个的，如当前类的 class 是只有一个的，锁对象相同，也能实现同步。 锁竟争资源可以。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"10_Lambda表达式","slug":"技术向/Java/狂神说Java_多线程详解/10_Lambda表达式","date":"2020-08-19T16:00:00.000Z","updated":"2022-06-15T08:32:50.220Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/10_Lambda表达式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/10_Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"10 Lambda表达式 狂神说Java 多线程详解 应用 lambda ，必须是函数式接口（接口里仅有一个需要实现的方法）。 通常用于 匿名实现类。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"11_线程停止","slug":"技术向/Java/狂神说Java_多线程详解/11_线程停止","date":"2020-08-19T16:00:00.000Z","updated":"2022-06-15T08:32:50.220Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/11_线程停止/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/11_%E7%BA%BF%E7%A8%8B%E5%81%9C%E6%AD%A2/","excerpt":"","text":"11 线程停止 狂神说Java 多线程详解 Stop 线程停止 不推荐使用JDK提供的 stop()、destroy() 方法[已废弃]。 推荐线程自己停下来。 建议使用一个标志位进行终止变量 当flag&#x3D;false时，则终止线程运行。案例 1234567891011121314151617181920212223242526272829package demo2;public class TestStop implements Runnable&#123; private boolean flag = true; @Override public void run() &#123; int i=0; while (flag)&#123; System.out.println(&quot;run...Thread&quot; + i++); &#125; &#125; public void stop()&#123; this.flag = false; &#125; public static void main(String[] args) &#123; TestStop testStop = new TestStop(); new Thread(testStop).start(); for (int i = 0; i &lt; 100000; i++) &#123; if(i==90000)&#123; testStop.stop(); System.out.println(&quot;该线程停止了&quot;); &#125; &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"2_线程、进程、多线程","slug":"技术向/Java/狂神说Java_多线程详解/2_线程、进程、多线程","date":"2020-08-19T16:00:00.000Z","updated":"2022-06-15T08:32:50.227Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/2_线程、进程、多线程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/2_%E7%BA%BF%E7%A8%8B%E3%80%81%E8%BF%9B%E7%A8%8B%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B/","excerpt":"","text":"2 线程、进程、多线程 狂神说Java 多线程详解 单线程和多线程的区别： 本章核心概念： 线程就是独立的执行路径。 在程序运行时，即使没有自己创建线程，后台也会有多个线程，如主线程，gc线程。 main() 称之为主线程，为系统的入口，用于执行整个程序。 在进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为的干预的。 对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制。 线程会带来额外的开销，如cpu调度时间，并发控制开销。 每个线程在自己的工作内存交互，内存控制不当会造成","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"3_继承Thread","slug":"技术向/Java/狂神说Java_多线程详解/3_继承Thread","date":"2020-08-19T16:00:00.000Z","updated":"2022-06-15T08:32:50.228Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/3_继承Thread/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/3_%E7%BB%A7%E6%89%BFThread/","excerpt":"","text":"3 继承Thread 狂神说Java 多线程详解 创建线程的三种方式 继承 Thread 类 实现 Runnalbe 接口 实现 Callable 接口继承 Thread 类实现多线程 创建线程方式一： 继承 Thread 类，重写 run() 方法，调用 start 开启线程。 123456789101112131415161718192021222324252627package demo1;/** * 创建线程方式一： 继承 Thread 类，重写 run() 方法，调用 start 开启线程。 * * 总结：注意，开启线程不一定立即执行，由 CPU 调度决定。 */public class TestTread extends Thread&#123; @Override public void run() &#123; // run 方法线程体 for (int i=0;i &lt; 10;i++)&#123; System.out.println(&quot;新线程&quot; + i); &#125; &#125; public static void main(String[] args) &#123; // main 方法体 TestTread testTread = new TestTread(); // 开启线程 testTread.start(); for (int i=0;i &lt; 200;i++)&#123; System.out.println(&quot;主线程&quot; + i); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"4_网图下载","slug":"技术向/Java/狂神说Java_多线程详解/4_网图下载","date":"2020-08-19T16:00:00.000Z","updated":"2022-06-15T08:32:50.228Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/4_网图下载/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/4_%E7%BD%91%E5%9B%BE%E4%B8%8B%E8%BD%BD/","excerpt":"","text":"4 网图下载 狂神说Java 多线程详解 12345678910111213141516171819202122232425262728293031323334353637383940414243import org.apache.commons.io.FileUtils;import java.io.File;import java.io.IOException;import java.net.URL;public class TestThread2 extends Thread&#123; private String url; private String name; public TestThread2(String url, String name) &#123; this.url = url; this.name = name; &#125; @Override public void run() &#123; new WebDownloader().downloader(url,name); System.out.println(&quot;下载了文件名：&quot; + name); &#125; public static void main(String[] args) &#123; TestThread2 t1 = new TestThread2(&quot;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=151472226,3497652000&amp;fm=26&amp;gp=0.jpg&quot;,&quot;1.jpg&quot;); TestThread2 t2 = new TestThread2(&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3367568658,3302321631&amp;fm=26&amp;gp=0.jpg&quot;,&quot;2.jpg&quot;); TestThread2 t3 = new TestThread2(&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1597910837734&amp;di=c04bbb658aae00cadceece45f98c7bf6&amp;imgtype=0&amp;src=http%3A%2F%2F01.imgmini.eastday.com%2Fmobile%2F20170709%2F20170709004858_f316b2aee3d7cc6a0408be4dd5c633e3_1.jpeg&quot;,&quot;3.jpg&quot;); t1.start(); t2.start(); t3.start(); &#125;&#125;class WebDownloader &#123; // 下载方法 public void downloader(String url,String name)&#123; try &#123; FileUtils.copyURLToFile(new URL(url),new File(name)); &#125; catch (IOException e) &#123; e.printStackTrace(); System.out.println(&quot;IO 异常&quot;); &#125; &#125;&#125; 执行结果：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"6_初识并发问题","slug":"技术向/Java/狂神说Java_多线程详解/6_初识并发问题","date":"2020-08-19T16:00:00.000Z","updated":"2022-06-15T08:32:50.229Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/6_初识并发问题/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/6_%E5%88%9D%E8%AF%86%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/","excerpt":"","text":"6 初识并发问题 狂神说Java 多线程详解 继承 Thread 类 子类继承 Thread 类具备多线程能力 启动线程：子类对象 .start() 不建议使用：避免OOP单继承局限性实现 Runnable 接口 实现接口 Runnable 具有多线程能力 启动线程：传入目标对象 + Thread对象 .start() 推荐使用：避免单继承的局限性，灵活方便，方便同一个对象被多个线程使用。例子： 123456789101112131415161718192021222324252627public class TestThread4 implements Runnable &#123; // 公共资源 private int ticketNums = 10; @Override public void run() &#123; while (true)&#123; if(ticketNums &lt;= 0)&#123; break; &#125; try &#123; Thread.sleep(200); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(Thread.currentThread().getName() + &quot; 拿到了第 &quot; + ticketNums-- + &quot; 票&quot;); &#125; &#125; public static void main(String[] args) &#123; TestThread4 ticket = new TestThread4(); new Thread(ticket,&quot;小明&quot;).start(); new Thread(ticket,&quot;老师&quot;).start(); new Thread(ticket,&quot;黄牛党&quot;).start(); &#125;&#125; 运行结果： 可以看到，有人将票取重了，这是并发经常遇到的问题。****","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"5_实现Runnable接口","slug":"技术向/Java/狂神说Java_多线程详解/5_实现Runnable接口","date":"2020-08-19T16:00:00.000Z","updated":"2022-06-15T08:32:50.228Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/5_实现Runnable接口/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/5_%E5%AE%9E%E7%8E%B0Runnable%E6%8E%A5%E5%8F%A3/","excerpt":"","text":"5 实现Runnable接口 狂神说Java 多线程详解 实现 Runnable 接口实现多线程推荐使用 Runnable 实现线程。 创建线程方式二： 实现 Runnable 接口，重写 run 方法，执行线程需要丢入 Runnable实现类（如 Thread 类），调用 start 方法。 123456789101112131415161718192021222324/** * 创建线程方式二： 实现 Runnable 接口，重写 run 方法，执行线程需要丢入 Runnable实现类（如 Thread 类），调用 start 方法。 * * 推荐使用 Runnable 实现线程。 */public class TestThread3 implements Runnable&#123; @Override public void run() &#123; // run 方法线程体 for (int i=0;i &lt; 10;i++)&#123; System.out.println(&quot;新线程&quot; + i); &#125; &#125; public static void main(String[] args) &#123; // main 方法体 // 开启线程 new Thread(new TestThread3()).start(); for (int i=0;i &lt; 200;i++)&#123; System.out.println(&quot;主线程&quot; + i); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"7_龟兔赛跑","slug":"技术向/Java/狂神说Java_多线程详解/7_龟兔赛跑","date":"2020-08-19T16:00:00.000Z","updated":"2022-06-15T08:32:50.229Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/7_龟兔赛跑/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/7_%E9%BE%9F%E5%85%94%E8%B5%9B%E8%B7%91/","excerpt":"","text":"7 龟兔赛跑 狂神说Java 多线程详解 龟兔赛跑 123456789101112131415161718192021222324252627282930313233public class Race implements Runnable &#123; private static String winner; @Override public void run() &#123; for (int i = 0; i &lt;= 100; i++) &#123; boolean flag = gameOver(i); if(flag)&#123; break; &#125; System.out.println(Thread.currentThread().getName() + &quot; 跑了 &quot; + i + &quot; 步&quot;); &#125; &#125; private boolean gameOver(int steps)&#123; if(winner != null)&#123; return true; &#125; if(steps &gt;= 100)&#123; winner = Thread.currentThread().getName(); System.out.println(&quot;winner is &quot; + winner); return true; &#125; return false; &#125; public static void main(String[] args) &#123; // 公共赛道 Race race = new Race(); new Thread(race,&quot;兔子&quot;).start(); new Thread(race,&quot;乌龟&quot;).start(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"8_实现Callable接口","slug":"技术向/Java/狂神说Java_多线程详解/8_实现Callable接口","date":"2020-08-19T16:00:00.000Z","updated":"2022-06-15T08:32:50.229Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/8_实现Callable接口/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/8_%E5%AE%9E%E7%8E%B0Callable%E6%8E%A5%E5%8F%A3/","excerpt":"","text":"8 实现Callable接口 狂神说Java 多线程详解 除继承 Thread 和 实现 Runnable 之外，第三种方式：实现 Callable 接口来创建线程 实现 Callable 接口（了解即可） 实现Callable接口，需要返回值类型（泛型的类型和call方法返回类型一致） 重写call方法，需要抛出异常（call方法相当于run方法） 创建目标对象 创建执行服务：ExecutorService ser &#x3D; Executors.newFixedThreadPool(3); （创建线程池） 提交执行：Future r1 &#x3D; ser.submit(t1); （将任务分配给线程池内某个线程） 获取结果：boolean rs1 &#x3D; r1.get(); 关闭服务：ser.shutdownNow(); （关闭线程池）案例 使用Callable将图片下载改造。 [4 网图下载] 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package demo2;import org.apache.commons.io.FileUtils;import java.io.File;import java.io.IOException;import java.net.URL;import java.util.concurrent.*;public class TestCallable implements Callable&lt;Boolean&gt; &#123; private String url; private String name; public TestCallable(String url, String name) &#123; this.url = url; this.name = name; &#125; @Override public Boolean call() &#123; new WebDownloader().downloader(url,name); System.out.println(&quot;下载了文件名：&quot; + name); return true; &#125; public static void main(String[] args) throws ExecutionException, InterruptedException &#123; TestCallable t1 = new TestCallable(&quot;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=151472226,3497652000&amp;fm=26&amp;gp=0.jpg&quot;,&quot;1.jpg&quot;); TestCallable t2 = new TestCallable(&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3367568658,3302321631&amp;fm=26&amp;gp=0.jpg&quot;,&quot;2.jpg&quot;); TestCallable t3 = new TestCallable(&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1597910837734&amp;di=c04bbb658aae00cadceece45f98c7bf6&amp;imgtype=0&amp;src=http%3A%2F%2F01.imgmini.eastday.com%2Fmobile%2F20170709%2F20170709004858_f316b2aee3d7cc6a0408be4dd5c633e3_1.jpeg&quot;,&quot;3.jpg&quot;); // Callable 四步骤启动线程 // 创建执行服务 ExecutorService ser = Executors.newFixedThreadPool(3); // 提交执行 Future&lt;Boolean&gt; r1 = ser.submit(t1); Future&lt;Boolean&gt; r2 = ser.submit(t2); Future&lt;Boolean&gt; r3 = ser.submit(t3); // 获取结果 boolean rs1 = r1.get(); boolean rs2 = r2.get(); boolean rs3 = r3.get(); // 关闭服务 ser.shutdownNow(); &#125;&#125;class WebDownloader &#123; // 下载方法 public void downloader(String url,String name)&#123; try &#123; FileUtils.copyURLToFile(new URL(url),new File(name)); &#125; catch (IOException e) &#123; e.printStackTrace(); System.out.println(&quot;IO 异常&quot;); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"9_静态代理模式","slug":"技术向/Java/狂神说Java_多线程详解/9_静态代理模式","date":"2020-08-19T16:00:00.000Z","updated":"2022-06-15T08:32:50.230Z","comments":true,"path":"技术向/Java/狂神说Java_多线程详解/9_静态代理模式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/9_%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"9 静态代理模式 狂神说Java 多线程详解 Thread 和 Runnable 关系，静态代理。Thread是代理类，Runnable是被代理类。 通过案例理解 静态代理模式，辅助理解Thread和Runnable的关系。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package demo2;/** * 静态代理模式总结： * 真实对象和代理对象都要实现同一个接口 * 代理对象要代理真实对象 * * 好处： * 代理对象可以做真实对象做不了的事情 * 真实对象专注做自己的事情 */public class StaticProxy &#123; public static void main(String[] args) &#123; // 对比之下，可以看到代理模式 // new Thread(new Runnable()).start(); new WeddingCompany(new You()).happyMarry(); &#125;&#125;interface Marry&#123; void happyMarry();&#125;class You implements Marry&#123; @Override public void happyMarry() &#123; System.out.println(&quot;秦老师要结婚了！&quot;); &#125;&#125;class WeddingCompany implements Marry&#123; private Marry target; public WeddingCompany(Marry target) &#123; this.target = target; &#125; @Override public void happyMarry() &#123; before(); target.happyMarry(); after(); &#125; private void after() &#123; System.out.println(&quot;收尾款&quot;); &#125; private void before() &#123; System.out.println(&quot;布置现场&quot;); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"30_Redis订阅发布","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/30_Redis订阅发布","date":"2020-08-18T16:00:00.000Z","updated":"2022-06-15T08:32:50.369Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/30_Redis订阅发布/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/30_Redis%E8%AE%A2%E9%98%85%E5%8F%91%E5%B8%83/","excerpt":"","text":"30 Redis订阅发布 Redis最新超详细版教程通俗易懂 Redis发布订阅Redis发布订阅（pub&#x2F;sub）是一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接收消息。微信、微博、关注系统。 Redis客户端可以订阅任意数量的频道。 订阅&#x2F;发布消息图： 消息发布者 队列 消息订阅者 下图展示了频道 channel1 ，以及订阅这个频道的三个客户端—client2、client5和client1之间的关系。 当有新消息通过 PUBLISH 命令发送给频道 channel1 时，这个消息就会被发送给订阅它的三个客户端： 命令 这些命令被广泛用于构建即时通讯应用，比如网络聊天室（chatroom）和事实广播、实时提醒等。 消息订阅者： 通过 SUBSCRIBE 订阅频道： 消息发布者： 通过 PUBLISH 向频道发布消息： 那么 消息订阅者 将会收到频道里的消息： 原理 Redis 是使用C实现的，通过分析Redis源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍此加深对 Redis 的理解。 Redis 是通过 PUBLISH、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。 通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个 channel，而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键，就是将客户端添加到了给定的 channel 的订阅链表中。 通过 RUBLISH 命令向订阅者发送消息，redis-server会使用给定的频道作为键，在它所维护的channel字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。 Pub&#x2F;Sub从字面上理解就是发布（Publish）与订阅（Subscribe），在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。 使用场景： 实时消息系统。举个例子：斗鱼里面的全站消息，实际上就是当你注册了一个新账号，那么新账号就默认关注了 “全站消息” 这个频道。当网站管理者向全站消息里发布了一条消息，那么全站的用户都将收到这个消息。 实时聊天。即发布者也是订阅者。 订阅、关注系统。稍微复杂的场景我们就会使用消息中间件 MQ","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"31_Redis集群环境搭建","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/31_Redis集群环境搭建","date":"2020-08-18T16:00:00.000Z","updated":"2022-06-15T08:32:50.370Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/31_Redis集群环境搭建/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/31_Redis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"","text":"31 Redis集群环境搭建 Redis最新超详细版教程通俗易懂 Redis主从复制概念主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点（master&#x2F;leader），后者称为从节点（slave&#x2F;follower）；数据的复制是 单向的 ，只能由主节点到从节点。Master以写为主，Slave以读为主。 默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点（或者没有从节点），但一个从节点只能有一个主节点。 主从复制的作用包括： 数据冗余 ，主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。 故障恢复 ，当主节点出现问题时，可以由从节点提供服务，实现快速故障恢复；实际上是一种服务的冗余。 负载均衡 ，在主从复制的基础上，配合读写分离，可以有主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载，尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。 可用基石 ，除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。一般来说，要将Redis运用于工程项目中，只是用一台Redis是万万不能的，原因如下： 从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大。 从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有内存作Redis储存内存，一般来说，单台Redis最大使用内存不应该超过20G。一主三从。（最低配置为一主两从） 环境配置只配置从库，不用配置主库。 查看 主从信息 1info replication 实验操作： 同一台服务器开四个终端。 复制 redis.conf 粘贴出3个副本 “redis79.conf” “redis80.conf” “redis81.conf”。 编辑副本 port （端口） daemonize（yes，后台运行） pidfile（redis_6380，pid改成对应的） logfile（6380.log，日志文件） dbfilename（dump6380，持久化rdb文件）这里说一下，选择配置文件启动服务器： 1redis-server kconfig/redis81.conf 因为使用的 单机多服 因此在这台物理服务器上可以看到 3 个","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"32_主从复制之复制原理","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/32_主从复制之复制原理","date":"2020-08-18T16:00:00.000Z","updated":"2022-06-15T08:32:50.370Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/32_主从复制之复制原理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/32_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%B9%8B%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/","excerpt":"","text":"32 主从复制之复制原理 Redis最新超详细版教程通俗易懂 接上节。 默认情况下，三台启动的Redis服务器都是主机（Master）。 认老大，去 从机 上配置 谁是老大。 通过命令配置从机，只是暂时的，服务器重启就失效了。永久配置请修改配置文件 在从机上执行命令： SLAVEOF 设定谁是主机。 参数：IP地址 端口号 1SLAVEOF 127.0.0.1 6379 当从机连上主机后，去主机上查看： 本主机已经存在一个从机了。 真实的生产环境应该在配置文件里设置，这样的话是永久的 redis.conf 细节 主机可以写，从机不能写只能读。主机中的所有信息，都会自动被从机保存。 主机写： 从机写：将会报错。 测试： 主机断开连接，从机依旧连接到主机，但是没有写操作，这个时候，主机如果回来了，从机依旧可以直接获取到主机写的信息。 从机如果是使用命令行，来配置的主从，这个时候如果重启了，就会变回主机。只要变为从机，立马就会从主机中获取值。 复制原理 Slave 启动成功连接到 master 后会发送一个sync同步命令 Master 接到命令，启动后台存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕后，master将传送整个数据到slave，并完成一次完全同步。 全量复制：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。 增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步。 但是只要是重新连接master，一次完全同步（全量复制）将被自动执行。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"33_宕机后手动配置主机","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/33_宕机后手动配置主机","date":"2020-08-18T16:00:00.000Z","updated":"2022-06-15T08:32:50.371Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/33_宕机后手动配置主机/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/33_%E5%AE%95%E6%9C%BA%E5%90%8E%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E4%B8%BB%E6%9C%BA/","excerpt":"","text":"33 宕机后手动配置主机 Redis最新超详细版教程通俗易懂 层层链路 上一个M连接下一个S。 从机变回主机 slave -&gt; master同样使用 SLAVEOF 命令 1SLAVEOF no one","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"34_哨兵模式详解","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/34_哨兵模式详解","date":"2020-08-18T16:00:00.000Z","updated":"2022-06-15T08:32:50.371Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/34_哨兵模式详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/34_%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"34 哨兵模式详解 Redis最新超详细版教程通俗易懂 哨兵模式（自动选举老大） 概述 主从切换技术的方法是：当主服务器宕机后，需要手动把一台服务器切换为主服务器，这就需要人工干预，费时费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，很多时候，我们优先考虑 哨兵模式。Redis从 2.8 开始正式提供 Sentinel（哨兵） 架构来解决这个问题。 哨兵模式是一种特殊的模式，首先Redis提供了哨兵命令，哨兵是一个 独立的进程 ，作为进程它会独立运行。其原理是 哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例 。 Redis 提供的哨兵： 这里哨兵有两个作用： 通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器。 当哨兵检测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。然而一个哨兵进程对Redis服务器进行监控，可能会出现问题。因此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。 假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象称为 主观下线 。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover（故障转移）操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实际切换主机，这个过程称为 客观下线 。 测试 目前的状态 一主二从。 以下参数不能错，否则哨兵失效。 配置哨兵配置文件 kconfig&#x2F;sentinel.conf 参数：被监控的名称 监视的IP 端口 至少有1个哨兵确认 1sentinel monitor myredis 127.0.0.1 6379 1 启动哨兵1redis-sentinel kconfig/sentinel.conf 启动哨兵进程： 如果主机发生故障，过一小段时间后，经过哨兵投票，将选举出新的主机。（在哨兵控制台可以看到日志信息） 如果主机从故障中恢复，只能归并到新主机之下作从机。（主人当奴隶，大人时代变了） 哨兵模式 优点： 哨兵集群，基于主从复制模式，所有的主从配置优点，它都有。 主从可以切换，故障可以转移，系统可用性更好。 哨兵模式就是主从模式的升级，手动到自动，更健壮。缺点： Redis不好在线扩容，集群容量一旦达到上限，在线扩容就十分麻烦。 实现哨兵模式的配置其实是很麻烦的，里面有很多选择。 哨兵模式的全部配置","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"35_缓存穿透和雪崩","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/35_缓存穿透和雪崩","date":"2020-08-18T16:00:00.000Z","updated":"2022-06-15T08:32:50.372Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/35_缓存穿透和雪崩/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/35_%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/","excerpt":"","text":"35 缓存穿透和雪崩 Redis最新超详细版教程通俗易懂 Redis缓存穿透和雪崩Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一些问题。其中，最要害的问题，就是 数据一致性的问题 ，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。 另外的一些经典问题就是， 缓存穿透 、 缓存雪崩 和 缓存击穿 。 缓存穿透 概念 缓存穿透的概念非常简单，用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多时候，缓存都没有命中，于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。 解决方案 布隆过滤器布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进性校验，不符合则丢弃，从而避免对底层存储系统的查询压力。 缓存空对象当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源。 但是这中方法存在两个问题： 如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键。 即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口不一致，这对于需要保持一致性的业务会有影响。缓存击穿 概述 这里需要注意和缓存击穿的区别。缓存击穿，是指一个key非常热点，在不停的抗大并发，大并发集中对这一个点进行访问，当在这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。 当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并回写缓存，会导致数据库瞬间压力过大。 解决方案 设置热点数据永不会过期从缓存层面看，没有设置过期时间，所以不会出现热点key过期后产生的问题。 加互斥锁分布式锁：使用分布式锁，保证对每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。说人话，就是缓存和数据库之间数据交互仅允许一个线程，其他的都得等着。 缓存雪崩 概念 缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis宕机。 产生雪崩的原因之一，比如马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会到达存储层，存储层的调用会暴增，造成存储层也会挂掉的情况。 其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。 解决方案 redis高可用这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉后其他的还可以继续工作，其实就是搭建的集群。 限流降级这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。 数据预热数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一边，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"26_自定义RedisTemplate","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/26_自定义RedisTemplate","date":"2020-08-17T16:00:00.000Z","updated":"2022-06-15T08:32:50.366Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/26_自定义RedisTemplate/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/26_%E8%87%AA%E5%AE%9A%E4%B9%89RedisTemplate/","excerpt":"","text":"26 自定义RedisTemplate Redis最新超详细版教程通俗易懂 SpringBoot提供的RedisTemplate有什么问题？1234# 将对象存入 RedisredisTemplate.opsForValue().set(&quot;user&quot;,new UserPOJO(&quot;hooy&quot;,18));# 将对象从 Redis 取出System.out.println(redisTemplate.opsForValue().get(&quot;user&quot;)); 以上代码，在 SpringBoot 里存取正常，但在 Redis 里存在问题，如下图： 可见，通过 key 取不到对应的 value。 SpringBoot提供的RedisTemplate默认将对象序列化的方式是 JDK序列化。 解决方式：自定义 RedisTemplate 代替。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package com.kuang.config;import com.fasterxml.jackson.annotation.JsonAutoDetect;import com.fasterxml.jackson.annotation.PropertyAccessor;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;import org.springframework.data.redis.serializer.StringRedisSerializer;@Configurationpublic class RedisConfig &#123; /** * 自定义 RedisTemplate ， 替换掉 RedisAutoConfiguration.java 类里的 redisTemplate * 自定义内容： 改变了某些类型的序列化方式。 默认是使用JDK序列化。 */ @Bean public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) &#123; RedisTemplate&lt;String, Object&gt; template = new RedisTemplate(); template.setConnectionFactory(redisConnectionFactory); // Jackson 方式序列化 Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class); ObjectMapper om = new ObjectMapper(); om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); jackson2JsonRedisSerializer.setObjectMapper(om); // String 方式序列化 StringRedisSerializer stringRedisSerializer = new StringRedisSerializer(); // String 类型的 key 使用 String方式序列化 template.setKeySerializer(stringRedisSerializer); // Hash 类型的 key 使用 String方式序列化 template.setHashKeySerializer(stringRedisSerializer); // String 类型的 value 使用 jackson方式序列化 template.setValueSerializer(jackson2JsonRedisSerializer); // Hash 类型的 value 使用 jackson方式序列化 template.setHashValueSerializer(jackson2JsonRedisSerializer); template.afterPropertiesSet(); return template; &#125;&#125; 由于默认的 RedisTemplate 上有 @ConditionalOnMissingBean(name &#x3D; {“redisTemplate”}) 注解，因此当存在自定义的 RedisTemplate 时，默认 RedisTemplate 将不执行。 结果key 不存在转义符了。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"27_Redis配置文件详解","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/27_Redis配置文件详解","date":"2020-08-17T16:00:00.000Z","updated":"2022-06-15T08:32:50.367Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/27_Redis配置文件详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/27_Redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"27 Redis配置文件详解 Redis最新超详细版教程通俗易懂 网络 123bind 127.0.0.1 # 绑定的IP，允许访问的IP。设置为 * 允许所有计算机访问。protected-mode yes # 保护模式port 6379 # 端口号 GENERAL 通用 123456789101112131415daemonize yes # 以守护进程的方式运行，默认是no，需要自己改为yes。否则退出，Redis就关了。pidfile /var/run/redis_6379.pid # 如果以后台的方式运行，我们需要指定一个pid文件# 日志# Specify the server verbosity level.# This can be one of:# debug (a lot of information, useful for development/testing)# verbose (many rarely useful info, but not a mess like the debug level)# notice (moderately verbose, what you want in production probably)# warning (only very important / critical messages are logged)loglevel noticelogfile &quot;&quot; # 日志文件位置databases 16 # 数据库的数量，默认是16个数据库always-show-loge yes # 是否总是显示LOGO SNAPSHOTTING 快照 持久化，在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb .aof。 1234567891011121314# 如果 900s 内至少有1个key发生了修改，就持久化操作。save 900 1# 如果 300 内至少有10个key发生了修改，就持久化操作。save 300 10# 如果 60 内至少有10000个key发生了修改，就持久化操作。save 60 10000stop-writes-on-bgsave-error yes # 持久化发生错误后是否还继续工作rdbcompression yes # 是否压缩 rdb 文件，需要消耗cpu资源rdbchecksum yes # 保存 rdb 文件的时候，进行错误的检查校验dir ./ # rdb 文件保存的目录，默认当前目录下 REPLICATION 复制 具体配置在 主从复制 中详解。 SECURITY 安全 可以在这里设置 redis 密码，默认是没有密码的。 1requirepass 123456 如果设置了密码，将使用以下命令认证。 1auth 123456 LIMITS 限制 12345maxclients 10000 # 限制连接数maxmemory &lt;bytes&gt; # 最大内存上限值，单位字节maxmemory-policy noeviction # 如果内存满了，该怎么做策略 maxmemory-policy： noeviction: 不删除策略, 达到最大内存限制时, 如果需要更多内存, 直接返回错误信息。（默认值） allkeys-lru: 所有key通用; 优先删除最近最少使用(less recently used ,LRU) 的 key。 volatile-lru: 只限于设置了 expire 的部分; 优先删除最近最少使用(less recently used ,LRU) 的 key。 allkeys-random: 所有key通用; 随机删除一部分 key。 volatile-random: 只限于设置了 expire 的部分; 随机删除一部分 key。 volatile-ttl: 只限于设置了 expire 的部分; 优先删除剩余时间(time to live,TTL) 短的key。 APPEND ONLY MODE AOF模式配置 1234567appendonly no # 默认是不开启 aof 模式的，默认使用的是 rdb 方式持久化，在大部分情况下，rdb完全够用。appendfilename &quot;appendonly.aof&quot; # 持久化的文件名# appendfsync always # 每次修改都会 sync，消耗性能appendfsync everysec # 每秒执行一次 sync，可能会丢失1s的数据# appendfsync no # 不执行sync，这个时候操作系统自己同步数据，速度最快。 具体配置在 Redis持久化 中详解。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"28_持久化之RDB操作","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/28_持久化之RDB操作","date":"2020-08-17T16:00:00.000Z","updated":"2022-06-15T08:32:50.368Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/28_持久化之RDB操作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/28_%E6%8C%81%E4%B9%85%E5%8C%96%E4%B9%8BRDB%E6%93%8D%E4%BD%9C/","excerpt":"","text":"28 持久化之RDB操作 Redis最新超详细版教程通俗易懂 RDB（Redis DataBase） 什么是RDB 在指定的时间间隔内将内存的数据集快照写入磁盘，也就是行话讲的Snapshot快照，他恢复时是将快照文件直接读到内存里。 Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行 IO 操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加高效。RDB的缺点是最后一次持久化后的数据可能丢失。我们默认的就是RDB，一般情况下不需要修改这个配置。 rdb保存的文件是dump.rdb 都是在我们的配置文件中快照中进行配置的。 生产环境中，会将 dump.rdb 备份。 触发机制 save 的规则（配置文件）满足情况下，会产生rdb文件。 执行 save 或者 flushall 命令，会产生rdb文件。 正常退出 redis ，也会产生rdb文件。 如何通过 rdb文件 恢复 redis 里面的数据 只需将 rdb文件 放在我们的 redis 启动目录就可以，redis启动的时候会自动检查 dump.rdb 恢复其中的数据。 查看需要存在的位置，可以从 redis 的配置文件里找到。 123127.0.0.1:6379&gt; config get dir1) &quot;dir&quot;2) &quot;/user/local/bin&quot; 键值对：dir是key，路径是value RDB的优缺点优点： 适合大规模的数据恢复。缺点： 需要一定的时间间隔进程操作。如果redis意外宕机了，这个最后一次修改数据就没有了。 fork进程的时候，会占用一定的内容空间。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"29_持久化之AOF操作","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/29_持久化之AOF操作","date":"2020-08-17T16:00:00.000Z","updated":"2022-06-15T08:32:50.368Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/29_持久化之AOF操作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/29_%E6%8C%81%E4%B9%85%E5%8C%96%E4%B9%8BAOF%E6%93%8D%E4%BD%9C/","excerpt":"","text":"29 持久化之AOF操作 Redis最新超详细版教程通俗易懂 AOF（Append Only File） 以日志的形式来记录每一个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。 aof 保存的是 appendonly.aof 文件 默认是关闭的。如果有需求，需要我们手动配置。将Redis配置文件里的 appendonly 改为 yes 即可开启 aof 。 如果 aof 文件有错误，那么 redis 是无法启动的。 Redis提供了一个修复工具 redis-check-aof --fix 可以尝试修复存在错误的 aof 文件。 什么是aof重写 AOF 持久化是通过保存被执行的写命令来记录数据库状态的，所以AOF文件的大小随着时间的流逝一定会越来越大；影响包括但不限于：对于Redis服务器，计算机的存储压力；AOF还原出数据库状态的时间增加； 为了解决AOF文件体积膨胀的问题，Redis提供了AOF重写功能：Redis服务器可以创建一个新的AOF文件来替代现有的AOF文件，新旧两个文件所保存的数据库状态是相同的，但是新的AOF文件不会包含任何浪费空间的冗余命令，通常体积会较旧AOF文件小很多。 当 aof文件达到 redis配置文件里的阈值，将直接根据redis现情况，直接转成对应的命令并写入新的aof文件中，旧的aof文件作废。 扩展 RDB持久化方式能够在指定时间间隔内对你的数据进行快照储存。 AOF持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始数据，AOF命令以Redis协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。 只做缓存，如果你只希望你的数据都在服务器运行的时候存在，你也可以不适用任何持久化。 同时开启两种持久化方式 * 在这种情况下，当redis重启的时候，会优先加载AOF文件来恢复原始数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。 RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那么要不要只是用AOF呢？建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。 性能建议 * 因为RDB文件只作为备用，建议只在Slave（从机）上持久化RDB文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这一条规则。 如果Enable AOF ，好处就是在最恶劣情况下也只会丢失不超过两秒的数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite 的频率，AOF 重写的基础大小默认值64M太小了，可以设置到5G以上，默认超过原大小100%大小重写可以改到适当的数值。 如果不Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master&#x2F;Slave 同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master&#x2F;Slave 中的 RDB 文件，载入较新的那个，微博就是这种jia","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"21_Redis基本的事务操保存","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/21_Redis基本的事务操保存","date":"2020-08-16T16:00:00.000Z","updated":"2022-06-15T08:32:50.364Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/21_Redis基本的事务操保存/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/21_Redis%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BF%9D%E5%AD%98/","excerpt":"","text":"21 Redis基本的事务操保存 Redis最新超详细版教程通俗易懂 原子性：要么都成功，要么都失败。 Redis事务本质：一组命令的集合。一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行。 一次性，顺序性，排他性。 Redis事务没有隔离级别的概念 所有的命令在事务中，并没有直接被执行。只有发起执行命令的时候才会被执行。 Redis单条命令是原子性的，但是事务不保证原子性。 redis事务： 开启事务（MULTI） 命令入队（…） 执行事务（EXEC）锁：Redis可以实现乐观锁。 正常执行事务 MULTI 开始事务，EXEC 执行事务。 放弃事务 DISCARD 取消事务。 编译型异常（代码有问题，命令有错），事务中所有的命令都不会执行 运行时异常（如1&#x2F;0），除了错误的这条命令，其余均继续执行。错误命令抛出异常","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"22_Redis实现乐观锁","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/22_Redis实现乐观锁","date":"2020-08-16T16:00:00.000Z","updated":"2022-06-15T08:32:50.364Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/22_Redis实现乐观锁/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/22_Redis%E5%AE%9E%E7%8E%B0%E4%B9%90%E8%A7%82%E9%94%81/","excerpt":"","text":"22 Redis实现乐观锁 Redis最新超详细版教程通俗易懂 监控 Watch 悲观锁 很悲观，什么时候都会出问题，无论做什么都加锁。 乐观锁 很乐观，认为什么时候都不会出问题，所以不会上锁。更新数据的时候去判断一下，在此期间是否有人修改过这个数据。 获取 version 更新的时候比较 version Redis监视测试 多线程修改值，使用 watch 可以当作 redis 的乐观锁操作。 如果没有其他终端修改值，那么 version 不变，事务可以正常执行。 如果有其他终端修改值，那么 version 值会发生改变，在比对时异常。 [终端1] 既然事务执行失败了，那么如何重新执行这个事务呢？ watch 时会获取 vision 信息。 首先解锁，unwatch 取消锁，放弃旧的 vision 值。 然后再加锁，watch，拿到最新的 vision 值。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"23_通过Jedis操作Redis","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/23_通过Jedis操作Redis","date":"2020-08-16T16:00:00.000Z","updated":"2022-06-15T08:32:50.365Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/23_通过Jedis操作Redis/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/23_%E9%80%9A%E8%BF%87Jedis%E6%93%8D%E4%BD%9CRedis/","excerpt":"","text":"23 通过Jedis操作Redis Redis最新超详细版教程通俗易懂 什么是Jedis，是Redis官方推荐的java连接开发工具，使用Java操作Redis中间件。 使用导入 Maven 依赖 123456789101112131415&lt;dependencies&gt; &lt;!--导入 jedis 包--&gt; &lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt; &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;3.2.0&lt;/version&gt; &lt;/dependency&gt; &lt;!--导入 fastjson 包--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.62&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 连接Redis 测试命令 断开连接前提，请先开启 redis-server 123456789101112package com.kuang;import redis.clients.jedis.Jedis;public class TestPing &#123; public static void main(String[] args) &#123; // 1. new Jedis 对象即可 Jedis jedis = new Jedis(&quot;127.0.0.1&quot;,6379); // Jedis 所有命令就是我们之前学习的所有指令。 System.out.println(jedis.ping()); &#125;&#125; PONG 表示连接成功，ping通。 可见，Jedis的API均是Redis的指令","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"24_通过Jedis再次理解事务","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/24_通过Jedis再次理解事务","date":"2020-08-16T16:00:00.000Z","updated":"2022-06-15T08:32:50.365Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/24_通过Jedis再次理解事务/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/24_%E9%80%9A%E8%BF%87Jedis%E5%86%8D%E6%AC%A1%E7%90%86%E8%A7%A3%E4%BA%8B%E5%8A%A1/","excerpt":"","text":"24 通过Jedis再次理解事务 Redis最新超详细版教程通俗易懂 Ctrl + Alt + t 快速加入代码块。 使用 Jedis 事务 123456789101112131415161718192021222324252627282930313233343536package com.kuang;import com.alibaba.fastjson.JSONObject;import redis.clients.jedis.Jedis;import redis.clients.jedis.Transaction;public class TestTX &#123; public static void main(String[] args) &#123; JSONObject jsonObject = new JSONObject(); jsonObject.put(&quot;hello&quot;,&quot;world&quot;); jsonObject.put(&quot;name&quot;,&quot;kuangshen&quot;); String result = jsonObject.toJSONString(); // 建立连接 Jedis jedis = new Jedis(&quot;127.0.0.1&quot;,6379); // 事务 Transaction multi = jedis.multi(); try &#123; multi.set(&quot;user1&quot;,result); multi.set(&quot;user2&quot;,result); // 执行 multi.exec(); &#125; catch (Exception e) &#123; // 放弃 multi.discard(); e.printStackTrace(); &#125; finally &#123; System.out.println(jedis.get(&quot;user1&quot;)); System.out.println(jedis.get(&quot;user2&quot;)); // 关闭连接 jedis.close(); &#125; &#125;&#125; 再次强调： 如果在 Redis 里编译错误，将导致整个事务无不执行。 如果在 Redis 里某个命令运行时错误，将跳过此命令继续执行后面的命令。关于课程里的错误 狂神的课程里尝试使用： 1int i = 1/0; 实际上是触发了 Java编译器的运行时异常，直接跳进了 catch 里，事务直接取消了，并没有执行。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"25_SpringBoot集成Redis","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/25_SpringBoot集成Redis","date":"2020-08-16T16:00:00.000Z","updated":"2022-06-15T08:32:50.366Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/25_SpringBoot集成Redis/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/25_SpringBoot%E9%9B%86%E6%88%90Redis/","excerpt":"","text":"25 SpringBoot集成Redis Redis最新超详细版教程通俗易懂 SpringBoot整合在 SpringBoot2.x 以后，原来使用的 jedis 被替换为 lettuce。 jedis 和 lettuce 区别： jedis：采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全，使用 jedis pool 连接池。更像 BIO 模式 lettuce：采用netty，实例可以在多个线程中共享，不存在线程不安全的情况。更像 NIO 模式。根据pom文件引入的依赖，垂直查找可以看到以下内容： redis -&gt; letture -&gt; netty SpringBoot 所有的配置类，都有一个自动配置类 -&gt; RedisAutoConfiguration 自动配置类都会绑定一个 properties 配置文件 -&gt; RedisProperties 源码分析：RedisAutoConfiguration.java 123456789101112131415161718192021222324252627 // ConditionalOnMissingBean注解，当名为redisTemplate的Bean不存在时，执行这个方法。 // 也就说，我们可以自定义个redisTemplate来替换这个默认的 @Bean@ConditionalOnMissingBean( name = &#123;&quot;redisTemplate&quot;&#125;)public RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) throws UnknownHostException &#123; RedisTemplate&lt;Object, Object&gt; template = new RedisTemplate(); // 默认的 RedisTemplate // 两个泛型都是 Object 的类型，后面使用需要强制转换 template.setConnectionFactory(redisConnectionFactory); return template;&#125;// 由于 String 是 redis 中最常用的类型，因此单独提出了一个 bean// 如果使用 String 类型，请直接使用这个方法。 @Bean@ConditionalOnMissingBeanpublic StringRedisTemplate stringRedisTemplate(RedisConnectionFactory redisConnectionFactory) throws UnknownHostException &#123; StringRedisTemplate template = new StringRedisTemplate(); template.setConnectionFactory(redisConnectionFactory); return template;&#125; 配置Redis 使用 lettuce 那一套，不要使用 jedis 那一套，因为 SpringBoot2.x默认使用的是lettuce，jedis在源码里就没注入成功，所以jedis配置均不生效。 Springboot整合Redis，测试1、导入依赖 pom.xml 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt; 2、配置连接 application.properties 123# 配置 Redisspring.redis.host=127.0.0.1spring.redis.port=6379 3、测试连接 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.kuang;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.redis.connection.RedisConnection;import org.springframework.data.redis.core.RedisTemplate;@SpringBootTestclass Redis02SpringbootApplicationTests &#123; @Autowired private RedisTemplate redisTemplate; @Test void contextLoads() &#123; /* 对应 Redis 数据类型： opsForValue -&gt; String opsForList -&gt; List opsForSet -&gt; Set opsForHash -&gt; Hash opsForZSet -&gt; ZSet opsForGeo -&gt; Geo opsForHyperLogLog -&gt; Hyperloglog */ // CRUD 常用 API redisTemplate.opsForValue().set(&quot;name&quot;,&quot;hooy&quot;); /* // 获取连接 RedisConnection connection = redisTemplate.getConnectionFactory().getConnection(); // 清空当前数据库 connection.flushDb(); // 清空全部数据库 connection.flushAll(); */ System.out.println(redisTemplate.opsForValue().get(&quot;name&quot;)); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"17_Zset有序集合详解","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/17_Zset有序集合详解","date":"2020-08-15T16:00:00.000Z","updated":"2022-06-15T08:32:50.362Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/17_Zset有序集合详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/17_Zset%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"17 Zset有序集合详解 Redis最新超详细版教程通俗易懂 Zset（有序集合）在set（无序集合）的基础上，增加了一个值，score（相当于权值）。 ZADD 向有序集合里加入元素 参数：集合名 score 值 12ZADD salary 2500 xiaohongZADD salay 5000 zhangsan 可以用于工资信息，将scope作为工资值，方便排序 ZRANGEBYSCORE 升序排序 -inf 负无穷，+inf正无穷。 参数：集合名 范围 1ZRANGEBYSCORE salary -inf +inf 从负无穷到正无穷排序，也就是从小到大排序 1ZRANGEBYSCORE salary -inf +inf withscores 带上score值 ZREVRANGEBYSCORE 降序排序 ZREM 删除集合里某个元素 1ZREM salary xiaohong zcard 获取集合元素的个数 1zcard salary","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"18_Geospatial地理位置详解","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/18_Geospatial地理位置详解","date":"2020-08-15T16:00:00.000Z","updated":"2022-06-15T08:32:50.362Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/18_Geospatial地理位置详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/18_Geospatial%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"18 Geospatial地理位置详解 Redis最新超详细版教程通俗易懂 特点 适用于 地理位置 Geospatial 简称 GEO GEOADD 向地图里添加一个位置 参数：地图名 经度 纬度 地名 1GEOADD china:city 121.47 31.23 shanghai GEOPOS 根据地名查询具体位置 参数：地图名 地名 1234GEOPOS china:city beijing# 同时获取多个地点位置GEOPOS china:city beijing chongqing GEODIST 返回两个给定位置的距离（直线距离） 指定单位参数 unit 必须是以下单位的其中一个： m 表示单位为米 km 表示单位为千米 mi 表示单位为英里 ft 表示单位为英尺 默认使用米作为单位。 1234GEODIST china:city beijing shanghai# 单位km千米GEODIST china:city beijing shanghai km GEORADIUS 以给定的经纬度为中心，找出某一半径内的元素 附近的人 参数：地图名 中心点经度 中线点纬度 半径值 单位 12345678910GEORADIUS china:city 110 30 500 km# 带上相距直线距离GEORADIUS china:city 110 30 500 km withdist# 带上经纬度GEORADIUS china:city 110 30 500 km withcoord# 限定返回个数使用 countGEORADIUS china:city 110 30 500 km withcoord count 1 GEORADIUSBYMEMBER 以某个元素为中心，找出半径内的元素 1GEORADIUSBYMEMBER china:city beijing 1000 km GEOHASH 返回一个11位字符的字符串，代表某地位置，损失精度 将二维的经纬度转换成一维的字符串，如果两个字符越接近，那么距离越近。 1GEOHASH china:city beijing chongqing GEO 底层的实现原理其实是Zset，我们可以使用Zset命令操作GEO。 因此，想要移除一个地点，可以使用 ZREM 1ZREM china:city beijing","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"19_Hyperloglog基数统计","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/19_Hyperloglog基数统计","date":"2020-08-15T16:00:00.000Z","updated":"2022-06-15T08:32:50.363Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/19_Hyperloglog基数统计/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/19_Hyperloglog%E5%9F%BA%E6%95%B0%E7%BB%9F%E8%AE%A1/","excerpt":"","text":"19 Hyperloglog基数统计 Redis最新超详细版教程通俗易懂 Hyperloglog 特点 像set，将元素放入里面会自动去重，本身占用空间小。 简介 Redis 2.8.9 版本更新了 Hyperloglog 数据结构。 Reids Hyperloglog 基数统计的算法。 优点：占用内存是固定的，2^64，占用12kb内存。 缺点：0.81%错误率，统计UV任务，可以忽略不计。 网页的UV（一个人访问一个网站多少次，但是还算作一个人）传统方式，set保存用户id，然后统计set中的元素作为标准判断。 这个方式如果保存大量的用户id，会占用大量的内存，浪费资源。 因此，如果实现类似功能，并且允许容错，建议使用 Hyperloglog。 总结： 如果允许容错，使用 Hyperloglog 如果不允许容错，使用 SetPFADD 向里面添加元素 1PFADD mykey a b c d e f g h i j PFCOUNT 统计不重复的元素数量 1PECOUNT mykey PFMERGE 并集，合并并且去重 参数：合并后放在哪 将要合并1 将要合并2 1PFMERGE mykey3 mykey mykey2","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"20_Bitmap位图场景详解","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/20_Bitmap位图场景详解","date":"2020-08-15T16:00:00.000Z","updated":"2022-06-15T08:32:50.363Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/20_Bitmap位图场景详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/20_Bitmap%E4%BD%8D%E5%9B%BE%E5%9C%BA%E6%99%AF%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"20 Bitmap位图场景详解 Redis最新超详细版教程通俗易懂 特点 用于判断只有两面的事物，比如true和false。通过1和0来表示。 统计用户信息，活跃&#x2F;不活跃，登录&#x2F;未登录，打卡&#x2F;未打卡。两个状态的，都可以使用Bitmap。 SETBIT 向bitmap添加元素 参数：bitmap名 序号 值 例子，使用bitmap来记录周一到周日的打卡情况。 GETBIT 从bitmap里查询 1GETBIT sign 3 BITCOUNT 统计操作 1BITCOUNT sign 可以看到，有3天打卡","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"15_Set集合类型详解","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/15_Set集合类型详解","date":"2020-08-14T16:00:00.000Z","updated":"2022-06-15T08:32:50.360Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/15_Set集合类型详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/15_Set%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"15 Set集合类型详解 Redis最新超详细版教程通俗易懂 Set（集合）set中的值是不能重复的。 SADD 向集合里添加一个值 1SADD myset hello SMEMBERS 查看集合里面的值 1SMEMBERS myset SISMEMBER 集合内是否存在某个值 1SISMEMBER myset hello SCARD 获取集合内容元素的个数 1scard myset SREM 移除集合里的某个元素 1SREM myset hello SRANDMEMBER 随机从集合里抽取出一个元素 有可能抽出重复的。 1SRANDMEMBER myset SPOP 随机弹出一个元素，并在集合里将其删除。 1SPOP myset SMOVE 将集合里的元素移动至另一个集合中 参数：集合1 集合2 需要移动的元素 1SMOVE myset myset2 kuangshen 数学集合： 差集 交集 并集SDIFF 差集 集合1 - 集合2 1SDIFF key1 key2 SINTER 交集 两个集合共同的 共同好友可以 1SINTER key1 key2 SUNION 并集 集合1 + 集合2 1SUNION key1 key2","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"16_Hash哈希类型详解","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/16_Hash哈希类型详解","date":"2020-08-14T16:00:00.000Z","updated":"2022-06-15T08:32:50.361Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/16_Hash哈希类型详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/16_Hash%E5%93%88%E5%B8%8C%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"16 Hash哈希类型详解 Redis最新超详细版教程通俗易懂 Hash（哈希）用来存Map集合，&lt;KEY,&lt;key,value&gt;&gt; 适合和关系型数据（如MySQL）对接。 HSET 存值 参数：哈希表名 键名 值 1HSET myhash field1 kuangshen HGET 取值 参数：哈希表名 键名 1HGET myhash field1 HMSET 和 HMGET 多存多取 HGETALL 获取全部的值 垂直，一个键，一个值，成对出现。 HDEL 删除哈希表里的某个键值对 1HDEL myhash field1 HLEN 获取哈希表里面元素的个数 1HLEN myhash HEXISTS 判断hash中指定字段是否存在 参数：哈希表名 键名 1HEXISTS myhash field1 HKEYS 只获取键 1HKEYS myhash HVALS 只获取值 1HVALS myhash HINCRBY 增加&#x2F;减少 参数：哈希表名 键名 每次增加&#x2F;减少步长 12HINCRBY myhash field3 1HINCRBY myhash field3 -1 HSETNX 不存在才添加，存在则不添加 与MySQL对接MySQL内的格式： User表 |1|hooy|18| Redis内的格式： HMSET user:1 name hooy age 18 命令 表名:uid字段名 name字段名 值 age字段名 值","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"14_List列表类型详解","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/14_List列表类型详解","date":"2020-08-13T16:00:00.000Z","updated":"2022-06-15T08:32:50.359Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/14_List列表类型详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/14_List%E5%88%97%E8%A1%A8%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"14 List列表类型详解 Redis最新超详细版教程通俗易懂 list命令 L是left（左）R是right（右） LPUSH 向列表的左侧添加一个元素 123LPUSH list oneLPUSH list twoLPUSH list three LRANGE 列表从左至右输出 参数：列表名 起始位置 终止位置 1LRANGE list 0 -1 LPOP 将列表的左侧第一个元素移除，出栈。 1LPOP list LINDEX 根据下标获取值 1LINDEX list 1 LLEN 获取列表长度，length LREM 根据值移除 参数： 列表名 个数 值 1LREM list 2 three 将list列表移除2个three LTRIM 截断列表 trim，在Java里是去除字符串两侧的空格。 参数：列表名 起始位 终止位 1LTRIM myList 1 2 RPOPLPUSH 移除列表最后一个元素，并放入新列表的第一个位置。 R POP L PUSH 参数：源列表名 目标列表名 1RPOPLPUSH mylist myotherlist EXISTS 判断列表是否存在 1EXISTS list LSET 根据下标修改某个值 前提是列表存在，不存在将报错。可通过 LPUSH 创建一个列表。 如果下标不存在，做修改将报错。 1LSET list 0 item LINSERT 向列表里插入一个值 参数：列表名 before(向前插入)&#x2F;after(向后插入) 参考值（哪一个的前&#x2F;后） 插入值 1LINSERT mylist before world other","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"10_redis-benchmark性能测试","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/10_redis-benchmark性能测试","date":"2020-08-10T16:00:00.000Z","updated":"2022-06-15T08:32:50.357Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/10_redis-benchmark性能测试/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/10_redis-benchmark%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/","excerpt":"","text":"10 redis-benchmark性能测试 Redis最新超详细版教程通俗易懂 redis-benchmark 压力测试在 Redis 目录内的 redis-benchmark 是用于压力测试。 通过以下命令执行测试： 1redis-benchmark -h localhost -p 6379 -c 100 -n 10000 -h 设置IP，-p设置端口号，-c并发，-n请求数量 可参考参数意义 Redis 性能测试 | 菜鸟教程 分析报告","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"11_Redis的基本知识说明","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/11_Redis的基本知识说明","date":"2020-08-10T16:00:00.000Z","updated":"2022-06-15T08:32:50.358Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/11_Redis的基本知识说明/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/11_Redis%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E8%AF%B4%E6%98%8E/","excerpt":"","text":"11 Redis的基本知识说明 Redis最新超详细版教程通俗易懂 基础知识redis默认有16个数据库。 可以查看配置文件 redis.conf 。 默认使用的是第0个数据库。 使用 select 命令切换数据库。 12# 例如：select 3 使用 keys * 查看全部的key。 使用 flushdb 清空当前数据库。 使用 FLUSHALL 清空全部（16个）数据库。 Redis 是单线程的 为什么不是多线程的？ Redis是基于内存操作，CPU不是Redis的性能瓶颈，它的瓶颈是","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"12_关于RedisKey的基本命令","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/12_关于RedisKey的基本命令","date":"2020-08-10T16:00:00.000Z","updated":"2022-06-15T08:32:50.358Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/12_关于RedisKey的基本命令/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/12_%E5%85%B3%E4%BA%8ERedisKey%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/","excerpt":"","text":"12 关于RedisKey的基本命令 Redis最新超详细版教程通俗易懂 set 添加键值对 1set key value get 通过键查看值 1get name EXISTS 是否存在。 1EXISTS name del 删除某个键值对 1del name move 将某个值移动到其他数据库 将 key为name 移动至 1号数据库 1move name 1 EXPIRE 设置过期时间 将 key为name 设定为10s后过期 1EXPIRE name 10 ttl 查看过期剩余时间 1ttl name type 查看其具体类型 1type name","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"13_String字符串类型详解","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/13_String字符串类型详解","date":"2020-08-10T16:00:00.000Z","updated":"2022-06-15T08:32:50.359Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/13_String字符串类型详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/13_String%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"13 String字符串类型详解 Redis最新超详细版教程通俗易懂 APPEND 追加字符串 如果key不存在，就创建一个新的，相当于set命令。 1APPEND key1 &quot;hello&quot; INCR 对存储在指定key的数值执行原子的加1操作 可以用作浏览量的统计。 1INCR views DECR 对存储在指定key的数值执行原子的减1操作 INCRBY 自定义步长，对存储在指定key的数值执行原子的加N操作 1INCRBY views 10 DECRBY 自定义步长，对存储在指定key的数值执行原子的减N操作 1DECRBY views 10 GETRANGE 截取字符串 参数：key 起始位 终止位（如果是-1，则到末尾） 1GETRANGE key1 0 3 SETRANGE 替换字符串 1SETRANGE key2 1 xx setex 设置过期时间 set with expire 1SETEX key3 30 &quot;hello&quot; setnx 不存在才设置 在分布式锁中常用 set if not exist 1SETNX mykey &quot;redis&quot; 视频已看到：19:10 mset 批量设置值 1mset k1 v1 k2 v2 k3 v3 mget 批量获取值 1mget k1 k2 k3 msetnx 不存在时才设置值，否则无效 原子性，其中一个已经存在，将导致整条命令都不执行。 1msetnx k1 v1 k4 v4 存对象的技巧 getset 组合命令，先get后set","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"00003_\"好学生\"腾讯课堂挂机脚本","slug":"创作集/00003_好学生腾讯课堂挂机脚本","date":"2020-08-09T16:00:00.000Z","updated":"2022-05-10T01:02:19.674Z","comments":true,"path":"创作集/00003_好学生腾讯课堂挂机脚本/","link":"","permalink":"http://blog.hooy.xyz/%E5%88%9B%E4%BD%9C%E9%9B%86/00003_%E5%A5%BD%E5%AD%A6%E7%94%9F%E8%85%BE%E8%AE%AF%E8%AF%BE%E5%A0%82%E6%8C%82%E6%9C%BA%E8%84%9A%E6%9C%AC/","excerpt":"","text":"前言Hello，各位！相信大家在这个漫长的“寒假”里在家上网课，已经对腾讯课堂的“签到”和“答题”不陌生了。我们班，都是雷锋同志在群里吼一嗓子，大家才急急忙忙起来签到的（确信）。虽然可能以后上网课的机会很难得了，但在这里我还是将脚本代码放出来，万一以后会用到呢，分享给大家。 原理很简单，每隔一段时间扫描下文档流，看看有没有出现弹窗，如果有就点击一下，没有就跳过。对于答题，就是随机选择一个答案。这是一个非常简易，但又非常有用的脚本，毕竟翘课一时爽，一直翘课一直爽。 使用方法 作者：Hooy；版本：1.0；日期：2020-08-10 打开 Google Chrome 浏览器，按键盘上的 F12 然后点击 Sources 创建一个 New snippet 将以下代码复制进去，最后右键脚本名 Run。 1234567891011121314151617181920212223242526272829303132333435363738let time = 5; //时间间隔let scanCount = 0; //扫描次数let signinCount = 0; //签到次数let choiceCount = 0; //选择次数setInterval(theGoodStudent, time * 1000);function theGoodStudent() &#123; let btn = document.getElementsByClassName(&#x27;s-btn s-btn--primary s-btn--m&#x27;)[0]; scanCount++; if (btn) &#123; let btnText = btn.innerText; switch(btnText)&#123; case &quot;签到&quot;: btn.click(); signinCount++; console.warn(&quot;签到成功！&quot;); break; case &quot;确定&quot;: let choiceList = document.getElementsByClassName(&#x27;s-f-rc-item&#x27;); if(choiceList.length == 0)&#123; //非选择答题卡，关闭 btn.click(); console.info(&quot;已关闭交互窗口！&quot;); &#125;else&#123; //选择答题卡，选择答案 let index = Math.floor(Math.random() * choiceList.length); choiceList[index].click(); btn.click(); choiceCount++; console.warn(&quot;已选择选项：&quot; + String.fromCharCode(65 +index)); &#125; break; default: console.warn(&quot;此交互窗口本脚本暂未支持，请联系脚本作者！&quot;); &#125; &#125; else &#123; console.info(&quot;第&quot; + scanCount + &quot;次扫描,未发现有交互窗口 已签到：&quot; + signinCount + &quot;已选择：&quot; + choiceCount); &#125;&#125; 可以在控制台 (Console) 看到输出。","categories":[{"name":"创作集","slug":"创作集","permalink":"http://blog.hooy.xyz/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"}],"tags":[],"author":"hooy"},{"title":"00001_致朋友们的一封公开信","slug":"创作集/00001_致朋友们的一封公开信","date":"2020-08-07T16:00:00.000Z","updated":"2022-05-10T01:02:10.287Z","comments":true,"path":"创作集/00001_致朋友们的一封公开信/","link":"","permalink":"http://blog.hooy.xyz/%E5%88%9B%E4%BD%9C%E9%9B%86/00001_%E8%87%B4%E6%9C%8B%E5%8F%8B%E4%BB%AC%E7%9A%84%E4%B8%80%E5%B0%81%E5%85%AC%E5%BC%80%E4%BF%A1/","excerpt":"","text":"正文首先，由衷的感谢您访问我的个人博客，相信在今后的日子里，我们能成为朋友。 这是极具重要意义的一篇博文，作为自建博客的第一篇，一切的开始。说实话，一时间也不知道该说些什么。或许应该高兴，几个月的努力终于实现了。但此时此刻，我感觉到的只有疲惫。一开始，我并没打算写一个完整的项目，仅仅是刚学了层叠样式表，打算练一练手。随着代码日益增多，对手下的这个东西慢慢有了感情。为什么不写一个博客呢？那就写一个吧。这样来有了它，不仅可以回顾以往学过的知识，还可以和朋友们分享交流技术，更重要的是在赛博朋克的世界里有一片属于自己的栖息地。技术方面，前端纯手写，后端主要基于SpringBoot和SpringSecurity，数据库用的MySQL，其他的太杂就不多说了。花了几个月时间搞这个项目，好在勉勉强强安稳落地了。在开发过程中，多次有放弃的念头，一方面在某些方面技术不够，一边学一边做，另一方面开发的不太规范，我有代码洁癖，有些模块总是重构来重构去，最后面目全非。项目的最后，花了几天时间专门来规范化处理，做代码优化，现在改善了许多。作为长期项目，我会坚持将其维护下去的，让项目越来越好。 最后，我想我应该多去陪陪家人和生活里的朋友，这么长的一个假期，长时间闷在卧室写代码学代码，像是一个莫得感情的机器。况且，马上就要开学了，留给自己的时间不多了。 其他的，放在以后再说。累。","categories":[{"name":"创作集","slug":"创作集","permalink":"http://blog.hooy.xyz/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"}],"tags":[],"author":"hooy"},{"title":"2_单机MySQL的演进","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂/2_单机MySQL的演进","date":"2020-07-27T16:00:00.000Z","updated":"2022-06-15T08:32:50.369Z","comments":true,"path":"技术向/Redis/Redis最新超详细版教程通俗易懂/2_单机MySQL的演进/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/2_%E5%8D%95%E6%9C%BAMySQL%E7%9A%84%E6%BC%94%E8%BF%9B/","excerpt":"","text":"概要 Redis最新超详细版教程通俗易懂 分库分表 + 水平拆分 + MySQL集群 本质：数据库（读写） 早些年MyISAM：表锁，十分影响效率！高并发下会出现严重的锁问题。 转战Innodb：行锁 NoSQL 特点 方便扩展 大数据量高性能（Redis一秒写8万次，读11万，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高） 数据类型是多样的（不需要事先设计数据库，随去随用。如果是数据量十分大的表，很多人就无法设计了） 传统RDBMS（关系型数据库）和NoSQL传统的 RDBMS 结构化组织 SQL 数据和关系都存在独立的表中 严格的一致性 基础的事务 … NoSQL 不仅仅是数据 没有固定的查询语言 键值对存储、列存储（HBase）、文档存储（MongoDB）、图形数据库（社交关系） 最终一致性（注重最后的结果） CAP定理和BASE（异地多活） 解决三高问题：高性能、高可用、高可拓 … 了解：3V + 3高 大数据时代的3V：主要是描述问题的 海量Volume 多样Variety 实时Velocity大数据时代的三高：主要是对程序的要求 高并发 高可拓 高性能 数据库的应用场景 商品的基本信息 MySQL2. 商品的描述、评论 文档型数据库中 MongoDB3. 图片 * 分布式文件系统 FastDFS * 淘宝自己的 TFS * Google的 GFS * Hadoop HDFS * 阿里云的 oss 商品的关键字（搜索） * 搜索引擎 solr elasticsearch ISerach 商品热门的波段信息 * 内存数据库 Redis Tair memcache 商品的交易，外部支付接口","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"}],"tags":[{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"}],"author":"hooy"},{"title":"P9_1-6-1-自定义登录认证成功结果处理","slug":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程/P9_1-6-1-自定义登录认证成功结果处理","date":"2020-07-21T16:00:00.000Z","updated":"2022-06-15T08:32:50.646Z","comments":true,"path":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程/P9_1-6-1-自定义登录认证成功结果处理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/SpringSecurity-Social-OAuth2%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%8E%88%E6%9D%83%E9%89%B4%E6%9D%83%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/P9_1-6-1-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E6%88%90%E5%8A%9F%E7%BB%93%E6%9E%9C%E5%A4%84%E7%90%86/","excerpt":"","text":"1.6.1.自定义登录认证成功结果处理 SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程（持续更新）Spring Security、Spring Boot、Java 自定义登录验证结果处理的场景 不同的人登陆后，看到不同的首页 前后端分离的应用，期望响应结果是JSON，而不是html页面如果想实现复杂的登录成功&#x2F;失败的逻辑，需要实现以下接口 登录成功的自定义结果处理接口：AuthenticationSuccessHandler 登录失败的自定义结果处理接口：AuthenticationfailureHandler 自定义登录认证成功 理应实现 AuthenticationSuccessHandler 接口。 然而继承 SavedRequestAwareAuthenticationSuccessHandler 效果更好，它实现了一些默认的方法，它同样实现了 AuthenticationSuccessHandler 接口。自定义登陆成功处理逻辑，可以选择以 JSON 格式返回数据，也可以跳转回上一个页面。 123456789101112131415161718192021222324252627282930313233343536373839package xyz.hooy.demo.config.auth;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.beans.factory.annotation.Value;import org.springframework.security.core.Authentication;import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;import org.springframework.stereotype.Component;import xyz.hooy.demo.config.exception.AjaxResponse;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@Componentpublic class MySuthenticationSuccessHandler extends SavedRequestAwareAuthenticationSuccessHandler &#123; // 理应实现 AuthenticationSuccessHandler 接口。 // 然而继承 SavedRequestAwareAuthenticationSuccessHandler 效果更好，它实现了一些默认的方法，它同样实现了 AuthenticationSuccessHandler 接口。 @Value(&quot;$&#123;spring.security.loginType&#125;&quot;) private String loginType; // Object -&gt; json private static ObjectMapper objectMapper = new ObjectMapper(); @Override public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws ServletException, IOException &#123; if(loginType.equalsIgnoreCase(&quot;JSON&quot;))&#123; // 以json格式返回数据 response.setContentType(&quot;application/json;charset=UTF-8&quot;); response.getWriter().write(objectMapper.writeValueAsString(AjaxResponse.success())); &#125; else &#123; // 默认，跳回登录前的页面 super.onAuthenticationSuccess(request,response,authentication); &#125; &#125;&#125; 然后，在 SecurityConfig(Security的配置类) 使用。 注意：defaultSuccessUrl(默认登录成功跳转方法) 和 successHandler(自定义登录认证成功方法) 是互斥的，二者选其一，不能同时存在。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringSecurity","slug":"技术向/SpringSecurity","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/"},{"name":"SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","slug":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/SpringSecurity-Social-OAuth2%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%8E%88%E6%9D%83%E9%89%B4%E6%9D%83%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"P3_1-2-需求分析与环境准备","slug":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程/P3_1-2-需求分析与环境准备","date":"2020-07-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.643Z","comments":true,"path":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程/P3_1-2-需求分析与环境准备/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/SpringSecurity-Social-OAuth2%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%8E%88%E6%9D%83%E9%89%B4%E6%9D%83%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/P3_1-2-%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/","excerpt":"","text":"1.2.需求分析与环境准备 SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程（持续更新）Spring Security、Spring Boot、Java 环境准备 起一个新的springboot2.0版本的web应用 继承mybatis、lombok 项目文件介绍可以直接访问html springboot2.0 resources 目录下的 public 可以直接被访问。 项目结构非常简单，一个标准的springboot项目。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringSecurity","slug":"技术向/SpringSecurity","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/"},{"name":"SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","slug":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/SpringSecurity-Social-OAuth2%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%8E%88%E6%9D%83%E9%89%B4%E6%9D%83%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"P4_1-3-1-实现HttpBasic模式的登录认证","slug":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程/P4_1-3-1-实现HttpBasic模式的登录认证","date":"2020-07-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.643Z","comments":true,"path":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程/P4_1-3-1-实现HttpBasic模式的登录认证/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/SpringSecurity-Social-OAuth2%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%8E%88%E6%9D%83%E9%89%B4%E6%9D%83%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/P4_1-3-1-%E5%AE%9E%E7%8E%B0HttpBasic%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81/","excerpt":"","text":"1.3.1.实现HttpBasic模式的登录认证 SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程（持续更新）Spring Security、Spring Boot、Java HttpBasic登录验证模式是SpringSecurity实现登录验证最简单的一种方式。依赖 SpringBoot 整合 SpringSecurity 。 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&lt;/dependency&gt; 使用config.exception 包下创建 SecurityConfig 类，并继承 WebSecurityConfigurerAdapter 类。 重写父类的 configure(HttpSecurity http) 方法。 SecurityConfig.java 123456789101112131415package xyz.hooy.demo.config.exception;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123; @Override protected void configure(HttpSecurity http) throws Exception &#123; // 使用httpBasic模式，授权请求，所有的请求，必须在登录后才能访问。 http.httpBasic().and().authorizeRequests().anyRequest().authenticated(); &#125;&#125; 启动项目，测试。 浏览器会弹出一个输入框，用户名 默认是 user ，密码则在项目控制台给出。 如果使用自定义的用户名和密码，使用以下方法。 在 application.yml 文件内加入以下配置。 123456# security自定义用户名和密码spring: security: user: name: admin password: admin","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringSecurity","slug":"技术向/SpringSecurity","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/"},{"name":"SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","slug":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/SpringSecurity-Social-OAuth2%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%8E%88%E6%9D%83%E9%89%B4%E6%9D%83%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"P5_1-3-2-HttpBasic认证模式原理解析","slug":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程/P5_1-3-2-HttpBasic认证模式原理解析","date":"2020-07-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.644Z","comments":true,"path":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程/P5_1-3-2-HttpBasic认证模式原理解析/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/SpringSecurity-Social-OAuth2%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%8E%88%E6%9D%83%E9%89%B4%E6%9D%83%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/P5_1-3-2-HttpBasic%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/","excerpt":"","text":"1.3.2.HttpBasic认证模式原理解析 SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程（持续更新）Spring Security、Spring Boot、Java 认证原理每次发送请求时，请求头(Request Headers)里又有个 Authorization 字段作为识别。 该字段是用 BASE64 编码。 HttpBasic 认证模式并不安全。 1.Chrome浏览器 2.Postman","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringSecurity","slug":"技术向/SpringSecurity","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/"},{"name":"SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","slug":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/SpringSecurity-Social-OAuth2%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%8E%88%E6%9D%83%E9%89%B4%E6%9D%83%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"P6_1-4-1-formLogin登录认证模式（上集）","slug":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程/P6_1-4-1-formLogin登录认证模式（上集）","date":"2020-07-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.645Z","comments":true,"path":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程/P6_1-4-1-formLogin登录认证模式（上集）/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/SpringSecurity-Social-OAuth2%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%8E%88%E6%9D%83%E9%89%B4%E6%9D%83%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/P6_1-4-1-formLogin%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%8A%E9%9B%86%EF%BC%89/","excerpt":"","text":"1.4.1.formLogin登录认证模式（上集） SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程（持续更新）Spring Security、Spring Boot、Java fromLogin 三要素 登录认证逻辑（静态） 资源访问控制（动态） 用户角色权限（动态）认证逻辑、访问控制和角色权限 使用的是上节HttpBasic的类，详见代码块。 建议查阅 1.4.1.formLogin登录认证模式（下集 内容更完整。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package xyz.hooy.demo.config.exception;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123; @Override protected void configure(HttpSecurity http) throws Exception &#123; // 使用formLogin /** * [认证逻辑] [访问控制] * .loginPage : 登录页面 * .loginProcessingUrl : 后端处理地址 * .defaultSuccessUrl : 如果登录成功跳到哪里 * --- * .antMatchers : 匹配的 URL 地址 * .permitAll : 全都允许 * .hasAnyAuthority : 必须拥有何种权限 * .hasAnyRole : 必须是何种角色。 * 注意：hasAnyAuthority 和 hasAnyRole 相通的。 如果使用 hasAnyAuthority 其参数字符串必须以 &quot;ROLE_&quot; 开头。 */ http.formLogin() .loginPage(&quot;/login.html&quot;) .loginProcessingUrl(&quot;/login&quot;) .defaultSuccessUrl(&quot;/index&quot;) .and() .authorizeRequests() .antMatchers(&quot;/login.html&quot;) .permitAll() .antMatchers(&quot;/biz1&quot;,&quot;biz2&quot;) .hasAnyAuthority(&quot;ROLE_user&quot;,&quot;ROLE_admin&quot;) .antMatchers(&quot;/syslog&quot;,&quot;/sysuser&quot;) .hasAnyRole(&quot;admin&quot;) .anyRequest() .authenticated(); &#125; // 定义角色 public void configure(AuthenticationManagerBuilder auth) throws Exception &#123; /** * [角色权限] * .withUser : 设定用户名 * .password : 设置密码 * .roles : 设置角色(用户组) * 其中 passwordEncoder方法对数据加密。 */ auth.inMemoryAuthentication() .withUser(&quot;user&quot;) .password(passwordEncoder().encode(&quot;123456&quot;)) .roles(&quot;user&quot;) .and() .withUser(&quot;admin&quot;) .password(passwordEncoder().encode(&quot;123456&quot;)) .roles(&quot;admin&quot;) .and() .passwordEncoder(passwordEncoder()); // 配置BCrypt加密 &#125; // 对敏感数据加密 @Bean public PasswordEncoder passwordEncoder() &#123; return new BCryptPasswordEncoder(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringSecurity","slug":"技术向/SpringSecurity","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/"},{"name":"SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","slug":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/SpringSecurity-Social-OAuth2%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%8E%88%E6%9D%83%E9%89%B4%E6%9D%83%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"P8_1-5-登录认证流程源码解析","slug":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程/P8_1-5-登录认证流程源码解析","date":"2020-07-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.646Z","comments":true,"path":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程/P8_1-5-登录认证流程源码解析/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/SpringSecurity-Social-OAuth2%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%8E%88%E6%9D%83%E9%89%B4%E6%9D%83%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/P8_1-5-%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/","excerpt":"","text":"1.5.登录认证流程源码解析 SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程（持续更新）Spring Security、Spring Boot、Java 为什么使用用户名和密码登录时，表单字段name有默认值。从 UsernamePasswordAuthenticationFilter 类源码可以看到。 用户名字段 name 默认是 username 密码字段 name 默认是 password 请求必须是 POST 使用 用户名 和 密码 构建了一个令牌： Authentication 登录认证主体，贯穿过滤器流程的始终。 *由于技术理解较难，详见本节对应的电子文档。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringSecurity","slug":"技术向/SpringSecurity","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/"},{"name":"SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","slug":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/SpringSecurity-Social-OAuth2%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%8E%88%E6%9D%83%E9%89%B4%E6%9D%83%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"P7_1-4-1-formLogin登录认证模式（下集）","slug":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程/P7_1-4-1-formLogin登录认证模式（下集）","date":"2020-07-20T16:00:00.000Z","updated":"2022-06-15T08:32:50.645Z","comments":true,"path":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程/P7_1-4-1-formLogin登录认证模式（下集）/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/SpringSecurity-Social-OAuth2%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%8E%88%E6%9D%83%E9%89%B4%E6%9D%83%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/P7_1-4-1-formLogin%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%8B%E9%9B%86%EF%BC%89/","excerpt":"","text":"1.4.1.formLogin登录认证模式（下集） SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程（持续更新）Spring Security、Spring Boot、Java 本节主讲： 关闭 CSRF ，避免拒绝所有请求 访问静态资源，不需要权限 给予权限和详见代码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990package xyz.hooy.demo.config.exception;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.builders.WebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123; @Override protected void configure(HttpSecurity http) throws Exception &#123; // 使用formLogin /** * [认证逻辑] [访问控制] * .csrf().disable() : 关闭 跨站攻击防御，否则无法访问后面的资源 * .loginPage : 登录页面 * .loginProcessingUrl : 后端处理地址，对应前端 form 的 action 值，要求一致。 * .defaultSuccessUrl : 如果登录成功跳到哪里 * .usernameParameter : 对应前端 input 的 name 值，默认：username，要求一致。 * .passwordParameter : 对应前端 input 的 name 值，默认：password，要求一致。 * --- * .antMatchers : 匹配的 URL 地址 * .permitAll : 全都允许 * .hasAnyAuthority : 必须是何种角色。 * .hasAnyRole : 必须是何种角色。 * 注意：hasAnyAuthority 和 hasAnyRole 相通的。 如果使用 hasAnyAuthority 其参数字符串必须以 &quot;ROLE_&quot; 开头。 * .hasAuthority : 必须拥有何种权限，以 &quot;sys:&quot; 开头。 */ http.csrf().disable().formLogin() .loginPage(&quot;/login.html&quot;) .usernameParameter(&quot;uname&quot;) .passwordParameter(&quot;pword&quot;) .loginProcessingUrl(&quot;/login&quot;) .defaultSuccessUrl(&quot;/index&quot;) .and() .authorizeRequests() .antMatchers(&quot;/login.html&quot;) .permitAll() .antMatchers(&quot;/biz1&quot;,&quot;biz2&quot;) .hasAnyAuthority(&quot;ROLE_user&quot;,&quot;ROLE_admin&quot;) //.antMatchers(&quot;/syslog&quot;,&quot;/sysuser&quot;) //.hasAnyRole(&quot;admin&quot;) .antMatchers(&quot;/syslog&quot;) .hasAuthority(&quot;sys:log&quot;) .antMatchers(&quot;/sysuser&quot;) .hasAuthority(&quot;sys:user&quot;) .anyRequest() .authenticated(); &#125; // 定义角色 public void configure(AuthenticationManagerBuilder auth) throws Exception &#123; /** * [角色权限] * .withUser : 设定用户名 * .password : 设置密码 * .roles : 设置角色(用户组) * .authorities : 给予何种权限 * 其中 passwordEncoder方法对数据加密。 */ auth.inMemoryAuthentication() .withUser(&quot;user&quot;) .password(passwordEncoder().encode(&quot;123456&quot;)) .roles(&quot;user&quot;) .and() .withUser(&quot;admin&quot;) .password(passwordEncoder().encode(&quot;123456&quot;)) //.roles(&quot;admin&quot;) .authorities(&quot;sys:log&quot;,&quot;sys:user&quot;) .and() .passwordEncoder(passwordEncoder()); // 配置BCrypt加密 &#125; // 对敏感数据加密 @Bean public PasswordEncoder passwordEncoder() &#123; return new BCryptPasswordEncoder(); &#125; // 访问静态资源，不需要权限 @Override public void configure(WebSecurity web) &#123; web.ignoring().antMatchers(&quot;/css/**&quot;,&quot;/fonts/**&quot;,&quot;/img/**&quot;,&quot;/js/**&quot;); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringSecurity","slug":"技术向/SpringSecurity","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/"},{"name":"SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","slug":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/SpringSecurity-Social-OAuth2%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%8E%88%E6%9D%83%E9%89%B4%E6%9D%83%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"白银篇_P7_profile不同环境使用不同配置","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P7_profile不同环境使用不同配置","date":"2020-07-17T16:00:00.000Z","updated":"2022-06-15T08:32:52.847Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P7_profile不同环境使用不同配置/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E7%99%BD%E9%93%B6%E7%AF%87_P7_profile%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E9%85%8D%E7%BD%AE/","excerpt":"","text":"profile不同环境使用不同配置 20年全新-Spring Boot 2.x从青铜到王者之白银篇-打造精品中的精品-程序员-编程-架构师-SpringBoot 在真实的项目当中，通常分为 开发环境 生产环境 测试环境 ，因此最好的方式是将 application.yml 文件进行拆分。 application-dev 开发环境 application-prod 生产环境 application-test 测试环境演示 首先，在 resources 目录下创建三个文件，分别是： application-dev.yml 、 application-prod 和 application-test 。 为了区分，它们 启动端口 不同。 application-dev.yml 12server: port: 8888 application-prod.yml 12server: port: 8889 application-test.yml 12server: port: 8890 如何选用哪种application配置文件？方法 1在 application.yml 内写入，active表示活动的application配置文件。 123spring: profiles: active: prod 方法 2在 IDEA 的 “Edit Configuration…”(小锤子旁边) 设置。 方法 3通常用于部署时，命令行启动jar包，选择使用哪种application配置文件。 在控制台(cmd &#x2F; Terminal)输入以下命令： 12# 注释： java命令 jar包名 参数命令java -jar ./boot-launch-1.0.jar --spring.profiles.active=dev","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"白银篇_P6_使用SpEL表达式绑定配置项","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P6_使用SpEL表达式绑定配置项","date":"2020-07-17T16:00:00.000Z","updated":"2022-06-15T08:32:52.847Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P6_使用SpEL表达式绑定配置项/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E7%99%BD%E9%93%B6%E7%AF%87_P6_%E4%BD%BF%E7%94%A8SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%BB%91%E5%AE%9A%E9%85%8D%E7%BD%AE%E9%A1%B9/","excerpt":"","text":"使用SpEL表达式绑定配置项 20年全新-Spring Boot 2.x从青铜到王者之白银篇-打造精品中的精品-程序员-编程-架构师-SpringBoot EL表达式 $&#123;code&#125; 用于加载外部属性文件中的值 SpEL表达式 #&#123;code&#125; 用于执行SpEL表达式，并将内容赋值给属性。 #{…} 和{…} 可以混合使用，但是必须#{}外面，{}在里面,#{ ‘${}’ } ，注意单引号，注意不能反过来 SpEL可以应用于XML文件或注解上。 SpEL可以读取程序运行所在系统的环境变量。获取当前用户的主工作目录。 EL 全称 Expression Language SpEL 全称 Spring Expression Language EL表达式只能识别 逗号 ，如果使用其他符号作为分割，将出现问题。 在这里，将应用SpEL表达式。 例： 首先，在 resources 目录下创建 employee.properties 文件。 employee.properties 123employee.names=james|curry|zimug|姚明employee.type=教练,球员,经理employee.age=&#123;one:&#x27;27&#x27;,two:&#x27;35&#x27;,three:&#x27;34&#x27;,four:&#x27;26&#x27;&#125; 然后，创建一个 Employee.java 的实体类。 注意： 这里使用的是 @Configuration 注解，也可以使用 @Component 注解，目的是将类注入到 IOC 容器。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package xyz.hooy.demo.model;import lombok.Data;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.PropertySource;import java.util.List;import java.util.Map;@Data@Configuration@PropertySource(value = &quot;classpath:employee.properties&quot;,encoding = &quot;utf-8&quot;)public class Employee &#123; // 获取数组列表的方法 // 这里的 &#x27;$&#123;employee.names&#125;&#x27; 是先读取值，然后转换成字符串(String)，再使用的 split() 方法 @Value(&quot;#&#123;&#x27;$&#123;employee.names&#125;&#x27;.split(&#x27;\\\\|&#x27;)&#125;&quot;) private List&lt;String&gt; employeeName; // 取第一个元素 @Value(&quot;#&#123;&#x27;$&#123;employee.names&#125;&#x27;.split(&#x27;\\\\|&#x27;)[0]&#125;&quot;) private List&lt;String&gt; firstEmployeeName; // 获取键值对的方法 @Value(&quot;#&#123;$&#123;employee.age&#125;&#125;&quot;) private Map&lt;String, Integer&gt; employeeAge; // 取第二个元素 @Value(&quot;#&#123;$&#123;employee.age&#125;.two&#125;&quot;) // 另一种写法：@Value(&quot;#&#123;$&#123;employee.age&#125;[&#x27;two&#x27;]&#125;&quot;) private String employeeAgeTwo; //默认值的方式 @Value(&quot;#&#123;$&#123;employee.age&#125;[&#x27;five&#x27;] ?: 31 &#125;&quot;) private Integer ageWithDefaultValue; //读取系统的环境变量 @Value(&quot;#&#123;systemProperties[&#x27;java.home&#x27;]&#125;&quot;) private String javaHome; //读取用户主目录 @Value(&quot;#&#123;systemProperties[&#x27;user.dir&#x27;]&#125;&quot;) private String userDir;&#125; 最后，测试类验证。 1234@Testpublic void valueBindTest()&#123; System.out.println(employee.toString());&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"白银篇_P8_配置及配置文件加载的优先级","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P8_配置及配置文件加载的优先级","date":"2020-07-17T16:00:00.000Z","updated":"2022-06-15T08:32:52.848Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P8_配置及配置文件加载的优先级/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E7%99%BD%E9%93%B6%E7%AF%87_P8_%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/","excerpt":"","text":"配置及配置文件加载的优先级 20年全新-Spring Boot 2.x从青铜到王者之白银篇-打造精品中的精品-程序员-编程-架构师-SpringBoot 默认情况，application配置文件可以放在以下四个位置。 |file: .&#x2F;config&#x2F; |当前项目路径config目录下||file: .&#x2F; |当前项目路径下 ||classpath: &#x2F;config&#x2F;|类路径config目录下 ||classpath: &#x2F; |类路径下 | application配置文件优先级，从上到下越来越低。里面的配置属性是互部的，如果有相同的配置属性，那么优先级高的将覆盖优先级低的配置文件里面的配置属性 自定义applicaiton配置文件的路径在启动jar时 1java -jar ./boot-launch-1.0.jar --spring.config.location=D:/application.yml 以这种方式的application配置文件优先级是最高的。 application配置文件优先级","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"白银篇_P9_配置文件敏感字段加密","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P9_配置文件敏感字段加密","date":"2020-07-17T16:00:00.000Z","updated":"2022-06-15T08:32:52.848Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P9_配置文件敏感字段加密/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E7%99%BD%E9%93%B6%E7%AF%87_P9_%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%95%8F%E6%84%9F%E5%AD%97%E6%AE%B5%E5%8A%A0%E5%AF%86/","excerpt":"","text":"配置文件敏感字段加密 20年全新-Spring Boot 2.x从青铜到王者之白银篇-打造精品中的精品-程序员-编程-架构师-SpringBoot jasypt jasypt官网 原理： 加密 通过GitHub下载jasypt发行版。 jasypt-1.9.3 首先，到官网下载 jasypt 。下载完成后，从里面找到 jasypt-1.9.3.jar ，将其和下面编写的 jasypt.bat 脚本放在同一目录下。 jasypt.bat 123456@echo offset/p input=待加密的明文字符串：set/p password=加密密钥（盐值）：java -cp jasypt-1.9.3.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI input=%input% password=%password% algorithm=PBEWithMD5AndDESpause 运行 jasypt.bat 脚本。 输入 明文 和 密钥（自定义的密码） 。 获得密文：GjZmbqS3kYza+GEmRdGHQp6lLnRlEpwp 用 ENC(密文) 替换掉配置文件里的明文。 family.yml 123family: family-name: ENC(GjZmbqS3kYza+GEmRdGHQp6lLnRlEpwp) # more code ... 至此，完成加密工作。 解密依赖12345&lt;dependency&gt; &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt; &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.18&lt;/version&gt;&lt;/dependency&gt; 使用测试方便，将密钥写在了application配置文件里，实际生成环境中，严禁这样做！ 在生产环境中如何配置密钥，请看下面。 application-prod.yml 12345# 设置盐值（加密解密密钥），我们配置在这里是为了测试方便# 生产环境中，切记不要这样直接进行设置，可通过环境变量，命令行等形式进行设置jasypt: encryptor: password: 123456 在生产环境中使用密钥通过命令行传参。 12# 命令 jar包 chjava -jar boot-launch-1.0.jar --jasypt.encryptor.password=123456","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"白银篇_P2_详解YAML语法","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P2_详解YAML语法","date":"2020-07-16T16:00:00.000Z","updated":"2022-06-15T08:32:52.844Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P2_详解YAML语法/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E7%99%BD%E9%93%B6%E7%AF%87_P2_%E8%AF%A6%E8%A7%A3YAML%E8%AF%AD%E6%B3%95/","excerpt":"","text":"详解YAML语法 20年全新-Spring Boot 2.x从青铜到王者之白银篇-打造精品中的精品-程序员-编程-架构师-SpringBoot 123456789101112131415161718192021222324# 1.一个家庭有爸爸、妈妈和孩子。# 2.这个家庭有一个名字(family-name) 叫做 &quot;happy family&quot;# 3.爸爸有名字(name)和年龄(age)两个属性# 4.妈妈有两个别名# 5.孩子除了名字(name)和年龄(age)两个属性，还有一个friends的集合# 6.每个friend有两个属性：爱好(hobby)和性别(sex)family: family-name: &quot;happy family&quot; father: name: zimug age: 18 mother: alias: - lovely - ailice child: name: Hooy age: 18 friends: - hobby: football sex: male - hobby: basketball sex: female - 表示数组元素，上一级是数组名。 字符转义： 正常情况下配置值不用加单引号或双引号，如果字符串里含有 转义符 请将字符串加上双引号。 松散绑定语法：family-name &#x3D; familyName &#x3D; family_name 占位符： * 随机数 $&#123;random.int&#125; 表示随机生成一个int类型的随机数。 $&#123;family.father.name : zimug2&#125; 表示首先使用 family.father.name 里的值，如果没有则使用 zimug2。也就是说，可以引用其他的值，并且如果值为空的时候给个默认值。随机数 |${random.value} |类似uuid的随机数，没有”-“连接 ||${random.int} |随机取整型范围内的一个值 ||${random.long} |随机取长整型范围内的一个值 ||${random.long(100,200)}|随机生成长整型100-200范围内的一个值||${random.uuid} |生成一个uuid，有”-“连接 ||${random.int(10)} |随机生成一个10以内的数 ||${random.int(100,200)} |随机生成一个100-200范围以内的数 | 通用唯一识别码（Universally Unique Identifier）","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"白银篇_P3_YAML配置绑定变量的两种方式","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P3_YAML配置绑定变量的两种方式","date":"2020-07-16T16:00:00.000Z","updated":"2022-06-15T08:32:52.845Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P3_YAML配置绑定变量的两种方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E7%99%BD%E9%93%B6%E7%AF%87_P3_YAML%E9%85%8D%E7%BD%AE%E7%BB%91%E5%AE%9A%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/","excerpt":"","text":"YAML配置绑定变量的两种方式 20年全新-Spring Boot 2.x从青铜到王者之白银篇-打造精品中的精品-程序员-编程-架构师-SpringBoot 读取yml配置文件，将属性值绑定到程序的变量上去。 SpringBoot提供两种注解，应用场景不同 @Value @ConfigurationProperties@Value 方法 将yml的值传入变量里 1234567891011121314package xyz.hooy.demo.silver.p3;import lombok.Data;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;@Data@Componentpublic class Family &#123; @Value(&quot;$&#123;family.family-name&#125;&quot;) private String familyName;&#125; 扩展：@Component 注解 @Component 将这个类交给Spring管理，不清楚属于哪一层时使用。 @Repository 持久层 @Service 服务层 @Controller 控制层 @ConfigurationPropertiesprefix 前缀，yml里字段名 类 将yml数据整体传入对象里 与@Value不同：@Value是将单个值传入变量里，而@ConfigurationProperties注解是将prefix字段下的所有都传入对象里。 java的数据结构要和yml的数据结构一致。例： yml数据结构 application.yml 1234567891011121314151617family: family-name: &quot;happy family&quot; father: name: zimug age: 18 mother: alias: - lovely - ailice child: name: Hooy age: 18 friends: - hobby: football sex: male - hobby: basketball sex: female Java数据结构 Family.java 123456789101112131415package xyz.hooy.demo.silver.p3;import lombok.Data;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Data@Component@ConfigurationProperties(prefix = &quot;family&quot;)public class Family &#123; private String familyName; private Father father; private Mother mother; private Child child;&#125; Father.java 123456789package xyz.hooy.demo.silver.p3;import lombok.Data;@Datapublic class Father &#123; private String name; private Integer age;&#125; Mother.java 12345678package xyz.hooy.demo.silver.p3;import lombok.Data;@Datapublic class Mother &#123; private String[] alias;&#125; Child.java 12345678910package xyz.hooy.demo.silver.p3;import lombok.Data;@Datapublic class Child &#123; private String name; private Integer age; private Friend[] friends;&#125; Friend.java 123456789package xyz.hooy.demo.silver.p3;import lombok.Data;@Datapublic class Friend &#123; private String hobby; private String sex;&#125; @Value 和 @ConfigurationProperties 对比|功能 |批量注入属性到java类|一个个属性指定注入||松散语法绑定 |支持 |不支持 ||复杂数据类型（对象、数组）|支持 |不支持 ||JSR303数据校验 |支持 |不支持 ||SpEL |不支持 |支持 |","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"白银篇_P4_配置属性值数据绑定校验","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P4_配置属性值数据绑定校验","date":"2020-07-16T16:00:00.000Z","updated":"2022-06-15T08:32:52.846Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P4_配置属性值数据绑定校验/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E7%99%BD%E9%93%B6%E7%AF%87_P4_%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%80%BC%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E6%A0%A1%E9%AA%8C/","excerpt":"","text":"配置属性值数据绑定校验 20年全新-Spring Boot 2.x从青铜到王者之白银篇-打造精品中的精品-程序员-编程-架构师-SpringBoot hibernate-validator 是 JSR 303 规范的实现。 依赖12345&lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt; &lt;version&gt;5.2.4.Final&lt;/version&gt;&lt;/dependency&gt; @Validated类 标志该类的域和域所引用的类里的域都要经过校验 Family.java 1234567891011121314151617package xyz.hooy.demo.silver.p3;import lombok.Data;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;import org.springframework.validation.annotation.Validated;@Data@Component@ConfigurationProperties(prefix = &quot;family&quot;)@Validatedpublic class Family &#123; private String familyName; private Father father; private Mother mother; private Child child;&#125; Father.java 123456789101112package xyz.hooy.demo.silver.p3;import lombok.Data;import javax.validation.constraints.Min;@Datapublic class Father &#123; private String name; @Min(15) private Integer age;&#125; 校验注解|@Null |限制只能为null ||@NotNull |限制必须不为null ||@AssertFalse |限制必须为false ||@AssertTrue |限制必须为true ||@DecimalMax(value) |限制必须为一个不大于指定值的数字 ||@DecimalMin(value) |限制必须为一个不小于指定值的数字 ||@Digits(integer,fraction)|限制必须为一个小数，且整数部分的位数不能超过integer，小数部分的位数不能超过fraction ||@Future |限制必须是一个将来的日期 ||@Max(value) |限制必须为一个不大于指定值的数字 ||@Min(value) |限制必须为一个不小于指定值的数字 ||@Past |限制必须是一个过去的日期 ||@Pattern(value) |限制必须符合指定的正则表达式 ||@Size(max,min) |限制字符串长度必须在min到max之间 ||@NotEmpty |验证注解的元素值不为null且不为空（字符串长度不为0，集合大小不为0） ||@NotBlank |验证注解的元素值不为空（不为null，去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的空格||@Email |验证注解的元素值是Email，也可以通过正则表达式和flag指定定义的email格式。 |","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"白银篇_P5_加载额外配置文件的两种方式","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P5_加载额外配置文件的两种方式","date":"2020-07-16T16:00:00.000Z","updated":"2022-06-15T08:32:52.846Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P5_加载额外配置文件的两种方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E7%99%BD%E9%93%B6%E7%AF%87_P5_%E5%8A%A0%E8%BD%BD%E9%A2%9D%E5%A4%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/","excerpt":"","text":"加载额外配置文件的两种方式 20年全新-Spring Boot 2.x从青铜到王者之白银篇-打造精品中的精品-程序员-编程-架构师-SpringBoot 融合老项目。 加载额外配置文件的两种方式： @PropertySource 加载自定义 yml 或者 properties 文件。 @ImprotResource 加载Spring的 xml 配置文件。@PropertySource value properties 或 yml 配置文件路径 factory 默认不用填写，如果配置文件是yml文件，写入改造的类.class。 类 加载额外的配置文件，即application全局配置文件以外的配置文件 注意：默认是加载 properties 文件的，对 yml 不支持。因此我们需要对其改造。 创建一个 MixPropertySourceFactory 类，继承于 DefaultPropertySourceFactory 重写其 createPropertySource 方法。 MixPropertySourceFactory.java 12345678910111213141516171819202122232425262728293031323334353637package xyz.hooy.demo.service;import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;import org.springframework.core.env.PropertiesPropertySource;import org.springframework.core.env.PropertySource;import org.springframework.core.io.support.DefaultPropertySourceFactory;import org.springframework.core.io.support.EncodedResource;import org.springframework.lang.Nullable;import java.io.IOException;import java.util.Properties;public class MixPropertySourceFactory extends DefaultPropertySourceFactory &#123; public PropertySource&lt;?&gt; createPropertySource(@Nullable String name, EncodedResource resource) throws IOException &#123; //return name != null ? new ResourcePropertySource(name, resource) : new ResourcePropertySource(resource); // 如果是 .yml 或 .yaml 文件 String sourceName = name != null ? name : resource.getResource().getFilename(); if(sourceName != null &amp;&amp; (sourceName.endsWith(&quot;.yml&quot;) || sourceName.endsWith(&quot;.yaml&quot;)))&#123; // yml -&gt; properties Properties propertiesFromYml = loadYml(resource); return new PropertiesPropertySource(sourceName,propertiesFromYml); &#125; else &#123; // 如果是 properties return super.createPropertySource(name,resource); &#125; &#125; private Properties loadYml (EncodedResource resource) throws IOException &#123; YamlPropertiesFactoryBean factory = new YamlPropertiesFactoryBean(); factory.setResources(resource.getResource()); factory.afterPropertiesSet(); return factory.getObject(); &#125; &#125; Family.java 123456789101112131415161718192021package xyz.hooy.demo.silver.p3;import lombok.Data;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.PropertySource;import org.springframework.stereotype.Component;import org.springframework.validation.annotation.Validated;import xyz.hooy.demo.service.MixPropertySourceFactory;@Data@Component@ConfigurationProperties(prefix = &quot;family&quot;)@Validated@PropertySource(value = &quot;classpath:family.yml&quot;,factory = MixPropertySourceFactory.class)public class Family &#123; private String familyName; private Father father; private Mother mother; private Child child;&#125; @ImprotResourcelocations xml 配置文件路径 启动类 加载spring的xml配置文件，与老项目对接 先假设有个老项目，他的配置文件是 bean.xml 。 bean.xml 12345678&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;bean &gt;&lt;/bean&gt;&lt;/beans&gt; 对应的类是 TestBeanService 。（为了简化，这里代码逻辑为空） TestBeanService.java 12345package xyz.hooy.demo.service;public class TestBeanService &#123;&#125; 要将 @ImprotResource 注解加入到 启动类 里。 Application.java 1234567891011121314package xyz.hooy.demo;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.ImportResource;@SpringBootApplication@ImportResource(locations = &#123;&quot;classpath:bean.xml&quot;&#125;)public class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125; 最后，测试一下 bean.xml 里的 bean 是否已经注入到 IOC 容器。 ImprotResourceTests.java 123456789101112131415161718192021222324package xyz.hooy.demo.silver;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.context.ConfigurableApplicationContext;import org.springframework.test.context.junit.jupiter.SpringExtension;import xyz.hooy.demo.silver.p3.Family;import javax.annotation.Resource;@SpringBootTest@ExtendWith(SpringExtension.class)public class ImprotResourceTests &#123; @Resource private ConfigurableApplicationContext ioc; @Test public void testImport()&#123; boolean isImport = ioc.containsBean(&quot;testBeanService&quot;); System.out.println(isImport); &#125;&#125; 最后返回的结果为 true ，说明 bean.xml 里的 bean 已经正常注入到 IOC 容器内。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"白银篇_P1_结合源码讲解bean自动装配原理","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P1_结合源码讲解bean自动装配原理","date":"2020-07-15T16:00:00.000Z","updated":"2022-06-15T08:32:52.843Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/白银篇_P1_结合源码讲解bean自动装配原理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E7%99%BD%E9%93%B6%E7%AF%87_P1_%E7%BB%93%E5%90%88%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3bean%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86/","excerpt":"","text":"结合源码讲解bean自动装配原理 20年全新-Spring Boot 2.x从青铜到王者之白银篇-打造精品中的精品-程序员-编程-架构师-SpringBoot 探究点击 @SpringBootApplication 注解查看内部，@EnableAutoConfiguration 注解是用于自动装载的行为，相当于自动装载的开关。 spring.factories 文件内包含自动装配的类信息。 自动装配类里面是如何完成装配的打开 spring.factories ，按住 Ctrl 键点击随便的一个类名，进入这个类。 可以看到以 @ConditionOn 起头的注解，这些是条件注解。只有满足所有的@ConditionOn起头的注解，才自动装配当前这个类。 举几个例子： @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET) 项目当前运行环境，必须是Servlet容器。 除了servlet容器，还有”spring webflux”。 @ConditionOnClass(CharacterEncodingFilter.class) 当前类的字节码文件存在。 @ConditionOnProperty(prefix = &quot;server.servlet.encoding&quot; , value = &quot;enabled&quot; , matchIfMissing = true) 有 server.servlet.encoding 这样的一个配置，并且配值 enabled 等于 true 。 matchIfMissing 表示默认值|@ConditionOnClass |classpath中存在该字节码文件时，才执行实例化方法或将类实例化 ||@ConditionOnMissingClass |classpath中不存在该类字节码文件时，才执行实例化方法。（不存在A的时候去初始化B）||@ConditionOnBean |DI容器中存在该类型Bean时，才执行实例化方法或将类实例化 ||@ConditionOnMissingBean |DI容器中不存在该类型Bean时，才执行实例化方法或类实例化 ||@ConditionOnSingleCandidate |DI容器中该类型Bean只有一个或@Primary的只有一个时，才执行实例化方法或类实例化 ||@ConditionOnExpression |SpEL表达式结果为true时，才执行实例化方法或类实例化 ||@ConditionOnProperty |参数设置或者值一致时，才执行实例化方法或类实例化 ||@ConditionOnResource |指定的文件存在时，才执行实例化方法或将类实例化 ||@ConditionOnJndi |指定的JNDI存在时，才执行实例化方法或类实例化 ||@ConditionOnJava |指定的Java版本存在时，才执行实例化方法或类实例化 ||@ConditionOnWebApplication |Web应用环境下，才执行实例化方法或将类实例化 ||@ConditionOnNotWebApplication|非Web应用环境下，才执行实例化方法或将类实例化 |","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"青铜篇_P19_使用OpenAPI构建接口文档","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P19_使用OpenAPI构建接口文档","date":"2020-07-15T16:00:00.000Z","updated":"2022-06-15T08:32:52.853Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P19_使用OpenAPI构建接口文档/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E9%9D%92%E9%93%9C%E7%AF%87_P19_%E4%BD%BF%E7%94%A8OpenAPI%E6%9E%84%E5%BB%BA%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/","excerpt":"","text":"使用OpenAPI构建接口文档 20年全新-Spring Boot 2.x从青铜到王者之青铜篇-打造精品中的精品-程序员-编程-架构师-SpringBoot 什么是 OpenAPI 和 Swagger 有什么关系OpenAPI是规范，Swagger3是OpenAPI3.0的实现。 SpringFox 和 SpringDoc 的区别是两个不同的项目，SpringFox是将Swagger2集成到Spring当中。SpringDoc是将OpenAPI的实现，也就是Swagger3集成到Spring当中。 Swagger2，使用SpringFox Swagger3，使用SpringDoc依赖 想要使用Swagger3，请先将Swagger2相关的东西清除掉。反之亦然。 12345&lt;dependency&gt; &lt;groupId&gt;org.springdoc&lt;/groupId&gt; &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt; &lt;version&gt;1.4.0&lt;/version&gt;&lt;/dependency&gt; 引入依赖后，启动项目，访问：http://localhost:8888/swagger-ui.html API 进行分组和Swagger2一样，创建一个Config类。 123456789101112131415161718192021222324252627package xyz.hooy.demo.bronze.p19;import org.springdoc.core.GroupedOpenApi;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class OpenAPIConfig &#123; // 第一个分组 @Bean public GroupedOpenApi restApi() &#123; return GroupedOpenApi.builder() .group(&quot;rest-api&quot;) .pathsToMatch(&quot;/rest/**&quot;) .build(); &#125; // 第二个分组 @Bean public GroupedOpenApi helloApi() &#123; return GroupedOpenApi.builder() .group(&quot;hello&quot;) .pathsToMatch(&quot;/hello/**&quot;) .build(); &#125;&#125; 效果： Swagger2 和 OpenAPI3 注解对应关系|@ApiParam |@Parameter ||@ApiOperation |@Operation ||@Api |@Tag ||@ApilmplicitParams|@Parameters ||@ApilmplicitParam |@Parameter ||@Apilgnore |@Parameter(hidden &#x3D; true) or @Operation(hidden &#x3D; true) or @Hidden||@ApiModel |@Schema ||@ApiModelProperty |@Schema |","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"青铜篇_P15_servlet容器环境下的测试","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P15_servlet容器环境下的测试","date":"2020-07-14T16:00:00.000Z","updated":"2022-06-15T08:32:52.851Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P15_servlet容器环境下的测试/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E9%9D%92%E9%93%9C%E7%AF%87_P15_servlet%E5%AE%B9%E5%99%A8%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E6%B5%8B%E8%AF%95/","excerpt":"","text":"servlet容器环境下的测试 20年全新-Spring Boot 2.x从青铜到王者之青铜篇-打造精品中的精品-程序员-编程-架构师-SpringBoot 不启动Servlet容器的测试。 标志：在控制台没有出现Spring的字符画。 没有Spring上下文环境，因此 @Resource 和 @Autowired 注解均失效。 @SpringBootTest类 Spring上下文环境。 @ExtendWith(SpringExtension.class)类 Spring运行时环境，容器，依赖注入 @AutoConfigureMockMvc类 自动构建 MockMvc 对象 1234567@AutoConfigureMockMvc// 相当于@BeforeAllstatic void setUP() &#123; // 创建mock对象 mockMvc = MockMvcBuilders.standaloneSetup(new ArticleRestController()).build();&#125; 什么时候需要Servlet容器环境？当需要依赖注入的时候，即出现 @Resource 和 @Autowired 注解。 12345678@SpringBootTest@ExtendWith(SpringExtension.class)@AutoConfigureMockMvcpublic class ArticleRestControllerTest &#123; // mock对象 @Resource private MockMvc mockMvc;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"青铜篇_P16_使用Mockito完成Mock测试","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P16_使用Mockito完成Mock测试","date":"2020-07-14T16:00:00.000Z","updated":"2022-06-15T08:32:52.851Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P16_使用Mockito完成Mock测试/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E9%9D%92%E9%93%9C%E7%AF%87_P16_%E4%BD%BF%E7%94%A8Mockito%E5%AE%8C%E6%88%90Mock%E6%B5%8B%E8%AF%95/","excerpt":"","text":"使用Mockito完成Mock测试 20年全新-Spring Boot 2.x从青铜到王者之青铜篇-打造精品中的精品-程序员-编程-架构师-SpringBoot 应用场景：假设你的同事负责Service层（服务层）还没实现，而你已经做好了Cotroller层（服务层），需要测试。此时可以使用Mock模拟。 @MockBean域 注入一个假的Bean 例： articleService.java 123public interface ArticleService &#123; public String saveArticle (Article article);&#125; Service层创建接口，然后再实现此接口，此方式更规范。 在 Test 类里使用。 12@MockBeanprivate ArticleService articleService; “打桩” 也就是设置条件的行为。 123// 打桩// 意思是：当 调用articleService对象里的saveArticle方法时，不调用里面的代码逻辑，而直接返回ok字符串。when(articleService.saveArticle(articleObj)).thenReturn(&quot;ok&quot;); 轻量级Mock测试将 @SpringBootTest 替换成 @WebMvcTest 。 @SpringBootTest 是尝试着将所有的Bean都注入到容器里，例如带有 @Cotroller 和 @Service 等待。 @WebMvcTestvalue 需要注入的Bean 类 只注入设定的Bean 12//假设只对 ArticleController 进行测试。@WebMvcTest(ArticleController.class) 由于不需要注入无关的Bean，因此测试启动速度会有所提升。 MockMvc相关的API","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"青铜篇_P17_使用swagger构建API接口文档","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P17_使用swagger构建API接口文档","date":"2020-07-14T16:00:00.000Z","updated":"2022-06-15T08:32:52.852Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P17_使用swagger构建API接口文档/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E9%9D%92%E9%93%9C%E7%AF%87_P17_%E4%BD%BF%E7%94%A8swagger%E6%9E%84%E5%BB%BAAPI%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/","excerpt":"","text":"使用swagger构建API接口文档 20年全新-Spring Boot 2.x从青铜到王者之青铜篇-打造精品中的精品-程序员-编程-架构师-SpringBoot swagger构建API文档的优点 代码变，文档变。 跨语言性，支持40多种语言。 Swagger UI 呈现出来的是一份可交互式的API文档。 将文档规范导入相关的SoapUI，自动地创建自动化测试。 关于Spring依赖Jar包的命名规范 官方：spring-boot-starter-swagger 开发者命名：swagger-xxxx-spring-boot-starter开发者命名，就是个人开发的工具包，xxxx是个人的标志，这样做是为了避免引起误解。 将swagger引入至项目依赖12345678910111213&lt;!--swagger核心--&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt;&lt;/dependency&gt;&lt;!--swaggerUI 可以通过浏览器访问--&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt;&lt;/dependency&gt; 使用创建一个配置类。 创建一个 config 包里面创建一个 SwaggerConfig 类。 对此类加上 @Configuration 和 @EnableSwagger2 两个注解。 @Configuration类 告诉Spring这是一个配置类。 @EnableSwagger2类 表示在这个类里启用swagger相关的东西 123456789101112131415161718192021222324252627282930313233343536373839404142package xyz.hooy.demo.bronze.p17;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.service.ApiInfo;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;import springfox.documentation.swagger2.annotations.EnableSwagger2;@Configuration@EnableSwagger2public class SwaggerConfig &#123; /** 对文档基本信息的设置 * title API文档标题 * description 简单介绍 * termsOfServiceUrl 遵从的协议 * version api版本号 */ private ApiInfo apiInfo() &#123; return new ApiInfoBuilder() .title(&quot;springboot利用swagger构建api文档&quot;) .description(&quot;简单优雅的restful风格&quot;) .termsOfServiceUrl(&quot;http://www.zimug.com&quot;) .version(&quot;1.0&quot;) .build(); &#125; @Bean public Docket createRestApi()&#123; return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() // 扫描 launch 包下面的 &quot;/rest/&quot; URL路径下的内容作为接口文档构建的目标。 .apis(RequestHandlerSelectors.basePackage(&quot;com.zimug.boot.launch&quot;)) .paths(PathSelectors.regex(&quot;/rest/.&quot;)) .build(); &#125;&#125; 至此，重启项目，文档生成。 查看文档访问：http://localhost:8888/swagger-ui.html 例： 将英文字段的名称翻译成中文不推荐，比较繁琐。 将注释组加在Controller类的方法上。 12345678910111213141516171819202122232425262728293031package xyz.hooy.demo.controller;import io.swagger.annotations.*;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestParam;import xyz.hooy.demo.bronze.p12.Result;import java.util.Date;public class ArticleController &#123; // 作用：将英文字段的名称翻译成中文。 @ApiOperation(value = &quot;添加文章&quot;,notes = &quot;添加新的文章&quot;,tags = &quot;Article&quot;,httpMethod = &quot;POST&quot;) @ApiImplicitParams(&#123; @ApiImplicitParam(name = &quot;title&quot;,value = &quot;文章标题&quot;,required = true,dataType = &quot;String&quot;), @ApiImplicitParam(name = &quot;content&quot;,value = &quot;文章内容&quot;,required = true,dataType = &quot;String&quot;), @ApiImplicitParam(name = &quot;author&quot;,value = &quot;文章作者&quot;,required = true,dataType = &quot;String&quot;) &#125;) @ApiResponses(&#123; @ApiResponse(code = 200,message = &quot;成功&quot;,response = Result.class), &#125;) @PostMapping(&quot;/articles&quot;) public Result saveArticle( @RequestParam String author , @RequestParam String title , @RequestParam String content , @RequestParam Date createTime )&#123; // more code ... return new Result(); &#125;&#125; 对JavaBean的字段加入中文说明将注释组加在JaveBean的类和域上。 1234567891011121314151617package xyz.hooy.demo.bronze.p12;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;@Data//用于说明这个类是用来做什么用的@ApiModel(value = &quot;通用响应数据结构类&quot;)public class Result &#123; @ApiModelProperty(value = &quot;请求响应状态码&quot;,example = &quot;200、400、500&quot;) int code; @ApiModelProperty(value = &quot;请求结果描述信息&quot;) String message; @ApiModelProperty(value = &quot;请求结果数据&quot;) Object data;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"青铜篇_P18_从swagger导出多种格式离线文档","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P18_从swagger导出多种格式离线文档","date":"2020-07-14T16:00:00.000Z","updated":"2022-06-15T08:32:52.852Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P18_从swagger导出多种格式离线文档/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E9%9D%92%E9%93%9C%E7%AF%87_P18_%E4%BB%8Eswagger%E5%AF%BC%E5%87%BA%E5%A4%9A%E7%A7%8D%E6%A0%BC%E5%BC%8F%E7%A6%BB%E7%BA%BF%E6%96%87%E6%A1%A3/","excerpt":"","text":"从swagger导出多种格式离线文档 20年全新-Spring Boot 2.x从青铜到王者之青铜篇-打造精品中的精品-程序员-编程-架构师-SpringBoot 导出格式路线图 依赖123456789101112131415&lt;dependency&gt; &lt;groupId&gt;io.github.swagger2markup&lt;/groupId&gt; &lt;artifactId&gt;swagger2markup&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.swagger&lt;/groupId&gt; &lt;artifactId&gt;swagger-core&lt;/artifactId&gt; &lt;version&gt;1.5.16&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.swagger&lt;/groupId&gt; &lt;artifactId&gt;swagger-models&lt;/artifactId&gt; &lt;version&gt;1.5.16&lt;/version&gt;&lt;/dependency&gt; 实际上 springfox-swagger2 包含 swagger-models 。之所以要单独引入，是由于兼容性的问题。 经测试，以上三个依赖组合，是可以正常工作的。 swagger 格式导出 ASCIIDOC 或 Markdown 格式代码方式在测试类里配置，就像是一个测试用例。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package xyz.hooy.demo.bronze.p18;import io.github.swagger2markup.GroupBy;import io.github.swagger2markup.Language;import io.github.swagger2markup.Swagger2MarkupConfig;import io.github.swagger2markup.Swagger2MarkupConverter;import io.github.swagger2markup.builder.Swagger2MarkupConfigBuilder;import io.github.swagger2markup.markup.builder.MarkupLanguage;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit.jupiter.SpringExtension;import java.net.URL;import java.nio.file.Paths;@ExtendWith(SpringExtension.class)//使用默认端口，也就是application.properties里的server.port字段。@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)public class SwaggerExportTests &#123; @Test public void generateAsciiDocs() throws Exception &#123; /** * 导出文件的生成格式 ASCIIDOC 或 MARKDOWN * 设置语言，中文 * 分组方式，和前面的 &quot;将英文字段的名称翻译成中文&quot; 一节的 &quot;tags = &quot;Article&quot;&quot; 相关联 */ Swagger2MarkupConfig config = new Swagger2MarkupConfigBuilder() .withMarkupLanguage(MarkupLanguage.ASCIIDOC) .withOutputLanguage(Language.ZH) .withPathsGroupedBy(GroupBy.TAGS) .withGeneratedExamples() .withoutInlineSchema() .build(); /** * .from 从哪里导出，从URL的路径导出 * .withConfig 导出器的配置 * .toFile 导出到哪里 */ Swagger2MarkupConverter.from(new URL(&quot;http://localhost:8888/v2/api-docs&quot;)) .withConfig(config) .build() .toFile(Paths.get(&quot;src/main/resources/docs/asciidoc&quot;)); &#125;&#125; ASCIIDOC 转换成 HTML 格式Maven插件方式在 pom.xml 文件内加入插件。 1234567891011121314151617181920&lt;plugin&gt; &lt;groupId&gt;org.asciidoctor&lt;/groupId&gt; &lt;artifactId&gt;asciidoctor-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.5.6&lt;/version&gt; &lt;configuration&gt; &lt;!--asciidoc 文件目录--&gt; &lt;sourceDirectory&gt;src/main/resources/docs&lt;/sourceDirectory&gt; &lt;!--生成html的路径--&gt; &lt;outputDirectory&gt;src/main/resources/html&lt;/outputDirectory&gt; &lt;backend&gt;html&lt;/backend&gt; &lt;attributes&gt; &lt;!--导航栏在左--&gt; &lt;toc&gt;left&lt;/toc&gt; &lt;!--显示层级数--&gt; &lt;!-- &lt;toclevels&gt;3&lt;/toclevels&gt;--&gt; &lt;!--自动打数字序号--&gt; &lt;sectnums&gt;true&lt;/sectnums&gt; &lt;/attributes&gt; &lt;/configuration&gt;&lt;/plugin&gt; 最后 双击，执行。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"青铜篇_P10_常用注解开发RESTful接口（下）","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P10_常用注解开发RESTful接口（下）","date":"2020-07-13T16:00:00.000Z","updated":"2022-06-15T08:32:52.848Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P10_常用注解开发RESTful接口（下）/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E9%9D%92%E9%93%9C%E7%AF%87_P10_%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91RESTful%E6%8E%A5%E5%8F%A3%EF%BC%88%E4%B8%8B%EF%BC%89/","excerpt":"","text":"常用注解开发RESTful接口（下） 20年全新-Spring Boot 2.x从青铜到王者之青铜篇-打造精品中的精品-程序员-编程-架构师-SpringBoot @RequestMapping 不同请求模式的简写： @GetMapping @PostMapping @PutMapping @DeleteMapping例： 123@RequestMapping(value = &quot;/articles/&#123;id&#125; , method = RequestMethod.GET&quot;)等价于@GetMapping(/articles/&#123;id&#125;)","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"青铜篇_P11_HTTP协议与Spring参数接收注解","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P11_HTTP协议与Spring参数接收注解","date":"2020-07-13T16:00:00.000Z","updated":"2022-06-15T08:32:52.849Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P11_HTTP协议与Spring参数接收注解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E9%9D%92%E9%93%9C%E7%AF%87_P11_HTTP%E5%8D%8F%E8%AE%AE%E4%B8%8ESpring%E5%8F%82%E6%95%B0%E6%8E%A5%E6%94%B6%E6%B3%A8%E8%A7%A3/","excerpt":"","text":"HTTP协议与Spring参数接收注解 20年全新-Spring Boot 2.x从青铜到王者之青铜篇-打造精品中的精品-程序员-编程-架构师-SpringBoot 前端发送到后端字符串日期转成Date类application.yml 1234spring: jackson: date-format: yyyy-MM-dd HH:mm:ss time-zone: GMT+8 告诉Spring，当接收到以上格式的日期字符串时，自动将其转换成Date对象。 @RequestBody形参 整体接收，将请求体里的参数自动装载JavaBean类里 123public void saveArticle( @RequestBody Article article )&#123; // more code ...&#125; 可以实现对象里有数组，数组里还有对象的嵌套关系。 @RequestParam形参 一个一个接收，将请求体里的参数分别放入与变量名相对应的形参里 123456public void saveArticle( @RequestParam String author , @RequestParam String title , @RequestParam String content , @RequestParam Date createTime )&#123; // more code ...&#125; @DateTimeFormatpattern 格式，如：yyyy-MM-dd HH:mm:ss 形参 格式化Date对象 1234567public void saveArticle( @RequestParam String author , @RequestParam String title , @RequestParam String content , @DateTimeFormat( pattern = &quot;yyyy-MM-dd HH:mm:ss&quot; ) @RequestParam Date createTime )&#123; // more code ...&#125; @RequestHeader形参 获取header里的与变量名相对应的数据 |path info传参 |&#x2F;articles&#x2F;12(查询id为12的文章，12是参数) |@PathVariable ||URL Query String传参|&#x2F;articles?id&#x3D;12 |@RequestParam ||Body 传参 |Content-type:multipart&#x2F;form-data |@RequestParam ||Body 传参 |Content-type:application&#x2F;json,或其他自定义格式|@RequestBody ||Headers 传参 | |@RequestHeader|","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"青铜篇_P12_结合Spring请求处理流程讲解注解","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P12_结合Spring请求处理流程讲解注解","date":"2020-07-13T16:00:00.000Z","updated":"2022-06-15T08:32:52.850Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P12_结合Spring请求处理流程讲解注解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E9%9D%92%E9%93%9C%E7%AF%87_P12_%E7%BB%93%E5%90%88Spring%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B%E8%AE%B2%E8%A7%A3%E6%B3%A8%E8%A7%A3/","excerpt":"","text":"结合Spring请求处理流程讲解注解 20年全新-Spring Boot 2.x从青铜到王者之青铜篇-打造精品中的精品-程序员-编程-架构师-SpringBoot json是对象序列化的产物。 HttpMessageConverter 将对象序列化，将json反序列化。 @Controller 和 @RestController 类内都是对外提供HTTP服务的方法。 @Controller类 返回String，视图名称 @ResponseBody返回类 将返回类以默认的json格式返回 123public @ResponseBody Article getArticle( @PathVariable(&quot;id&quot;) Long id ) &#123; // more code ...&#125; 如果加上 @ResponseBody ，将省略第6、7步。 @RestController类 相当于 @Controller + @ResponseBody 类内方法都是以默认json格式返回 如何将默认的json格式，变更为以其他格式返回？例：将以Excel格式返回。 依赖12345&lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt; &lt;version&gt;3.9&lt;/version&gt;&lt;/dependency&gt; 自定义类，继承 AbstractHttpMessageConverter&lt;?&gt; 抽象类，并实现 supports 、readInternal 和 writeInternal 方法。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package xyz.hooy.demo.bronze.p12;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Sheet;import org.apache.poi.ss.usermodel.Workbook;import org.springframework.http.HttpInputMessage;import org.springframework.http.HttpOutputMessage;import org.springframework.http.MediaType;import org.springframework.http.converter.AbstractHttpMessageConverter;import org.springframework.http.converter.HttpMessageNotReadableException;import org.springframework.http.converter.HttpMessageNotWritableException;import org.springframework.stereotype.Service;import java.io.IOException;//将本类注入@Servicepublic class ResponseToXlsConverter extends AbstractHttpMessageConverter&lt;Result&gt; &#123; //响应头，告诉前端响应的是Excel这种格式，如果是浏览器，就会提供下载而不是页面展示数据。 private static final MediaType EXCEL_TYPE = MediaType.valueOf(&quot;application/vnd.ms-excel&quot;); //告诉处理Excel这种数据类型 ResponseToXlsConverter()&#123; super(EXCEL_TYPE); &#125; @Override protected boolean supports(Class&lt;?&gt; Clazz) &#123; //仅支持Result对象，将其数据Excel化 return (Result.class == Clazz); &#125; //针对于@RequestBody 反序列化的过程。 @Override protected Result readInternal(Class&lt;? extends Result&gt; aClass, HttpInputMessage httpInputMessage) throws IOException, HttpMessageNotReadableException &#123; return null; &#125; //针对于@ResponseBody 序列化的过程。 @Override protected void writeInternal(Result result, HttpOutputMessage httpOutputMessage) throws IOException, HttpMessageNotWritableException &#123; final Workbook workbook = new HSSFWorkbook(); final Sheet sheet = workbook.createSheet(); //在Excel里的第一行 final Row row = sheet.createRow(0); //第一列 row.createCell(0).setCellValue(result.getMessage()); //第二列 row.createCell(1).setCellValue(result.getData().toString()); //写回给客户端，响应 workbook.write(httpOutputMessage.getBody()); &#125;&#125; 继承与实现关系图：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"青铜篇_P13_jackson-JSON数据格式的处理","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P13_jackson-JSON数据格式的处理","date":"2020-07-13T16:00:00.000Z","updated":"2022-06-15T08:32:52.850Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P13_jackson-JSON数据格式的处理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E9%9D%92%E9%93%9C%E7%AF%87_P13_jackson-JSON%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%A4%84%E7%90%86/","excerpt":"","text":"jackson-JSON数据格式的处理 20年全新-Spring Boot 2.x从青铜到王者之青铜篇-打造精品中的精品-程序员-编程-架构师-SpringBoot @JsonFormatpattern 时间格式 timezone 时区 域 用于对 JavaBean 时间域格式化。 12345678910111213141516package xyz.hooy.demo.bronze.p13;import com.fasterxml.jackson.annotation.JsonFormat;import lombok.Data;import java.util.Date;@Datapublic class Article &#123; private Long id; private String author; private String title; private String content; @JsonFormat(pattern = &quot;yyyy/MM//dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;) private Date createTime;&#125; @JsonPropertyOrdervalue 改变域排列顺序 类 1234567891011121314151617package xyz.hooy.demo.bronze.p13;import com.fasterxml.jackson.annotation.JsonPropertyOrder;import lombok.Data;import java.util.Date;@Data// content 位于第一位，title 位于第二位，之后才从 id 向后排列。@JsonPropertyOrder(value = &#123;&quot;content&quot;,&quot;title&quot;&#125;)public class Article &#123; private Long id; private String author; private String title; private String content; private Date createTime;&#125; @JsonPropertyvalue 别名 域 在输出时，以注解的值为准，相当于给域换了一个名字。 12345678910111213141516package xyz.hooy.demo.bronze.p13;import com.fasterxml.jackson.annotation.JsonProperty;import lombok.Data;import java.util.Date;@Datapublic class Article &#123; private Long id; @JsonProperty(&quot;auther&quot;) private String author; private String title; private String content; private Date createTime;&#125; @JsonInclude域 如果返回字段为空，即Null，则忽略这个字段，不返回这个字段值 1234567891011121314151617package xyz.hooy.demo.bronze.p13;import com.fasterxml.jackson.annotation.JsonInclude;import lombok.Data;import java.util.Date;@Datapublic class Article &#123; private Long id; private String author; private String title; // 如果返回字段为空，即Null，则忽略这个字段，不返回这个字段值 @JsonInclude(JsonInclude.Include.NON_NULL) private String content; private Date createTime;&#125; @JsonIgnore域 忽略字段 1234567891011121314151617package xyz.hooy.demo.bronze.p13;import com.fasterxml.jackson.annotation.JsonIgnore;import lombok.Data;import java.util.Date;@Datapublic class Article &#123; //忽略字段，比如一些敏感数据，不希望Json响应到前端，用此注解忽略 @JsonIgnore private Long id; private String author; private String title; private String content; private Date createTime;&#125; 对象序列化Json，Json反序列化对象的方法使用 ObjectMapper 对象。 .writeValueAsString 方法将对象序列化成Json readValue 方法将Json序列化成对象 注意： JavaBean类必须加上 @NoArgsConstructor 无参构造方法和 @AllArgsConstructor 全参构造方法两个注释，否则报错。 1234567891011121314151617181920212223242526272829package xyz.hooy.demo.bronze.p13;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import org.junit.jupiter.api.Test;import java.util.Date;public class JacksonTest &#123; @Test void contextLoads() throws JsonProcessingException &#123; ObjectMapper mapper = new ObjectMapper(); //Object Article article = Article.builder() .id(1L) .author(&quot;Hooy&quot;) .content(&quot;从青铜到王者&quot;) .createTime(new Date()) .title(&quot;t1&quot;).build(); //Object -&gt; Json String json = mapper.writeValueAsString(article); System.out.println(json); //Json -&gt; Object Article articleObject = mapper.readValue(&quot;&#123;\\&quot;id\\&quot;:1,\\&quot;author\\&quot;:\\&quot;Hooy\\&quot;,\\&quot;title\\&quot;:\\&quot;t1\\&quot;,\\&quot;content\\&quot;:\\&quot;从青铜到王者\\&quot;,\\&quot;createTime\\&quot;:1594733516341&#125;&quot;,Article.class); System.out.println(articleObject.toString()); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"青铜篇_P14_针对接口编写单元测试代码","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P14_针对接口编写单元测试代码","date":"2020-07-13T16:00:00.000Z","updated":"2022-06-15T08:32:52.851Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P14_针对接口编写单元测试代码/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E9%9D%92%E9%93%9C%E7%AF%87_P14_%E9%92%88%E5%AF%B9%E6%8E%A5%E5%8F%A3%E7%BC%96%E5%86%99%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81/","excerpt":"","text":"针对接口编写单元测试代码 20年全新-Spring Boot 2.x从青铜到王者之青铜篇-打造精品中的精品-程序员-编程-架构师-SpringBoot spring-boot-starter-test 包含 Junit (JUnit5) Mockito1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677package xyz.hooy.demo.bronze.p14;import lombok.extern.slf4j.Slf4j;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.Test;import org.springframework.http.HttpMethod;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.result.MockMvcResultMatchers;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;@Slf4jpublic class ArticleRestControllerTest &#123; // mock对象 private static MockMvc mockMvc; @BeforeAll static void setUP()&#123; // 创建mock对象 mockMvc = MockMvcBuilders.standaloneSetup(new ArticleRestController()).build(); &#125; @Test public void saveArticle() throws Exception &#123; String article = &quot;&#123;\\&quot;id\\&quot;:1,\\&quot;author\\&quot;:\\&quot;Hooy\\&quot;,\\&quot;title\\&quot;:\\&quot;t1\\&quot;,\\&quot;content\\&quot;:\\&quot;从青铜到王者\\&quot;,\\&quot;createTime\\&quot;:1594733516341&#125;&quot;; //perform() 执行 MvcResult mvcResult = mockMvc.perform( MockMvcRequestBuilders // 测试的URL接口 .request(HttpMethod.POST , &quot;/rest/articles&quot;) // 测试的格式类型 .contentType(&quot;application/json&quot;) // 测试样本 .content(article) //andExpect 期望，类似于断言 andDo 继续做什么 andReturn 返回结果 ).andExpect(MockMvcResultMatchers.status().isOk()) .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.data.author&quot;).value(&quot;Hooy&quot;)) .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.data.reader[0].age&quot;).value(18)) .andDo(print()) .andReturn(); /* json结构 &#123; &quot;isok&quot; : true , &quot;code&quot; : 200 , &quot;message&quot; : &quot;请求响应成功！&quot; &quot;data&quot; : &#123; &quot;id&quot; : 1 , &quot;author&quot; : &quot;Hooy&quot; , &quot;title&quot; : &quot;t1&quot; , &quot;content&quot; : &quot;从青铜到王者&quot; , &quot;createTime&quot; : 1594733516341 &quot;reader&quot; : [ &#123; &quot;name&quot; : &quot;Hooy&quot; , &quot;age&quot; : 18 &#125; , &#123; &quot;name&quot; : &quot;kobe&quot; , &quot;age&quot; : 37 &#125; ] &#125; &#125; */ //解决控制台输出乱码的问题 mvcResult.getResponse().setCharacterEncoding(&quot;UTF-8&quot;); log.info(mvcResult.getResponse().getContentAsString()); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"青铜篇_P9_常用注解开发RESTful接口（上）","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P9_常用注解开发RESTful接口（上）","date":"2020-07-13T16:00:00.000Z","updated":"2022-06-15T08:32:52.855Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P9_常用注解开发RESTful接口（上）/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E9%9D%92%E9%93%9C%E7%AF%87_P9_%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91RESTful%E6%8E%A5%E5%8F%A3%EF%BC%88%E4%B8%8A%EF%BC%89/","excerpt":"","text":"常用注解开发RESTful接口（上） 20年全新-Spring Boot 2.x从青铜到王者之青铜篇-打造精品中的精品-程序员-编程-架构师-SpringBoot @RequestMappingvalue 浏览器将要访问的URL路径。 method 请求模式，如 GET POST PUT DELETE。 方法 设置请求地址及请求模式。 类 作为请求地址的前缀 @PathVariable(“id”)value URL路径中的变量名。 形参 获取路径变量中的值，放入后面的形参里 12345@RequestMapping(value = &quot;/articles/&#123;id&#125;&quot; , method = RequestMethod.GET)public Article getArticle(@PathVariable(&quot;id&quot;) Long id) &#123; // more code ... return article;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"青铜篇_P5_提高开发效率插件lombok","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P5_提高开发效率插件lombok","date":"2020-07-12T16:00:00.000Z","updated":"2022-06-15T08:32:52.853Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P5_提高开发效率插件lombok/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E9%9D%92%E9%93%9C%E7%AF%87_P5_%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%92%E4%BB%B6lombok/","excerpt":"","text":"提高开发效率插件lombok代码 20年全新-Spring Boot 2.x从青铜到王者之青铜篇-打造精品中的精品-程序员-编程-架构师-SpringBoot 编译器：IntelliJ IDEA 2019.3.3 x64 Lombok认识应用于 POJO 或者 JavaBean 类，对重复性质的代码省略，使代码更简洁优雅。 POJO和JavaBean的区别： 当一个Pojo可序列化，有一个无参的构造函数，使用getter和setter方法来访问属性时，他就是一个JavaBean。 安装插件File -&gt; Settings… -&gt; Plugins -&gt; Marketplace 搜索：lombok 安装，重启IDEA。 依赖pom.xml文件 需要加入以下Jar依赖。 1234&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt;&lt;/dependency&gt; 不需要版本号，springboot版本管理。 用法@Data 注解加在类名上。 自动生成 get set constructor 方法，重写 equest hashCode toString 方法。 123456789package xyz.hooy.demo.bronze.p5;package xyz.hooy.demo.bronze.p5;import lombok.Data;@Datapublic class LombokPOJO &#123; private String name; private Integer age;&#125; @Slf4j 注解加在类名上。 自动生成 日志 123456789101112package xyz.hooy.demo.bronze.p5;import lombok.Data;import lombok.extern.slf4j.Slf4j;import org.slf4j.Logger;import org.slf4j.LoggerFactory;@Slf4jpublic class LombokPOJO &#123; //日志 /*private static final Logger log = LoggerFactory.getLogger(LombokPOJO.class);*/ private String name; private Integer age;&#125; @Sif4j 等价于： 12//日志private static final Logger log = LoggerFactory.getLogger(LombokPOJO.class); @Builder 注解加在类名上。 可以在链式的为对象赋值。 123456789101112package xyz.hooy.demo.bronze.p5;import lombok.Builder;import lombok.Data;import lombok.extern.slf4j.Slf4j;@Data@Slf4j@Builderpublic class LombokPOJO &#123; private String name; private Integer age;&#125; 使用POJO类的方式 1LombokPOJO lombokPOJO = LombokPOJO.builder().name(&quot;Hooy&quot;).age(22).build(); @AllArgsConstructor 注解加在类名上。 自动生成 全参构造器。 @NoArgsConstructor 注解加在类名上。 自动生成 无参构造器。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"青铜篇_P6_IDEA环境下代码热部署热加载","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P6_IDEA环境下代码热部署热加载","date":"2020-07-12T16:00:00.000Z","updated":"2022-06-15T08:32:52.853Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P6_IDEA环境下代码热部署热加载/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E9%9D%92%E9%93%9C%E7%AF%87_P6_IDEA%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BB%A3%E7%A0%81%E7%83%AD%E9%83%A8%E7%BD%B2%E7%83%AD%E5%8A%A0%E8%BD%BD/","excerpt":"","text":"IDEA环境下代码热部署热加载 20年全新-Spring Boot 2.x从青铜到王者之青铜篇-打造精品中的精品-程序员-编程-架构师-SpringBoot 两种： 使用 Jrebel 插件 [商业收费] 使用 devtoolsJrebel 商业收费，默认免费试用10天。 安装插件File -&gt; Settings… -&gt; Plugins -&gt; Marketplace 搜索：Jrebel 安装，重启IDEA。 devtools依赖pom.xml文件 需要加入以下Jar依赖。 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; Ctrl + Alt + Shift + / 调出 Maintenance -&gt; 1.Registry…（注册…） 勾选 compiler.automake.allow.when.app.running 允许程序运行时编译。 [可选] 自动更新（重启）项目 File -&gt; Settings… -&gt; Build,Execution,Deployment -&gt; Compiler（编译器） 勾选 Build project automatically 手动更新（重启）项目 点击 Build Project 快捷键： Ctrl + F9 %!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;)","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"青铜篇_P7_开发常用IDEA工具插件","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P7_开发常用IDEA工具插件","date":"2020-07-12T16:00:00.000Z","updated":"2022-06-15T08:32:52.854Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P7_开发常用IDEA工具插件/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E9%9D%92%E9%93%9C%E7%AF%87_P7_%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8IDEA%E5%B7%A5%E5%85%B7%E6%8F%92%E4%BB%B6/","excerpt":"","text":"开发常用IDEA工具插件 20年全新-Spring Boot 2.x从青铜到王者之青铜篇-打造精品中的精品-程序员-编程-架构师-SpringBoot 插件目录： Codota Auto filling Java call arguments GsonFormat Rainbow Brackets Maven Helper安装插件 File -&gt; Settings… -&gt; Plugins -&gt; Marketplace 搜索，安装，重启IDEA。 Codota 代码自动补全 参考案例 Auto filling Java call argumentsnew新对象时自动补齐构造器参数。 GsonFormat根据json自动生成对应的JavaBean类。 使用创建一个空类，Alt+ S 打开窗口，粘入json数据。 Rainbow Brackets彩虹括号，更易于区分代码块关系。 Maven Helper分析Jar包关系，解决依赖冲突。 作用于 pom.xml 文件。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"青铜篇_P8_RESTful风格API与HTTP协议","slug":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P8_RESTful风格API与HTTP协议","date":"2020-07-12T16:00:00.000Z","updated":"2022-06-15T08:32:52.854Z","comments":true,"path":"技术向/SpringBoot/20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品/青铜篇_P8_RESTful风格API与HTTP协议/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0_Spring%20Boot%202.x_%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87_%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/%E9%9D%92%E9%93%9C%E7%AF%87_P8_RESTful%E9%A3%8E%E6%A0%BCAPI%E4%B8%8EHTTP%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"RESTful风格API与HTTP协议 20年全新-Spring Boot 2.x从青铜到王者之青铜篇-打造精品中的精品-程序员-编程-架构师-SpringBoot API(Application Programming Interface)，顾名思义：是一组编程接口规范，客户端与服务端通过请求响应进行数据通信。 REST(Representational State Transfer)表属性状态传递，决定了接口的形式与规则。 RESTful是基于http方法的API设计风格，而不是一种新技术。看 http method 就知道针对资源干什么 RESTful是面向资源的（名词） |GET &#x2F;api&#x2F;getDogs&#x2F;{id}|GET &#x2F;api&#x2F;dogs&#x2F;{id} |获取一个小狗狗||GET &#x2F;api&#x2F;getDogs |GET &#x2F;api&#x2F;dogs |获取所有小狗狗||GET &#x2F;api&#x2F;addDogs |POST &#x2F;api&#x2F;dogs |添加一个小狗狗||GET &#x2F;api&#x2F;editDogs |PUT &#x2F;api&#x2F;dogs&#x2F;{id} |修改一个小狗狗||GET &#x2F;api&#x2F;deleteDogs |DELETE &#x2F;api&#x2F;dogs&#x2F;{id}|删除一个小狗狗| RESTful 要点： 接口名均是名词，不含动词。 均使用复数形式。 用HTTP方法体现对资源的操作： * Create 增 POST Read 查 GET Update 改 PUT Delete 删 DELETE 看 Url 就知道要什么资源复杂资源关系的表达 GET &#x2F;cars&#x2F;711&#x2F;drivers&#x2F; 返回 使用过编号711汽车的所有司机 GET &#x2F;cars&#x2F;711&#x2F;drivers&#x2F;4 返回 使用过编号711汽车的4号司机资源过滤、排序、选择和分页的表述 |资源数据过滤 |GET &#x2F;cars?color&#x3D;red |获取红色的汽车 || |GET &#x2F;cars?seats&lt;&#x3D;4 |获取小于四座的汽车 ||资源数据排序 |GET &#x2F;cars?sort&#x3D;-manufactorer,+model |获取汽车资源数据，先按照生产者降序排序、再按照车架模型升序排序 ||资源数据字段选择|GET &#x2F;cars?fields&#x3D;manufacturer,model,id,color|只获取其中的一些字段，给API消费者一个选择字段的能力，这会降低网络流量||资源数据分页 |GET &#x2F;cars?offset&#x3D;10&amp;limit&#x3D;5 |使用limit和offset实现分页，缺省 | 看 http status code 就知道结果如何|200|OK |正常 ||400|Bad Request |浏览器错误 ||500|Internal Server Error|服务器内部错误| 版本化你的API 面向扩展开放，面向修改关闭 强制性增加API版本声明，不要发布无版本的API。 例如：&#x2F;api&#x2F;v1&#x2F;blog","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"}],"tags":[{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"}],"author":"hooy"},{"title":"00002_变更DNF服务器的IP地址","slug":"创作集/00002_变更DNF服务器的IP地址","date":"2020-07-03T16:00:00.000Z","updated":"2022-07-14T09:10:19.812Z","comments":true,"path":"创作集/00002_变更DNF服务器的IP地址/","link":"","permalink":"http://blog.hooy.xyz/%E5%88%9B%E4%BD%9C%E9%9B%86/00002_%E5%8F%98%E6%9B%B4DNF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84IP%E5%9C%B0%E5%9D%80/","excerpt":"","text":"操作步骤Step01 替换服务地址在 “游戏服务根目录” 下执行命令，将地址替换。 12345# 注释：sed -i &quot;s/旧IP地址/新IP地址/g&quot; `find . -type f -name &quot;*.cfg&quot;`# 例如：sed -i &quot;s/192.168.200.131/192.168.100.31/g&quot; `find . -type f -name &quot;*.cfg&quot;` 执行完毕，可打开任意 .cfg 文件查看替换情况。成功替换则继续。 参考：【极简操作】VM版本DNF单机+开服架设教学 百度贴吧最终版 Step02 替换数据库数据使用 Navicat Premium 软件连接至服务器。 将 d_taiwan 数据库的 db_connect 表的 db_ip 字段统一替换成新IP地址。 解决报错： CONNECTION FAIL IP &#x3D;127.0.0.1, PORT &#x3D;20203, reason &#x3D;Connection refusedtcpSock.connect Fail! CONNECTION FAIL IP &#x3D;127.0.0.1, PORT &#x3D;20403, reason &#x3D;Connection refusedtcpSock.connect Fail! 参考：修改服务器ip或一直connect Fail的看过来 Step03 更改主机地址以下方法任选其一即可。 方法一：SSH命令窗口输入，并回车。 1vi /etc/sysconfig/network-scripts/ifcfg-eth0 修改 BROADCAST IPADDR NETMASK NETWORK 参数。 然后，按 ESC 键，输入 :wq 并回车。 输入，并回车执行重启网络配置服务。 1service network restart 参考：192.168.200.131能否修改为其他ip 方法二：考虑到很多人对Linux很陌生，不擅长使用命令。 可以使用 WinSCP 软件连接到服务器，通过可视化界面修改文件。 文件路径：*&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0* 修改参数与 方法1 相同，这里不再赘述。 Step04 修改本地客户端配置文件找到本地客户端所在位置。 找到 config.ini 文件，将 服务器地址 参数修改成新IP地址。 解决问题： 解决了找不到频道的问题。","categories":[{"name":"创作集","slug":"创作集","permalink":"http://blog.hooy.xyz/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"}],"tags":[],"author":"hooy"},{"title":"Markdown_代码-菜鸟教程","slug":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_代码-菜鸟教程","date":"2020-06-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.294Z","comments":true,"path":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_代码-菜鸟教程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown_%E6%95%99%E7%A8%8B_%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/Markdown_%E4%BB%A3%E7%A0%81-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/","excerpt":"","text":"Markdown 代码如果是段落上的一个函数或片段的代码可以用反引号把它包起来（&#96;），例如： 1`printf()` 函数 显示结果如下： 代码区块代码区块使用 4 个空格或者一个制表符（Tab 键）。 实例如下： 显示结果如下： 你也可以用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）： 1234```javascript$(document).ready(function () &#123; alert(&#x27;RUNOOB&#x27;);&#125;); 显示结果如下： ![9f3b2bf115496a0a0029fbb173079f43.png](image/9f3b2bf115496a0a0029fbb173079f43.png)","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Markdown","slug":"技术向/Markdown","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/"},{"name":"Markdown_教程_菜鸟教程","slug":"技术向/Markdown/Markdown-教程-菜鸟教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown-%E6%95%99%E7%A8%8B-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"菜鸟教程","slug":"菜鸟教程","permalink":"http://blog.hooy.xyz/tags/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"author":"hooy"},{"title":"Markdown_列表-菜鸟教程","slug":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_列表-菜鸟教程","date":"2020-06-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.295Z","comments":true,"path":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_列表-菜鸟教程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown_%E6%95%99%E7%A8%8B_%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/Markdown_%E5%88%97%E8%A1%A8-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/","excerpt":"","text":"Markdown 列表Markdown 支持有序列表和无序列表。 无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容： 1234567891011* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项 显示结果如下： 有序列表使用数字并加上 . 号来表示，如： 1231. 第一项2. 第二项3. 第三项 显示结果如下： 列表嵌套列表嵌套只需在子列表中的选项前面添加四个空格即可： 1234561. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 显示结果如下：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Markdown","slug":"技术向/Markdown","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/"},{"name":"Markdown_教程_菜鸟教程","slug":"技术向/Markdown/Markdown-教程-菜鸟教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown-%E6%95%99%E7%A8%8B-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"菜鸟教程","slug":"菜鸟教程","permalink":"http://blog.hooy.xyz/tags/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"author":"hooy"},{"title":"Markdown_区块-菜鸟教程","slug":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_区块-菜鸟教程","date":"2020-06-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.295Z","comments":true,"path":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_区块-菜鸟教程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown_%E6%95%99%E7%A8%8B_%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/Markdown_%E5%8C%BA%E5%9D%97-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/","excerpt":"","text":"Markdown 区块Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号： 123&gt; 区块引用&gt; 菜鸟教程&gt; 学的不仅是技术更是梦想 显示结果如下： 另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推： 123&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套 显示结果如下： 区块中使用列表区块中使用列表实例如下： 123456&gt; 区块中使用列表&gt; 1. 第一项&gt; 2. 第二项&gt; + 第一项&gt; + 第二项&gt; + 第三项 显示结果如下： 列表中使用区块如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。 区块中使用列表实例如下： 1234* 第一项 &gt; 菜鸟教程 &gt; 学的不仅是技术更是梦想* 第二项 显示结果如下：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Markdown","slug":"技术向/Markdown","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/"},{"name":"Markdown_教程_菜鸟教程","slug":"技术向/Markdown/Markdown-教程-菜鸟教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown-%E6%95%99%E7%A8%8B-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"菜鸟教程","slug":"菜鸟教程","permalink":"http://blog.hooy.xyz/tags/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"author":"hooy"},{"title":"Markdown_图片-菜鸟教程","slug":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_图片-菜鸟教程","date":"2020-06-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.296Z","comments":true,"path":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_图片-菜鸟教程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown_%E6%95%99%E7%A8%8B_%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/Markdown_%E5%9B%BE%E7%89%87-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/","excerpt":"","text":"Markdown 图片Markdown 图片语法格式如下： 123![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;) 开头一个感叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。使用实例： 123![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png)![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png &quot;RUNOOB&quot;) 显示结果如下： 当然，你也可以像网址那样对图片网址使用变量: 1234这个链接用 1 作为网址变量 [RUNOOB][1].然后在文档的结尾为变量赋值（网址）[1]: http://static.runoob.com/images/runoob-logo.png 显示结果如下： Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 标签。 1&lt;img src=&quot;http://static.runoob.com/images/runoob-logo.png&quot; width=&quot;50%&quot;&gt; 显示结果如下：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Markdown","slug":"技术向/Markdown","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/"},{"name":"Markdown_教程_菜鸟教程","slug":"技术向/Markdown/Markdown-教程-菜鸟教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown-%E6%95%99%E7%A8%8B-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"菜鸟教程","slug":"菜鸟教程","permalink":"http://blog.hooy.xyz/tags/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"author":"hooy"},{"title":"Markdown_标题-菜鸟教程","slug":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_标题-菜鸟教程","date":"2020-06-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.296Z","comments":true,"path":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_标题-菜鸟教程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown_%E6%95%99%E7%A8%8B_%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/Markdown_%E6%A0%87%E9%A2%98-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/","excerpt":"","text":"Markdown 标题Markdown 标题有两种格式。 1、使用 &#x3D; 和 - 标记一级和二级标题&#x3D; 和 - 标记语法格式如下： 12345我展示的是一级标题=================我展示的是二级标题----------------- 显示效果如下图： 使用 # 号标记使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 显示效果如下图：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Markdown","slug":"技术向/Markdown","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/"},{"name":"Markdown_教程_菜鸟教程","slug":"技术向/Markdown/Markdown-教程-菜鸟教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown-%E6%95%99%E7%A8%8B-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"菜鸟教程","slug":"菜鸟教程","permalink":"http://blog.hooy.xyz/tags/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"author":"hooy"},{"title":"Markdown_段落格式-菜鸟教程","slug":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_段落格式-菜鸟教程","date":"2020-06-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.297Z","comments":true,"path":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_段落格式-菜鸟教程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown_%E6%95%99%E7%A8%8B_%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/Markdown_%E6%AE%B5%E8%90%BD%E6%A0%BC%E5%BC%8F-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/","excerpt":"","text":"Markdown 段落Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。 当然也可以在段落后面使用一个空行来表示重新开始一个段落。 字体Markdown 可以使用以下几种字体： 123456*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___ 显示效果如下所示： 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： 123456789**** * ******- - ----------- 显示效果如下所示： 删除线如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下： 123RUNOOB.COMGOOGLE.COM~~BAIDU.COM~~ 显示效果如下所示： 下划线下划线可以通过 HTML 的 标签来实现： 1&lt;u&gt;带下划线文本&lt;/u&gt; 显示效果如下所示： 脚注脚注是对文本的补充说明。 Markdown 脚注的格式如下: 1[^要注明的文本] 以下实例演示了脚注的用法： 123创建脚注格式类似这样 [^RUNOOB]。[^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！ 演示效果如下：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Markdown","slug":"技术向/Markdown","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/"},{"name":"Markdown_教程_菜鸟教程","slug":"技术向/Markdown/Markdown-教程-菜鸟教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown-%E6%95%99%E7%A8%8B-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"菜鸟教程","slug":"菜鸟教程","permalink":"http://blog.hooy.xyz/tags/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"author":"hooy"},{"title":"Markdown_表格-菜鸟教程","slug":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_表格-菜鸟教程","date":"2020-06-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.297Z","comments":true,"path":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_表格-菜鸟教程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown_%E6%95%99%E7%A8%8B_%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/Markdown_%E8%A1%A8%E6%A0%BC-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/","excerpt":"","text":"Markdown 表格Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。 语法格式如下： 1234| 表头 | 表头 || ---- | ---- || 单元格 | 单元格 || 单元格 | 单元格 | 以上代码显示结果如下： 对齐方式 我们可以设置表格的对齐方式： -: 设置内容和标题栏居右对齐。 :- 设置内容和标题栏居左对齐。 :-: 设置内容和标题栏居中对齐。实例如下： 1234| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 | 以上代码显示结果如下：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Markdown","slug":"技术向/Markdown","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/"},{"name":"Markdown_教程_菜鸟教程","slug":"技术向/Markdown/Markdown-教程-菜鸟教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown-%E6%95%99%E7%A8%8B-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"菜鸟教程","slug":"菜鸟教程","permalink":"http://blog.hooy.xyz/tags/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"author":"hooy"},{"title":"Markdown_链接-菜鸟教程","slug":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_链接-菜鸟教程","date":"2020-06-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.298Z","comments":true,"path":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_链接-菜鸟教程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown_%E6%95%99%E7%A8%8B_%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/Markdown_%E9%93%BE%E6%8E%A5-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/","excerpt":"","text":"Markdown 链接链接使用方法如下： 12345[链接名称](链接地址)或者&lt;链接地址&gt; 例如： 1这是一个链接 [菜鸟教程](https://www.runoob.com) 显示结果如下： 直接使用链接地址： 1&lt;https://www.runoob.com&gt; 显示结果如下： 高级链接我们可以通过变量来设置一个链接，变量赋值在文档末尾进行： 123456这个链接用 1 作为网址变量 [Google][1]这个链接用 runoob 作为网址变量 [Runoob][runoob]然后在文档的结尾为变量赋值（网址） [1]: http://www.google.com/ [runoob]: http://www.runoob.com/ 显示结果如下：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Markdown","slug":"技术向/Markdown","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/"},{"name":"Markdown_教程_菜鸟教程","slug":"技术向/Markdown/Markdown-教程-菜鸟教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown-%E6%95%99%E7%A8%8B-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"菜鸟教程","slug":"菜鸟教程","permalink":"http://blog.hooy.xyz/tags/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"author":"hooy"},{"title":"Markdown_高级技巧-菜鸟教程","slug":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_高级技巧-菜鸟教程","date":"2020-06-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.298Z","comments":true,"path":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown_高级技巧-菜鸟教程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown_%E6%95%99%E7%A8%8B_%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/Markdown_%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/","excerpt":"","text":"Markdown 表格 Markdown 高级技巧支持的 HTML 元素不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。 目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等 ，如： 1使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑 输出结果为： 转义Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符： 12**文本加粗** \\*\\* 正常显示星号 \\*\\* 输出结果为： Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： 123456789101112\\ 反斜线` 反引号* 星号_ 下划线&#123;&#125; 花括号[] 方括号() 小括号# 井字号+ 加号- 减号. 英文句点! 感叹号 公式当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如： 12345678$$\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 = \\begin&#123;vmatrix&#125; \\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\\end&#123;vmatrix&#125;$&#123;$tep1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;$$ 输出结果为：  Markdown 表格 1 篇笔记__ 写笔记 typora 画流程图、时序图(顺序图)、甘特图 复制以下代码使用 typora 的源码模式粘贴到编辑器中查看效果： 以下几个实例效果图如下： 1、横向流程图源码格式： 1234567```mermaidgraph LRA[方形] --&gt;B(圆角) B --&gt; C&#123;条件a&#125; C --&gt;|a=1| D[结果1] C --&gt;|a=2| E[结果2] F[横向流程图] 123**2、竖向流程图源码格式：** 123456graph TDA[方形] --&gt; B(圆角) B --&gt; C&#123;条件a&#125; C --&gt; |a=1| D[结果1] C --&gt; |a=2| E[结果2] F[竖向流程图] 123**3、标准流程图源码格式：** 123456789st=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st-&gt;op-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op 123**4、标准流程图源码格式（横向）：** 123456789st=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st(right)-&gt;op(right)-&gt;condcond(yes)-&gt;io(bottom)-&gt;econd(no)-&gt;sub1(right)-&gt;op 123**5、UML时序图源码样例：** 12345对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象A-&gt;对象B: 你真的好吗？ 123**6、UML时序图源码复杂样例：** 1234567891011Title: 标题：复杂使用对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象B-&gt;小三: 你好吗小三--&gt;&gt;对象A: 对象B找我了对象A-&gt;对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩 123**7、UML标准时序图样例：** 123456789101112%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头 sequenceDiagram participant 张三 participant 李四 张三-&gt;王五: 王五你好吗？ loop 健康检查 王五-&gt;王五: 与疾病战斗 end Note right of 王五: 合理 食物 &lt;br/&gt;看医生... 李四--&gt;&gt;张三: 很好! 王五-&gt;李四: 你怎么样? 李四--&gt;王五: 很好! 123**8、甘特图样例：** 12345678910111213141516171819%% 语法示例 gantt dateFormat YYYY-MM-DD title 软件开发甘特图 section 设计 需求 :done, des1, 2014-01-06,2014-01-08 原型 :active, des2, 2014-01-09, 3d UI设计 : des3, after des2, 5d 未来任务 : des4, after des3, 5d section 开发 学习准备理解需求 :crit, done, 2014-01-06,24h 设计框架 :crit, done, after des2, 2d 开发 :crit, active, 3d 未来任务 :crit, 5d 耍 :2d section 测试 功能测试 :active, a1, after des3, 3d 压力测试 :after a1 , 20h 测试报告 : 48h 效果图如下： %!(EXTRA markdown.ResourceType=, string=, string=) [adc](https://www.runoob.com/note/47651) __ adc __ 928***528@qq.com __ [ 参考地址](https://jingyan.baidu.com/article/48b558e3035d9a7f38c09aeb.html) 8个月前 (10-18) __","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Markdown","slug":"技术向/Markdown","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/"},{"name":"Markdown_教程_菜鸟教程","slug":"技术向/Markdown/Markdown-教程-菜鸟教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown-%E6%95%99%E7%A8%8B-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"菜鸟教程","slug":"菜鸟教程","permalink":"http://blog.hooy.xyz/tags/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"author":"hooy"},{"title":"Markdown基础","slug":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown基础","date":"2020-06-28T16:00:00.000Z","updated":"2022-06-15T08:32:50.298Z","comments":true,"path":"技术向/Markdown/Markdown_教程_菜鸟教程/Markdown基础/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown_%E6%95%99%E7%A8%8B_%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/Markdown%E5%9F%BA%E7%A1%80/","excerpt":"","text":"&#x2F;&#x2F;标题 一级标题二级标题三级标题四级标题五级标题六级标题我展示的是一级标题我展示的是二级标题&#x2F;&#x2F;段落格式 &#x2F;&#x2F;段落换行是使用两个以上空格加回车 RUNOOB.COM GOOGLE.COM &#x2F;&#x2F;也可以在后面使用一个空行来表示重新开始一个段落 RUNOOB.COM GOOGLE.COM &#x2F;&#x2F;字体 斜体文本 斜体文本 粗体文本 粗体文本 粗斜体文本 粗斜体文本 &#x2F;&#x2F;分割线 &#x2F;&#x2F;删除线 BAIDU.COM &#x2F;&#x2F;下划线 带下划线的文本 &#x2F;&#x2F;脚注 创建脚注格式类似这样^RUNOOB &#x2F;&#x2F;无序列表 第一项 第二项 第三项 第四项 第五项 第六项 第七项 第八项 第九项&#x2F;&#x2F;有序 第一项 第二项 第三项&#x2F;&#x2F;列表嵌套 &#x2F;&#x2F;列表嵌套只需在子列表中的选项前面添加四个空格即可 第一项： * 第一项嵌套的第一个元素 第一项嵌套的第二个元素 第二项 * 第二项嵌套的第一个元素 第二项嵌套的第二个元素&#x2F;&#x2F;区块 区块的引用 菜鸟教程 学的不仅是技术更是梦想 &#x2F;&#x2F;区块嵌套 最外层 第一层嵌套 第二层嵌套 &#x2F;&#x2F;区块中使用列表 区块中使用列表 第一项 第二项 第一项 第二项 第三项 &#x2F;&#x2F;列表中使用区块 第一项&gt; 菜鸟教程 学的不仅是技术更是梦想 第二项&#x2F;&#x2F;代码 printf() 函数 &#x2F;&#x2F;代码块 可以指定语言 123$(document).ready(function () &#123; alert(&#x27;RUNOOB&#x27;);&#125;); &#x2F;&#x2F;链接 这是一个链接菜鸟教程 &#x2F;&#x2F;高级链接 这个链接用1作为网址变量google 这个链接用runoob作为网址变量Runoob 然后在文档的结尾为变量赋值（网址） &#x2F;&#x2F;图片 &#x2F;&#x2F;当然，你也可以像网址那样对图片网址使用变量 这个链接用 1 作为网址变量 RUNOOB &#x2F;&#x2F;可以直接使用img标签，设置高宽 &#x2F;&#x2F;表格 &#x2F;&#x2F;-: 设置内容和标题栏居右对齐。 &#x2F;&#x2F;:- 设置内容和标题栏居左对齐。 &#x2F;&#x2F;:-: 设置内容和标题栏居中对齐。 |单元格|单元格||单元格|单元格| %2F%2F%E6%A0%87%E9%A2%98%0A%23%20%E4%B8%80%E7%BA%A7%E6%A0%87%E9%A2%98%0A%23%23%20%E4%BA%8C%E7%BA%A7%E6%A0%87%E9%A2%98%0A%23%23%23%20%E4%B8%89%E7%BA%A7%E6%A0%87%E9%A2%98%0A%23%23%23%23%20%E5%9B%9B%E7%BA%A7%E6%A0%87%E9%A2%98%0A%23%23%23%23%23%20%E4%BA%94%E7%BA%A7%E6%A0%87%E9%A2%98%0A%23%23%23%23%23%23%20%E5%85%AD%E7%BA%A7%E6%A0%87%E9%A2%98%0A%E6%88%91%E5%B1%95%E7%A4%BA%E7%9A%84%E6%98%AF%E4%B8%80%E7%BA%A7%E6%A0%87%E9%A2%98%0A%3D%0A%E6%88%91%E5%B1%95%E7%A4%BA%E7%9A%84%E6%98%AF%E4%BA%8C%E7%BA%A7%E6%A0%87%E9%A2%98%0A-%0A%0A%2F%2F%E6%AE%B5%E8%90%BD%E6%A0%BC%E5%BC%8F%0A%2F%2F%E6%AE%B5%E8%90%BD%E6%8D%A2%E8%A1%8C%E6%98%AF%E4%BD%BF%E7%94%A8%E4%B8%A4%E4%B8%AA%E4%BB%A5%E4%B8%8A%E7%A9%BA%E6%A0%BC%E5%8A%A0%E5%9B%9E%E8%BD%A6%0ARUNOOB.COM%20%20%0AGOOGLE.COM%0A%2F%2F%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%90%8E%E9%9D%A2%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E7%A9%BA%E8%A1%8C%E6%9D%A5%E8%A1%A8%E7%A4%BA%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B%E4%B8%80%E4%B8%AA%E6%AE%B5%E8%90%BD%0ARUNOOB.COM%0A%0AGOOGLE.COM%0A%0A%2F%2F%E5%AD%97%E4%BD%93%0A*%E6%96%9C%E4%BD%93%E6%96%87%E6%9C%AC*%0A_%E6%96%9C%E4%BD%93%E6%96%87%E6%9C%AC_%0A**%E7%B2%97%E4%BD%93%E6%96%87%E6%9C%AC**%0A__%E7%B2%97%E4%BD%93%E6%96%87%E6%9C%AC__%0A***%E7%B2%97%E6%96%9C%E4%BD%93%E6%96%87%E6%9C%AC***%0A___%E7%B2%97%E6%96%9C%E4%BD%93%E6%96%87%E6%9C%AC___%0A%0A%2F%2F%E5%88%86%E5%89%B2%E7%BA%BF%0A***%0A*%20*%20*%0A*****%0A-%20-%20-%0A————–%0A%0A%2F%2F%E5%88%A0%E9%99%A4%E7%BA%BF%0ABAIDU.COM%0A%0A%2F%2F%E4%B8%8B%E5%88%92%E7%BA%BF%0A%3Cu%3E%E5%B8%A6%E4%B8%8B%E5%88%92%E7%BA%BF%E7%9A%84%E6%96%87%E6%9C%AC%3C%2Fu%3E%0A%0A%2F%2F%E8%84%9A%E6%B3%A8%0A%E5%88%9B%E5%BB%BA%E8%84%9A%E6%B3%A8%E6%A0%BC%E5%BC%8F%E7%B1%BB%E4%BC%BC%E8%BF%99%E6%A0%B7%5B%5ERUNOOB%5D%0A%5B%5ERUNOOB%5D%3A%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B%0A%0A%2F%2F%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8%0A*%20%E7%AC%AC%E4%B8%80%E9%A1%B9%0A*%20%E7%AC%AC%E4%BA%8C%E9%A1%B9%0A*%20%E7%AC%AC%E4%B8%89%E9%A1%B9%0A%0A%2B%20%E7%AC%AC%E5%9B%9B%E9%A1%B9%0A%2B%20%E7%AC%AC%E4%BA%94%E9%A1%B9%0A%2B%20%E7%AC%AC%E5%85%AD%E9%A1%B9%0A%0A-%20%E7%AC%AC%E4%B8%83%E9%A1%B9%0A-%20%E7%AC%AC%E5%85%AB%E9%A1%B9%0A-%20%E7%AC%AC%E4%B9%9D%E9%A1%B9%0A%0A%2F%2F%E6%9C%89%E5%BA%8F%0A1.%20%E7%AC%AC%E4%B8%80%E9%A1%B9%0A2.%20%E7%AC%AC%E4%BA%8C%E9%A1%B9%0A3.%20%E7%AC%AC%E4%B8%89%E9%A1%B9%0A%0A%2F%2F%E5%88%97%E8%A1%A8%E5%B5%8C%E5%A5%97%0A%2F%2F%E5%88%97%E8%A1%A8%E5%B5%8C%E5%A5%97%E5%8F%AA%E9%9C%80%E5%9C%A8%E5%AD%90%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%80%89%E9%A1%B9%E5%89%8D%E9%9D%A2%E6%B7%BB%E5%8A%A0%E5%9B%9B%E4%B8%AA%E7%A9%BA%E6%A0%BC%E5%8D%B3%E5%8F%AF%0A1.%20%E7%AC%AC%E4%B8%80%E9%A1%B9%EF%BC%9A%0A%20%20%20%20-%20%E7%AC%AC%E4%B8%80%E9%A1%B9%E5%B5%8C%E5%A5%97%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%0A%20%20%20%20-%20%E7%AC%AC%E4%B8%80%E9%A1%B9%E5%B5%8C%E5%A5%97%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%85%83%E7%B4%A0%0A2.%20%E7%AC%AC%E4%BA%8C%E9%A1%B9%0A%20%20%20%20-%20%E7%AC%AC%E4%BA%8C%E9%A1%B9%E5%B5%8C%E5%A5%97%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%0A%20%20%20%20-%20%E7%AC%AC%E4%BA%8C%E9%A1%B9%E5%B5%8C%E5%A5%97%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%85%83%E7%B4%A0%0A%20%20%20%20%0A%2F%2F%E5%8C%BA%E5%9D%97%0A%3E%20%E5%8C%BA%E5%9D%97%E7%9A%84%E5%BC%95%E7%94%A8%0A%3E%20%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B%0A%3E%20%E5%AD%A6%E7%9A%84%E4%B8%8D%E4%BB%85%E6%98%AF%E6%8A%80%E6%9C%AF%E6%9B%B4%E6%98%AF%E6%A2%A6%E6%83%B3%0A%0A%2F%2F%E5%8C%BA%E5%9D%97%E5%B5%8C%E5%A5%97%0A%3E%20%E6%9C%80%E5%A4%96%E5%B1%82%0A%3E%20%3E%20%E7%AC%AC%E4%B8%80%E5%B1%82%E5%B5%8C%E5%A5%97%0A%3E%20%3E%20%3E%20%E7%AC%AC%E4%BA%8C%E5%B1%82%E5%B5%8C%E5%A5%97%0A%0A%2F%2F%E5%8C%BA%E5%9D%97%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%88%97%E8%A1%A8%0A%3E%20%E5%8C%BA%E5%9D%97%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%88%97%E8%A1%A8%0A%3E%201.%20%E7%AC%AC%E4%B8%80%E9%A1%B9%0A%3E%202.%20%E7%AC%AC%E4%BA%8C%E9%A1%B9%0A%3E%20%2B%20%E7%AC%AC%E4%B8%80%E9%A1%B9%0A%3E%20%2B%20%E7%AC%AC%E4%BA%8C%E9%A1%B9%0A%3E%20%2B%20%E7%AC%AC%E4%B8%89%E9%A1%B9%0A%0A%2F%2F%E5%88%97%E8%A1%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8C%BA%E5%9D%97%0A*%20%E7%AC%AC%E4%B8%80%E9%A1%B9%0A%20%20%20%20%3E%20%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B%0A%20%20%20%20%3E%20%E5%AD%A6%E7%9A%84%E4%B8%8D%E4%BB%85%E6%98%AF%E6%8A%80%E6%9C%AF%E6%9B%B4%E6%98%AF%E6%A2%A6%E6%83%B3%0A*%20%E7%AC%AC%E4%BA%8C%E9%A1%B9%0A%0A%2F%2F%E4%BB%A3%E7%A0%81%0A%60printf()%60%20%E5%87%BD%E6%95%B0%0A%0A%2F%2F%E4%BB%A3%E7%A0%81%E5%9D%97%20%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%AE%9A%E8%AF%AD%E8%A8%80%0A%60%60%60%20javascript%0A%24(document).ready(function%20()%20%7B%0A%20%20%20%20alert(‘RUNOOB’)%3B%0A%7D)%3B%0A%60%60%60%0A%0A%2F%2F%E9%93%BE%E6%8E%A5%0A%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E9%93%BE%E6%8E%A5%5B%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B%5D(https%3A%2F%2Fwww.runoob.com)%0A%0A%2F%2F%E9%AB%98%E7%BA%A7%E9%93%BE%E6%8E%A5%0A%E8%BF%99%E4%B8%AA%E9%93%BE%E6%8E%A5%E7%94%A81%E4%BD%9C%E4%B8%BA%E7%BD%91%E5%9D%80%E5%8F%98%E9%87%8F%5Bgoogle%5D%5B1%5D%0A%E8%BF%99%E4%B8%AA%E9%93%BE%E6%8E%A5%E7%94%A8runoob%E4%BD%9C%E4%B8%BA%E7%BD%91%E5%9D%80%E5%8F%98%E9%87%8F%5BRunoob%5D%5Brunoob%5D%0A%E7%84%B6%E5%90%8E%E5%9C%A8%E6%96%87%E6%A1%A3%E7%9A%84%E7%BB%93%E5%B0%BE%E4%B8%BA%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%EF%BC%88%E7%BD%91%E5%9D%80%EF%BC%89%0A%5B1%5D%3A%20http%3A%2F%2Fwww.google.com%0A%5Brunoob%5D%3A%20http%3A%2F%2Fwww.runoob.com%0A%0A%2F%2F%E5%9B%BE%E7%89%87%0A!%5Balt%E5%80%BC%20%E5%B1%9E%E6%80%A7%E6%96%87%E6%9C%AC%5D(http%3A%2F%2Fstatic.runoob.com%2Fimages%2Frunoob-logo.png%20%22title%E5%80%BC%20%E5%8F%AF%E9%80%89%E6%A0%87%E9%A2%98%22)%0A%0A%2F%2F%E5%BD%93%E7%84%B6%EF%BC%8C%E4%BD%A0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%83%8F%E7%BD%91%E5%9D%80%E9%82%A3%E6%A0%B7%E5%AF%B9%E5%9B%BE%E7%89%87%E7%BD%91%E5%9D%80%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F%0A%E8%BF%99%E4%B8%AA%E9%93%BE%E6%8E%A5%E7%94%A8%201%20%E4%BD%9C%E4%B8%BA%E7%BD%91%E5%9D%80%E5%8F%98%E9%87%8F%20%5BRUNOOB%5D%5Bimg%5D%0A%5Bimg%5D%3A%20http%3A%2F%2Fstatic.runoob.com%2Fimages%2Frunoob-logo.png%0A%0A%2F%2F%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8img%E6%A0%87%E7%AD%BE%EF%BC%8C%E8%AE%BE%E7%BD%AE%E9%AB%98%E5%AE%BD%0A%3Cimg%20src%3D%22http%3A%2F%2Fstatic.runoob.com%2Fimages%2Frunoob-logo.png%22%20width%3D%2250%25%22%3E%0A%0A%2F%2F%E8%A1%A8%E6%A0%BC%0A%2F%2F-%3A%C2%A0%E8%AE%BE%E7%BD%AE%E5%86%85%E5%AE%B9%E5%92%8C%E6%A0%87%E9%A2%98%E6%A0%8F%E5%B1%85%E5%8F%B3%E5%AF%B9%E9%BD%90%E3%80%82%0A%2F%2F%3A-%C2%A0%E8%AE%BE%E7%BD%AE%E5%86%85%E5%AE%B9%E5%92%8C%E6%A0%87%E9%A2%98%E6%A0%8F%E5%B1%85%E5%B7%A6%E5%AF%B9%E9%BD%90%E3%80%82%0A%2F%2F%3A-%3A%C2%A0%E8%AE%BE%E7%BD%AE%E5%86%85%E5%AE%B9%E5%92%8C%E6%A0%87%E9%A2%98%E6%A0%8F%E5%B1%85%E4%B8%AD%E5%AF%B9%E9%BD%90%E3%80%82%0A%7C%20%E8%A1%A8%E5%A4%B4%20%7C%20%E8%A1%A8%E5%A4%B4%20%7C%0A%7C%20%3A----%20%7C%20----%3A%20%7C%0A%7C%20%E5%8D%95%E5%85%83%E6%A0%BC%20%7C%20%E5%8D%95%E5%85%83%E6%A0%BC%20%7C%0A%7C%20%E5%8D%95%E5%85%83%E6%A0%BC%20%7C%20%E5%8D%95%E5%85%83%E6%A0%BC%20%7C","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Markdown","slug":"技术向/Markdown","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/"},{"name":"Markdown_教程_菜鸟教程","slug":"技术向/Markdown/Markdown-教程-菜鸟教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown-%E6%95%99%E7%A8%8B-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"菜鸟教程","slug":"菜鸟教程","permalink":"http://blog.hooy.xyz/tags/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"}],"author":"hooy"},{"title":"第九章_集合","slug":"技术向/Java/Java核心技术/第九章_集合","date":"2020-06-17T16:00:00.000Z","updated":"2022-05-10T09:57:56.436Z","comments":true,"path":"技术向/Java/Java核心技术/第九章_集合/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B9%9D%E7%AB%A0_%E9%9B%86%E5%90%88/","excerpt":"","text":"第九章 集合 9.1.3 迭代器","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"Java核心技术","slug":"技术向/Java/Java核心技术","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Cay S.Horstmann","slug":"Cay-S-Horstmann","permalink":"http://blog.hooy.xyz/tags/Cay-S-Horstmann/"}],"author":"hooy"},{"title":"常用继承类或实现接口","slug":"技术向/Java/Java核心技术/常用继承类或实现接口","date":"2020-06-04T16:00:00.000Z","updated":"2022-05-10T10:43:53.639Z","comments":true,"path":"技术向/Java/Java核心技术/常用继承类或实现接口/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E5%B8%B8%E7%94%A8%E7%BB%A7%E6%89%BF%E7%B1%BB%E6%88%96%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3/","excerpt":"","text":"常用继承类或实现接口 Comparable [interface] 实现此接口，实体类(Bean)对象就可以比较了。 123456public class InterfaceComparable implements Comparable&lt;String&gt; &#123; @Override public int compareTo(String o) &#123; return 0; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"Java核心技术","slug":"技术向/Java/Java核心技术","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"hooy"},{"title":"第八章_泛型程序设计","slug":"技术向/Java/Java核心技术/第八章_泛型程序设计","date":"2020-06-04T16:00:00.000Z","updated":"2022-05-10T09:58:01.882Z","comments":true,"path":"技术向/Java/Java核心技术/第八章_泛型程序设计/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E7%AC%AC%E5%85%AB%E7%AB%A0_%E6%B3%9B%E5%9E%8B%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/","excerpt":"","text":"第八章 泛型程序设计 8.2 定义简单泛型类 规范： E K T 8.3 泛型方法 编译器对一个泛型方法调用最终推断出那种类型？ 8.4 类型变量的限定 要求进来的类型必须实现某个接口进行限制。没有实现的直接编译报错。 8.5.1 类型擦除 类型擦除 - 简书 Java的类型擦除 - 简书 Java虚拟机不认识泛型，因此在编译时根据泛型信息做类型变量替换，如果对泛型的引用还要做强制类型转换。 1.如果泛型T无限定变量，直接用Object替换。 2.如果泛型T有限定变量，则替换成父类的类型。 有关Java泛型转换的事实： 8.6 约束与局限性 [没懂] 这一部分比较庞大且晦涩难懂。 使用Java泛型时需要考虑的一些限制，大多数限制都是由类型擦除引起的。 ** ** 8.7 泛型类型的继承规则 8.8.1 通配符概念 &lt;? extends Employee&gt;限定Employee的子类，限定”上界” &lt;? super Manager&gt;限定Manager的超类，限定”下界” 如何理解 Java 中的 &lt;T extends Comparable&lt;? super T&gt;&gt; 如何理解 Java 中的 &lt;T extends Comparable&lt;? super T&gt;&gt; - 小米干饭 - 博客园 8.8.3 无限定通配符 8.8.4 通配符捕获","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"Java核心技术","slug":"技术向/Java/Java核心技术","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Cay S.Horstmann","slug":"Cay-S-Horstmann","permalink":"http://blog.hooy.xyz/tags/Cay-S-Horstmann/"}],"author":"hooy"},{"title":"第七章_异常、断言和日志","slug":"技术向/Java/Java核心技术/第七章_异常、断言和日志","date":"2020-06-03T16:00:00.000Z","updated":"2022-05-10T09:58:49.916Z","comments":true,"path":"技术向/Java/Java核心技术/第七章_异常、断言和日志/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%83%E7%AB%A0_%E5%BC%82%E5%B8%B8%E3%80%81%E6%96%AD%E8%A8%80%E5%92%8C%E6%97%A5%E5%BF%97/","excerpt":"","text":"第七章 异常、断言和日志 7.1.1 异常分类 术语：非受查异常和受查异常 非受查异常：派生于Error或RuntimeException 受查异常：其他所有的异常称为受查异常 一个方法必须声明所有可能抛出的受查异常，非受查异常要么不可控制（Error），要么就应该避免（RuntimeException）。当方法没有声明所有可能发生的受查异常，编译器会发出一个错误消息。 RuntimeException属于程序本身的问题，应避免出现。 Throwable 常用API 7.2.2 捕获多个异常 7.2.3 再次抛出异常与异常链 7.2.5 带资源的try语句 为什么要使用带资源的try语句？ finally代码块内的语句有可能也会抛出异常，会将try代码块内的异常覆盖掉，丢失原始异常信息。 注意： 实例对象必须实现AutoCloseable或其子接口才可以放在try后面。 例如FileInputStream类，实现了接口。 AutoCloseable和Closeable的关系？ AutoCloseable是Closeable的父类。 可以说，Closeable接口是IO包的专属接口。 7.2.6 分析堆栈轨迹元素 静态的Thread.getAllStackTrace方法，根据Thread线程对象返回StackTraceElement对象数组（每一个都是一条堆栈轨迹记录） 异常常用API void printStackTrace() 用于打印全部的堆栈记录。 7.4.1 断言概念 关键字：assert JDK自带的断言 7.4.2 启用和禁用断言 类加载器 API 启用和禁用断言，和类加载器类有关 7.5.1 基本日志 JDK自带的logger日志 log4j日志优先级 工作中常用log4j作为日志组件 logger日志 注意：由于书和资料的称呼不同，处理器和控制器是****同一个东西 优先级 默认级别：INFO 定义日志记录器名时，推荐使用包命名格式。如下： 如何将日志输出到控制台或者文件中？ 默认输出至控制台，一般不用使用ConsoleHandler类。 默认输出的文件格式为XML 如何对日志格式化？ 对控制器（***Handler）类的setFormatter方法内实现Formatter抽象类。 扩展：Formatter抽象类。 java.util.logging.Formatter 实现的是format抽象方法。 java.util.logging.Logger使用详解 - 山高我为峰 - 博客园 7.5.3 修改日志管理器配置 7.5.5 处理器 也就是上面所说的控制器，是同一个东西。 处理器类 ConsoleHandler：将日志输出至控制台 FileHandler：将日志输出至指定文件 -&gt; 默认输出XML格式，通过格式化可以改成其他格式 SocketHandler：将日志输出至指定主机和端口 7.5.6 过滤器 7.5.7 格式化器 有关JDK自带日志Logger类的常用API","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"Java核心技术","slug":"技术向/Java/Java核心技术","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Cay S.Horstmann","slug":"Cay-S-Horstmann","permalink":"http://blog.hooy.xyz/tags/Cay-S-Horstmann/"}],"author":"hooy"},{"title":"第六章_接口、lambda表达式与内部类","slug":"技术向/Java/Java核心技术/第六章_接口、lambda表达式与内部类","date":"2020-06-01T16:00:00.000Z","updated":"2022-05-10T09:58:31.572Z","comments":true,"path":"技术向/Java/Java核心技术/第六章_接口、lambda表达式与内部类/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E7%AC%AC%E5%85%AD%E7%AB%A0_%E6%8E%A5%E5%8F%A3%E3%80%81lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E5%86%85%E9%83%A8%E7%B1%BB/","excerpt":"","text":"第六章 接口、lambda表达式与内部类 6.1.1 接口概念 不同子类之间进行比较的解决方式。 6.1.2 接口的特性 6.1.4 静态方法 同类一样，static修饰将属于类。也就是属于该接口。 InterfaceDemo.java 在接口实现方法过程，是不符合接口规范的。 12345678910public interface InterfaceDemo &#123; //接口里的静态方法需要实现。 static int getInt1() &#123; return 0; &#125; //常规 int getInt2(); //public int getInt2(); int INTNUM = 1; //private static final int INTNUM = 1;&#125; 6.1.5 默认方法 DefaultInterface.java 接口，default修饰的方法，在实现此接口的子类里是可选择实现的。 123456public interface DefaultInterface &#123; int getInt(); double getDouble(); //加入default关键字，此方法作为可选。没有该关键字修饰的方法，继承接口后将必须实现方法。 default byte getByte()&#123;return 0;&#125;&#125; DefaultInterfaceDemo.java 12345678910111213public class DefaultInterfaceDemo implements DefaultInterface &#123; @Override public int getInt() &#123; return 0; &#125; @Override public double getDouble() &#123; return 0; &#125; //可以不实现getByte()方法。&#125; 6.1.6 解决默认方法冲突 1.超类优先 [类优先原则] 2.接口冲突 浅拷贝 可以看出，clone方法仅克隆第一层，第一次引用的对象（实际上是原封不动的复制地址）不变。 术语：标记接口 深拷贝的clone方法的例子： 实现Cloneable接口，最好也重写下clone()方法，调用super.clone()就行。 6.3.2 lambda表达式的语法 6.3.3 函数式接口 术语：函数式接口 最好把lambda表达式看作是一个函数，而不是一个对象。 P1 1.lambda表达式会用了么 6.3.4 方法引用 6.3.5 构造器引用 6.3.6 变量作用域 lambda包含3个部分 参数； 代码块； 自由变量的值，这里指非参数而且不在代码中定义的变量。 12345自由变量参数 -&gt; &#123; 代码块&#125; 术语：闭包 什么是闭包？ TODO: lambda表达式所捕获的自由变量必须是个死值，不会被重新赋值或者改变。 6.3.7 处理lambda表达式 [没懂] 6.4.1 使用内部类访问对象状态 内部类可以直接访问到外围类的域。 源码： 12345678910111213141516171819202122232425262728293031323334353637383940import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.Date;public class InnerClassTest &#123; public static void main(String[] args) &#123; TalkingClock clock = new TalkingClock(1000,true); clock.start(); JOptionPane.showMessageDialog(null,&quot;Quit program ?&quot;); System.exit(0); &#125;&#125;class TalkingClock&#123; private int interval; private boolean beep; //构造器 public TalkingClock(int interval,boolean beep)&#123; this.interval = interval; this.beep = beep; &#125; public void start()&#123; ActionListener listener = new TimePrinter(); Timer t = new Timer(interval,listener); t.start(); &#125; public class TimePrinter implements ActionListener&#123; @Override public void actionPerformed(ActionEvent e) &#123; System.out.println(&quot;At the tone,the time is &quot; + new Date()); if(beep) Toolkit.getDefaultToolkit().beep(); &#125; &#125;&#125; 6.4.2 内部类的特殊语法规则 6.4.3 内部类是否有用、必要和安全 6.4.4 局部内部类 内部类和局部内部类的区别。 内部类，内部类和外部类的方法在同一级。 局部内部类，局部内部类在外部类的方法里面。 6.4.6 匿名内部类 习惯做法是用匿名内部类实现事件监听器和其他回调。 lambda表达式的应用。 技巧：双括号初始化 注意：这个技巧是为ArrayList类并入了新的代码块，所以被执行。因此和原生ArrayList再做Class类对比的时候，会失败。 getClass()在静态方法里遇到的问题。 [没懂] 6.5.2 创建代理对象 12//参数：加载器 接口 处理器Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),invocationHandler); 代理Proxy详解： 代理 Proxy 6.5.3 代理类的特性","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"Java核心技术","slug":"技术向/Java/Java核心技术","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Cay S.Horstmann","slug":"Cay-S-Horstmann","permalink":"http://blog.hooy.xyz/tags/Cay-S-Horstmann/"}],"author":"hooy"},{"title":"代理_Proxy","slug":"技术向/Java/Java核心技术/代理_Proxy","date":"2020-05-28T16:00:00.000Z","updated":"2022-05-10T09:58:08.828Z","comments":true,"path":"技术向/Java/Java核心技术/代理_Proxy/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E4%BB%A3%E7%90%86_Proxy/","excerpt":"","text":"代理 代理 Proxy **参考： ** https://www.jianshu.com/p/8ccdbe00ff06 Java代理（Proxy）模式 - 简书 三种代理 静态代理 JDK动态代理 Cglib代理 理解代理 被代理的对象称之为目标对象。 通过代理模式生成的对象称之为代理对象。它并没有真身（在硬盘上对应的.class文件），而是生成的一个对象并直接存于内存当中。 它可以在目标对象所提供的功能基础上额外提供一些逻辑或功能。 Proxy类，参数： 加载器（获取代码固定的： 目标对象 处理器（ JDK动态代理 AdminService.java 定义接口。 123456package proxy.jdk;public interface AdminService &#123; void update(); Object find();&#125; AdminServiceImpl.java 实现接口。 1234567891011121314package proxy.jdk;public class AdminServiceImpl implements AdminService &#123; @Override public void update() &#123; System.out.println(&quot;修改管理系统数据&quot;); &#125; @Override public Object find() &#123; System.out.println(&quot;查看管理系统数据&quot;); return new Object(); &#125;&#125; AdminServiceInvocation.java 处理器。 12345678910111213141516171819202122232425package proxy.jdk;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;/*** 处理器 继承InvocationHandler接口*/public class AdminServiceInvocation implements InvocationHandler &#123; private Object target; public AdminServiceInvocation(Object target)&#123; this.target = target; &#125; //代理对象增加的逻辑代码 @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; System.out.println(&quot;判断用户是否有权限进行操作&quot;); Object obj = method.invoke(target); System.out.println(&quot;记录用户执行操作的用户信息、更改内容和时间等&quot;); return obj; &#125;&#125; AdminServiceDynamicProxy.java 动态代理类。 1234567891011121314151617181920212223package proxy.jdk;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Proxy;/*** 动态代理类*/public class AdminServiceDynamicProxy &#123; private Object target; private InvocationHandler invocationHandler; public AdminServiceDynamicProxy(Object target, InvocationHandler invocationHandler) &#123; this.target = target; this.invocationHandler = invocationHandler; &#125; //获取代理对象 public Object getPersonProxy()&#123; Object obj = Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),invocationHandler); return obj; &#125;&#125; DynamicProxyTest.java 测试类。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package proxy.jdk;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;public class DynamicProxyTest &#123; public static void main(String[] args) &#123; /*方法一*/ System.out.println(&quot;============ 方法一 ==============&quot;); //接口声明 引用实现类 AdminService adminService = new AdminServiceImpl(); System.out.println(&quot;代理的目标对象：&quot; + adminService.getClass()); //获取处理器 把目标对象放进去 AdminServiceInvocation adminServiceInvocation = new AdminServiceInvocation(adminService); //获取代理对象 AdminService proxy = (AdminService) new AdminServiceDynamicProxy(adminService,adminServiceInvocation).getPersonProxy(); System.out.println(&quot;代理对象：&quot; + proxy.getClass()); Object obj = proxy.find(); System.out.println(&quot;find 返回对象：&quot; + obj.getClass()); System.out.println(&quot;----------------------------------&quot;); proxy.update(); /*方法三 * 不用单独写AdminServiceInvocation和AdminServiceDynamicProxy类，直接写在这里 */ System.out.println(&quot;============ 方法三 ==============&quot;); final AdminService target3 = new AdminServiceImpl(); //获取代理对象 AdminService proxy3 = (AdminService) Proxy.newProxyInstance(target3.getClass().getClassLoader(), target3.getClass().getInterfaces(), new InvocationHandler() &#123; //匿名内部类实现InvocationHandler接口 public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; System.out.println(&quot;判断用户是否有权限进行操作&quot;); Object obj = method.invoke(target3, args); System.out.println(&quot;记录用户执行操作的用户信息、更改内容和时间等&quot;); return obj; &#125; &#125;); /*//尝试使用lambda表达式 AdminService proxy3 = (AdminService) Proxy.newProxyInstance(target3.getClass().getClassLoader(), target3.getClass().getInterfaces(), (Object proxy1, Method method, Object[] args1) -&gt; &#123; System.out.println(&quot;判断用户是否有权限进行操作&quot;); Object obj1 = method.invoke(target3, args1); System.out.println(&quot;记录用户执行操作的用户信息、更改内容和时间等&quot;); return obj1; &#125;);*/ Object obj3 = proxy3.find(); System.out.println(&quot;find 返回对象：&quot; + obj3.getClass()); System.out.println(&quot;----------------------------------&quot;); proxy3.update(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"Java核心技术","slug":"技术向/Java/Java核心技术","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"hooy"},{"title":"Method类里的invoke方法","slug":"技术向/Java/Java核心技术/Method类里的invoke方法","date":"2020-05-23T16:00:00.000Z","updated":"2022-05-10T10:01:33.489Z","comments":true,"path":"技术向/Java/Java核心技术/Method类里的invoke方法/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/Method%E7%B1%BB%E9%87%8C%E7%9A%84invoke%E6%96%B9%E6%B3%95/","excerpt":"","text":"反射 Method类里的invoke方法 InvokeDemo.java 123456789101112131415161718192021222324252627282930package reflex;import java.lang.reflect.Method;public class InvokeDemo &#123; public static void main(String[] args) &#123; try &#123; //Class.getMethod(方法名，形参) 区分重载方法 Method staticDemo = InvokeDemo.class.getMethod(&quot;staticInvoke&quot;, int.class); //静态方法属于类 因此第一个参数作为实例对象为空，后面的参数为staticDemo这个方法对象的形参。 staticDemo.invoke(null,10); Method demo = InvokeDemo.class.getMethod(&quot;methodInvoke&quot;,int.class); //实例化对象 InvokeDemo id = new InvokeDemo(); //普通方法属于对象，因此需要先实例化一个对象。第一个参数作为实例对象，后面的参数为demo这个方法对象的形参。 demo.invoke(id,20); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; public static void staticInvoke(int params)&#123; System.out.println(params); &#125; public void methodInvoke(int params)&#123; System.out.println(params); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"Java核心技术","slug":"技术向/Java/Java核心技术","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"hooy"},{"title":"第五章_对象与类","slug":"技术向/Java/Java核心技术/第五章_对象与类","date":"2020-05-23T16:00:00.000Z","updated":"2022-05-10T09:59:54.496Z","comments":true,"path":"技术向/Java/Java核心技术/第五章_对象与类/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%94%E7%AB%A0_%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/","excerpt":"","text":"第五章 对象与类 术语：动态绑定 术语：静态绑定 理解方法调用 术语：解析重载 阻止继承 术语：内联 instanceof 检查类型转换 抽象类 hashCode_API Object API ArrayList API Integer API Enum API 枚举类常用API 反射 Field域 Method方法 Constructor构造器及其方法 5.7.4 在运行时使用反射分析对象 解决以上问题，不受访问权限的约束。 调用Field、Method或Constructor对象的setAccessible方法。 1setAccessible(true); 5.7.6调用任意方法 Method类里的invoke方法","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"Java核心技术","slug":"技术向/Java/Java核心技术","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Cay S.Horstmann","slug":"Cay-S-Horstmann","permalink":"http://blog.hooy.xyz/tags/Cay-S-Horstmann/"}],"author":"hooy"},{"title":"Field域_Method方法_Constructor构造器及其方法","slug":"技术向/Java/Java核心技术/Field域_Method方法_Constructor构造器及其方法","date":"2020-05-22T16:00:00.000Z","updated":"2022-05-10T10:00:59.532Z","comments":true,"path":"技术向/Java/Java核心技术/Field域_Method方法_Constructor构造器及其方法/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/Field%E5%9F%9F_Method%E6%96%B9%E6%B3%95_Constructor%E6%9E%84%E9%80%A0%E5%99%A8%E5%8F%8A%E5%85%B6%E6%96%B9%E6%B3%95/","excerpt":"","text":"反射 Field域 Method方法 Constructor构造器及其方法 用以下Demo演示以上对象的常用方法。 ReflectionTest.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103package reflex;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.util.Scanner;public class ReflectionTest &#123; public static void main(String[] args) &#123; String name; if(args.length &gt; 0) name = args[0]; else &#123; Scanner in = new Scanner(System.in); System.out.println(&quot;Enter class name (e.g.java.util.Date):&quot;); name = in.next(); &#125; try &#123; Class cl = Class.forName(name); Class supercl = cl.getSuperclass(); String fodifiers = Modifier.toString(cl.getModifiers()); if(supercl != null &amp;&amp; supercl != Object.class) System.out.println(&quot;extends&quot; + supercl.getName()); System.out.println(&quot;\\n&#123;\\n&quot;); printConstructors(cl); System.out.println(); printMethods(cl); System.out.println(); printFields(cl); System.out.println(&quot;&#125;&quot;); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; System.exit(0); &#125; //域 private static void printFields(Class cl) &#123; //获取这个类里面所有的成员变量，包含父类的成员变量。 //如果仅获取这个类的所有成员变量，使用.getDeclaredFields()方法。 Field[] fields = cl.getFields(); for(Field f : fields)&#123; //获取成员变量的类型 返回的也是个Class对象 可以使用.getName获取类名（全名，包含包名）。 Class type = f.getType(); //获取成员变量的变量名。 String name = f.getName(); System.out.println(&quot; &quot;); //Java修饰符 如：public static final等 //修饰符集合被表示为具有表示不同修饰符的不同位位置的整数 //成员变量对象的.getModifiers()方法获取整数值，再通过Modifier.toString()方法解码成对应的字符串。 //System.out.println(&quot;注意，这是Java修饰符：&quot; + f.getModifiers()); String modifiers = Modifier.toString(f.getModifiers()); if(modifiers.length() &gt; 0) System.out.println(modifiers + &quot;&quot;); System.out.println(type.getName() + &quot; &quot; + name + &quot;;&quot;); &#125; &#125; //方法 private static void printMethods(Class cl) &#123; //Method方法对象 Method[] methods = cl.getMethods(); for(Method m : methods)&#123; //获取方法返回类型 Class retType = m.getReturnType(); String name = m.getName(); System.out.println(&quot; &quot;); String modifiers = Modifier.toString(m.getModifiers()); if(modifiers.length() &gt; 0) System.out.println(modifiers + &quot;&quot;); System.out.println(retType.getName() + &quot; &quot; + name + &quot;(&quot;); //获取方法异常参数类型 Class[] paramTypes = m.getExceptionTypes(); for(int j=0;j&lt;paramTypes.length;j++)&#123; if(j &gt; 0) System.out.println(&quot;,&quot;); System.out.println(paramTypes[j].getName()); &#125; System.out.println(&quot;);&quot;); &#125; &#125; //构造器 private static void printConstructors(Class cl) &#123; //构造器对象 Constructor[] constructors = cl.getConstructors(); for(Constructor c : constructors)&#123; String name = c.getName(); System.out.println(&quot; &quot;); String modifiers = Modifier.toString(c.getModifiers()); if(modifiers.length() &gt; 0) System.out.println(modifiers + &quot;&quot;); System.out.println(name + &quot;(&quot;); //获取构造器形参类型 Class[] paramTypes = c.getParameterTypes(); for(int j=0;j&lt;paramTypes.length;j++)&#123; if(j &gt; 0) System.out.println(&quot;,&quot;); System.out.println(paramTypes[j].getName()); &#125; System.out.println(&quot;);&quot;); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"Java核心技术","slug":"技术向/Java/Java核心技术","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"hooy"},{"title":"探究Class类","slug":"技术向/Java/Java核心技术/探究Class类","date":"2020-05-21T16:00:00.000Z","updated":"2022-05-10T10:00:21.630Z","comments":true,"path":"技术向/Java/Java核心技术/探究Class类/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E6%8E%A2%E7%A9%B6Class%E7%B1%BB/","excerpt":"","text":"Class类 探究Class类 **参考： ** https://blog.csdn.net/liuxiao723846/article/details/90346160?utm_medium&#x3D;distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source&#x3D;distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase Class类相当于这个类所有实例的代言人，它包含有关这个类的详细信息。 Class类的对象作用是运行时提供或获得某个对象的类型信息，这点对于反射技术很重要。 在Java中用来表示运行时类型信息的对应类就是Class类，Class类也是一个实实在在的类，存在于JDK的java.lang包中。 我们写的.java类文件经过编译，创建一个Class对象并写入到同名.class字节码文件里。即编译后的字节码文件保存的就是Class对象。 Class对象的作用 当我们new一个新对象或者引用静态成员变量时，Java虚拟机(JVM)中的类加载器子系统会将对应Class对象(实际上加载的就是这个类的字节码文件)加载到JVM中，然后JVM再根据这个Class对象创建我们需要的实例对象或者提供静态变量的引用值。 无论创建多少个实例对象，在JVM中都只有一个Class对象与其对应，即在内存中每个类有且仅有一个相对应的Class对象。 Class类只有私有构造函数，因此对应Class对象只能有JVM创建和加载。 JVM是懒加载，当要用到的类才将其加载到JVM里。 三种方式获取Class对象 Class.forName：特点是无需通过持有该类的实例对象引用而获取Class对象。通俗的说，JVM懒加载还没有加载某一个类，这时叫JVM去把这个类加载进来。 实例对象.getClass()： getClass方法从顶级类Object继承而来的，获取这个类的Class对象。 类名.class：更简单安全高效。通过字面量的方式获取Class对象的引用不会自动初始化该类。 1234567891011121314151617181920public static void main(String[] args) &#123;try&#123; //通过Class.forName获取Gum类的Class对象 Class clazz=Class.forName(&quot;com.zejian.Gum&quot;); System.out.println(&quot;forName=clazz:&quot;+clazz.getName());&#125;catch (ClassNotFoundException e)&#123; e.printStackTrace();&#125;//通过实例对象获取Gum的Class对象Gum gum = new Gum();Class clazz2=gum.getClass();System.out.println(&quot;new=clazz2:&quot;+clazz2.getName());//字面常量的方式获取Class对象Class clazz3 = Gum.class;System.out.println(&quot;new=clazz3:&quot;+clazz3.getName());&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"Java核心技术","slug":"技术向/Java/Java核心技术","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"hooy"},{"title":"Java代码小技巧","slug":"技术向/Java/Java核心技术/Java代码小技巧","date":"2020-05-19T16:00:00.000Z","updated":"2022-05-10T10:01:15.526Z","comments":true,"path":"技术向/Java/Java核心技术/Java代码小技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/Java%E4%BB%A3%E7%A0%81%E5%B0%8F%E6%8A%80%E5%B7%A7/","excerpt":"","text":"Java代码小技巧 double转long或int数据类型 123double Double = 1.1;long Long = Math.round(Double);int Int = (int)Math.round(Double); 将布尔类型转成数字类型 123//将布尔类型转成数字类型boolean flagBool = true;int flagInt = flagBool ? 1 : 0; 检测空串的方法 123//检测空串的方法String str = &quot;&quot;;System.out.println(str.length() == 0); 查找某个字符在字符串最后一次出现的位置 1234//返回与字符串 str 或代码点 cp 匹配的最后一个子串的开始位置。String str = &quot;hooyant/sing&quot;;int index = str.indexOf(&quot;/&quot;);System.out.println(index); 无参构造器 人为手动初始化，避免出现默认的0，false和null。 打印数组 1234//一维Arrays.toString(array);//多维Arrays.deepToString(array);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"Java核心技术","slug":"技术向/Java/Java核心技术","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"hooy"},{"title":"直接输出对象带有一串地址和对象hashCode关系","slug":"技术向/Java/Java核心技术/直接输出对象带有一串地址和对象hashCode关系","date":"2020-05-19T16:00:00.000Z","updated":"2022-05-10T10:00:40.211Z","comments":true,"path":"技术向/Java/Java核心技术/直接输出对象带有一串地址和对象hashCode关系/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E7%9B%B4%E6%8E%A5%E8%BE%93%E5%87%BA%E5%AF%B9%E8%B1%A1%E5%B8%A6%E6%9C%89%E4%B8%80%E4%B8%B2%E5%9C%B0%E5%9D%80%E5%92%8C%E5%AF%B9%E8%B1%A1hashCode%E5%85%B3%E7%B3%BB/","excerpt":"","text":"直接输出对象带有一串地址和对象hashCode关系 起因： 根据上图，散列码就是hash值。但印象中直接输出对象得到的一串地址和输出对象的hash值并不相同。 测试与结果： 可以发现，输出结果似乎确实不同。 查阅资料： 援引： https://blog.csdn.net/zhyazaq/article/details/82659660?utm_medium&#x3D;distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source&#x3D;distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase 原来如此。它将hashCode从十进制转成十六进制了，所以看起来不一样，实际上是同一个值。 结论： 论题所提到的两个值是相等的，均是hashCode值（散列码）。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"Java核心技术","slug":"技术向/Java/Java核心技术","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"}],"tags":[],"author":"hooy"},{"title":"第四章_对象与类","slug":"技术向/Java/Java核心技术/第四章_对象与类","date":"2020-05-08T16:00:00.000Z","updated":"2022-05-10T09:59:33.816Z","comments":true,"path":"技术向/Java/Java核心技术/第四章_对象与类/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/","excerpt":"","text":"第四章 对象与类 静态方法 this参数也称为隐式参数。方法上的形参称为显式参数。 静态工厂 https://www.jianshu.com/p/ceb5ec8f1174 方法参数 基本数据类型（数字、布尔值） 复制的是变量值，操作后由于没有return，因此复制的那一份被丢弃。 对象引用 复制的是对象地址，而两个对象变量指向同一个对象，因此操作被保留。 this调用另一个构造器 初始化块 类初始化顺序 静态块Static{} 静态导入 包密封 注释与生成文档 javadoc","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"Java核心技术","slug":"技术向/Java/Java核心技术","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Cay S.Horstmann","slug":"Cay-S-Horstmann","permalink":"http://blog.hooy.xyz/tags/Cay-S-Horstmann/"}],"author":"hooy"},{"title":"第三章_Java的基本程序设计结构","slug":"技术向/Java/Java核心技术/第三章_Java的基本程序设计结构","date":"2020-05-07T16:00:00.000Z","updated":"2022-05-10T09:59:12.890Z","comments":true,"path":"技术向/Java/Java核心技术/第三章_Java的基本程序设计结构/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%89%E7%AB%A0_Java%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84/","excerpt":"","text":"第三章 Java的基本程序设计结构 数据类型 strictfp关键字 加入该关键字将严格浮点计算，在浮点数计算的过程中，所有中间计算都必须截断。可能会产生溢出，并且截断操作消耗时间。 在main方法中的所有指令都将使用严格的浮点计算，如果将一个类标记为strictfp，这个类中的所有方法都要使用严格的浮点计算。 1public static strictfp void main(String[] args) 常量 位运算符 数学函数与常量 四舍五入：Math.round()，参数double，返回long。 推荐double类型数据转long或者int时使用。 数值类型之间的转换 测试： 123456//类型转换测试int number = 123456789;float numberF = number;double numberD = number;System.out.println(&quot;float:&quot; + numberF);System.out.println(&quot;double:&quot; + numberD); 结果： float丢失精度，double不受影响。 子串 .substring(a,b) String常用API 构造字符串 StringBuilder StringBuffer是StringBuilder的前身，对前者的效率进行了改进。 StringBuilder常用API 测试： 1234//位置插入一个字符串并返回 thisStringBuilder sb = new StringBuilder(&quot;hooyant/sing&quot;);sb.insert(sb.indexOf(&quot;/&quot;),&quot;OK&quot;);System.out.println(sb.toString()); 结果： %!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;) Scanner常用API 格式化输出 System.out.printf 测试： 1234//日期格式化符号 %索引$t转换符//索引：对应后面第几个参数 从1开始计数System.out.println(new Date());System.out.printf(&quot;%1$tF %1$tT&quot;,new Date()); 结果： 文件输入与输出 中断控制流程语句 测试： 12345678910go:for(int i=0;i&lt;10;i++)&#123; for(int j=0;j&lt;10;j++)&#123; System.out.println(i+&quot;,&quot;+j); if(i==2)&#123; break go; &#125; &#125;&#125;System.out.println(&quot;结束&quot;); 结果： 大数值 大数值常用API ** ** Array常用API 测试： 12345678//数组APIint[] ab = &#123;1, 5, 7, 9, 4, 6, 2&#125;;//由小到大排序Arrays.sort(ab);System.out.println(Arrays.toString(ab));//找到返回索引，否则负值int index = Arrays.binarySearch(ab,2);System.out.println(index); 结果： %!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;)","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"Java核心技术","slug":"技术向/Java/Java核心技术","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Cay S.Horstmann","slug":"Cay-S-Horstmann","permalink":"http://blog.hooy.xyz/tags/Cay-S-Horstmann/"}],"author":"hooy"},{"title":"图片处理-后盾人-pdf","slug":"技术向/HTML/HTML看这个就够了_全面打通HTML前端开发知识点/图片处理-后盾人-pdf","date":"2020-05-05T16:00:00.000Z","updated":"2022-06-15T08:32:50.155Z","comments":true,"path":"技术向/HTML/HTML看这个就够了_全面打通HTML前端开发知识点/图片处理-后盾人-pdf/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/HTML%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9AHTML%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86-%E5%90%8E%E7%9B%BE%E4%BA%BA-pdf/","excerpt":"","text":"图片处理-后盾人.pdf","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"HTML","slug":"技术向/HTML","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/"},{"name":"HTML看这个就够了_全面打通HTML前端开发知识点","slug":"技术向/HTML/HTML看这个就够了-全面打通HTML前端开发知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/HTML%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9AHTML%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"基本标签-后盾人-pdf","slug":"技术向/HTML/HTML看这个就够了_全面打通HTML前端开发知识点/基本标签-后盾人-pdf","date":"2020-05-05T16:00:00.000Z","updated":"2022-06-15T08:32:50.156Z","comments":true,"path":"技术向/HTML/HTML看这个就够了_全面打通HTML前端开发知识点/基本标签-后盾人-pdf/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/HTML%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9AHTML%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE-%E5%90%8E%E7%9B%BE%E4%BA%BA-pdf/","excerpt":"","text":"基本标签-后盾人.pdf","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"HTML","slug":"技术向/HTML","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/"},{"name":"HTML看这个就够了_全面打通HTML前端开发知识点","slug":"技术向/HTML/HTML看这个就够了-全面打通HTML前端开发知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/HTML%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9AHTML%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"学习总结","slug":"技术向/HTML/HTML看这个就够了_全面打通HTML前端开发知识点/学习总结","date":"2020-05-05T16:00:00.000Z","updated":"2022-06-15T08:32:50.156Z","comments":true,"path":"技术向/HTML/HTML看这个就够了_全面打通HTML前端开发知识点/学习总结/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/HTML%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9AHTML%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/","excerpt":"","text":"A 学习总结 #页面结构 内容标题 h1~h6 标题最好不要嵌套如 h1内部包含 h2 123456&lt;h1&gt;后盾人&lt;/h1&gt;&lt;h2&gt;houdunren.com&lt;/h2&gt;&lt;h3&gt;hdcms.com&lt;/h3&gt;&lt;h4&gt;houdunwang.com&lt;/h4&gt;&lt;h5&gt;doc.houdunren.com&lt;/h5&gt;&lt;h6&gt;www.hdcms.com&lt;/h6&gt; 页眉页脚 header 123456789101112131415161718&lt;body&gt; &lt;header&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;系统学习&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;视频库&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/header&gt; &lt;article&gt; &lt;h2&gt;后盾人网站动态&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;完成签到 开心每一天&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;完成签到 来了，老铁&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/article&gt; ...&lt;/body&gt; footer 123456789101112131415&lt;body&gt; ... &lt;article&gt; &lt;h2&gt;后盾人网站动态&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;完成签到 开心每一天&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;完成签到 来了，老铁&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/article&gt; &lt;footer&gt; &lt;p&gt; 我们的使命：传播互联网前沿技术，帮助更多的人实现梦想 &lt;/p&gt; &lt;/footer&gt;&lt;/body&gt; 导航元素 nav 123456789101112&lt;header&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=&quot;&quot;&gt;系统学习&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;&quot;&gt;视频库&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt;&lt;/header&gt; 主要区域 main 一个页面中main元素最好只出现一次。 12345678910111213&lt;body&gt; ... &lt;main&gt; &lt;article&gt; &lt;h2&gt;网站动态&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;完成签到 开心每一天&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;完成签到 来了，老铁&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/article&gt; &lt;/main&gt; ...&lt;/body&gt; 内容区域 article 123456789&lt;main&gt; &lt;article&gt; &lt;h2&gt;后盾人网站动态&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;完成签到 开心每一天&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;完成签到 来了，老铁&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/article&gt;&lt;/main&gt; 区块定义 section 12345678910&lt;main&gt; &lt;article&gt; &lt;section&gt; &lt;h2&gt;锁机制&lt;/h2&gt; &lt;/section&gt; &lt;section&gt; &lt;h2&gt;事物处理&lt;/h2&gt; &lt;/section&gt; &lt;/article&gt;&lt;/main&gt; 附加区域 aside 123456789101112&lt;body&gt; &lt;main&gt; &lt;article&gt; ... &lt;/article&gt; &lt;/main&gt; &lt;aside&gt; &lt;h2&gt;社区小贴&lt;/h2&gt; &lt;p&gt;后盾人是一个主张友好、分享、自由的技术交流社区。&lt;/p&gt; &lt;/aside&gt; &lt;/main&gt;&lt;/body&gt; 通用容器 div 12345678910111213141516171819202122232425262728&lt;div&gt; &lt;header&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;后盾人&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;系统课程&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/header&gt; &lt;main&gt; &lt;article&gt; &lt;section&gt; &lt;h2&gt;事物处理&lt;/h2&gt; &lt;/section&gt; &lt;/article&gt; &lt;aside&gt; &lt;h2&gt;社区小贴&lt;/h2&gt; &lt;p&gt;后盾人是一个主张友好、分享、自由的技术交流社区。&lt;/p&gt; &lt;/aside&gt; &lt;/main&gt; &lt;footer&gt; &lt;p&gt; 我们的使命：传播互联网前沿技术，帮助更多的人实现梦想 &lt;/p&gt; &lt;/footer&gt;&lt;/div&gt; #文本相关 正文 p 123&lt;p&gt;录制视频是一个很费时的工作，老师需要时间录制更多高质量的视频教程。不可能做到随时解答问题，我们希望大家可以互相帮助提升技术，而不是直接简单的获取答案。&lt;/p&gt; pre 原样显示文本内容包括空白、换行等。 1234&lt;pre&gt; 这是pre标签的显示效果 这是换行后的内容，空白和换行都会保留&lt;/pre&gt; 换行 br 无语义 span span标签和div标签都是没有语义的。 描述文本 small 用于描述、声明等文本。 1&lt;small&gt; 半年付 &lt;/small&gt; 时间 time 标签定义日期或时间，或者两者。 1&lt;time&gt; 2019-07-26 &lt;/time&gt; 缩写内容 abbr 1在WWW上，每一信息资源都有统一的且在网上唯一的地址，该地址就叫 &lt;abbr title=&quot;Uniform Resource Locator&quot;&gt;URL&lt;/abbr&gt; 统一资源定位符。 ** ** 下标 sub 1水的化学式为H&lt;sub&gt;2&lt;/sub&gt;O 上标 sup 1请计算5&lt;sup&gt;2&lt;/sup&gt;平方 删除 del del 标签表示删除的内容，ins 一般与 del 标签配合使用描述更新与修正。 1原价 &lt;del&gt;200元&lt;/del&gt; 现价 &lt;ins&gt;100元&lt;/ins&gt; s s 标签显示效果与 del 相似，但语义用来定义那些不正确、不准确或没有用的文本。 12&lt;s&gt;A 太阳是方的&lt;/s&gt;B 地球是圆的 代码 code 加粗 strong 斜体 em 标记 类似生活中的马克笔。 引用 cite 通常表示它所包含的文本对某个参考文献的引用，或文章作者的名子。 1最新版PHP视频教程已经在 &lt;cite&gt;后盾人&lt;/cite&gt; 录制完成。 blockquote 用来定义摘自另一个源的块引用 1234下而是来自某一个大叔，对失败的认知&lt;blockquote cite=&quot;https://www.houdunren.com&quot;&gt; 在坚持的人面前，失败终将被踏过。&lt;/blockquote&gt; q 用于表示行内引用文本，在大部分浏览器中会加上引号。 1最新课程 &lt;q&gt;HTML开启WEB征途&lt;/q&gt; 已经发布了 联系信息 address 用于设置联系地址等信息，一般将address 放在footer 标签中。 123&lt;address&gt; 感谢您提交建议到 2300071698@qq.com&lt;/address&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"HTML","slug":"技术向/HTML","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/"},{"name":"HTML看这个就够了_全面打通HTML前端开发知识点","slug":"技术向/HTML/HTML看这个就够了-全面打通HTML前端开发知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/HTML%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9AHTML%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"学习环境-后盾人-pdf","slug":"技术向/HTML/HTML看这个就够了_全面打通HTML前端开发知识点/学习环境-后盾人-pdf","date":"2020-05-05T16:00:00.000Z","updated":"2022-06-15T08:32:50.157Z","comments":true,"path":"技术向/HTML/HTML看这个就够了_全面打通HTML前端开发知识点/学习环境-后盾人-pdf/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/HTML%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9AHTML%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83-%E5%90%8E%E7%9B%BE%E4%BA%BA-pdf/","excerpt":"","text":"学习环境-后盾人.pdf","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"HTML","slug":"技术向/HTML","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/"},{"name":"HTML看这个就够了_全面打通HTML前端开发知识点","slug":"技术向/HTML/HTML看这个就够了-全面打通HTML前端开发知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/HTML%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9AHTML%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"表单-后盾人-pdf","slug":"技术向/HTML/HTML看这个就够了_全面打通HTML前端开发知识点/表单-后盾人-pdf","date":"2020-05-05T16:00:00.000Z","updated":"2022-06-15T08:32:50.157Z","comments":true,"path":"技术向/HTML/HTML看这个就够了_全面打通HTML前端开发知识点/表单-后盾人-pdf/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/HTML%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9AHTML%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%A1%A8%E5%8D%95-%E5%90%8E%E7%9B%BE%E4%BA%BA-pdf/","excerpt":"","text":"表单-后盾人.pdf","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"HTML","slug":"技术向/HTML","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/"},{"name":"HTML看这个就够了_全面打通HTML前端开发知识点","slug":"技术向/HTML/HTML看这个就够了-全面打通HTML前端开发知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/HTML%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9AHTML%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"表格-后盾人-pdf","slug":"技术向/HTML/HTML看这个就够了_全面打通HTML前端开发知识点/表格-后盾人-pdf","date":"2020-05-05T16:00:00.000Z","updated":"2022-06-15T08:32:50.158Z","comments":true,"path":"技术向/HTML/HTML看这个就够了_全面打通HTML前端开发知识点/表格-后盾人-pdf/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/HTML%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9AHTML%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%A1%A8%E6%A0%BC-%E5%90%8E%E7%9B%BE%E4%BA%BA-pdf/","excerpt":"","text":"表格-后盾人.pdf","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"HTML","slug":"技术向/HTML","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/"},{"name":"HTML看这个就够了_全面打通HTML前端开发知识点","slug":"技术向/HTML/HTML看这个就够了-全面打通HTML前端开发知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/HTML%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9AHTML%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"语义标签-后盾人-pdf","slug":"技术向/HTML/HTML看这个就够了_全面打通HTML前端开发知识点/语义标签-后盾人-pdf","date":"2020-05-05T16:00:00.000Z","updated":"2022-06-15T08:32:50.158Z","comments":true,"path":"技术向/HTML/HTML看这个就够了_全面打通HTML前端开发知识点/语义标签-后盾人-pdf/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/HTML%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86_%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9AHTML%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%AF%AD%E4%B9%89%E6%A0%87%E7%AD%BE-%E5%90%8E%E7%9B%BE%E4%BA%BA-pdf/","excerpt":"","text":"语义标签-后盾人.pdf","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"HTML","slug":"技术向/HTML","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/"},{"name":"HTML看这个就够了_全面打通HTML前端开发知识点","slug":"技术向/HTML/HTML看这个就够了-全面打通HTML前端开发知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/HTML%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9AHTML%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"数据库的数据类型","slug":"技术向/Java/源辰技术储备/数据库的数据类型","date":"2020-05-05T16:00:00.000Z","updated":"2022-05-11T01:49:30.908Z","comments":true,"path":"技术向/Java/源辰技术储备/数据库的数据类型/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"数据库的数据类型 https://zhuanlan.zhihu.com/p/50891083 笔记 文字：char varchar 后面跟随的参数，规定的是字符长度。存入的数据如果超出这个预设值，将被截断，后面的数据丢失。 char，如果存入的数据字符长度没超过预设值，将补空格。 varchar，不补空格，但有一字节存这个数据的长度。 数字：Int&#x2F;Integer同义词。 后面跟随的参数，鸡肋没什么用。要知道，选用数字类型后，占用空间是固定的。 二进制文件：blob 比如存图片。 但实际项目中常用varchar来存储文件路径，并非直接将图片存入数据库。 文本：text 用来存储大量字符，比如文章的正文部分。 注：以上根据实际应用场景不同，有多种占用空间的方式，例如text就有longtext，可存储极大的字符长度，详见链接。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"P225_17_微场景页面布局","slug":"技术向/CSS/体验高质量的CSS教程/P225_17_微场景页面布局","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.805Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P225_17_微场景页面布局/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P225_17_%E5%BE%AE%E5%9C%BA%E6%99%AF%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/","excerpt":"","text":"P225 17 微场景页面布局 实战案例 介绍：栅格系统布局，复习。 效果： 源码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; box-sizing: border-box; &#125; body &#123; height: 100vh; width: 100vw; display: grid; grid-template-rows: 10vh 1fr 10vh; &#125; header &#123; background: #e67e22; display: flex; justify-content: center; align-items: center; font-size: 3em; font-weight: bold; color: white; &#125; main &#123; background: url(&quot;bg.jpg&quot;); background-size: cover; display: flex; flex-direction: column; justify-content: center; align-items: center; &#125; div &#123; width: 80vw; padding: 10px; border-radius: 10px; color: white; opacity: .8; box-shadow: 0 0 10px rgba(0,0,0,.8); &#125; div:nth-child(1)&#123; transform: translateY(-50px); background: #9b59b6; &#125; div:nth-child(2)&#123; background: #e74c3c; &#125; footer &#123; background: #2c3e50; display: flex; justify-content: center; align-items: center; font-size: 2em; font-weight: bold; color: white; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;header&gt;后盾人&lt;/header&gt;&lt;main&gt; &lt;div&gt; 就在这段文字在电脑屏幕上延续的时候，数字显示：全球新冠肺炎确诊人数已超过249万，死亡达到17万多人。在经过连续三个月的疫情报道之后，我们邀请13位不同领域的思考者，试图回答“什么将被病毒彻底改变”这一问题。没有人能够确切地知道会发生什么，但是所有的参与者都相信，危机时刻也给我们带来机遇，通过更健康、更包容的生活态度；更先进、更人性的现代技术；更有效、更良善的治理方式，在共同度过一个不确定的时期之后，“后新冠时代”终将给我们带来更多新的进步。 &lt;/div&gt; &lt;div&gt; 从问题的角度来看，有三方面是较为重要的。第一，如果缺乏社会力量和对不同的声音包容，就搞不好社区建设；第二，国家如果无法承担“元治理”职能，同样也搞不好社区建设；第三，社区层面的危机管理和公共安全规划也暴露出了不足。具体到社区安全层面，基本演练、基础设施、场地空间、应急物资、风险意识、防控宣传等均需有所反思。 &lt;/div&gt;&lt;/main&gt;&lt;footer&gt;houdunren.com&lt;/footer&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P228_20_完整体验速率变化效果","slug":"技术向/CSS/体验高质量的CSS教程/P228_20_完整体验速率变化效果","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.806Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P228_20_完整体验速率变化效果/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P228_20_%E5%AE%8C%E6%95%B4%E4%BD%93%E9%AA%8C%E9%80%9F%E7%8E%87%E5%8F%98%E5%8C%96%E6%95%88%E6%9E%9C/","excerpt":"","text":"P228 20 完整体验速率变化效果 animation-timing-function 调整动画在不同时刻的快慢程度。 类比记忆：transition-timing-function 12//默认easeanimation-timing-function: ease; 其他参数： cubic-bezier 自定义贝塞尔曲线，自定义快慢程度。 调试网址： https://cubic-bezier.com 1animation-timing-function: cubic-bezier(.78,0,.18,1);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P230_22_盒阴影偏移技巧与currentColor特性","slug":"技术向/CSS/体验高质量的CSS教程/P230_22_盒阴影偏移技巧与currentColor特性","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.807Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P230_22_盒阴影偏移技巧与currentColor特性/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P230_22_%E7%9B%92%E9%98%B4%E5%BD%B1%E5%81%8F%E7%A7%BB%E6%8A%80%E5%B7%A7%E4%B8%8EcurrentColor%E7%89%B9%E6%80%A7/","excerpt":"","text":"P230 22 盒阴影偏移技巧与currentColor特性 currentColor 引用color属性的值，达到阴影和字体同色的效果。 123color: yellowgreen;//参数： x偏移量 y偏移量 模糊度 颜色box-shadow: 55px 55px 0 currentColor; 对shadow属性的补充： shadow的长宽值取决于元素的长宽，可以通过偏移量大于长宽值而把阴影移出元素的下方。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P231_23_提交按钮加载动画效果","slug":"技术向/CSS/体验高质量的CSS教程/P231_23_提交按钮加载动画效果","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.807Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P231_23_提交按钮加载动画效果/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P231_23_%E6%8F%90%E4%BA%A4%E6%8C%89%E9%92%AE%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/","excerpt":"","text":"P231 23 提交按钮加载动画效果 实战案例 效果： 源码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; box-sizing: border-box; &#125; body &#123; height: 100vh; width: 100vw; display: grid; grid-template: 1fr / 1fr; &#125; button &#123; width: 150px; height: 40px; justify-self: center; align-self: center; color: #34495e; &#125; button::after &#123; content: &#x27;&#x27;; width: 3px; height: 3px; display: inline-block; animation-name: hd; animation-duration: 1s; animation-iteration-count: infinite; &#125; @keyframes hd &#123; from &#123; box-shadow: none; &#125; 25% &#123; box-shadow: 3px 0 0 currentColor; &#125; 50% &#123; box-shadow: 3px 0 0 currentColor, 9px 0 0 currentColor; &#125; 80% &#123; box-shadow: 3px 0 0 currentColor, 9px 0 0 currentColor, 15px 0 0 currentColor; &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;button&gt;提交&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P232_24_steps步进动画规则详解","slug":"技术向/CSS/体验高质量的CSS教程/P232_24_steps步进动画规则详解","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.808Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P232_24_steps步进动画规则详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P232_24_steps%E6%AD%A5%E8%BF%9B%E5%8A%A8%E7%94%BB%E8%A7%84%E5%88%99%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"P232 24 steps步进动画规则详解 steps 步进动画函数。 不希望连贯的运动，可以使用步进，一帧一帧的动，就像是机械舞。 1234//start立即开始步进动画animation-timing-function: step(4,start);//end等待一个帧的时间后再步进动画animation-timing-function: step(4,end); P233 25 step-start与step-end单步处理 steps-start 简写，相当于step(1,start)。 1animation-timing-function: steps-start; steps-end 简写，相当于step(1,end)。 1animation-timing-function: steps-end; 设置1帧动画时，动画可能会卡住，需要在动画里设置两个动作。 动画：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P234_26_animation-play-state控制动画播放与暂停","slug":"技术向/CSS/体验高质量的CSS教程/P234_26_animation-play-state控制动画播放与暂停","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.808Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P234_26_animation-play-state控制动画播放与暂停/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P234_26_animation-play-state%E6%8E%A7%E5%88%B6%E5%8A%A8%E7%94%BB%E6%92%AD%E6%94%BE%E4%B8%8E%E6%9A%82%E5%81%9C/","excerpt":"","text":"P234 26 animation-play-state控制动画播放与暂停 animation-play-state 控制动画播放&#x2F;暂停。 running 播放。 1animation-play-state: running; paused 暂停。 1animation-play-state: paused;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P235_27_纯CSS的网站轮换图太容易了","slug":"技术向/CSS/体验高质量的CSS教程/P235_27_纯CSS的网站轮换图太容易了","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.809Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P235_27_纯CSS的网站轮换图太容易了/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P235_27_%E7%BA%AFCSS%E7%9A%84%E7%BD%91%E7%AB%99%E8%BD%AE%E6%8D%A2%E5%9B%BE%E5%A4%AA%E5%AE%B9%E6%98%93%E4%BA%86/","excerpt":"","text":"P235 27 纯CSS的网站轮换图太容易了 实战案例 效果： 源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; box-sizing: border-box; &#125; body &#123; display: flex; justify-content: center; align-items: center; width: 100vw; height: 100vh; &#125; main &#123; width: 400px; height: 300px; overflow: hidden; &#125; article &#123; display: grid; grid-template: 1fr / repeat(4, 400px); animation-name: slide; animation-duration: 4s; animation-iteration-count: infinite; animation-timing-function: steps(4, end); transform: translateX(0); &#125; article:hover &#123; animation-play-state: paused; &#125; div &#123; overflow: hidden; &#125; img &#123; width: 100%; &#125; @keyframes slide &#123; to &#123; transform: translateX(-1600px); &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;article&gt; &lt;div&gt;&lt;img src=&quot;1.jpg&quot;&gt;&lt;/div&gt; &lt;div&gt;&lt;img src=&quot;2.jpg&quot;&gt;&lt;/div&gt; &lt;div&gt;&lt;img src=&quot;3.jpg&quot;&gt;&lt;/div&gt; &lt;div&gt;&lt;img src=&quot;4.jpg&quot;&gt;&lt;/div&gt; &lt;/article&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P236_28_还用啥JS效果CSS这么给力了","slug":"技术向/CSS/体验高质量的CSS教程/P236_28_还用啥JS效果CSS3这么给力了","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.810Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P236_28_还用啥JS效果CSS3这么给力了/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P236_28_%E8%BF%98%E7%94%A8%E5%95%A5JS%E6%95%88%E6%9E%9CCSS3%E8%BF%99%E4%B9%88%E7%BB%99%E5%8A%9B%E4%BA%86/","excerpt":"","text":"P236 28 还用啥JS效果CSS这么给力了 实战案例 效果： 源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; box-sizing: border-box; &#125; body &#123; display: flex; justify-content: center; align-items: center; width: 100vw; height: 100vh; &#125; main &#123; width: 400px; height: 200px; overflow: hidden; position: relative; &#125; article &#123; display: grid; grid-template: 1fr / repeat(4, 400px); animation-name: slide; animation-duration: 4s; animation-iteration-count: infinite; animation-timing-function: steps(4, end); &#125; article:hover, article:hover + ul::after &#123; animation-play-state: paused; &#125; div &#123; overflow: hidden; &#125; img &#123; width: 100%; &#125; @keyframes slide &#123; to &#123; transform: translateX(-1600px); &#125; &#125; ul &#123; width: 200px; position: absolute; left: 50%; bottom: 50px; transform: translateX(-50%); list-style-type: none; display: grid; grid-template: 1fr / repeat(4, 1fr); justify-items: center; &#125; ul::after &#123; position: absolute; content: &#x27;&#x27;; width: 20px; height: 20px; border-radius: 50%; left: 15px; background: #e67e22; z-index: -1; animation-name: num; animation-duration: 4s; animation-iteration-count: infinite; animation-timing-function: steps(4, end); &#125; li &#123; width: 20px; height: 20px; border-radius: 50%; background: rgba(0, 0, 0, .5); display: flex; justify-content: center; align-content: center; color: white; font-size: .8em; &#125; @keyframes num &#123; to &#123; transform: translateX(200px); &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;article&gt; &lt;div&gt;&lt;img src=&quot;1.jpg&quot;&gt;&lt;/div&gt; &lt;div&gt;&lt;img src=&quot;2.jpg&quot;&gt;&lt;/div&gt; &lt;div&gt;&lt;img src=&quot;3.jpg&quot;&gt;&lt;/div&gt; &lt;div&gt;&lt;img src=&quot;4.jpg&quot;&gt;&lt;/div&gt; &lt;/article&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;/ul&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P237_29_animation-fill-mode动画填充模式详解","slug":"技术向/CSS/体验高质量的CSS教程/P237_29_animation-fill-mode动画填充模式详解","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.810Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P237_29_animation-fill-mode动画填充模式详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P237_29_animation-fill-mode%E5%8A%A8%E7%94%BB%E5%A1%AB%E5%85%85%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"P237 29 animation-fill-mode动画填充模式详解 animation-fill-mode 动画填充模式。 normal 默认，动画开始前和结束后均用元素默认样式。 1animation-fill-mode: normal; backwards 动画开始前用动画的第一帧（0%），动画结束后用元素默认样式。 1animation-fill-mode: backwards; forward 动画开始前用元素默认样式，动画结束后用动画的最后一帧（100%）。 1animation-fill-mode: forward; both 动画开始前用动画的第一帧（0%），动画结束后用动画的最后一帧（100%）。 相当于backwards + forward。 1animation-fill-mode: both;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P238_30_animation动画组合定义语法","slug":"技术向/CSS/体验高质量的CSS教程/P238_30_animation动画组合定义语法","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.811Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P238_30_animation动画组合定义语法/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P238_30_animation%E5%8A%A8%E7%94%BB%E7%BB%84%E5%90%88%E5%AE%9A%E4%B9%89%E8%AF%AD%E6%B3%95/","excerpt":"","text":"P238 30 animation动画组合定义语法 animation 简写，animation-name、animation-fill-mode、animation-duration和animation-delay的组合。 12//参数：name mode duration delayanimation: hd forward 2s 1s;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P240_2_媒体设备类型使用详解","slug":"技术向/CSS/体验高质量的CSS教程/P240_2_媒体设备类型使用详解","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.811Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P240_2_媒体设备类型使用详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P240_2_%E5%AA%92%E4%BD%93%E8%AE%BE%E5%A4%87%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"P240 2 媒体设备类型使用详解 [HTML] 不同设备选择不同层叠样式表。 all 默认，所有设备。 screen 屏幕设备。 print 打印机设备。 12345678910&lt;style media=&quot;screen&quot;&gt;&lt;/style&gt;&lt;style media=&quot;print&quot;&gt;&lt;/style&gt;//多个设备共用层的样式表&lt;style media=&quot;screen,print&quot;&gt;&lt;/style&gt;//所有设备&lt;style media=&quot;all&quot;&gt;&lt;/style&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P242_4_使用@import化简页面多文件引入","slug":"技术向/CSS/体验高质量的CSS教程/P242_4_使用@import化简页面多文件引入","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.812Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P242_4_使用@import化简页面多文件引入/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P242_4_%E4%BD%BF%E7%94%A8@import%E5%8C%96%E7%AE%80%E9%A1%B5%E9%9D%A2%E5%A4%9A%E6%96%87%E4%BB%B6%E5%BC%95%E5%85%A5/","excerpt":"","text":"P242 4 使用@import化简页面多文件引入 @import 引入其他css文件。 将多个css引入到一个汇总的css文件内，html内用一个link标签引入汇总css文件。这样避免html页面内有过多link标签。 123@import url(common.css) all;@import url(screen.css) screen;@import url(print.css) print;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P243_5_样式表中使用@media局部定义响应查询","slug":"技术向/CSS/体验高质量的CSS教程/P243_5_样式表中使用@media局部定义响应查询","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.812Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P243_5_样式表中使用@media局部定义响应查询/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P243_5_%E6%A0%B7%E5%BC%8F%E8%A1%A8%E4%B8%AD%E4%BD%BF%E7%94%A8@media%E5%B1%80%E9%83%A8%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"P243 5 样式表中使用@media局部定义响应查询 @media 根据屏幕尺寸不同，动态的改变杨式布局。 media.html 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;houdunren.css&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;navbar&quot;&gt; &lt;a href=&quot;&quot;&gt;houdunren&lt;/a&gt; &lt;ul&gt; &lt;li&gt;视频教程&lt;/li&gt; &lt;li&gt;每晚直播&lt;/li&gt; &lt;li&gt;在线文档&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; houdunren.less 1234567891011121314151617181920.navbar&#123; height: 60px; width: 900px; display: flex; align-items: center; background: #f3f3f3; margin: 0 auto; ul&#123; list-style: none; display: flex; &#125;&#125;@media screen and (max-width: 600px)&#123; .navbar&#123; ul&#123; display: none; &#125; &#125;&#125; IDEA安装less插件 less自动生成css和map文件。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P244_6_AND条件判断响应式使用","slug":"技术向/CSS/体验高质量的CSS教程/P244_6_AND条件判断响应式使用","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.813Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P244_6_AND条件判断响应式使用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P244_6_AND%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%93%8D%E5%BA%94%E5%BC%8F%E4%BD%BF%E7%94%A8/","excerpt":"","text":"P244 6 AND条件判断响应式使用 and 逻辑与。 如果有多个条件，用and连接。 min-width max-width 外部用括号包裹。 min-width：大于这个值的屏幕宽度有效。 max-width：小于这个值的屏幕宽度有效。 1&lt;style media=&quot;screen and (min-width:768px) and (max-width:1000px)&quot;&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P245_7_逻辑或使用技巧实例操作","slug":"技术向/CSS/体验高质量的CSS教程/P245_7_逻辑或使用技巧实例操作","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.814Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P245_7_逻辑或使用技巧实例操作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P245_7_%E9%80%BB%E8%BE%91%E6%88%96%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E5%AE%9E%E4%BE%8B%E6%93%8D%E4%BD%9C/","excerpt":"","text":"P245 7 逻辑或使用技巧实例操作 orientation landscape 横屏有效。 12&lt;style media=&quot;screen and (orientation: landscape)&gt;&lt;/style&gt; , 逻辑或。 相当于其他语言的or。 12&lt;style media=&quot;screen and (orientation: landscape) , (mix-width:768px)&quot;&gt;&lt;/style&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P246_8_NOT关键词使用注意要点","slug":"技术向/CSS/体验高质量的CSS教程/P246_8_NOT关键词使用注意要点","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.814Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P246_8_NOT关键词使用注意要点/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P246_8_NOT%E5%85%B3%E9%94%AE%E8%AF%8D%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E8%A6%81%E7%82%B9/","excerpt":"","text":"P246 8 NOT关键词使用注意要点 not 逻辑非。 要加在条件的前面。 当满足后面的条件，就不使用以下样式。 1234567&lt;style&gt; @media not screen and (min-width: 500px) and (max-width: 468px) &#123; h1 &#123; color: red; &#125; &#125;&lt;/style&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P247_9_使用only排除低端浏览器","slug":"技术向/CSS/体验高质量的CSS教程/P247_9_使用only排除低端浏览器","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.815Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P247_9_使用only排除低端浏览器/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P247_9_%E4%BD%BF%E7%94%A8only%E6%8E%92%E9%99%A4%E4%BD%8E%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8/","excerpt":"","text":"P247 9 使用only排除低端浏览器 only 如果浏览器不支持响应式，就忽略以下层叠样式表。 注：现如今大部分主流浏览器都支持响应式。 1234567&lt;style&gt; @media only screen and (min-width: 500px) &#123; h1 &#123; color: red; &#125; &#125;&lt;/style&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"Z_CSS思维导图","slug":"技术向/CSS/体验高质量的CSS教程/Z_CSS思维导图","date":"2020-04-24T16:00:00.000Z","updated":"2022-06-15T08:32:49.839Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/Z_CSS思维导图/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/Z_CSS%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/","excerpt":"","text":"Z CSS思维导图 CSS.xmind","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P202_9_steps步进帧动画过渡效果","slug":"技术向/CSS/体验高质量的CSS教程/P202_9_steps步进帧动画过渡效果","date":"2020-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.799Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P202_9_steps步进帧动画过渡效果/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P202_9_steps%E6%AD%A5%E8%BF%9B%E5%B8%A7%E5%8A%A8%E7%94%BB%E8%BF%87%E6%B8%A1%E6%95%88%E6%9E%9C/","excerpt":"","text":"P202 9 steps步进帧动画过渡效果 steps 步进动画函数。 不希望连贯的运动，可以使用步进，一帧一帧的动，就像是机械舞。 1234//start立即开始步进动画transition-timing-function: step(4,start);//end等待一个帧的时间后再步进动画transition-timing-function: step(4,end); P204 11 step-end和step-start使用 steps-start 简写，相当于step(1,start)。 1transition-timing-function: steps-start; steps-end 简写，相当于step(1,end)。 1transition-timing-function: steps-end;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P206_13_transition-delay延迟过渡使用","slug":"技术向/CSS/体验高质量的CSS教程/P206_13_transition-delay延迟过渡使用","date":"2020-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.799Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P206_13_transition-delay延迟过渡使用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P206_13_transition-delay%E5%BB%B6%E8%BF%9F%E8%BF%87%E6%B8%A1%E4%BD%BF%E7%94%A8/","excerpt":"","text":"P206 13 transition-delay延迟过渡使用 **transition-**delay 延迟一段时间后再开始过渡效果。 代码分析： 1、原则上property和delay值一一对应。 2、如果property值多于delay值，则会重头再取delay值。 3、如果property值少于delay值，则delay后面没有对应property的值无效。 和transition-duration区别 transition-duration是过渡效果花费的时间。 transition-delay是过一段时间后开始过渡效果。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P207_14_transition组合设置全部过渡规则","slug":"技术向/CSS/体验高质量的CSS教程/P207_14_transition组合设置全部过渡规则","date":"2020-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.800Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P207_14_transition组合设置全部过渡规则/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P207_14_transition%E7%BB%84%E5%90%88%E8%AE%BE%E7%BD%AE%E5%85%A8%E9%83%A8%E8%BF%87%E6%B8%A1%E8%A7%84%E5%88%99/","excerpt":"","text":"P207 14 transition组合设置全部过渡规则 transition 简写，transition-property、transition-delay、transition-duration和transition-timing-function的组合。 12//transition: property timing-funciton duration delaytransition: all linear 2s 1s; 如果为多个property属性设置，用逗号隔开。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P208_15_红心点赞案例详解","slug":"技术向/CSS/体验高质量的CSS教程/P208_15_红心点赞案例详解","date":"2020-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.800Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P208_15_红心点赞案例详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P208_15_%E7%BA%A2%E5%BF%83%E7%82%B9%E8%B5%9E%E6%A1%88%E4%BE%8B%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"P208 15 红心点赞案例详解 实战案例 介绍：涉及到jQuery的应用。点赞动画和颜色切换。 效果： 源码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;http://code.jquery.com/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; &#125; body &#123; height: 100vh; width: 100vw; display: flex; justify-content: center; align-items: center; background: #2c3e50; &#125; main &#123; position: relative; &#125; main div &#123; font-size: 2em; color: white; position: absolute; transition-duration: 1s; cursor: pointer; &#125; .heart div &#123; transform: scale(3); color: orangered; opacity: 0; &#125; .heart div:nth-child(2) &#123; transform: scale(1); color: orangered; opacity: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main onclick=&quot;change()&quot;&gt; &lt;div&gt;赞&lt;/div&gt; &lt;div&gt;赞&lt;/div&gt;&lt;/main&gt;&lt;script&gt; function change() &#123; $(&#x27;main&#x27;).toggleClass(&#x27;heart&#x27;); &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P210_2_animation关键帧使用和介绍","slug":"技术向/CSS/体验高质量的CSS教程/P210_2_animation关键帧使用和介绍","date":"2020-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.801Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P210_2_animation关键帧使用和介绍/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P210_2_animation%E5%85%B3%E9%94%AE%E5%B8%A7%E4%BD%BF%E7%94%A8%E5%92%8C%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"P210 2 animation关键帧使用和介绍 @keyframes 定义帧动画 12345678910111213141516171819202122232425//form开始 to结束 hd可自定义动画名@keyframes hd &#123; from &#123; background: blue; &#125; to &#123; background: red; &#125;&#125;//自定义@keyframes hd &#123; 0% &#123; background: blue; &#125; 25% &#123; transform: scale(2); &#125; 75% &#123; transform: scale(1); &#125; 100% &#123; background: red; &#125;&#125; animation-name 引用帧动画，参数动画名。 1animation-name: hd; animation-duration 帧动画整体过渡效果总用时 类比记忆：transition-duration 1animation-duration: 2s;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P212_4_移动的小方块","slug":"技术向/CSS/体验高质量的CSS教程/P212_4_移动的小方块","date":"2020-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.801Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P212_4_移动的小方块/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P212_4_%E7%A7%BB%E5%8A%A8%E7%9A%84%E5%B0%8F%E6%96%B9%E5%9D%97/","excerpt":"","text":"P212 4 移动的小方块 实战案例 介绍：对帧动画（@keyframes）的简单应用。 效果： 源码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; &#125; body &#123; height: 100vh; width: 100vw; display: flex; justify-content: center; align-items: center; background: #2c3e50; &#125; main &#123; width: 400px; height: 400px; border: solid 2px white; &#125; div &#123; width: 100px; height: 100px; background: #e67e22; animation-name: hd; animation-duration: 2s; &#125; @keyframes hd &#123; 25% &#123; transform: translateX(300px); &#125; 50% &#123; transform: translate(300px, 300px); &#125; 75% &#123; transform: translateY(300px); &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;div&gt;&lt;/div&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P214_6_多个动画使用与时间配置","slug":"技术向/CSS/体验高质量的CSS教程/P214_6_多个动画使用与时间配置","date":"2020-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.802Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P214_6_多个动画使用与时间配置/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P214_6_%E5%A4%9A%E4%B8%AA%E5%8A%A8%E7%94%BB%E4%BD%BF%E7%94%A8%E4%B8%8E%E6%97%B6%E9%97%B4%E9%85%8D%E7%BD%AE/","excerpt":"","text":"P214 6 多个动画使用与时间配置 ** ** animation-name和animation-duration 1、原则上name和duration值一一对应。 2、如果name值多于duration值，则会重头再取duration值。 3、如果name值少于duration值，则duration后面没有对应name的值无效。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P218_10_animation-iteration-count控制动画播放次数","slug":"技术向/CSS/体验高质量的CSS教程/P218_10_animation-iteration-count控制动画播放次数","date":"2020-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.802Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P218_10_animation-iteration-count控制动画播放次数/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P218_10_animation-iteration-count%E6%8E%A7%E5%88%B6%E5%8A%A8%E7%94%BB%E6%92%AD%E6%94%BE%E6%AC%A1%E6%95%B0/","excerpt":"","text":"P218 10 animation-iteration-count控制动画播放次数 animation-iteration-count 动画循环执行次数。 1234//动画执行x次animation-iteration-count: 1 | x;//动画执行无限次 轮播animation-iteration-count: infinite; | animation-iteration-count: -1;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P220_12_我心动了","slug":"技术向/CSS/体验高质量的CSS教程/P220_12_我心动了","date":"2020-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.803Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P220_12_我心动了/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P220_12_%E6%88%91%E5%BF%83%E5%8A%A8%E4%BA%86/","excerpt":"","text":"P220 12 我心动了 实战案例 介绍：跳动的心，无限循环动画。 效果： 源码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; &#125; body &#123; height: 100vh; width: 100vw; display: flex; justify-content: center; align-items: center; background: #2c3e50; &#125; main &#123; width: 200px; height: 200px; background: #e74c3c; position: relative; transform: rotate(45deg); animation-name: hd; animation-duration: 2s; animation-iteration-count: infinite; display: flex; justify-content: center; align-items: center; &#125; main::before &#123; content: &#x27;&#x27;; width: 200px; height: 200px; background: #e74c3c; border-radius: 50%; position: absolute; transform: translateX(-50%); &#125; main::after &#123; content: &#x27;&#x27;; width: 200px; height: 200px; background: #e74c3c; border-radius: 50%; position: absolute; transform: translateY(-50%); &#125; @keyframes hd &#123; 25% &#123; transform: rotate(45deg) scale(.5); opacity: .5; &#125; 50% &#123; transform: rotate(45deg) scale(1); opacity: 1; &#125; 75% &#123; transform: rotate(45deg) scale(.5); opacity: .5; &#125; &#125; p &#123; position: absolute; font-size: 24px; z-index: 1; transform: rotate(-45deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;p&gt;&lt;/p&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P221_13_animation-direction控制动画方向的四种方式","slug":"技术向/CSS/体验高质量的CSS教程/P221_13_animation-direction控制动画方向的四种方式","date":"2020-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.804Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P221_13_animation-direction控制动画方向的四种方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P221_13_animation-direction%E6%8E%A7%E5%88%B6%E5%8A%A8%E7%94%BB%E6%96%B9%E5%90%91%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/","excerpt":"","text":"P221 13 animation-direction控制动画方向的四种方式 animation-direction 控制动画过渡方向。 normal 默认，正向。动画结束瞬间恢复到初始样式。 1animation-direction: normal; reverse 反向，类似倒放。动画结束瞬间恢复到初始样式。 1animation-direction: reverse; P222 14 animation-direction动画平滑轮回处理 alternate 默认，正向。动画结束缓慢恢复到初始样式。 1animation-direction: alternate; alternate-reverse 反向，类似倒放。动画结束缓慢恢复到初始样式。 1animation-direction: alternate-reverse;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P223_15_弹跳小球体验动画轮换衔接","slug":"技术向/CSS/体验高质量的CSS教程/P223_15_弹跳小球体验动画轮换衔接","date":"2020-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.804Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P223_15_弹跳小球体验动画轮换衔接/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P223_15_%E5%BC%B9%E8%B7%B3%E5%B0%8F%E7%90%83%E4%BD%93%E9%AA%8C%E5%8A%A8%E7%94%BB%E8%BD%AE%E6%8D%A2%E8%A1%94%E6%8E%A5/","excerpt":"","text":"P223 15 弹跳小球体验动画轮换衔接 实战案例 介绍：弹跳的乒乓球。 效果： 源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; &#125; body &#123; height: 100vh; width: 100vw; display: flex; justify-content: center; align-items: center; background: #2c3e50; &#125; main &#123; position: relative; display: flex; justify-content: center; align-items: center; &#125; div &#123; width: 100px; height: 100px; background: radial-gradient(at center, #e67e22, #e74c3c); border-radius: 50%; animation-name: jump; animation-duration: .6s; animation-iteration-count: infinite; animation-direction: alternate; animation-timing-function: ease-out; &#125; @keyframes jump &#123; to &#123; transform: translateY(-300px); &#125; &#125; section &#123; position: absolute; width: 300px; height: 40px; background: rgba(0, 0, 0, .3); bottom: -20px; border-radius: 50%; z-index: -1; filter: blur(5px); animation-name: shadow; animation-duration: .6s; animation-iteration-count: infinite; animation-direction: alternate; animation-timing-function: ease-out; &#125; @keyframes shadow &#123; to &#123; width: 200px; height: 20px; background: rgba(0, 0, 0, .1); filter: blur(10px); &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;div&gt;&lt;/div&gt; &lt;section&gt;&lt;/section&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P224_16_延迟属性与帧延迟效果对比","slug":"技术向/CSS/体验高质量的CSS教程/P224_16_延迟属性与帧延迟效果对比","date":"2020-04-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.805Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P224_16_延迟属性与帧延迟效果对比/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P224_16_%E5%BB%B6%E8%BF%9F%E5%B1%9E%E6%80%A7%E4%B8%8E%E5%B8%A7%E5%BB%B6%E8%BF%9F%E6%95%88%E6%9E%9C%E5%AF%B9%E6%AF%94/","excerpt":"","text":"P224 16 延迟属性与帧延迟效果对比 animation-delay 延迟，延迟一段时间后再开始执行动画。 12//延迟2秒animation-delay: 2s;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P180_29_transform-origin技术做动态旋转菜单","slug":"技术向/CSS/体验高质量的CSS教程/P180_29_transform-origin技术做动态旋转菜单","date":"2020-04-22T16:00:00.000Z","updated":"2022-06-15T08:32:49.792Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P180_29_transform-origin技术做动态旋转菜单/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P180_29_transform-origin%E6%8A%80%E6%9C%AF%E5%81%9A%E5%8A%A8%E6%80%81%E6%97%8B%E8%BD%AC%E8%8F%9C%E5%8D%95/","excerpt":"","text":"P180 29 transform-origin技术做动态旋转菜单 实战案例 效果： 源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; box-sizing: border-box; &#125; body &#123; height: 100vh; width: 100vw; display: flex; justify-content: center; align-items: center; background: #2c3e50; &#125; ul &#123; width: 300px; height: 300px; background: black; list-style-type: none; position: relative; &#125; li &#123; width: 60px; height: 60px; background: #e67e22; display: flex; justify-content: center; align-items: center; font-size: 3em; color: white; border-radius: 50%; position: absolute; transform-origin: 150px 150px; transition: 2s; &#125; ul:hover li:nth-child(1) &#123; transform: rotateZ(0); &#125; ul:hover li:nth-child(2) &#123; transform: rotateZ(40deg); &#125; ul:hover li:nth-child(3) &#123; transform: rotateZ(80deg); &#125; ul:hover li:nth-child(4) &#123; transform: rotateZ(120deg); &#125; ul:hover li:nth-child(5) &#123; transform: rotateZ(160deg); &#125; ul:hover li:nth-child(6) &#123; transform: rotateZ(200deg); &#125; ul:hover li:nth-child(7) &#123; transform: rotateZ(240deg); &#125; ul:hover li:nth-child(8) &#123; transform: rotateZ(280deg); &#125; ul:hover li:nth-child(9) &#123; transform: rotateZ(320deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt; &lt;li&gt;6&lt;/li&gt; &lt;li&gt;7&lt;/li&gt; &lt;li&gt;8&lt;/li&gt; &lt;li&gt;9&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P181_30_环形菜单触发动画transform-origin","slug":"技术向/CSS/体验高质量的CSS教程/P181_30_环形菜单触发动画transform-origin","date":"2020-04-22T16:00:00.000Z","updated":"2022-06-15T08:32:49.793Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P181_30_环形菜单触发动画transform-origin/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P181_30_%E7%8E%AF%E5%BD%A2%E8%8F%9C%E5%8D%95%E8%A7%A6%E5%8F%91%E5%8A%A8%E7%94%BBtransform-origin/","excerpt":"","text":"P181 30 环形菜单触发动画transform-origin 实战案例 效果： 源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; box-sizing: border-box; &#125; body &#123; height: 100vh; width: 100vw; display: flex; justify-content: center; align-items: center; background: #2c3e50; &#125; nav&#123; display: flex; justify-content: center; align-items: center; height: 400px; width: 400px; border-radius: 50%; /*cursor: pointer;*/ &#125; nav::after&#123; content: &#x27;后盾人&#x27;; border-radius: 50%; background: #e74c3c; width: 200px; height: 200px; position: absolute; display: flex; justify-content: center; align-items: center; font-size: 3em; color: white; &#125; nav::before&#123; content: &#x27;&#x27;; border-radius: 50%; background: #e74c3c; width: 200px; height: 200px; position: absolute; &#125; ul &#123; width: 300px; height: 300px; /*background: black;*/ list-style-type: none; position: relative; &#125; li &#123; width: 80px; height: 80px; background: #e74c3c; display: flex; justify-content: center; align-items: center; font-size: 3em; color: white; border-radius: 50%; position: absolute; transform-origin: 150px 150px; transition: 2s; &#125; nav:hover li:nth-child(1) &#123; transform: rotateZ(0); &#125; nav:hover li:nth-child(2) &#123; transform: rotateZ(40deg); &#125; nav:hover li:nth-child(3) &#123; transform: rotateZ(80deg); &#125; nav:hover li:nth-child(4) &#123; transform: rotateZ(120deg); &#125; nav:hover li:nth-child(5) &#123; transform: rotateZ(160deg); &#125; nav:hover li:nth-child(6) &#123; transform: rotateZ(200deg); &#125; nav:hover li:nth-child(7) &#123; transform: rotateZ(240deg); &#125; nav:hover li:nth-child(8) &#123; transform: rotateZ(280deg); &#125; nav:hover li:nth-child(9) &#123; transform: rotateZ(320deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;nav&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt; &lt;li&gt;6&lt;/li&gt; &lt;li&gt;7&lt;/li&gt; &lt;li&gt;8&lt;/li&gt; &lt;li&gt;9&lt;/li&gt; &lt;/ul&gt;&lt;/nav&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P183_32_校正旋转菜单子元素角度","slug":"技术向/CSS/体验高质量的CSS教程/P183_32_校正旋转菜单子元素角度","date":"2020-04-22T16:00:00.000Z","updated":"2022-06-15T08:32:49.793Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P183_32_校正旋转菜单子元素角度/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P183_32_%E6%A0%A1%E6%AD%A3%E6%97%8B%E8%BD%AC%E8%8F%9C%E5%8D%95%E5%AD%90%E5%85%83%E7%B4%A0%E8%A7%92%E5%BA%A6/","excerpt":"","text":"P183 32 校正旋转菜单子元素角度 实战案例 效果： 源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; box-sizing: border-box; &#125; body &#123; height: 100vh; width: 100vw; display: flex; justify-content: center; align-items: center; background: #2c3e50; &#125; nav &#123; display: flex; justify-content: center; align-items: center; height: 400px; width: 400px; border-radius: 50%; /*cursor: pointer;*/ &#125; nav::after &#123; content: &#x27;后盾人&#x27;; border-radius: 50%; background: #e74c3c; width: 200px; height: 200px; position: absolute; display: flex; justify-content: center; align-items: center; font-size: 3em; color: white; &#125; nav::before &#123; content: &#x27;&#x27;; border-radius: 50%; background: #e74c3c; width: 200px; height: 200px; position: absolute; &#125; nav:hover ul &#123; transform: scale(1); &#125; ul &#123; width: 300px; height: 300px; /*background: black;*/ list-style-type: none; position: relative; transform: scale(0); transition: .5s; &#125; li &#123; width: 80px; height: 80px; background: #e74c3c; display: flex; justify-content: center; align-items: center; font-size: 3em; color: white; border-radius: 50%; position: absolute; transform-origin: 150px 150px; transition: 2s; &#125; ul li span &#123; transition: 1s; &#125; nav:hover li:nth-child(1) &#123; transform: rotateZ(40deg); &#125; nav:hover li:nth-child(1) span &#123; transform: rotateZ(320deg); &#125; nav:hover li:nth-child(2) &#123; transform: rotateZ(80deg); &#125; nav:hover li:nth-child(2) span &#123; transform: rotateZ(640deg); &#125; nav:hover li:nth-child(3) &#123; transform: rotateZ(120deg); &#125; nav:hover li:nth-child(3) span &#123; transform: rotateZ(960deg); &#125; nav:hover li:nth-child(4) &#123; transform: rotateZ(160deg); &#125; nav:hover li:nth-child(4) span &#123; transform: rotateZ(1280deg); &#125; nav:hover li:nth-child(5) &#123; transform: rotateZ(200deg); &#125; nav:hover li:nth-child(5) span &#123; transform: rotateZ(1600deg); &#125; nav:hover li:nth-child(6) &#123; transform: rotateZ(240deg); &#125; nav:hover li:nth-child(6) span &#123; transform: rotateZ(1920deg); &#125; nav:hover li:nth-child(7) &#123; transform: rotateZ(280deg); &#125; nav:hover li:nth-child(7) span &#123; transform: rotateZ(2240deg); &#125; nav:hover li:nth-child(8) &#123; transform: rotateZ(320deg); &#125; nav:hover li:nth-child(8) span &#123; transform: rotateZ(2560deg); &#125; nav:hover li:nth-child(9) &#123; transform: rotateZ(360deg); &#125; nav:hover li:nth-child(9) span &#123; transform: rotateZ(3240deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;nav&gt; &lt;ul&gt; &lt;li&gt;&lt;span&gt;1&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;2&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;3&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;4&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;5&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;6&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;7&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;8&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span&gt;9&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/nav&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P185_34_perspective透视规则与函数不同应用体验","slug":"技术向/CSS/体验高质量的CSS教程/P185_34_perspective透视规则与函数不同应用体验","date":"2020-04-22T16:00:00.000Z","updated":"2022-06-15T08:32:49.793Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P185_34_perspective透视规则与函数不同应用体验/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P185_34_perspective%E9%80%8F%E8%A7%86%E8%A7%84%E5%88%99%E4%B8%8E%E5%87%BD%E6%95%B0%E4%B8%8D%E5%90%8C%E5%BA%94%E7%94%A8%E4%BD%93%E9%AA%8C/","excerpt":"","text":"P185 34 perspective透视规则与函数不同应用体验 默认情况下，视图是二位视角。应用perspective后可以看到立体效果。 perspective 对元素添加参数，应用于当前元素。 每个应用的元素都是单独视角。 12345678910main&#123; display: flex;&#125;div&#123; margin-right: 100px; width: 200px; height: 200px; background: #f1c40f; transform: perspective(500px) rotateY(45deg);&#125; 其中参数为距离元素的视距，值越大看的越远，反之亦然。 例：将参数设小，可见视角已经非常靠近元素。 1transform: perspective(100px) rotateY(45deg); perspective 对盒子添加属性，应用于里面的子元素。 一个视角，当作一个整体看里面所有发生立体效果的元素。 123456789101112main&#123; display: flex; perspective: 600px; border: solid 5px silver;&#125;div&#123; margin-right: 100px; width: 200px; height: 200px; background: #f1c40f; transform: rotateY(45deg);&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P186_35_perserve-3d呈现三维空间视角","slug":"技术向/CSS/体验高质量的CSS教程/P186_35_perserve-3d呈现三维空间视角","date":"2020-04-22T16:00:00.000Z","updated":"2022-06-15T08:32:49.794Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P186_35_perserve-3d呈现三维空间视角/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P186_35_perserve-3d%E5%91%88%E7%8E%B0%E4%B8%89%E7%BB%B4%E7%A9%BA%E9%97%B4%E8%A7%86%E8%A7%92/","excerpt":"","text":"P186 35 perserve-3d呈现三维空间视角 transform-style preserve-3d 如果立体效果有Z轴参与，需要加入这条属性后，才能看到效果。 12345678main&#123; display: flex; border: solid 5px silver; width: 400px; height: 300px; transform-style: preserve-3d; transform: perspctive(900px) rotateY(45deg);&#125; 控制Z轴移动 1234div:nth-child(2)&#123; background: #2ecc71; transform: translateZ(500px);&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P187_36_3D旋转图集真的很简单","slug":"技术向/CSS/体验高质量的CSS教程/P187_36_3D旋转图集真的很简单","date":"2020-04-22T16:00:00.000Z","updated":"2022-06-15T08:32:49.794Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P187_36_3D旋转图集真的很简单/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P187_36_3D%E6%97%8B%E8%BD%AC%E5%9B%BE%E9%9B%86%E7%9C%9F%E7%9A%84%E5%BE%88%E7%AE%80%E5%8D%95/","excerpt":"","text":"P187 36 3D旋转图集真的很简单 实战案例 效果： 源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; &#125; body &#123; height: 100vh; width: 100vw; display: flex; justify-content: center; align-items: center; background: #2c3e50; &#125; article &#123; width: 400px; height: 400px; border: solid 1px silver; display: flex; justify-content: center; align-items: center; &#125; article:hover main &#123; transform: perspective(900px) rotateX(-45deg) rotateY(360deg); &#125; main &#123; width: 200px; height: 200px; display: flex; border: solid 5px silver; transform-origin: center center -200px; transform-style: preserve-3d; transform: perspective(900px) rotateX(-45deg); transition: 2s; &#125; div &#123; position: absolute; width: 200px; height: 200px; overflow: hidden; &#125; div &gt; img &#123; height: 100%; &#125; div:nth-child(1) &#123; transform-origin: center center -200px; transform: rotateY(90deg); &#125; div:nth-child(2) &#123; transform-origin: center center -200px; transform: rotateY(180deg); &#125; div:nth-child(3) &#123; transform-origin: center center -200px; transform: rotateY(270deg); &#125; div:nth-child(4) &#123; transform-origin: center center -200px; transform: rotateY(360deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article&gt; &lt;main&gt; &lt;div&gt;&lt;img src=&quot;1.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt; &lt;div&gt;&lt;img src=&quot;2.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt; &lt;div&gt;&lt;img src=&quot;3.JPG&quot; alt=&quot;&quot;&gt;&lt;/div&gt; &lt;div&gt;&lt;img src=&quot;4.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt; &lt;/main&gt;&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P188_37_perspective-origin调整观看视角实例","slug":"技术向/CSS/体验高质量的CSS教程/P188_37_perspective-origin调整观看视角实例","date":"2020-04-22T16:00:00.000Z","updated":"2022-06-15T08:32:49.795Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P188_37_perspective-origin调整观看视角实例/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P188_37_perspective-origin%E8%B0%83%E6%95%B4%E8%A7%82%E7%9C%8B%E8%A7%86%E8%A7%92%E5%AE%9E%E4%BE%8B/","excerpt":"","text":"P188 37 perspective-origin调整观看视角实例 perspective-origin 调整观看角度。 详见 视频[P188 37 perspective-origin调整观看视角实例] 12perspective-origin: left center;perspective-origin: -1000px 200px;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P189_38_分分钟搞定3D立方体动画","slug":"技术向/CSS/体验高质量的CSS教程/P189_38_分分钟搞定3D立方体动画","date":"2020-04-22T16:00:00.000Z","updated":"2022-06-15T08:32:49.795Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P189_38_分分钟搞定3D立方体动画/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P189_38_%E5%88%86%E5%88%86%E9%92%9F%E6%90%9E%E5%AE%9A3D%E7%AB%8B%E6%96%B9%E4%BD%93%E5%8A%A8%E7%94%BB/","excerpt":"","text":"P189 38 分分钟搞定3D立方体动画 实战案例 效果： 源码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; &#125; body &#123; height: 100vh; width: 100vw; display: flex; justify-content: center; align-items: center; background: #2c3e50; &#125; main &#123; width: 200px; height: 200px; transform-style: preserve-3d; transform: perspective(900px) rotateX(-45deg); transition: 2s; &#125; body:hover main &#123; transform: perspective(900px) rotateX(180deg) rotateY(90deg); &#125; div &#123; width: 200px; height: 200px; position: absolute; transform-origin: center center 100px; display: flex; justify-content: center; align-items: center; font-size: 3em; color: white; opacity: .8; &#125; div:nth-child(1) &#123; transform: rotateY(90deg); background: #e74c3c; &#125; div:nth-child(2) &#123; transform: rotateY(180deg); background: #e67e22; &#125; div:nth-child(3) &#123; transform: rotateY(270deg); background: #27ae60; &#125; div:nth-child(4) &#123; transform: rotateY(360deg); background: #9b59b6; &#125; div:nth-child(5) &#123; transform-origin: bottom; transform: rotateX(-90deg); background: dodgerblue; &#125; div:nth-child(6) &#123; transform-origin: top; transform: rotateX(90deg); background: goldenrod; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;div&gt;1&lt;/div&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;3&lt;/div&gt; &lt;div&gt;4&lt;/div&gt; &lt;div&gt;5&lt;/div&gt; &lt;div&gt;6&lt;/div&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P191_40_backface-vislbility控制元素背面隐藏效果","slug":"技术向/CSS/体验高质量的CSS教程/P191_40_backface-vislbility控制元素背面隐藏效果","date":"2020-04-22T16:00:00.000Z","updated":"2022-06-15T08:32:49.796Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P191_40_backface-vislbility控制元素背面隐藏效果/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P191_40_backface-vislbility%E6%8E%A7%E5%88%B6%E5%85%83%E7%B4%A0%E8%83%8C%E9%9D%A2%E9%9A%90%E8%97%8F%E6%95%88%E6%9E%9C/","excerpt":"","text":"P191 40 backface-vislbility控制元素背面隐藏效果 backface-vislbility 元素背面不可见。当元素旋转180度，元素隐藏。 123main&#123; backface-visibility: hidden;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P193_42_优美的会员注册卡片效果","slug":"技术向/CSS/体验高质量的CSS教程/P193_42_优美的会员注册卡片效果","date":"2020-04-22T16:00:00.000Z","updated":"2022-06-15T08:32:49.796Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P193_42_优美的会员注册卡片效果/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P193_42_%E4%BC%98%E7%BE%8E%E7%9A%84%E4%BC%9A%E5%91%98%E6%B3%A8%E5%86%8C%E5%8D%A1%E7%89%87%E6%95%88%E6%9E%9C/","excerpt":"","text":"P193 42 优美的会员注册卡片效果 实战案例 介绍：涉及到jquery的应用。对backface-visibility:hidden的练习。 效果： 源码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;http://code.jquery.com/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; &#125; main &#123; width: 100vw; height: 100vh; transform-style: preserve-3d; transform: perspective(900px); transition: 1s; &#125; /* body:hover main &#123; transform: perspective(900px) rotateY(180deg); &#125;*/ main.login&#123; transform: perspective(900px) rotateY(0deg); &#125; main.register&#123; transform: perspective(900px) rotateY(180deg); &#125; div &#123; position: absolute; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; font-size: 4em; text-transform: uppercase; color: white; backface-visibility: hidden; &#125; div:nth-child(1) &#123; background: #8e44ad; &#125; div:nth-child(2) &#123; background: #e74c3c; transform: rotateY(180deg); &#125; nav &#123; position: absolute; width: 100%; bottom: 60px; text-align: center; &#125; nav a &#123; padding: 10px 20px; background: #34495e; margin-right: 10px; color: white; text-decoration: none; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;div&gt;login&lt;/div&gt; &lt;div&gt;register&lt;/div&gt;&lt;/main&gt;&lt;nav&gt; &lt;a href=&quot;javascript:;&quot; onclick=&quot;change(&#x27;login&#x27;)&quot;&gt;登录&lt;/a&gt; &lt;a href=&quot;javascript:;&quot; onclick=&quot;change(&#x27;register&#x27;)&quot;&gt;注册&lt;/a&gt;&lt;/nav&gt;&lt;script&gt; function change(t) &#123; switch (t) &#123; case &#x27;login&#x27;: $(&#x27;main&#x27;).removeClass().addClass(&#x27;login&#x27;); break; case &#x27;register&#x27;: $(&#x27;main&#x27;).removeClass().addClass(&#x27;register&#x27;); &#125; &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P197_4_定制CSS过渡效果属性","slug":"技术向/CSS/体验高质量的CSS教程/P197_4_定制CSS过渡效果属性","date":"2020-04-22T16:00:00.000Z","updated":"2022-06-15T08:32:49.796Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P197_4_定制CSS过渡效果属性/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P197_4_%E5%AE%9A%E5%88%B6CSS%E8%BF%87%E6%B8%A1%E6%95%88%E6%9E%9C%E5%B1%9E%E6%80%A7/","excerpt":"","text":"P197 4 定制CSS过渡效果属性 transition-property 让哪些属性可以发生过渡效果。不发生过渡的效果将会一瞬间发生，一步到位。 transition-duration 以上属性过渡时间。 1234567//让背景发生过渡 其他属性不需要过渡 一瞬间发生transition-property: background;//让背景以2s过渡transition-duration: 2s;//所有属性都发生过渡 | 都不发生过渡transition-property: all | none; 代码说明：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P198_5_transitionend动画API接口","slug":"技术向/CSS/体验高质量的CSS教程/P198_5_transitionend动画API接口","date":"2020-04-22T16:00:00.000Z","updated":"2022-06-15T08:32:49.797Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P198_5_transitionend动画API接口/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P198_5_transitionend%E5%8A%A8%E7%94%BBAPI%E6%8E%A5%E5%8F%A3/","excerpt":"","text":"P198 5 transitionend动画API接口 transitionend JS代码中的参数，用于监听CSS动画完成后触发动作。 实战案例 介绍：涉及到js的应用。后盾人图块旋转一周后，下面的文字从右侧移动过来并固定在图块底部。 效果： 源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; &#125; body &#123; height: 100vh; width: 100vw; display: flex; justify-content: center; align-items: center; background: #2c3e50; &#125; main &#123; width: 200px; height: 200px; &#125; div &#123; width: 200px; height: 200px; position: relative; &#125; div::before &#123; content: &#x27;后盾人&#x27;; position: absolute; width: 200px; height: 200px; border-radius: 10%; font-size: 3em; background: #95a5a6; display: flex; justify-content: center; align-items: center; transition-duration: 2s; cursor: pointer; &#125; div:hover::before &#123; transform: rotate(360deg); &#125; div::after &#123; content: &#x27;houdunren.com&#x27;; position: absolute; bottom: -55px; width: 200px; color: #95a5a6; text-align: center; font-size: 1.8em; transform: translateX(-1200px) skew(45deg); transition-duration: 1.5s; &#125; div.move::after &#123; transform: translateX(0px); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;div&gt;&lt;/div&gt;&lt;/main&gt;&lt;script&gt; document.querySelector(&#x27;div&#x27;).addEventListener(&#x27;transitionend&#x27;, function (e) &#123; document.querySelector(&#x27;div&#x27;).className = &#x27;move&#x27; &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P199_6_transition-duration过渡时间使用技巧","slug":"技术向/CSS/体验高质量的CSS教程/P199_6_transition-duration过渡时间使用技巧","date":"2020-04-22T16:00:00.000Z","updated":"2022-06-15T08:32:49.797Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P199_6_transition-duration过渡时间使用技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P199_6_transition-duration%E8%BF%87%E6%B8%A1%E6%97%B6%E9%97%B4%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/","excerpt":"","text":"P199 6 transition-duration过渡时间使用技巧 transition-duration 代码分析： 1、原则上property和duration值一一对应。 2、如果property值多于duration值，则会重头再取duration值。 3、如果property值少于duration值，则duration后面没有对应property的值无效。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P201_8_transition-timing-function控制运行轨迹","slug":"技术向/CSS/体验高质量的CSS教程/P201_8_transition-timing-function控制运行轨迹","date":"2020-04-22T16:00:00.000Z","updated":"2022-06-15T08:32:49.798Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P201_8_transition-timing-function控制运行轨迹/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P201_8_transition-timing-function%E6%8E%A7%E5%88%B6%E8%BF%90%E8%A1%8C%E8%BD%A8%E8%BF%B9/","excerpt":"","text":"P201 8 transition-timing-function控制运行轨迹 transition-timing-function 调整运动在不同时刻的快慢程度。 12//默认easetransition-timing-function: ease; 其他参数： cubic-bezier 自定义贝塞尔曲线，自定义快慢程度。 调试网址： https://cubic-bezier.com 1transition-timing-function: cubic-bezier(.78,0,.18,1);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P161_10_2D缩放使用方法","slug":"技术向/CSS/体验高质量的CSS教程/P161_10_2D缩放使用方法","date":"2020-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:49.785Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P161_10_2D缩放使用方法/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P161_10_2D%E7%BC%A9%E6%94%BE%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","excerpt":"","text":"P161 10 2D缩放使用方法 scaleX 水平方向缩放。&gt;1的时候放大，&lt;1的时候缩小。 12345678main:hover div:nth-child(2)&#123; //缩小一半 transform:scaleX(0.5); //当前大小没变化 transform:scaleX(1); //放大一倍 transform:scaleX(2);&#125; scaleY 垂直方向缩放。&gt;1的时候放大，&lt;1的时候缩小。 scale 简写，相当于scaleX和scaleY的组合。 12//x y 水平方向扩大一倍 垂直方向缩小一半transform:scale(2,0.5);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P163_12_使用scale3d同时改变三轴缩放","slug":"技术向/CSS/体验高质量的CSS教程/P163_12_使用scale3d同时改变三轴缩放","date":"2020-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:49.786Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P163_12_使用scale3d同时改变三轴缩放/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P163_12_%E4%BD%BF%E7%94%A8scale3d%E5%90%8C%E6%97%B6%E6%94%B9%E5%8F%98%E4%B8%89%E8%BD%B4%E7%BC%A9%E6%94%BE/","excerpt":"","text":"P163 12 使用scale3d同时改变三轴缩放 scale3d 前面讲过，scale是scaleX和scaleY的简写。 那么scale3d就是加入了Z轴的支持，更强。 123//scale3d(x,y,z)//x放大到2倍 y放大到3倍 z放大到6倍transform: scale3d(2,3,6);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P162_11_3D视图中Z轴缩放使用","slug":"技术向/CSS/体验高质量的CSS教程/P162_11_3D视图中Z轴缩放使用","date":"2020-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:49.786Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P162_11_3D视图中Z轴缩放使用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P162_11_3D%E8%A7%86%E5%9B%BE%E4%B8%ADZ%E8%BD%B4%E7%BC%A9%E6%94%BE%E4%BD%BF%E7%94%A8/","excerpt":"","text":"P162 11 3D视图中Z轴缩放使用 scaleZ 由于涉及一些未学的属性，还不能理解。请详见 **视频[P162 11 3D视图中Z轴缩放使用]**。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P164_13_开发缩放菜单案例","slug":"技术向/CSS/体验高质量的CSS教程/P164_13_开发缩放菜单案例","date":"2020-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:49.786Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P164_13_开发缩放菜单案例/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P164_13_%E5%BC%80%E5%8F%91%E7%BC%A9%E6%94%BE%E8%8F%9C%E5%8D%95%E6%A1%88%E4%BE%8B/","excerpt":"","text":"P164 13 开发缩放菜单案例 transform-origin 缩放基点。 默认位于中心。 例： 12//改变至左上角transform-origin: left top; 实战案例 源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; box-sizing: border-box; &#125; main&#123; position: absolute; top: 50%; left: 50%; transform: translate(-50%,-50%); &#125; ul&#123; display: flex; flex-direction: row; list-style-type: none; &#125; ul li&#123; margin-right: 10px; &#125; ul li strong&#123; position: relative; padding: 5px 30px; background: #27ae60; text-transform: uppercase; cursor: pointer; z-index: 1; &#125; ul li strong + div&#123; display: flex; flex-direction: column; background: #95a5a6; padding: 10px; transform: scale(0); transition: .6s; &#125; ul li strong + div a&#123; color: white; text-decoration: none; &#125; ul li:hover strong + div&#123; transform: scale(1); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;ul&gt; &lt;li&gt; &lt;strong&gt;video&lt;/strong&gt; &lt;div&gt; &lt;a href=&quot;&quot;&gt;HDCMS&lt;/a&gt; &lt;a href=&quot;&quot;&gt;PHP&lt;/a&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;strong&gt;live&lt;/strong&gt; &lt;div&gt; &lt;a href=&quot;&quot;&gt;LINUX&lt;/a&gt; &lt;a href=&quot;&quot;&gt;CSS&lt;/a&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P165_14_图集效果案例","slug":"技术向/CSS/体验高质量的CSS教程/P165_14_图集效果案例","date":"2020-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:49.787Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P165_14_图集效果案例/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P165_14_%E5%9B%BE%E9%9B%86%E6%95%88%E6%9E%9C%E6%A1%88%E4%BE%8B/","excerpt":"","text":"P165 14 图集效果案例 filter 滤镜 blur 高斯模糊的效果。 1fliter: blur(25px); 实战案例 源码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; box-sizing: border-box; &#125; body &#123; height: 100vh; width: 100vw; display: flex; justify-content: center; align-items: center; background: #2c3e50; &#125; main &#123; display: flex; justify-content: center; align-items: center; &#125; div &#123; width: 200px; height: 200px; margin-right: 20px; overflow: hidden; border: solid 2px #95a5a6; transition: 1s; &#125; div &gt; img &#123; height: 100%; &#125; main:hover div &#123; filter: blur(15px); transform: scale(.6); &#125; main:hover div:hover &#123; filter: none; transform: scale(1.6); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;div&gt;&lt;img src=&quot;1.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt; &lt;div&gt;&lt;img src=&quot;2.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt; &lt;div&gt;&lt;img src=&quot;3.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt; 实战案例 介绍：常规，鼠标移动到图片上时，图片略微放大。 效果： 源码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; box-sizing: border-box; &#125; body &#123; height: 100vh; width: 100vw; display: flex; justify-content: center; align-items: center; background: #2c3e50; &#125; main &#123; display: flex; justify-content: center; align-items: center; &#125; div &#123; width: 200px; height: 200px; margin-right: 20px; overflow: hidden; border: solid 2px #95a5a6; transition: 1s; &#125; div &gt; img &#123; height: 100%; filter: blur(1px); transition: 1s; &#125; div&gt;img:hover&#123; filter: none; transform: scale(1.1); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;div&gt;&lt;img src=&quot;1.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt; &lt;div&gt;&lt;img src=&quot;2.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt; &lt;div&gt;&lt;img src=&quot;3.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P166_15_按X轴旋转物体与透视查看","slug":"技术向/CSS/体验高质量的CSS教程/P166_15_按X轴旋转物体与透视查看","date":"2020-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:49.787Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P166_15_按X轴旋转物体与透视查看/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P166_15_%E6%8C%89X%E8%BD%B4%E6%97%8B%E8%BD%AC%E7%89%A9%E4%BD%93%E4%B8%8E%E9%80%8F%E8%A7%86%E6%9F%A5%E7%9C%8B/","excerpt":"","text":"P166 15 按X轴旋转物体与透视查看 可能不太好看出效果，建议加入透视 1transform: perspective(900px); rotateX 沿X轴选转。 12transform: rotateX(45deg);transform: rotateX(-45deg); rotateY 沿Y轴选转。 1transform: rotateY(90deg); rotateZ rotate 沿Z轴选转。 rotate和rotateZ相同。 12transform: rotateZ(45deg);transform: rotate(45deg);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P169_18_rotate3d控制3D向量旋转","slug":"技术向/CSS/体验高质量的CSS教程/P169_18_rotate3d控制3D向量旋转","date":"2020-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:49.788Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P169_18_rotate3d控制3D向量旋转/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P169_18_rotate3d%E6%8E%A7%E5%88%B63D%E5%90%91%E9%87%8F%E6%97%8B%E8%BD%AC/","excerpt":"","text":"P169 18 rotate3d控制3D向量旋转 rotate3d 参数：(x轴向量，y轴向量，z轴向量，偏转角度) 12345678//沿x轴旋转transform: rotate3d(1,0,0,90deg);//沿y轴旋转transform: rotate3d(0,1,0,90deg);//沿z轴旋转transform: rotate3d(0,0,1,90deg);//xyz向量比例不同 旋转幅度不同 比例越大旋转比例越大transform: rotate3d(10,1,1,90deg);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P171_20_网站动态LOGO制作","slug":"技术向/CSS/体验高质量的CSS教程/P171_20_网站动态LOGO制作","date":"2020-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:49.788Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P171_20_网站动态LOGO制作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P171_20_%E7%BD%91%E7%AB%99%E5%8A%A8%E6%80%81LOGO%E5%88%B6%E4%BD%9C/","excerpt":"","text":"P171 20 网站动态LOGO制作 实战案例 介绍：当鼠标移动到logo时具有颜色背景的字母会旋转。 效果： 源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; box-sizing: border-box; &#125; main &#123; height: 100vh; width: 100vw; display: flex; justify-content: center; align-items: center; background: #2c3e50; &#125; main div &#123; cursor: pointer; color: white; font-size: 2em; &#125; main div strong &#123; height: 80px; width: 80px; display: inline-block; transition: 1s; border-radius: 50%; text-align: center; &#125; main div strong:nth-child(1) &#123; background: #f1c40f; &#125; main div:hover strong:nth-child(1) &#123; transform: rotate(360deg); &#125; main div strong:nth-child(2) &#123; background: #1abc9c; &#125; main div:hover strong:nth-child(2) &#123; transform: rotate(-360deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;div&gt; &lt;div&gt; &lt;strong&gt;h&lt;/strong&gt;ou&lt;strong&gt;d&lt;/strong&gt;unren &lt;/div&gt; &lt;/div&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P172_21_倾斜语法介绍","slug":"技术向/CSS/体验高质量的CSS教程/P172_21_倾斜语法介绍","date":"2020-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:49.789Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P172_21_倾斜语法介绍/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P172_21_%E5%80%BE%E6%96%9C%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"P172 21 倾斜语法介绍 skewX 水平方向发生倾斜。 1transform: skewX(45deg); skewY 垂直方向发生倾斜。 1transform: skewY(45deg); skew 简写，skewX和skewY的组合。 1transform: skew(-45deg,45deg);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P173_22_使用skew制作炫酷按钮","slug":"技术向/CSS/体验高质量的CSS教程/P173_22_使用skew制作炫酷按钮","date":"2020-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:49.789Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P173_22_使用skew制作炫酷按钮/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P173_22_%E4%BD%BF%E7%94%A8skew%E5%88%B6%E4%BD%9C%E7%82%AB%E9%85%B7%E6%8C%89%E9%92%AE/","excerpt":"","text":"P173 22 使用skew制作炫酷按钮 实战案例 介绍：当鼠标移动到btn时出现平行四边形颜色背景。 效果： 源码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; box-sizing: border-box; &#125; body &#123; height: 100vh; width: 100vw; display: flex; justify-content: center; align-items: center; background: #2c3e50; &#125; main &#123; width: 200px; display: flex; justify-content: center; align-items: center; &#125; main a &#123; color: white; font-size: 1.5em; text-decoration: none; border: solid 3px #e74c3c; flex: 1; display: flex; justify-content: center; align-items: center; height: 55px; position: relative; overflow: hidden; &#125; .btn::after &#123; content: &#x27;&#x27;; width: 0; height: 100%; position: absolute; transform: skew(45deg); background: #e74c3c; z-index: -1; transition: .5s; &#125; .btn:hover::after &#123; width: 100%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;a href=&quot;&quot; class=&quot;btn&quot;&gt;houdunren&lt;/a&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P174_23_快速制作3D立体按钮","slug":"技术向/CSS/体验高质量的CSS教程/P174_23_快速制作3D立体按钮","date":"2020-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:49.790Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P174_23_快速制作3D立体按钮/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P174_23_%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9C3D%E7%AB%8B%E4%BD%93%E6%8C%89%E9%92%AE/","excerpt":"","text":"P174 23 快速制作3D立体按钮 实战案例 介绍：练习倾斜skew和旋转rotate。 效果： 源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; box-sizing: border-box; &#125; body &#123; height: 100vh; width: 100vw; display: flex; justify-content: center; align-items: center; background: #2c3e50; &#125; .btn&#123; height: 40px; width: 200px; background: #e74c3c; display: flex; justify-content: center; align-items: center; text-decoration: none; color: white; font-size: .8em; position: relative; transform: skewX(25deg) rotate(-15deg); letter-spacing: .5em; text-transform: uppercase; font-weight: bold; &#125; .btn::before&#123; content: &#x27;&#x27;; width: 10px; height: 100%; position: absolute; left: -10px; background: black; transform: skewY(-45deg) translateY(5px); &#125; .btn::after&#123; content: &#x27;&#x27;; width: 100%; height: 10px; position: absolute; bottom: -10px; background: black; transform: skewX(-45deg) translateX(-5px); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;a href=&quot;&quot; class=&quot;btn&quot;&gt;houdunren&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P175_24_2D变形参考点使用","slug":"技术向/CSS/体验高质量的CSS教程/P175_24_2D变形参考点使用","date":"2020-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:49.790Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P175_24_2D变形参考点使用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P175_24_2D%E5%8F%98%E5%BD%A2%E5%8F%82%E8%80%83%E7%82%B9%E4%BD%BF%E7%94%A8/","excerpt":"","text":"P175 24 2D变形参考点使用 transform-origin 参考点。 前面**[****P174 23 快速制作3D立体按钮]**已经提到过。 应用于**旋转(rotate)**： 注：参考点可以位于图形外面。 123transform-origin: right bottom;//可以通过百分比transform-origin: 100% 100%; 应用于倾斜**(skew)**： 123//X水平方向倾斜 bottom固定了下边不动 上边动transform: skewX(-45deg);transform-origin: left bottom; 123//Y垂直方向倾斜 left固定了左边不动 右边动transform: skewY(-45deg);transform-origin: left bottom; ** ** 3D效果 Z轴参数不能为百分比。 1transform-origin: left bottom 300px;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P177_26_3D新年快乐贺卡制作","slug":"技术向/CSS/体验高质量的CSS教程/P177_26_3D新年快乐贺卡制作","date":"2020-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:49.790Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P177_26_3D新年快乐贺卡制作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P177_26_3D%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90%E8%B4%BA%E5%8D%A1%E5%88%B6%E4%BD%9C/","excerpt":"","text":"P177 26 3D新年快乐贺卡制作 实战案例 介绍：练习参考点和旋转。 效果： 源码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; box-sizing: border-box; &#125; body&#123; height: 100vh; width: 100vw; background: #2c3e50; display: flex; justify-content: center; align-items: center; &#125; div&#123; height: 200px; width: 300px; background: #e67e22; display: flex; justify-content: center; align-items: center; color: white; font-size: 2em; position: relative; transform-style: preserve-3d; transform: perspective(900px) rotateX(25deg) rotateY(15deg); &#125; div::before, div::after&#123; height: 100%; width: 50%; position: absolute; display: flex; align-items: center; background: #e74c3c; transition: 1s; &#125; div::before&#123; content: &#x27;新年&#x27;; top: 0; left: 0; justify-content: flex-end; transform-origin: left; &#125; div::after&#123; content: &#x27;快乐&#x27;; top: 0; right: 0; justify-content: flex-start; transform-origin: right; &#125; div:hover::before&#123; transform: rotateY(-180deg); &#125; div:hover::after&#123; transform: rotateY(180deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;card&quot;&gt;houdunren&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P179_28_让时钟走起来transform技巧使用","slug":"技术向/CSS/体验高质量的CSS教程/P179_28_让时钟走起来transform技巧使用","date":"2020-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:49.791Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P179_28_让时钟走起来transform技巧使用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P179_28_%E8%AE%A9%E6%97%B6%E9%92%9F%E8%B5%B0%E8%B5%B7%E6%9D%A5transform%E6%8A%80%E5%B7%A7%E4%BD%BF%E7%94%A8/","excerpt":"","text":"P179 28 让时钟走起来transform技巧使用 实战案例 效果： 源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; box-sizing: border-box; &#125; body &#123; background: #2c3e50; width: 100vw; height: 100vh; display: flex; justify-content: center; align-items: center; &#125; main &#123; width: 400px; height: 400px; border-radius: 50%; position: relative; &#125; .clock &#123; width: 400px; height: 400px; border-radius: 50%; background: linear-gradient(to right, #f1c40f, #e67e22, #e74c3c); position: relative; z-index: -2; &#125; .clock:after &#123; content: &#x27;&#x27;; background: #2c3e50; position: absolute; width: 90%; height: 90%; left: 50%; top: 50%; transform: translate(-50%, -50%); border-radius: 50%; z-index: -1; &#125; .line &#123; position: absolute; width: 80%; height: 80%; left: 50%; top: 50%; transform: translate(-50%, -50%); border-radius: 50%; &#125; .line::before &#123; content: &#x27;&#x27;; left: 50%; top: 50%; transform: translate(-50%, -50%); position: absolute; width: 90%; height: 90%; background: #2c3e50; border-radius: 50%; z-index: 2; &#125; .line::after &#123; content: &#x27;&#x27;; left: 50%; top: 50%; transform: translate(-50%, -50%); position: absolute; width: 20px; height: 20px; background: #fff; border-radius: 50%; z-index: 2; &#125; .line div &#123; width: 8px; height: 100%; position: absolute; background: white; left: 50%; &#125; .line div:nth-child(1) &#123; transform: translateX(-50%) rotateZ(0); &#125; .line div:nth-child(2) &#123; transform: translateX(-50%) rotateZ(30deg); &#125; .line div:nth-child(3) &#123; transform: translateX(-50%) rotateZ(60deg); &#125; .line div:nth-child(4) &#123; transform: translateX(-50%) rotateZ(90deg); &#125; .line div:nth-child(5) &#123; transform: translateX(-50%) rotateZ(120deg); &#125; .line div:nth-child(6) &#123; transform: translateX(-50%) rotateZ(150deg); &#125; .hour &#123; width: 8px; height: 15%; position: absolute; background: white; left: 50%; bottom: 50%; transform: translateX(-50%); transform-origin: bottom; &#125; .minute &#123; width: 5px; height: 25%; position: absolute; background: white; left: 50%; bottom: 50%; transform: translateX(-50%) rotateZ(60deg); transform-origin: bottom; &#125; .second &#123; width: 1px; height: 35%; position: absolute; background: white; left: 50%; bottom: 50%; transform: translateX(-50%) rotateZ(90deg); transform-origin: bottom; transition: 40s; &#125; main:hover .second &#123; transform: translateX(-50%) rotateZ(360deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;div class=&quot;clock&quot;&gt; &lt;div class=&quot;line&quot;&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;hour&quot;&gt;&lt;/div&gt; &lt;div class=&quot;minute&quot;&gt;&lt;/div&gt; &lt;div class=&quot;second&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P178_27_纯CSS电子时钟绘制表盘","slug":"技术向/CSS/体验高质量的CSS教程/P178_27_纯CSS电子时钟绘制表盘","date":"2020-04-21T16:00:00.000Z","updated":"2022-06-15T08:32:49.791Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P178_27_纯CSS电子时钟绘制表盘/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P178_27_%E7%BA%AFCSS%E7%94%B5%E5%AD%90%E6%97%B6%E9%92%9F%E7%BB%98%E5%88%B6%E8%A1%A8%E7%9B%98/","excerpt":"","text":"P178 27 纯CSS电子时钟绘制表盘 实战案例 效果： 源码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; box-sizing: border-box; &#125; body&#123; background: #2c3e50; width: 100vw; height: 100vh; display: flex; justify-content: center; align-items: center; &#125; main&#123; width: 400px; height: 400px; border-radius: 50%; background: linear-gradient(to right,#f1c40f,#e67e22,#e74c3c); position: relative; z-index: -2; &#125; main:after&#123; content: &#x27;&#x27;; background: #2c3e50; position: absolute; width: 90%; height: 90%; left: 50%; top: 50%; transform: translate(-50%,-50%); border-radius: 50%; z-index: -1; &#125; .line&#123; position: absolute; width: 80%; height: 80%; left: 50%; top: 50%; transform: translate(-50%,-50%); border-radius: 50%; &#125; .line div&#123; width: 8px; height: 100%; position: absolute; background: white; left: 50%; &#125; .line div:nth-child(1)&#123; transform: rotateZ(0); &#125; .line div:nth-child(2)&#123; transform: rotateZ(30deg); &#125; .line div:nth-child(3)&#123; transform: rotateZ(60deg); &#125; .line div:nth-child(4)&#123; transform: rotateZ(90deg); &#125; .line div:nth-child(5)&#123; transform: rotateZ(120deg); &#125; .line div:nth-child(6)&#123; transform: rotateZ(150deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;div class=&quot;line&quot;&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;/div&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P147_21_栅格流动处理机制","slug":"技术向/CSS/体验高质量的CSS教程/P147_21_栅格流动处理机制","date":"2020-04-20T16:00:00.000Z","updated":"2022-06-15T08:32:49.779Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P147_21_栅格流动处理机制/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P147_21_%E6%A0%85%E6%A0%BC%E6%B5%81%E5%8A%A8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/","excerpt":"","text":"P147 21 栅格流动处理机制 grid-auto-flow 改变栅格元素排列顺序。 row 默认，从左向右水平排列。 column 从上向下垂直排列。 dense 强制补空缺位置。 例： 123456div:nth-child(1)&#123; grid-column: 1/span 2;&#125;div:nth-child(2)&#123; grid-column: 2/span 1;&#125; 由于第一行的第二列存在其他元素。因此编号2的元素被挤到了第二行的第二列。可见，第一行的第三列和第二行的第一列位置空缺出来了。 强制填补。 1grid-auto-flow: row dense;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P148_22_栅格整体对齐处理方式","slug":"技术向/CSS/体验高质量的CSS教程/P148_22_栅格整体对齐处理方式","date":"2020-04-20T16:00:00.000Z","updated":"2022-06-15T08:32:49.779Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P148_22_栅格整体对齐处理方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P148_22_%E6%A0%85%E6%A0%BC%E6%95%B4%E4%BD%93%E5%AF%B9%E9%BD%90%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/","excerpt":"","text":"P148 22 栅格整体对齐处理方式 控制整个栅格排列方向。 和弹性盒模型（display:flex）一样。 justify-content 控制水平方向栅格空间的排列方式。 start 默认，靠向栅格起始位置。 end 靠向栅格结束位置。 center 靠向栅格中间。 space-around 平均分配，中间间隔是两侧间隔的两倍。 space-between 平均分配，靠两侧。 space-evenly 平均分配，间隔相等。 align-content 控制垂直方向栅格空间的排列方式。 start 默认，靠向顶部。 end 靠向底部。 center 靠向栅格中间。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P149_23_栅格内元素的整体控制技巧","slug":"技术向/CSS/体验高质量的CSS教程/P149_23_栅格内元素的整体控制技巧","date":"2020-04-20T16:00:00.000Z","updated":"2022-06-15T08:32:49.780Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P149_23_栅格内元素的整体控制技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P149_23_%E6%A0%85%E6%A0%BC%E5%86%85%E5%85%83%E7%B4%A0%E7%9A%84%E6%95%B4%E4%BD%93%E6%8E%A7%E5%88%B6%E6%8A%80%E5%B7%A7/","excerpt":"","text":"P149 23 栅格内元素的整体控制技巧 栅格是固定不变，移动的是栅格内部的元素。 justify-items 控制元素在栅格空间内的水平方向位置。 start 靠左。 end 靠右。 center 居中。 stretch 默认，拉抻。栅格空间里面的元素的height&#x2F;width&#x3D;auto。 align-items 控制元素在栅格空间内的垂直方向位置。 start 靠上。 end 靠下。 center 居中。 stretch 默认，拉抻。栅格空间里面的元素的height&#x2F;width&#x3D;auto。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P150_24_栅格元素独立控制对齐方式","slug":"技术向/CSS/体验高质量的CSS教程/P150_24_栅格元素独立控制对齐方式","date":"2020-04-20T16:00:00.000Z","updated":"2022-06-15T08:32:49.780Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P150_24_栅格元素独立控制对齐方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P150_24_%E6%A0%85%E6%A0%BC%E5%85%83%E7%B4%A0%E7%8B%AC%E7%AB%8B%E6%8E%A7%E5%88%B6%E5%AF%B9%E9%BD%90%E6%96%B9%E5%BC%8F/","excerpt":"","text":"P150 24 栅格元素独立控制对齐方式 justify-self 单独控制元素在栅格空间内的水平方向位置。 align-self 单独控制元素在栅格空间内的垂直方向位置。 例： 12345678div:first-child&#123; justify-self: end; align-self: center;&#125;div:nth-child(4)&#123; justify-self: start; align-self: center;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P151_25_组合简写栅格对齐方式","slug":"技术向/CSS/体验高质量的CSS教程/P151_25_组合简写栅格对齐方式","date":"2020-04-20T16:00:00.000Z","updated":"2022-06-15T08:32:49.781Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P151_25_组合简写栅格对齐方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P151_25_%E7%BB%84%E5%90%88%E7%AE%80%E5%86%99%E6%A0%85%E6%A0%BC%E5%AF%B9%E9%BD%90%E6%96%B9%E5%BC%8F/","excerpt":"","text":"P151 25 组合简写栅格对齐方式 place-content 相当于：justify-content和align-content的组合。 控制栅格空间在容器内的布局。 1234justify-content: space-evenly;align-content: center;//相当于 -&gt; 控制行 列place-content: center space-evenly; place-items 相当于：justify-items和align-items的组合。 控制元素在栅格空间内的布局。 1234justify-items: start;align-items: end;//相当于 -&gt; 控制行 列place-items: end start; place-self 相当于：justify-self和align-self的组合。 单独控制元素在栅格空间内的布局。 12345678div:nth-child(4)&#123; justify-self: start; align-self:center;&#125;//相当于 -&gt; 控制行 列div:nth-child(4)&#123; place-self: center start;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P153_2_使用TRANSLATE控制元素二维移动","slug":"技术向/CSS/体验高质量的CSS教程/P153_2_使用TRANSLATE控制元素二维移动","date":"2020-04-20T16:00:00.000Z","updated":"2022-06-15T08:32:49.781Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P153_2_使用TRANSLATE控制元素二维移动/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P153_2_%E4%BD%BF%E7%94%A8TRANSLATE%E6%8E%A7%E5%88%B6%E5%85%83%E7%B4%A0%E4%BA%8C%E7%BB%B4%E7%A7%BB%E5%8A%A8/","excerpt":"","text":"P153 2 使用TRANSLATE控制元素二维移动 transform 控制元素移动方向。 X正值向右，负值向左。Y正值向下，负值向上。 transitionX 沿X轴移动。 单位：100px（移动100个像素），100%（移动元素1个宽度的长度）。 1transform: translateX(100%); transitionY 沿Y轴移动。 以上，动画效果十分生硬，一瞬间到达移动位置。 transition 起到过渡动画的效果。 12//一秒到达预定移动位置。transition: 1s; 实战案例 源码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; main &#123; position: absolute; left: 50%; top: 50%; margin-left: -200px; margin-top: -200px; width: 400px; height: 400px; border: solid 5px silver; &#125; div &#123; position: absolute; left: 50%; top: 50%; margin-left: -100px; margin-top: -100px; width: 200px; height: 200px; &#125; div:nth-child(1) &#123; background: #2ecc71; &#125; div:nth-child(2) &#123; background: #e67e22; transition: 1s; &#125; main:hover div:nth-child(2)&#123; transform: translateX(100%); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P154_3_多条规则注意事项与二维移动统一控制","slug":"技术向/CSS/体验高质量的CSS教程/P154_3_多条规则注意事项与二维移动统一控制","date":"2020-04-20T16:00:00.000Z","updated":"2022-06-15T08:32:49.782Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P154_3_多条规则注意事项与二维移动统一控制/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P154_3_%E5%A4%9A%E6%9D%A1%E8%A7%84%E5%88%99%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E4%B8%8E%E4%BA%8C%E7%BB%B4%E7%A7%BB%E5%8A%A8%E7%BB%9F%E4%B8%80%E6%8E%A7%E5%88%B6/","excerpt":"","text":"P154 3 多条规则注意事项与二维移动统一控制 transition 简写，相当于transitionX和transitionY的组合。 123transform: translateX(100%) translateY(50%);//相当于 参数X Ytransform: trams;ate(100%,50%);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P157_6_使用translate3d控制3D移动","slug":"技术向/CSS/体验高质量的CSS教程/P157_6_使用translate3d控制3D移动","date":"2020-04-20T16:00:00.000Z","updated":"2022-06-15T08:32:49.782Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P157_6_使用translate3d控制3D移动/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P157_6_%E4%BD%BF%E7%94%A8translate3d%E6%8E%A7%E5%88%B63D%E7%A7%BB%E5%8A%A8/","excerpt":"","text":"P157 6 使用translate3d控制3D移动 transition3d 前面讲过，translate是translateX和translateY的简写。 那么translate3d就是加入了Z轴的支持，更强。 123//translate3d(x,y,z);//注意!由于z轴原元素为0,因此不能用百分比transform: translate3d(100%,80%,100px); rotateY 沿Y轴旋转。 1transform: rotateY(45deg);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P158_7_漂亮的动感表单效果","slug":"技术向/CSS/体验高质量的CSS教程/P158_7_漂亮的动感表单效果","date":"2020-04-20T16:00:00.000Z","updated":"2022-06-15T08:32:49.783Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P158_7_漂亮的动感表单效果/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P158_7_%E6%BC%82%E4%BA%AE%E7%9A%84%E5%8A%A8%E6%84%9F%E8%A1%A8%E5%8D%95%E6%95%88%E6%9E%9C/","excerpt":"","text":"P158 7 漂亮的动感表单效果 实战案例 介绍： 1、使用transform动态的居中。 2、选中input底部会有彩条动画。 效果： 源码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; body&#123; background: #34495e; &#125; main&#123; position: absolute; top: 50%; left: 50%; transform: translate(-50%,-50%); width: 300px; height: 300px; border: solid 5px silver; display: flex; flex-direction: column; justify-content: center; align-items: center; &#125; .field&#123; position: relative; overflow: hidden; margin-bottom: 10px; &#125; .field::before&#123; content: &#x27;&#x27;; position: absolute; background: linear-gradient(to right,white,blueviolet,goldenrod,orangered,white); height: 5px; width: 100%; left: 0; bottom: 0; transform: translate(-100%); transition: 2s; &#125; .field:hover::before&#123; transform: translate(100%); &#125; .field input&#123; border: none; outline: none; background: #ecf0f1; padding: 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;div class=&quot;field&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;请输入后盾人账号&quot;&gt; &lt;/div&gt; &lt;div class=&quot;field&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;请输入密码&quot;&gt; &lt;/div&gt;&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P159_8_超酷的移动端视图切换","slug":"技术向/CSS/体验高质量的CSS教程/P159_8_超酷的移动端视图切换","date":"2020-04-20T16:00:00.000Z","updated":"2022-06-15T08:32:49.783Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P159_8_超酷的移动端视图切换/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P159_8_%E8%B6%85%E9%85%B7%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%A7%86%E5%9B%BE%E5%88%87%E6%8D%A2/","excerpt":"","text":"P159 8 超酷的移动端视图切换 实战案例 介绍： 1、使用弹性盒子布局。 效果： 源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; box-sizing: border-box; &#125; body &#123; height: 100vh; width: 100vw; display: flex; flex-direction: column; &#125; main &#123; flex: 1; &#125; nav &#123; height: 8vh; background: #34495e; display: flex; flex-direction: row; justify-content: space-evenly; align-items: center; &#125; nav a &#123; font-size: 2em; color: white; text-decoration: none; flex: 1; text-align: center; text-transform: uppercase; opacity: .8; &#125; nav a:nth-child(2) &#123; border-right: solid 1px silver; border-left: solid 1px silver; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt;&lt;/main&gt;&lt;nav&gt; &lt;a href=&quot;&quot;&gt;home&lt;/a&gt; &lt;a href=&quot;&quot;&gt;video&lt;/a&gt; &lt;a href=&quot;&quot;&gt;live&lt;/a&gt;&lt;/nav&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P160_9_移动端多视图切换呈现","slug":"技术向/CSS/体验高质量的CSS教程/P160_9_移动端多视图切换呈现","date":"2020-04-20T16:00:00.000Z","updated":"2022-06-15T08:32:49.784Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P160_9_移动端多视图切换呈现/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P160_9_%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%A4%9A%E8%A7%86%E5%9B%BE%E5%88%87%E6%8D%A2%E5%91%88%E7%8E%B0/","excerpt":"","text":"P160 9 移动端多视图切换呈现 实战案例 介绍： 1、使用弹性盒子布局。 2、动画效果。 效果： 源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; box-sizing: border-box; &#125; body &#123; height: 100vh; width: 100vw; display: flex; flex-direction: column; &#125; body::after &#123; content: &#x27;houdunren&#x27;; left: 50%; top: 50%; position: absolute; transform: translate(-50%, -50%); font-size: 3em; opacity: .5; &#125; main &#123; flex: 1; position: relative; &#125; nav &#123; height: 8vh; background: #34495e; display: flex; flex-direction: row; justify-content: space-evenly; align-items: center; &#125; nav a &#123; font-size: 2em; color: white; text-decoration: none; flex: 1; text-align: center; text-transform: uppercase; opacity: .8; cursor: pointer; &#125; nav a:nth-child(2) &#123; border-right: solid 1px silver; border-left: solid 1px silver; &#125; main &gt; div &#123; position: absolute; left: 0; top: 0; width: 100%; height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center; transform: translateY(-100%); transition: 1s; z-index: 1; &#125; main &gt; div:target &#123; transform: translateX(0); &#125; main &gt; div:nth-child(1):target &#123; background: #27ae60; &#125; main &gt; div:nth-child(2):target &#123; background: #e67e22; &#125; main &gt; div:nth-child(3):target &#123; background: #2980b9; &#125; i &#123; font-size: 8em; color: white; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;main&gt; &lt;div id=&quot;home&quot;&gt; &lt;i&gt;HOME&lt;/i&gt; &lt;/div&gt; &lt;div id=&quot;video&quot;&gt; &lt;i&gt;VIDEO&lt;/i&gt; &lt;/div&gt; &lt;div id=&quot;live&quot;&gt; &lt;i&gt;LIVE&lt;/i&gt; &lt;/div&gt;&lt;/main&gt;&lt;nav&gt; &lt;a href=&quot;#home&quot;&gt;home&lt;/a&gt; &lt;a href=&quot;#video&quot;&gt;video&lt;/a&gt; &lt;a href=&quot;#live&quot;&gt;live&lt;/a&gt;&lt;/nav&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P120_20_控制弹性元素的排序","slug":"技术向/CSS/体验高质量的CSS教程/P120_20_控制弹性元素的排序","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.771Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P120_20_控制弹性元素的排序/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P120_20_%E6%8E%A7%E5%88%B6%E5%BC%B9%E6%80%A7%E5%85%83%E7%B4%A0%E7%9A%84%E6%8E%92%E5%BA%8F/","excerpt":"","text":"P120 20 控制弹性元素的排序 order [对弹性元素设置] order参数值越大，越靠后。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P126_26_使用margin自动撑满空间技巧","slug":"技术向/CSS/体验高质量的CSS教程/P126_26_使用margin自动撑满空间技巧","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.771Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P126_26_使用margin自动撑满空间技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P126_26_%E4%BD%BF%E7%94%A8margin%E8%87%AA%E5%8A%A8%E6%92%91%E6%BB%A1%E7%A9%BA%E9%97%B4%E6%8A%80%E5%B7%A7/","excerpt":"","text":"P126 26 使用margin自动撑满空间技巧 ** ** margin-right:auto; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; nav&#123; width: 1400px; height: 50px; background: #f3f3f3; margin: 0 auto; display: flex; flex-direction: row; &#125; nav ul&#123; list-style-type: none; display: flex; flex-direction: row; align-items: center; &#125; nav ul:first-child&#123; margin-right: auto; &#125; nav ul:first-child li&#123; margin: 0 10px; &#125; nav ul:last-child li&#123; width: 50px; height: 50px; background: #9b59b6; border-radius: 50%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;nav&gt; &lt;ul&gt; &lt;li&gt;首页&lt;/li&gt; &lt;li&gt;视频教程&lt;/li&gt; &lt;li&gt;晚八点直播&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/nav&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P130_4_声明栅格系统的容器","slug":"技术向/CSS/体验高质量的CSS教程/P130_4_声明栅格系统的容器","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.772Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P130_4_声明栅格系统的容器/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P130_4_%E5%A3%B0%E6%98%8E%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%B9%E5%99%A8/","excerpt":"","text":"P130 4 声明栅格系统的容器 display 给盒子加上display:grid属性，这个盒子就是栅格容器了。 grid 定义盒子为栅格容器，容器是块级元素。 inline-grid 定义盒子为栅格容器，容器是行级元素。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P131_5_栅格绘制的基础知识","slug":"技术向/CSS/体验高质量的CSS教程/P131_5_栅格绘制的基础知识","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.772Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P131_5_栅格绘制的基础知识/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P131_5_%E6%A0%85%E6%A0%BC%E7%BB%98%E5%88%B6%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"P131 5 栅格绘制的基础知识 grid-template-rows 给栅格容器画上行线。 123//容器每行高100pxdisplay: grid;grid-template-rows: 100px 100px 100px; grid-template-columns 给栅格容器画上列线。 12345//容器每行宽100pxdisplay: grid;grid-template-columns: 100px 100px 100px;//按照百分比grid-template-columns: 20% 20% 20% 20% 20%; repeat(个数，高&#x2F;宽度) 重复绘制函数。 1234//按照函数重复绘制grid-template-columns: repeat(5,20%);//按照函数重复绘制两遍[图1]grid-template-columns: repeat(5,100px 50px); 图1 栅格元素不指定宽高 栅格元素自动填充满。 栅格元素指定宽高 按照元素的尺寸并占用一个栅格。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P133_7_自动填充与按比例划分栅格","slug":"技术向/CSS/体验高质量的CSS教程/P133_7_自动填充与按比例划分栅格","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.773Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P133_7_自动填充与按比例划分栅格/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P133_7_%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E4%B8%8E%E6%8C%89%E6%AF%94%E4%BE%8B%E5%88%92%E5%88%86%E6%A0%85%E6%A0%BC/","excerpt":"","text":"P133 7 自动填充与按比例划分栅格 *repeat(个数，高&#x2F;宽度)* 重复绘制函数。 自动填充 auto-fill自动填充，不用指定行&#x2F;列数。 123display: grid;grid-template-rows: repeat(auto-fill,100px);grid-template-columns: repeat(auto-fill,100px); 按比例 fr，代表比例。 1234//等比例display: grid;grid-template-rows: repeat(3,1fr);grid-template-columns: repeat(3,1fr); 例： 123display: grid;grid-template-rows: 1fr 2fr 1fr;grid-template-columns: 1fr 2fr 1fr;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P134_8_MINMAX控制尺寸波动范围","slug":"技术向/CSS/体验高质量的CSS教程/P134_8_MINMAX控制尺寸波动范围","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.773Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P134_8_MINMAX控制尺寸波动范围/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P134_8_MINMAX%E6%8E%A7%E5%88%B6%E5%B0%BA%E5%AF%B8%E6%B3%A2%E5%8A%A8%E8%8C%83%E5%9B%B4/","excerpt":"","text":"P134 8 MINMAX控制尺寸波动范围 *repeat(个数，minmax(最小值,最大值))* 控制栅格元素最小最大值范围。类似于min&#x2F;max-height&#x2F;width。 12display: grid;grid-template-rows: repeat(2,minmax(50px,100px));","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P135_9_用栅格间距控制留白","slug":"技术向/CSS/体验高质量的CSS教程/P135_9_用栅格间距控制留白","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.774Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P135_9_用栅格间距控制留白/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P135_9_%E7%94%A8%E6%A0%85%E6%A0%BC%E9%97%B4%E8%B7%9D%E6%8E%A7%E5%88%B6%E7%95%99%E7%99%BD/","excerpt":"","text":"P135 9 用栅格间距控制留白 可以使用传统的margin&#x2F;padding来调整间距。 row-gap grid-row-gap 前者为新属性名，后者为旧属性名。 栅格行与行之间的间距。 1row-gap: 10px; column-gap grid-column-gap 栅格列与列之间的间距。 1column-gap: 10px; gap 简写的方式 1234//行和列同值gap: 10px;//行值 列值gap: 10px 20px;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P136_10_根据栅格线编号放置元素","slug":"技术向/CSS/体验高质量的CSS教程/P136_10_根据栅格线编号放置元素","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.774Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P136_10_根据栅格线编号放置元素/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P136_10_%E6%A0%B9%E6%8D%AE%E6%A0%85%E6%A0%BC%E7%BA%BF%E7%BC%96%E5%8F%B7%E6%94%BE%E7%BD%AE%E5%85%83%E7%B4%A0/","excerpt":"","text":"P136 10 根据栅格线编号放置元素 grid-row-start 栅格，起始的行。 grid-row-end 栅格，结束的行。 grid-column-start 栅格，起始的列。 grid-column-end 栅格，结束的列。 例：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P138_12_栅格固定命名放置元素","slug":"技术向/CSS/体验高质量的CSS教程/P138_12_栅格固定命名放置元素","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.775Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P138_12_栅格固定命名放置元素/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P138_12_%E6%A0%85%E6%A0%BC%E5%9B%BA%E5%AE%9A%E5%91%BD%E5%90%8D%E6%94%BE%E7%BD%AE%E5%85%83%E7%B4%A0/","excerpt":"","text":"P138 12 栅格固定命名放置元素 grid-template-rows:[第一行起始线名] 高度 [第一行结束线名 第二行起始线名] 高度 [第二行结束线名] grid-template-columns:[第一列起始线名] 宽度 [第一列结束线名 第二列起始线名] 宽度 [第二列结束线名] 例： 命名 12grid-template-rows:[r1-start] 100px [r1-end r2-start] 100px [r2-end r3-start] 100px [r3-end];grid-template-columns:[c1-start] 100px [c1-end c2-start] 100px [c2-end c3-start] 100px [c3-end]; 引用 1234grid-row-start: r1-start;grid-row-end: r1-end;grid-column-start: c1-start;grid-column-end: c2-end;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P139_13_重复栅格的命名技巧","slug":"技术向/CSS/体验高质量的CSS教程/P139_13_重复栅格的命名技巧","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.775Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P139_13_重复栅格的命名技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P139_13_%E9%87%8D%E5%A4%8D%E6%A0%85%E6%A0%BC%E7%9A%84%E5%91%BD%E5%90%8D%E6%8A%80%E5%B7%A7/","excerpt":"","text":"P139 13 重复栅格的命名技巧 grid-template-rows:repeat(个数,[起始线名] 高度 [结束线名]) grid-template-columns:repeat(个数,[起始线名] 宽度 [结束线名]) 例： 命名 12grid-template-rows:repeat(3,[r-start] 1fr [r-end]);grid-template-columns:repeat(3,[c-start] 1fr [c-end]); 引用 参数：起始线名&#x2F;结束线名 第几行&#x2F;列 1234grid-row-start: r-start 1;grid-row-end: r-end 1;grid-column-start: c-start 1;grid-column-end: c-end 3;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P140_14_根据偏移量定位元素","slug":"技术向/CSS/体验高质量的CSS教程/P140_14_根据偏移量定位元素","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.776Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P140_14_根据偏移量定位元素/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P140_14_%E6%A0%B9%E6%8D%AE%E5%81%8F%E7%A7%BB%E9%87%8F%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0/","excerpt":"","text":"P140 14 根据偏移量定位元素 span 偏移量。 偏移量值为1，是自身。 例： 123//以r1起始线和c1起始线偏移grid-row-end: span 1;grid-column-end: span 3; 12345//以r2起始线和c2起始线偏移grid-row-start: 2;grid-column-start: 2;grid-row-end: span 1;grid-column-end: span 1;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P141_15_元素定位简写操作","slug":"技术向/CSS/体验高质量的CSS教程/P141_15_元素定位简写操作","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.776Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P141_15_元素定位简写操作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P141_15_%E5%85%83%E7%B4%A0%E5%AE%9A%E4%BD%8D%E7%AE%80%E5%86%99%E6%93%8D%E4%BD%9C/","excerpt":"","text":"P141 15 元素定位简写操作 定位简写 grid-row 相当于grid-row-start和grid-row-end。 12//grid-row: -start / -endgrid-row: 3 / 4; grid-column 相当于grid-column-start和grid-column-end。 12//grid-column: -start / -endgrid-column: 3 / 4; 例： 1、根据线定位。 2、根据偏移量。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P142_16_开发BOOTSTRAP栅格系统这么简单","slug":"技术向/CSS/体验高质量的CSS教程/P142_16_开发BOOTSTRAP栅格系统这么简单","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.777Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P142_16_开发BOOTSTRAP栅格系统这么简单/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P142_16_%E5%BC%80%E5%8F%91BOOTSTRAP%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F%E8%BF%99%E4%B9%88%E7%AE%80%E5%8D%95/","excerpt":"","text":"P142 16 开发BOOTSTRAP栅格系统这么简单 仿bootstrap","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P143_17_使用栅格区域部署元素","slug":"技术向/CSS/体验高质量的CSS教程/P143_17_使用栅格区域部署元素","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.778Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P143_17_使用栅格区域部署元素/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P143_17_%E4%BD%BF%E7%94%A8%E6%A0%85%E6%A0%BC%E5%8C%BA%E5%9F%9F%E9%83%A8%E7%BD%B2%E5%85%83%E7%B4%A0/","excerpt":"","text":"P143 17 使用栅格区域部署元素 grid-area 相当于grid-row-start、grid-row-end和grid-column-start、grid-column-end简写到了一起。 根据线值定位 ** ** 12//grid-area: 起始行/起始列/结束行/结束列grid-area: 1/1/2/4; 根据线名定位 栅格容器 123display: grid;grid-template-rows: repeat(3,[r] 1fr);grid-template-columns: repeat(3,[c] 1fr); 栅格元素 12//grid-area: 起始行/起始列/结束行/结束列grid-area: r 1/c 1/r 4/c 4;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P144_18_栅格区域布局真的太好用了","slug":"技术向/CSS/体验高质量的CSS教程/P144_18_栅格区域布局真的太好用了","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.778Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P144_18_栅格区域布局真的太好用了/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P144_18_%E6%A0%85%E6%A0%BC%E5%8C%BA%E5%9F%9F%E5%B8%83%E5%B1%80%E7%9C%9F%E7%9A%84%E5%A4%AA%E5%A5%BD%E7%94%A8%E4%BA%86/","excerpt":"","text":"P144 18 栅格区域布局真的太好用了 grid-template-areas 给区域命名。在同一行的区域名写在””内，不同行用不同””。 1234display: grid;grid-template-rows: 60px 1fr 60px;grid-template-columns: 60px 1fr;grid-template-areas: &quot;header header&quot; &quot;nav main&quot; &quot;footer footer&quot;; grid-area 另一个特性是区域名可以作为参数。 例： 代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; article &#123; width: 100vw; height: 100vh; display: grid; grid-template-rows: 60px 1fr 60px; grid-template-columns: 60px 1fr; grid-template-areas: &quot;header header&quot; &quot;nav main&quot; &quot;footer footer&quot;; &#125; header, nav, main, footer &#123; background: blueviolet; background-clip: content-box; padding: 10px; &#125; header &#123; grid-area: header; &#125; nav &#123; grid-area: nav; &#125; main &#123; grid-area: main; &#125; footer &#123; grid-area: footer; display: grid; grid-template-columns: repeat(4, 1fr); &#125; footer div &#123; background: #ddd; background-clip: content-box; padding: 3px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article&gt; &lt;header&gt;&lt;/header&gt; &lt;nav&gt;&lt;/nav&gt; &lt;main&gt;&lt;/main&gt; &lt;footer&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;/footer&gt;&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P145_19_使用栅格区域命名自定义部署元素","slug":"技术向/CSS/体验高质量的CSS教程/P145_19_使用栅格区域命名自定义部署元素","date":"2020-04-19T16:00:00.000Z","updated":"2022-06-15T08:32:49.778Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P145_19_使用栅格区域命名自定义部署元素/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P145_19_%E4%BD%BF%E7%94%A8%E6%A0%85%E6%A0%BC%E5%8C%BA%E5%9F%9F%E5%91%BD%E5%90%8D%E8%87%AA%E5%AE%9A%E4%B9%89%E9%83%A8%E7%BD%B2%E5%85%83%E7%B4%A0/","excerpt":"","text":"P145 19 使用栅格区域命名自定义部署元素 设定栅格区域名后，默认为区域边线命名，如下。 例： 1234header&#123; //起始行名 / 起始列名 / 结束行名 /结束列名 grid-area: header-start / header-start / main-end / main-end;&#125; 效果","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"研讨_第3次课程_JVM","slug":"技术向/Java/源辰课程记录/研讨_第3次课程_JVM","date":"2020-04-17T16:00:00.000Z","updated":"2022-05-11T01:40:26.182Z","comments":true,"path":"技术向/Java/源辰课程记录/研讨_第3次课程_JVM/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%A0%94%E8%AE%A8_%E7%AC%AC3%E6%AC%A1%E8%AF%BE%E7%A8%8B_JVM/","excerpt":"","text":"源辰研讨课 第3次课程 2020.04.18 内容 JVM[周海军] 1 2 3 4 ++i比i++性能更好，i++生成临时变量","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"P111_11_主轴元素的多种排列方式","slug":"技术向/CSS/体验高质量的CSS教程/P111_11_主轴元素的多种排列方式","date":"2020-04-15T16:00:00.000Z","updated":"2022-06-15T08:32:49.767Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P111_11_主轴元素的多种排列方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P111_11_%E4%B8%BB%E8%BD%B4%E5%85%83%E7%B4%A0%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%8E%92%E5%88%97%E6%96%B9%E5%BC%8F/","excerpt":"","text":"P111 11 主轴元素的多种排列方式 justify-content [对弹性容器设置] 控制主轴上子元素的排列方式。 flex-start 主轴，子元素靠向主轴起始点。 例： 12flex-dirction: row;justify-content: flex-start; flex-end 主轴，子元素靠向主轴结束点。 例： 12flex-dirction: row;justify-content: flex-end; 12flex-dirction: row-reverse;justify-content: flex-end; center 子元素居中。 space-between 子元素平均分布。第一个和最后一个元素分靠到两边，中间的元素平均分布。 space-around 子元素平均分布。每个子元素左右都有相同间距，但子元素与子元素之间叠加成了双倍间距。 space-evenly 子元素平均分布。最合适的方式，子元素和子元素之间间距相等。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P112_12_交叉轴元素的多种排列方式","slug":"技术向/CSS/体验高质量的CSS教程/P112_12_交叉轴元素的多种排列方式","date":"2020-04-15T16:00:00.000Z","updated":"2022-06-15T08:32:49.767Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P112_12_交叉轴元素的多种排列方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P112_12_%E4%BA%A4%E5%8F%89%E8%BD%B4%E5%85%83%E7%B4%A0%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%8E%92%E5%88%97%E6%96%B9%E5%BC%8F/","excerpt":"","text":"P112 12 交叉轴元素的多种排列方式 align-items [对弹性容器设置] 控制交叉轴&#x2F;副轴上子元素的排列方式。 flex-start 交叉轴，子元素靠向交叉轴起始点。 例： 12flex-dirction: row;align-items: flex-start; flex-end 交叉轴，子元素靠向交叉轴结束点。 例： 12flex-dirction: row;align-items: flex-end; center 子元素居中。 stretch 拉抻，沿交叉轴方向拉满空间。 注意：子元素不能设定高度&#x2F;宽度。 例： 12flex-dirction: row;align-items: stretch;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P113_13_多行元素在交叉轴的排列方式","slug":"技术向/CSS/体验高质量的CSS教程/P113_13_多行元素在交叉轴的排列方式","date":"2020-04-15T16:00:00.000Z","updated":"2022-06-15T08:32:49.768Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P113_13_多行元素在交叉轴的排列方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P113_13_%E5%A4%9A%E8%A1%8C%E5%85%83%E7%B4%A0%E5%9C%A8%E4%BA%A4%E5%8F%89%E8%BD%B4%E7%9A%84%E6%8E%92%E5%88%97%E6%96%B9%E5%BC%8F/","excerpt":"","text":"P113 13 多行元素在交叉轴的排列方式 align-content [对弹性容器设置] 同一行放不下子元素折行变为多行。 控制多行子元素的排列方式。 flex-start 靠向起始点。 例： 123flex-direction: row;flex-wrap: wrap;align-content: flex-start; flex-end 靠向起始点。 123flex-direction: row;flex-wrap: wrap;align-content: flex-end; center 子元素居中。 space-between 子元素平均分布。第一个和最后一个元素分靠到两边，中间的元素平均分布。 space-around 子元素平均分布。每个子元素左右都有相同间距，但子元素与子元素之间叠加成了双倍间距。 space-evenly 子元素平均分布。最合适的方式，子元素和子元素之间间距相等。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P114_14_弹性元素交叉轴控制","slug":"技术向/CSS/体验高质量的CSS教程/P114_14_弹性元素交叉轴控制","date":"2020-04-15T16:00:00.000Z","updated":"2022-06-15T08:32:49.768Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P114_14_弹性元素交叉轴控制/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P114_14_%E5%BC%B9%E6%80%A7%E5%85%83%E7%B4%A0%E4%BA%A4%E5%8F%89%E8%BD%B4%E6%8E%A7%E5%88%B6/","excerpt":"","text":"P114 14 弹性元素交叉轴控制 align-self [对弹性元素设置] 单独控制弹性子元素在弹性盒子里面的位置。 flex-start 靠向交叉轴起始点。 例： 123article :first-child &#123; align-self: flex-start;&#125; stretch 拉抻。 子元素不能有高度&#x2F;宽度。 12345article :first-child &#123; align-self: stretch; //auto取消对高度的设置 height: auto;&#125; flex-end center","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P115_15_元素可用空间分配","slug":"技术向/CSS/体验高质量的CSS教程/P115_15_元素可用空间分配","date":"2020-04-15T16:00:00.000Z","updated":"2022-06-15T08:32:49.769Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P115_15_元素可用空间分配/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P115_15_%E5%85%83%E7%B4%A0%E5%8F%AF%E7%94%A8%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D/","excerpt":"","text":"P115 15 元素可用空间分配 flex-grow [对弹性元素设置] 对于子元素宽度&#x2F;高度之和小于弹性容器宽度&#x2F;高度。 1234//表示不进行分配，原来多大就是多大。flex-grow: 0;//表示每个子元素都占用1等份flex-grow: 1; 分析数字参数的意义 已知弹性容器宽度550px，内部有3个子元素，每个子元素宽度100px。 计算： 550 - 3 * 100 &#x3D; 250 px 250 &#x2F; 4 &#x3D; 62.5 px I. 100 + 0 * 62.5 &#x3D; 100 px II. 100 + 1 * 62.5 &#x3D; 162.5 px III. 100 + 3 * 62.5 &#x3D; 287.5 px 结果： 结论： 子元素自身宽度+多出来的部分按照等分划分宽度。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P116_16_布局小米移动端页面结构","slug":"技术向/CSS/体验高质量的CSS教程/P116_16_布局小米移动端页面结构","date":"2020-04-15T16:00:00.000Z","updated":"2022-06-15T08:32:49.769Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P116_16_布局小米移动端页面结构/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P116_16_%E5%B8%83%E5%B1%80%E5%B0%8F%E7%B1%B3%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E7%BB%93%E6%9E%84/","excerpt":"","text":"P116 16 布局小米移动端页面结构 实战案例 效果 代码 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; &#125; body &#123; height: 100vh; display: flex; flex-direction: column; justify-content: space-between; &#125; header &#123; height: 60px; background: blueviolet; &#125; main &#123; flex-grow: 1; background: #ccc; &#125; footer &#123; height: 60px; background: #383881; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;header&gt;&lt;/header&gt;&lt;main&gt;&lt;/main&gt;&lt;footer&gt;&lt;/footer&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P117_17_元素动态缩小的处理技巧","slug":"技术向/CSS/体验高质量的CSS教程/P117_17_元素动态缩小的处理技巧","date":"2020-04-15T16:00:00.000Z","updated":"2022-06-15T08:32:49.770Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P117_17_元素动态缩小的处理技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P117_17_%E5%85%83%E7%B4%A0%E5%8A%A8%E6%80%81%E7%BC%A9%E5%B0%8F%E7%9A%84%E5%A4%84%E7%90%86%E6%8A%80%E5%B7%A7/","excerpt":"","text":"P117 17 元素动态缩小的处理技巧 flex-shrink [对弹性元素设置] 对于子元素宽度&#x2F;高度之和大于弹性容器宽度&#x2F;高度。 12//每个元素都不缩小，保持默认宽度flex-shrink: 0; 分析数字参数的意义 已知弹性容器宽度400px，内部有3个子元素，每个子元素宽度200px。 计算： 3 * 200 - 400 &#x3D; 200 px 200 &#x2F; (0 * 200 + 1 * 200 + 3 * 200) &#x3D; 0.25 I. 200 - 200 * 0.25 * 0 &#x3D; 200 px II. 200 - 200 * 0.25 * 1 &#x3D; 150 px III. 200 - 200 * 0.25 * 3 &#x3D; 50 px 结果：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P118_18_主轴的基准尺寸的定义","slug":"技术向/CSS/体验高质量的CSS教程/P118_18_主轴的基准尺寸的定义","date":"2020-04-15T16:00:00.000Z","updated":"2022-06-15T08:32:49.770Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P118_18_主轴的基准尺寸的定义/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P118_18_%E4%B8%BB%E8%BD%B4%E7%9A%84%E5%9F%BA%E5%87%86%E5%B0%BA%E5%AF%B8%E7%9A%84%E5%AE%9A%E4%B9%89/","excerpt":"","text":"P118 18 主轴的基准尺寸的定义 flex-basis [对弹性元素设置] 1.如果弹性容器含有flex-direction:row属性 flex-basis代表width 2.如果弹性容器含有flex-direction:column属性 flex-basis代表height 优先级 由高到低 max&#x2F;min-height&#x2F;width flex-basis height&#x2F;width","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P119_19_弹性元素组规则合定义","slug":"技术向/CSS/体验高质量的CSS教程/P119_19_弹性元素组规则合定义","date":"2020-04-15T16:00:00.000Z","updated":"2022-06-15T08:32:49.770Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P119_19_弹性元素组规则合定义/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P119_19_%E5%BC%B9%E6%80%A7%E5%85%83%E7%B4%A0%E7%BB%84%E8%A7%84%E5%88%99%E5%90%88%E5%AE%9A%E4%B9%89/","excerpt":"","text":"P119 19 弹性元素组规则合定义 flex [对弹性元素设置] 12345flex-grow: 1;flex-shrink: 2;flex-basis: 100px;//相当于flex: 1 2 100px; flex-grow和flex-shrink区别 flex-grow 当小于弹性容器，0保持默认，x倍数增大。 flex-shrink 当大于弹性容器，0保持默认，x倍数缩小。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"研讨_第2次课程_Vue","slug":"技术向/Java/源辰课程记录/研讨_第2次课程_Vue","date":"2020-04-15T16:00:00.000Z","updated":"2022-05-11T01:40:10.888Z","comments":true,"path":"技术向/Java/源辰课程记录/研讨_第2次课程_Vue/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%A0%94%E8%AE%A8_%E7%AC%AC2%E6%AC%A1%E8%AF%BE%E7%A8%8B_Vue/","excerpt":"","text":"源辰研讨课 第2次课程 2020.04.16 内容 Vue[张影] 1.Vue生命周期","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"P103_3_弹性布局与传统布局响应对比","slug":"技术向/CSS/体验高质量的CSS教程/P103_3_弹性布局与传统布局响应对比","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.765Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P103_3_弹性布局与传统布局响应对比/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P103_3_%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80%E4%B8%8E%E4%BC%A0%E7%BB%9F%E5%B8%83%E5%B1%80%E5%93%8D%E5%BA%94%E5%AF%B9%E6%AF%94/","excerpt":"","text":"P103 3 弹性布局与传统布局响应对比 设备缩放标签 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P106_6_声明弹性盒子的几种方式","slug":"技术向/CSS/体验高质量的CSS教程/P106_6_声明弹性盒子的几种方式","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.765Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P106_6_声明弹性盒子的几种方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P106_6_%E5%A3%B0%E6%98%8E%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/","excerpt":"","text":"P106 6 声明弹性盒子的几种方式 display 给盒子加上display:flex&#x2F;inline-flex属性，这个盒子就是弹性盒模型了。 弹性盒模型，主要是控制子元素的排列方式。 flex 相当于块block inline-flex 相当于行-块inline-block 宽度不可设置，取决于content内容。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P107_7_改变弹性元素方向","slug":"技术向/CSS/体验高质量的CSS教程/P107_7_改变弹性元素方向","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.765Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P107_7_改变弹性元素方向/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P107_7_%E6%94%B9%E5%8F%98%E5%BC%B9%E6%80%A7%E5%85%83%E7%B4%A0%E6%96%B9%E5%90%91/","excerpt":"","text":"P107 7 改变弹性元素方向 flex-direction 本属性放置在弹性盒子，子元素排列顺序。 row 默认，子元素从左至右排列一行。 12display:flex;flex-direction:row; row-reverse 子元素从右至左排列一行。 12display:flex;flex-direction:row-reverse; column 子元素从上至下排列一列。 12display:flex;flex-direction:column; column-reverse 子元素从下至上排列一列。 12display:flex;flex-direction:column-reverse;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P108_8_控制弹性元素溢出换行处理","slug":"技术向/CSS/体验高质量的CSS教程/P108_8_控制弹性元素溢出换行处理","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.766Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P108_8_控制弹性元素溢出换行处理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P108_8_%E6%8E%A7%E5%88%B6%E5%BC%B9%E6%80%A7%E5%85%83%E7%B4%A0%E6%BA%A2%E5%87%BA%E6%8D%A2%E8%A1%8C%E5%A4%84%E7%90%86/","excerpt":"","text":"P108 8 控制弹性元素溢出换行处理 flex-wrap 本属性放置在弹性盒子，控制弹性元素溢出换行。 提要： x轴方向 -&gt; flex-direction:row y轴方向 -&gt; flex-direction:column 默认，如果盒子特别小，元素始终会在一行，并压缩自身所占空间。形象点说，几个子元素挤在一起，都挤瘦了。 x轴方向 y轴方向 wrap 开启换行，如果空间不够，就换到下一行。 x轴方向 y轴方向 wrap-reverse 反向折行。 x轴方向 y轴方向","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P109_9_统一设置元素排列方式与换行","slug":"技术向/CSS/体验高质量的CSS教程/P109_9_统一设置元素排列方式与换行","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.766Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P109_9_统一设置元素排列方式与换行/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P109_9_%E7%BB%9F%E4%B8%80%E8%AE%BE%E7%BD%AE%E5%85%83%E7%B4%A0%E6%8E%92%E5%88%97%E6%96%B9%E5%BC%8F%E4%B8%8E%E6%8D%A2%E8%A1%8C/","excerpt":"","text":"P109 9 统一设置元素排列方式与换行 flex-flow 统一设置子元素排列方式和折行。 1flex-flow: row wrap;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P110_10_主轴与交叉轴详解","slug":"技术向/CSS/体验高质量的CSS教程/P110_10_主轴与交叉轴详解","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.766Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P110_10_主轴与交叉轴详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P110_10_%E4%B8%BB%E8%BD%B4%E4%B8%8E%E4%BA%A4%E5%8F%89%E8%BD%B4%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"P110 10 主轴与交叉轴详解","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P84_14_环绕距离控制","slug":"技术向/CSS/体验高质量的CSS教程/P84_14_环绕距离控制","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.834Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P84_14_环绕距离控制/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P84_14_%E7%8E%AF%E7%BB%95%E8%B7%9D%E7%A6%BB%E6%8E%A7%E5%88%B6/","excerpt":"","text":"P84 14 环绕距离控制 shape-outside 环绕方式 控制浮动元素与文本内容之间的距离。 1234567HTML:&lt;p&gt; &lt;span class=&quot;shape&quot;&gt;&lt;/span&gt; 后盾人自2010年创立至今，免费发布了大量高质量视频 教程，视频在优酷、土豆、酷六等视频网站均有收录， 很多技术爱好者......&lt;/p&gt; 123456789101112131415LESS:p &#123; border: solid 1px #ddd; padding: 10px; overflow: hidden; span.shape &#123; width: 100px; height: 100px; float: left; padding: 30px; margin: 30px; border: solid 20px red; shape-outside: border-box; &#125;&#125; border-box 围绕着边框。 padding-box 内边距的边框里面。 content-box 内容里面。 margin-box 外边距。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P85_15_浮动显示区域形状定制","slug":"技术向/CSS/体验高质量的CSS教程/P85_15_浮动显示区域形状定制","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.835Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P85_15_浮动显示区域形状定制/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P85_15_%E6%B5%AE%E5%8A%A8%E6%98%BE%E7%A4%BA%E5%8C%BA%E5%9F%9F%E5%BD%A2%E7%8A%B6%E5%AE%9A%E5%88%B6/","excerpt":"","text":"P85 15 浮动显示区域形状定制 clip-path 定制图形 circle 圆形 1234//默认圆心在中间clip-path: circle();//参数：半径 at 圆心x 圆心yclip-path: circle(50% at 100% 100%); ellipse 椭圆 12//参数：x轴径 y轴径clip-path: ellipse(20% 30%); polygon 多边形 12//参数：点坐标（x y）clip-path: polygon(50% 0,100% 100%,0 100%);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P86_16_使用浮动控制文本内容环绕排版","slug":"技术向/CSS/体验高质量的CSS教程/P86_16_使用浮动控制文本内容环绕排版","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.835Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P86_16_使用浮动控制文本内容环绕排版/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P86_16_%E4%BD%BF%E7%94%A8%E6%B5%AE%E5%8A%A8%E6%8E%A7%E5%88%B6%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9%E7%8E%AF%E7%BB%95%E6%8E%92%E7%89%88/","excerpt":"","text":"P86 16 使用浮动控制文本内容环绕排版 实战案例 代码： 123//clip-path和shape-outside参数一致clip-path: circle();shape-outside: circle(); 样例：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P87_17_围绕图片的文本绕排","slug":"技术向/CSS/体验高质量的CSS教程/P87_17_围绕图片的文本绕排","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.836Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P87_17_围绕图片的文本绕排/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P87_17_%E5%9B%B4%E7%BB%95%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%87%E6%9C%AC%E7%BB%95%E6%8E%92/","excerpt":"","text":"P87 17 围绕图片的文本绕排 实战案例 1234//1.环绕图片 以图片形状占用空间,如果图片是圆形,就环绕成圆形shape-outside: url(xj.png);//2.环绕裁剪成圆形的图片 如果图片是正方形的，也可以通过这个方法让文字环绕成圆形shape-outside: circle();","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P89_2_使用相对定位操作元素","slug":"技术向/CSS/体验高质量的CSS教程/P89_2_使用相对定位操作元素","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.836Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P89_2_使用相对定位操作元素/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P89_2_%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%85%83%E7%B4%A0/","excerpt":"","text":"P89 2 使用相对定位操作元素 position 定位 relative 相对定位 保留元素原来占用的空间，元素可以在页面上任意地方，像是个游走的灵魂。 top 距原位置上边框距离。 bottom 距原位置下边框距离。 left 距原位置左边框距离。 right 距原位置右边框距离。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P90_3_绝对定位对照元素","slug":"技术向/CSS/体验高质量的CSS教程/P90_3_绝对定位对照元素","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.837Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P90_3_绝对定位对照元素/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P90_3_%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%AF%B9%E7%85%A7%E5%85%83%E7%B4%A0/","excerpt":"","text":"P90 3 绝对定位对照元素 position 定位 absolute 绝对定位 1.不占用空间，默认以文档空间为位置参考。 2.如果父级元素含有定位属性的任意一种，将参考父级元素位置。 top 距参考元素上边框距离。 bottom 距参考元素下边框距离。 left 距参考元素左边框距离。 right 距参考元素右边框距离。 子绝父相 例如，当鼠标停留在图标上，图标的上方弹出二维码图片的功能。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P91_4_通过定位设置尺寸","slug":"技术向/CSS/体验高质量的CSS教程/P91_4_通过定位设置尺寸","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.837Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P91_4_通过定位设置尺寸/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P91_4_%E9%80%9A%E8%BF%87%E5%AE%9A%E4%BD%8D%E8%AE%BE%E7%BD%AE%E5%B0%BA%E5%AF%B8/","excerpt":"","text":"P91 4 通过定位设置尺寸 实战案例 1.父元素position:relative，子元素position:absolute。 2.当子元素存在width和height属性的时候，top、bottom、left和right只改变子元素的位置。 3.当子元素不存在以上属性的时候，top、bottom、left和right改变子元素的位置和大小。 例如：通过位置四属性，找到四个坐标，并作为子元素的尺寸。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P96_9_定位叠加很重要","slug":"技术向/CSS/体验高质量的CSS教程/P96_9_定位叠加很重要","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.838Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P96_9_定位叠加很重要/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P96_9_%E5%AE%9A%E4%BD%8D%E5%8F%A0%E5%8A%A0%E5%BE%88%E9%87%8D%E8%A6%81/","excerpt":"","text":"P96 9 定位叠加很重要 z-index 叠加权重 默认，后来的定位元素会覆盖前面的元素，可以使用z-index调整优先级。 默认层级0，值越大，越在图层上面。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P98_11_固定定位使用场景操作","slug":"技术向/CSS/体验高质量的CSS教程/P98_11_固定定位使用场景操作","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.838Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P98_11_固定定位使用场景操作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P98_11_%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E6%93%8D%E4%BD%9C/","excerpt":"","text":"P98 11 固定定位使用场景操作 position 定位 fixed 固定定位 不占用空间，以页面为参考，固定在某一位置，滑动滚轮不受影响。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P99_12_粘性定位效果很感人","slug":"技术向/CSS/体验高质量的CSS教程/P99_12_粘性定位效果很感人","date":"2020-04-14T16:00:00.000Z","updated":"2022-06-15T08:32:49.838Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P99_12_粘性定位效果很感人/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P99_12_%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D%E6%95%88%E6%9E%9C%E5%BE%88%E6%84%9F%E4%BA%BA/","excerpt":"","text":"P99 12 粘性定位效果很感人 position 定位 sticky 粘性定位 滚动条向下滑，如果给标题加上粘性定位，当滑轮到达预设位置时，标题将固定在某一位置。 注意： 同级设置粘性定位的元素，会和其他标题叠加。 非同级设置粘性定位的元素，可以顶走其他标题。（效果更好） 非同级效果：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P62_2_表格标题与对齐处理","slug":"技术向/CSS/体验高质量的CSS教程/P62_2_表格标题与对齐处理","date":"2020-04-13T16:00:00.000Z","updated":"2022-06-15T08:32:49.830Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P62_2_表格标题与对齐处理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P62_2_%E8%A1%A8%E6%A0%BC%E6%A0%87%E9%A2%98%E4%B8%8E%E5%AF%B9%E9%BD%90%E5%A4%84%E7%90%86/","excerpt":"","text":"P62 2 表格标题与对齐处理 [HTML] 用于table标签内部的标题。 table标准结构 12345678910111213141516171819202122232425&lt;table border=&quot;1&quot;&gt; &lt;thead&gt; &lt;caption&gt;课程标题&lt;/caption&gt; &lt;tr&gt; &lt;td&gt;编号&lt;/td&gt; &lt;td&gt;标题&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;thead&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;houdunren.com&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;thead&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;hdcms.com&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;/table&gt; caption-side 对caption标签位置设置 1234//位于底部 | 顶部caption-side: bottom | top;//位于左 | 右text-align: left | right; vertical-align 垂直位置 12//垂直居中 | 居上 | 居下vertical-align : middle | top | bottom;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P64_4_细线表格与间距与空白单元格处理","slug":"技术向/CSS/体验高质量的CSS教程/P64_4_细线表格与间距与空白单元格处理","date":"2020-04-13T16:00:00.000Z","updated":"2022-06-15T08:32:49.830Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P64_4_细线表格与间距与空白单元格处理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P64_4_%E7%BB%86%E7%BA%BF%E8%A1%A8%E6%A0%BC%E4%B8%8E%E9%97%B4%E8%B7%9D%E4%B8%8E%E7%A9%BA%E7%99%BD%E5%8D%95%E5%85%83%E6%A0%BC%E5%A4%84%E7%90%86/","excerpt":"","text":"P64 4 细线表格与间距与空白单元格处理 border-spacing 单元格间距 12//设置单元格与单元格之间的间距border-spacing: ?px; border-collapse 合并间距，间距为0 1border-collapse: collapse; empty-cells 隐藏空单元格 1empty-cells: hide; 可尝试以下方式处理 解析：选取td标签空元素，将其隐藏。 123td:empty&#123; display: none;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P65_5_细线无边框表格样式","slug":"技术向/CSS/体验高质量的CSS教程/P65_5_细线无边框表格样式","date":"2020-04-13T16:00:00.000Z","updated":"2022-06-15T08:32:49.830Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P65_5_细线无边框表格样式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P65_5_%E7%BB%86%E7%BA%BF%E6%97%A0%E8%BE%B9%E6%A1%86%E8%A1%A8%E6%A0%BC%E6%A0%B7%E5%BC%8F/","excerpt":"","text":"P65 5 细线无边框表格样式 实战案例","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P67_7_多种方式定义列表符号","slug":"技术向/CSS/体验高质量的CSS教程/P67_7_多种方式定义列表符号","date":"2020-04-13T16:00:00.000Z","updated":"2022-06-15T08:32:49.831Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P67_7_多种方式定义列表符号/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P67_7_%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9A%E4%B9%89%E5%88%97%E8%A1%A8%E7%AC%A6%E5%8F%B7/","excerpt":"","text":"P67 7 多种方式定义列表符号 list-style-type 列表序列符号 参数值 ** ** 1234//罗马文list-style-type: lower-roman;//去掉小圆点list-style-type: none; ** ** ** ** list-style-image 列表序列图片 ** ** 12//序列符号位置引入图片list-style-image: url(); ** ** ** ** ** ** ** ** ** ** ** ** ** **","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P66_6_数据表格设计","slug":"技术向/CSS/体验高质量的CSS教程/P66_6_数据表格设计","date":"2020-04-13T16:00:00.000Z","updated":"2022-06-15T08:32:49.831Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P66_6_数据表格设计/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P66_6_%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%A0%BC%E8%AE%BE%E8%AE%A1/","excerpt":"","text":"P66 6 数据表格设计 实战案例 鼠标放到某一行时，该行背景变灰，鼠标变为小手形状。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P68_8_多图背景控制列表符号","slug":"技术向/CSS/体验高质量的CSS教程/P68_8_多图背景控制列表符号","date":"2020-04-13T16:00:00.000Z","updated":"2022-06-15T08:32:49.832Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P68_8_多图背景控制列表符号/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P68_8_%E5%A4%9A%E5%9B%BE%E8%83%8C%E6%99%AF%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8%E7%AC%A6%E5%8F%B7/","excerpt":"","text":"P68 8 多图背景控制列表符号 ** ** 实战案例 文本前的小图标是化小背景图片，然后让字符串向右缩进几个字符。背景图片可以设置多张。 ** **","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P69_9_after和before追加元素样式使用","slug":"技术向/CSS/体验高质量的CSS教程/P69_9_after和before追加元素样式使用","date":"2020-04-13T16:00:00.000Z","updated":"2022-06-15T08:32:49.832Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P69_9_after和before追加元素样式使用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P69_9_after%E5%92%8Cbefore%E8%BF%BD%E5%8A%A0%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F%E4%BD%BF%E7%94%A8/","excerpt":"","text":"P69 9 after和before追加元素样式使用 attr() 获取自定义属性值 实战案例","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P76_6_使用clearfix清除浮动","slug":"技术向/CSS/体验高质量的CSS教程/P76_6_使用clearfix清除浮动","date":"2020-04-13T16:00:00.000Z","updated":"2022-06-15T08:32:49.832Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P76_6_使用clearfix清除浮动/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P76_6_%E4%BD%BF%E7%94%A8clearfix%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/","excerpt":"","text":"P76 6 使用clearfix清除浮动 clear 清除浮动 清除浮动的元素，可以感知上面浮动元素占用的空间。 12//清除左浮动 | 右浮动 | 左右浮动clear: left | right | both; 实战案例 父元素感知内部浮动子元素所需空间的方法。 红边框和蓝背景都是应用了float，最下面的细线应用了clear:both清除浮动，并感知了上面元素所占用的空间。 这样父级元素黑边框可以感知到内部子元素所需的空间，将其撑开。 代码： 1234567891011121314151617181920212223242526272829CSS:.clearfix &#123; clear: both;&#125;main &#123; border: solid 3px black; margin: 0 auto; padding: 20px;&#125;div &#123; width: 300px; height: 300px; box-sizing: border-box;&#125;div:nth-of-type(1) &#123; border: solid 3px red; float:left;&#125;div:nth-of-type(2) &#123; background: blue; float:right;&#125;HTML:&lt;main&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;article class=&quot;clearfix&quot;&gt;&lt;/article&gt;&lt;/main&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P77_7_使用AFTER伪元素清除浮动影响","slug":"技术向/CSS/体验高质量的CSS教程/P77_7_使用AFTER伪元素清除浮动影响","date":"2020-04-13T16:00:00.000Z","updated":"2022-06-15T08:32:49.833Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P77_7_使用AFTER伪元素清除浮动影响/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P77_7_%E4%BD%BF%E7%94%A8AFTER%E4%BC%AA%E5%85%83%E7%B4%A0%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E5%BD%B1%E5%93%8D/","excerpt":"","text":"P77 7 使用AFTER伪元素清除浮动影响 实战案例 代码： 123456789101112131415161718192021222324252627282930CSS:main &#123; border: solid 3px black; margin: 0 auto; padding: 20px;&#125;main::after &#123; content:&quot;&quot;, clear: both; display: block;&#125;div &#123; width: 300px; height: 300px; box-sizing: border-box;&#125;div:nth-of-type(1) &#123; border: solid 3px red; float:left;&#125;div:nth-of-type(2) &#123; background: blue; float:right;&#125;HTML:&lt;main&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt;&lt;/main&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P78_8_OVERFLOW触发BFC清除浮动影响","slug":"技术向/CSS/体验高质量的CSS教程/P78_8_OVERFLOW触发BFC清除浮动影响","date":"2020-04-13T16:00:00.000Z","updated":"2022-06-15T08:32:49.833Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P78_8_OVERFLOW触发BFC清除浮动影响/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P78_8_OVERFLOW%E8%A7%A6%E5%8F%91BFC%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E5%BD%B1%E5%93%8D/","excerpt":"","text":"P78 8 OVERFLOW触发BFC清除浮动影响 实战案例 触发BFC，让父元素感知子元素占用空间。 代码： 123456789101112131415161718192021222324252627CSS:main &#123; border: solid 3px black; margin: 0 auto; padding: 20px; height: auto; overflow: hidden;&#125;div &#123; width: 300px; height: 300px; box-sizing: border-box;&#125;div:nth-of-type(1) &#123; border: solid 3px red; float:left;&#125;div:nth-of-type(2) &#123; background: blue; float:right;&#125;HTML:&lt;main&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt;&lt;/main&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P83_13_后盾人主体与底部结构","slug":"技术向/CSS/体验高质量的CSS教程/P83_13_后盾人主体与底部结构","date":"2020-04-13T16:00:00.000Z","updated":"2022-06-15T08:32:49.834Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P83_13_后盾人主体与底部结构/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P83_13_%E5%90%8E%E7%9B%BE%E4%BA%BA%E4%B8%BB%E4%BD%93%E4%B8%8E%E5%BA%95%E9%83%A8%E7%BB%93%E6%9E%84/","excerpt":"","text":"P83 13 后盾人主体与底部结构 实战案例 footer固定在底部。 123position: fixed;bottom: 0px;width: 100%;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P44_8_元素显示的多种模式控制","slug":"技术向/CSS/体验高质量的CSS教程/P44_8_元素显示的多种模式控制","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.823Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P44_8_元素显示的多种模式控制/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P44_8_%E5%85%83%E7%B4%A0%E6%98%BE%E7%A4%BA%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%A8%A1%E5%BC%8F%E6%8E%A7%E5%88%B6/","excerpt":"","text":"P44 8 元素显示的多种模式控制 display 12345678//隐藏元素display: none;//变为块元素display: block;//变为行元素display: inline;//变为行元素并保留块元素特征,可以设置宽高display: inline-block; 样例： 12345678910111213&lt;ul&gt; &lt;li&gt;LINUX&lt;/li&gt; &lt;li&gt;JS&lt;/li&gt; &lt;li&gt;CSS&lt;/li&gt;&lt;/ul&gt;&lt;style&gt; ul &gt; li &#123; display: inline-block; //使用inline-block height和width才可用 height: 100px; width: 100px; text-align: center; &#125;&lt;/style&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P45_9_使用visibility控制元素隐藏","slug":"技术向/CSS/体验高质量的CSS教程/P45_9_使用visibility控制元素隐藏","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.823Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P45_9_使用visibility控制元素隐藏/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P45_9_%E4%BD%BF%E7%94%A8visibility%E6%8E%A7%E5%88%B6%E5%85%83%E7%B4%A0%E9%9A%90%E8%97%8F/","excerpt":"","text":"P45 9 使用visibility控制元素隐藏 visibility 和display不同的是，display:none隐藏元素的同时不占用空间，visibility隐藏属性并占用原来空间或位置。 12//隐藏 占用空间 类似于透明度-&gt;opacity:0;visiility: hidden;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P46_10_overflow溢出隐藏使用的详解","slug":"技术向/CSS/体验高质量的CSS教程/P46_10_overflow溢出隐藏使用的详解","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.823Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P46_10_overflow溢出隐藏使用的详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P46_10_overflow%E6%BA%A2%E5%87%BA%E9%9A%90%E8%97%8F%E4%BD%BF%E7%94%A8%E7%9A%84%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"P46 10 overflow溢出隐藏使用的详解 overflow 123456//超出盒子大小时,出现一个滚动条overflow: scroll;//当超出盒子大小时,出现滚动条.未超过盒子大小时,不出现滚动条overflow: auto;//溢出隐藏overflow: hidden;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P47_11_尺寸控制的几种方式","slug":"技术向/CSS/体验高质量的CSS教程/P47_11_尺寸控制的几种方式","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.824Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P47_11_尺寸控制的几种方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P47_11_%E5%B0%BA%E5%AF%B8%E6%8E%A7%E5%88%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/","excerpt":"","text":"P47 11 尺寸控制的几种方式 min-width max-width min-height max-height 如果你的width值小于我这个min-width值，则用我这个min-width值。 通过百分比，将图片元素宽度限制在父元素框内。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P48_12_fill-available自动撑满可用空间","slug":"技术向/CSS/体验高质量的CSS教程/P48_12_fill-available自动撑满可用空间","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.824Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P48_12_fill-available自动撑满可用空间/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P48_12_fill-available%E8%87%AA%E5%8A%A8%E6%92%91%E6%BB%A1%E5%8F%AF%E7%94%A8%E7%A9%BA%E9%97%B4/","excerpt":"","text":"P48 12 fill-available自动撑满可用空间 未撑满效果 块级元素撑满 行元素撑满","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P49_13_fit-content根据内容自适应尺寸","slug":"技术向/CSS/体验高质量的CSS教程/P49_13_fit-content根据内容自适应尺寸","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.825Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P49_13_fit-content根据内容自适应尺寸/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P49_13_fit-content%E6%A0%B9%E6%8D%AE%E5%86%85%E5%AE%B9%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%BA%E5%AF%B8/","excerpt":"","text":"P49 13 fit-content根据内容自适应尺寸 div原本是会将一行填充满的，通过使用fit-content将div的宽度等于里面的文本所需宽度。 1width: fit-content;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P50_14_max-content_min-content盒子根据内容尺寸自适应","slug":"技术向/CSS/体验高质量的CSS教程/P50_14_max-content_min-content盒子根据内容尺寸自适应","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.825Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P50_14_max-content_min-content盒子根据内容尺寸自适应/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P50_14_max-content_min-content%E7%9B%92%E5%AD%90%E6%A0%B9%E6%8D%AE%E5%86%85%E5%AE%B9%E5%B0%BA%E5%AF%B8%E8%87%AA%E9%80%82%E5%BA%94/","excerpt":"","text":"P50 14 max-content&amp;min-content盒子根据内容尺寸自适应 常规都是父元素决定子元素的宽度，而这两个参数值将由子元素决定父元素的宽度。 1234//父元素的宽度根据子元素的最小宽度来设置width: min-content;//父元素的宽度根据子元素的最大宽度来设置width: max-content;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P51_1_背景颜色与裁切使用","slug":"技术向/CSS/体验高质量的CSS教程/P51_1_背景颜色与裁切使用","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.825Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P51_1_背景颜色与裁切使用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P51_1_%E8%83%8C%E6%99%AF%E9%A2%9C%E8%89%B2%E4%B8%8E%E8%A3%81%E5%88%87%E4%BD%BF%E7%94%A8/","excerpt":"","text":"P51 1 背景颜色与裁切使用 background-image 设置背景图片 1background-image: url(); background-clip content-box padding-box border-box 123456//padding占用的部分不覆盖背景图片background-clip: content-box;//padding占用的部分也覆盖背景图片background-clip: padding-box;//背景延伸到边框上background-clip: border-box;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P52_2_背景重复与滚动技巧","slug":"技术向/CSS/体验高质量的CSS教程/P52_2_背景重复与滚动技巧","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.826Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P52_2_背景重复与滚动技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P52_2_%E8%83%8C%E6%99%AF%E9%87%8D%E5%A4%8D%E4%B8%8E%E6%BB%9A%E5%8A%A8%E6%8A%80%E5%B7%A7/","excerpt":"","text":"P52 2 背景重复与滚动技巧 background-repeat space 12345678//默认背景重复background-repeat: repeat;//关闭重复background-repeat: no-repeat;//水平重复 | 垂直重复background-repeat: repeat-x | repeat-y;//平均分配background-repeat: space; background-attachment 父级加入滚动条overflow:auto后，子类背景过大。显示的时候可以拉动滚动条，背景图也在变化。 1234//默认,背景跟随滚动条一起滚动background-attachment: scroll;//如果不想要背景也跟着滚动,可以加入以下代码固定background-attachment:fixed;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P53_3_背景重复与尺寸定制","slug":"技术向/CSS/体验高质量的CSS教程/P53_3_背景重复与尺寸定制","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.826Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P53_3_背景重复与尺寸定制/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P53_3_%E8%83%8C%E6%99%AF%E9%87%8D%E5%A4%8D%E4%B8%8E%E5%B0%BA%E5%AF%B8%E5%AE%9A%E5%88%B6/","excerpt":"","text":"P53 3 背景重复与尺寸定制 background-position 控制背景图片所在位置 1234//居中 | 右上background-position: center | top right//居中 x值 y值background-position: 50% 50%; background-size 背景图尺寸 图片可能会变形 contain 12345678//x值 y值background-size: 100% 100%;//防止变形,只设定其中一个值,另一个为autobackground-size: 300px auto;//图片完全覆盖空间,如果图片大于空间,会有部分图片内容丢失（被隐藏）background-size: cover;//保证图片完全显示出来，但可能不符合空间比例就会有留白background-size: contain;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P54_4_多图定义和组合语句","slug":"技术向/CSS/体验高质量的CSS教程/P54_4_多图定义和组合语句","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.827Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P54_4_多图定义和组合语句/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P54_4_%E5%A4%9A%E5%9B%BE%E5%AE%9A%E4%B9%89%E5%92%8C%E7%BB%84%E5%90%88%E8%AF%AD%E5%8F%A5/","excerpt":"","text":"P54 4 多图定义和组合语句 多图定义和组合语句","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P55_5_盒子阴影使用方法","slug":"技术向/CSS/体验高质量的CSS教程/P55_5_盒子阴影使用方法","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.827Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P55_5_盒子阴影使用方法/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P55_5_%E7%9B%92%E5%AD%90%E9%98%B4%E5%BD%B1%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","excerpt":"","text":"P55 5 盒子阴影使用方法 box-shadow 盒子阴影 12//参数：x偏移 y偏移 羽化度 颜色box-shadow: 10px 10px 10px rgba(100,100,100,.5);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P56_6_元素背景渐变色作用","slug":"技术向/CSS/体验高质量的CSS教程/P56_6_元素背景渐变色作用","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.827Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P56_6_元素背景渐变色作用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P56_6_%E5%85%83%E7%B4%A0%E8%83%8C%E6%99%AF%E6%B8%90%E5%8F%98%E8%89%B2%E4%BD%9C%E7%94%A8/","excerpt":"","text":"P56 6 元素背景渐变色作用 linear-gradient() background：渐变色 1234//参数：旋转角度（默认垂直渐变，90deg水平渐变） 颜色arraybackground: linear-gradient(90deg,red,green,blue);//向左|右渐变background: linear-gradient(to left | right,red,green,blue); 技巧 左右设置相同颜色，中间设置同色调稍微重一点的颜色，起到颜色变化的效果，视觉更佳。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P57_7_掌握径向渐变的使用","slug":"技术向/CSS/体验高质量的CSS教程/P57_7_掌握径向渐变的使用","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.828Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P57_7_掌握径向渐变的使用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P57_7_%E6%8E%8C%E6%8F%A1%E5%BE%84%E5%90%91%E6%B8%90%E5%8F%98%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"P57 7 掌握径向渐变的使用 radial-gradient() background：渐变色 使用方法和线性渐变_linear-gradient()_相似，极不常用不深究。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P58_8_镜像标识位绘制小太阳","slug":"技术向/CSS/体验高质量的CSS教程/P58_8_镜像标识位绘制小太阳","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.828Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P58_8_镜像标识位绘制小太阳/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P58_8_%E9%95%9C%E5%83%8F%E6%A0%87%E8%AF%86%E4%BD%8D%E7%BB%98%E5%88%B6%E5%B0%8F%E5%A4%AA%E9%98%B3/","excerpt":"","text":"P58 8 镜像标识位绘制小太阳 对**radial-gradient()**的补充。 标识位，就是从哪个点之后在开始渐变。 例如，此图是从蓝标之后开始red向green渐变。 1background: linear-gradient(90deg,red 50%,green);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P59_9_颜色渐变中间阈值使用技巧","slug":"技术向/CSS/体验高质量的CSS教程/P59_9_颜色渐变中间阈值使用技巧","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.829Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P59_9_颜色渐变中间阈值使用技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P59_9_%E9%A2%9C%E8%89%B2%E6%B8%90%E5%8F%98%E4%B8%AD%E9%97%B4%E9%98%88%E5%80%BC%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/","excerpt":"","text":"P59 9 颜色渐变中间阈值使用技巧 对**radial-gradient()**的补充。 中间点，处于两个标识位之间。 1background: linear-gradient(90deg,red,50%,green);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P60_10_使用渐变重复绘制网站进度条","slug":"技术向/CSS/体验高质量的CSS教程/P60_10_使用渐变重复绘制网站进度条","date":"2020-04-12T16:00:00.000Z","updated":"2022-06-15T08:32:49.829Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P60_10_使用渐变重复绘制网站进度条/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P60_10_%E4%BD%BF%E7%94%A8%E6%B8%90%E5%8F%98%E9%87%8D%E5%A4%8D%E7%BB%98%E5%88%B6%E7%BD%91%E7%AB%99%E8%BF%9B%E5%BA%A6%E6%9D%A1/","excerpt":"","text":"P60 10 使用渐变重复绘制网站进度条 repeating-linear-gradient() background：重复渐变色（线性） 12//标识位 中间点background: repeating-linear-gradient(45deg,blue 0px,25px,yellow 25px,25px,red 50px); repeating-radial-gradient() background：重复渐变色（径向） 12//圆心位置background: repeating-radial-gradient(100px 100px,red,yellow 25px);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P35_9_文本对齐与缩进操作","slug":"技术向/CSS/体验高质量的CSS教程/P35_9_文本对齐与缩进操作","date":"2020-04-11T16:00:00.000Z","updated":"2022-06-15T08:32:49.820Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P35_9_文本对齐与缩进操作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P35_9_%E6%96%87%E6%9C%AC%E5%AF%B9%E9%BD%90%E4%B8%8E%E7%BC%A9%E8%BF%9B%E6%93%8D%E4%BD%9C/","excerpt":"","text":"P35 9 文本对齐与缩进操作 text-indent 字符缩进 12//缩进两个字符text-indent: 2em; text-align 文本对齐 12//居左/居中/居右text-align: left | center | right; vertical-align 垂直对齐 1234//居上/居中/居下vertical-align: top | middle | bottom;//通过具体值vertical-align: ?px;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P34_8_文本溢出与空白处理技巧","slug":"技术向/CSS/体验高质量的CSS教程/P34_8_文本溢出与空白处理技巧","date":"2020-04-11T16:00:00.000Z","updated":"2022-06-15T08:32:49.819Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P34_8_文本溢出与空白处理技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P34_8_%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E4%B8%8E%E7%A9%BA%E7%99%BD%E5%A4%84%E7%90%86%E6%8A%80%E5%B7%A7/","excerpt":"","text":"P34 8 文本溢出与空白处理技巧 [HTML] 被包围在 标签 元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。 white-space 空格处理 ** ** 12345678//保留空格和换行符white-space:pre;white-space:pre-wrap;//保留换行符white-space:pre-line;//禁止换行，文本始终在一行上，会溢出屏幕white-space:nowarp; 文本溢出的处理 1234width:; //控制文本占用空间white-space:nowrap; //禁止换行overflow:hidden; //超出部分隐藏（只在文本空间显示内容）text-overflow:ellipsis; //超出部分转变为... 补充：text-overflow默认值clip","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P36_10_排版模式使用","slug":"技术向/CSS/体验高质量的CSS教程/P36_10_排版模式使用","date":"2020-04-11T16:00:00.000Z","updated":"2022-06-15T08:32:49.820Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P36_10_排版模式使用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P36_10_%E6%8E%92%E7%89%88%E6%A8%A1%E5%BC%8F%E4%BD%BF%E7%94%A8/","excerpt":"","text":"P36 10 排版模式使用 letter-spacing 字符间距 1letter-spacing: ?px; word-spacing 单词间距 1word-spacing: ?px; writing-mode 排版模式 123456//变量意义：horizontal水平 vertical垂直 tb==topbottom自上到下 lr==leftright从左到右//默认方式，从左到右水平排版writing-mode: horizontal-tb;//古书风格，文言文writing-mode: vertical-rl;writing-mode: vertical-lr;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P40_4_尺寸限制与内边距使用方法","slug":"技术向/CSS/体验高质量的CSS教程/P40_4_尺寸限制与内边距使用方法","date":"2020-04-11T16:00:00.000Z","updated":"2022-06-15T08:32:49.821Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P40_4_尺寸限制与内边距使用方法/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P40_4_%E5%B0%BA%E5%AF%B8%E9%99%90%E5%88%B6%E4%B8%8E%E5%86%85%E8%BE%B9%E8%B7%9D%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","excerpt":"","text":"P40 4 尺寸限制与内边距使用方法 box-sizing 将盒子模型尺寸固定 盒子width &#x3D; border + padding + textcent_width 12当设定后，width如何都固定为定值。里面再怎么加如padding值都是在盒子里面操作box-sizing: border-box;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P41_5_元素边框的使用规范","slug":"技术向/CSS/体验高质量的CSS教程/P41_5_元素边框的使用规范","date":"2020-04-11T16:00:00.000Z","updated":"2022-06-15T08:32:49.821Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P41_5_元素边框的使用规范/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P41_5_%E5%85%83%E7%B4%A0%E8%BE%B9%E6%A1%86%E7%9A%84%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/","excerpt":"","text":"P41 5 元素边框的使用规范 border-style border-top-style border-bottom-style border-left-style border-right-style 定义边框样式 ** ** 12// 双线 | 实线 | 三维立体效果border-style: double | solid | groove; border-width border-top-width border-bottom-width border-left-width border-right-width 定义边框粗细 1border-width: ?px; border-color **border-top-**color **border-bottom-**color **border-left-**color **border-right-**color 定义边框颜色 1border-color: red; border border-top border-bottom border-left border-right 简写定义边框 12参数： style样式 width粗细 color颜色border: double 10px red;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P42_6_圆角控制详细说明","slug":"技术向/CSS/体验高质量的CSS教程/P42_6_圆角控制详细说明","date":"2020-04-11T16:00:00.000Z","updated":"2022-06-15T08:32:49.822Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P42_6_圆角控制详细说明/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P42_6_%E5%9C%86%E8%A7%92%E6%8E%A7%E5%88%B6%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/","excerpt":"","text":"P42 6 圆角控制详细说明 border-radius border-top-left-radius … 圆角 1234567//四个角相同border-radius: ?px;//四个角自定义border-radius: 1px 2px 3px 4px;//左上角border-top-left-radius: ?px;//以上参数可以是%,50%是正元 技巧，笑脸的效果","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P43_7_轮廓线使用技巧","slug":"技术向/CSS/体验高质量的CSS教程/P43_7_轮廓线使用技巧","date":"2020-04-11T16:00:00.000Z","updated":"2022-06-15T08:32:49.822Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P43_7_轮廓线使用技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P43_7_%E8%BD%AE%E5%BB%93%E7%BA%BF%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/","excerpt":"","text":"P43 7 轮廓线使用技巧 轮廓线（outline）和边框线（border）的区别：轮廓线不占据空间。 outline-style 轮廓线样式 1outline-style: double; outline-width 轮廓线粗细 1outline-width: 20px; outline 轮廓线简写形式 1234//参数：style样式 width粗细 color颜色outline: solid 3px red;//去除轮廓线outline: none;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"研讨_第1次课程_数据库优化","slug":"技术向/Java/源辰课程记录/研讨_第1次课程_数据库优化","date":"2020-04-11T16:00:00.000Z","updated":"2022-05-11T01:39:56.937Z","comments":true,"path":"技术向/Java/源辰课程记录/研讨_第1次课程_数据库优化/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%A0%94%E8%AE%A8_%E7%AC%AC1%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/","excerpt":"","text":"源辰研讨课 第1次课程 2020.04.12 内容 数据库优化[张影] [入口] cmd -&gt; sqlplus 1.B+树索引 深度三层，根茎叶 purge关键字，真实删除表，索引约束全部清空 B树练习脚本经典三大特性*/--1. 索引高度较低（可快速定位） 索引高度较低的直观体验--环境准备drop table t1 purge;drop table t2 purge;drop table t3 purge;drop table t4 purge;drop table t5 purge;drop table t6 purge;drop table t7 purge;create table t1 as select rownum as id ,rownum+1 as id2,rpad(&#x27;*&#x27;,1000,&#x27;*&#x27;) as contents from dual connect by level&lt;=1;create table t2 as select rownum as id ,rownum+1 as id2,rpad(&#x27;*&#x27;,1000,&#x27;*&#x27;) as contents from dual connect by level&lt;=10;create table t3 as select rownum as id ,rownum+1 as id2,rpad(&#x27;*&#x27;,1000,&#x27;*&#x27;) as contents from dual connect by level&lt;=100;create table t4 as select rownum as id ,rownum+1 as id2,rpad(&#x27;*&#x27;,1000,&#x27;*&#x27;) as contents from dual connect by level&lt;=1000;create table t5 as select rownum as id ,rownum+1 as id2,rpad(&#x27;*&#x27;,1000,&#x27;*&#x27;) as contents from dual connect by level&lt;=10000;create table t6 as select rownum as id ,rownum+1 as id2,rpad(&#x27;*&#x27;,1000,&#x27;*&#x27;) as contents from dual connect by level&lt;=100000;create table t7 as select rownum as id ,rownum+1 as id2,rpad(&#x27;*&#x27;,1000,&#x27;*&#x27;) as contents from dual connect by level&lt;=1000000;create index idx_id_t1 on t1(id);create index idx_id_t2 on t2(id);create index idx_id_t3 on t3(id);create index idx_id_t4 on t4(id);create index idx_id_t5 on t5(id);create index idx_id_t6 on t6(id);create index idx_id_t7 on t7(id);--接下来执行如下语句查询, 分析7张表的索引-- blevel＝0: 索引只有叶子块,高度为1. 注意： t1到t7的 num_rows以10倍速增加，而索引增加速度极慢. 这说明索引的高度确实低.select index_name,blevel,leaf_blocks,num_rows,distinct_keys,clustering_factorfrom user_ind_statisticswhere table_name in( &#x27;T1&#x27;,&#x27;T2&#x27;,&#x27;T3&#x27;,&#x27;T4&#x27;,&#x27;T5&#x27;,&#x27;T6&#x27;,&#x27;T7&#x27;);--2. 高度低有利于索引范围扫描--只显示统计信息 此命令只能在 sql plus下执行，请参考: blog.csdn.net/zhanglin_1214/article/details/48806553set autotrace traceonly stat;解决方案：1）以Sys用户登录 : sys as sysdba2) SQL&gt; @?/sqlplus/admin/plustrce.sql3) SQL &gt; grant plustrace to public;--语句1，针对t1表的索引访问和全表扫描访问，如下select * from t1 where id=1; --索引 访问select /*+full(t1)*/ * from t1 where id=1; --全表访问--语句2，针对t2表的索引访问和全表扫描访问，如下：select * from t2 where id=1;select /*+full(t2)*/ * from t2 where id=1;--语句3，针对t3表的索引访问和全表扫描访问，如下：select * from t3 where id=1;select /*+full(t3)*/ * from t3 where id=1;--语句4，针对t4表的索引访问和全表扫描访问，如下：select * from t4 where id=1;select /*+full(t4)*/ * from t4 where id=1;--语句5，针对t5表的索引访问和全表扫描访问，如下：select * from t5 where id=1;select /*+full(t5)*/ * from t5 where id=1;--语句6，针对t6表的索引访问和全表扫描访问，如下：select * from t6 where id=1;select /*+full(t6)*/ * from t6 where id=1;--语句7，针对t7表的索引访问和全表扫描访问，如下：select * from t7 where id=1;select /*+full(t7)*/ * from t7 where id=1;/* 请注意以下统计信息中的 consistent gets 部分。随着记录的增加，索引访问的优势越来越明显。*/--索引存储列值（可优化聚合）--（1）索引特性之存列值优化countdrop table t purge;create table t as select * from dba_objects;update t set object_id=rownum;commit;create index idx1_object_id on t(object_id);set autotrace on;select count(*) from t;/* 统计信息: 5 recursive calls 0 db block gets 1075 consistent gets 用不到索引 ，因为列中有空值*/select count(*) from t where object_id is not null;/*统计信息: 5 recursive calls 0 db block gets 224 consistent gets 索引不能存空值 ，所以加入一个 is not null后即可。*/--修改代码让count用到索引alter table t modify OBJECT_ID not null;select count(*) from t;/*统计信息: 145 recursive calls 0 db block gets 242 consistent gets 另外：因为主键不能为空，所以主键一定能用到索引。*/--（2）索引特性之存列值优化sum avgdrop table t purge;create table t as select * from dba_objects;create index idx1_object_id on t(object_id);set autotrace on;set linesize 1000;set timing on;select sum(object_id) from t;--sum avg不走索引 的代价select /*+full(t)*/ sum(object_id) from t;/*10,11 实测差不多????*/--3. 索引本身有序（可优化排序）--（1）索引特性之有序优化order byset autotrace traceonlyset linesize 1000drop table t purge;create table t as select * from dba_objects;select * from t where object_id&gt;2 order by object_id;/* 输出信息中有： 1 sorts (memory) 0 sorts (disk) 小结：无索引的order by 语句必然会排序*/----索引让order by 语句排序消失create index idx_t_object_id on t(object_id);set autotrace traceonlyselect * from t where object_id&gt;2 order by object_id;/* 输出信息: 0 sorts (memory) 0 sorts (disk)*/--(2)索引特性之有序优化Max/Min--MAX/MIN 的索引优化drop table t purge;create table t as select * from dba_objects;update t set object_id=rownum;alter table t add constraint pk_object_id primary key (OBJECT_ID);set autotrace onset linesize 1000select max(object_id) from t;/*系统信息: 145 recursive calls 0 db block gets 86 consistent gets 1 physical reads*/--MAX/MIN 语句用不到索引性能低下select /*+full(t)*/ max(object_id) from t;/* 0 recursive calls 0 db block gets 1009 consistent gets 0 physical reads*/--MAX/MIN 用索引与数据量增加的影响set autotrace offdrop table t_max purge;create table t_max as select * from dba_objects;insert into t_max select * from t_max;insert into t_max select * from t_max;insert into t_max select * from t_max;insert into t_max select * from t_max;insert into t_max select * from t_max;select count(*) from t_max;create index idx_t_max_obj on t_max(object_id);set autotrace onselect max(object_id) from t_max;/* 系统信息: 5 recursive calls 0 db block gets 71 consistent gets 2 physical reads 有索引 后，查询最小值 或最大值 可以叶子块的最左边或最右边，比较快.*/--组合索引选用--3. 仅等值无范围查询时，组合的顺序不影响性能--环境准备：drop table t purge;create table t as select * from dba_objects;insert into t select * from t;insert into t select * from t;insert into t select * from t;update t set object_id=rownum ;commit;create index idx_id_type on t(object_id,object_type);create index idx_type_id on t(object_type,object_id);set autotrace offalter session set statistics_level=all ;set linesize 366--type_id，id顺序组合索引select /*+index(t,idx_id_type)*/ * from t where object_id=20 and object_type=&#x27;TABLE&#x27;;select * from table(dbms_xplan.display_cursor(null,null,&#x27;allstats last&#x27;));--再用id、type_id顺序组合索引select /*+index(t,idx_type_id)*/ * from t where object_id=20 and object_type=&#x27;TABLE&#x27;;select * from table(dbms_xplan.display_cursor(null,null,&#x27;allstats last&#x27;));--以上两个语句性能一样，表明只有等值查询时，组合索引组合列的顺序不要紧。--4. 组合索引最佳顺序一般是将等值查询的列置前--将等值查询的列置前select /*+index(t,idx_id_type)*/ * from t where object_id&gt;=20 and object_id&lt;2000 and object_type=&#x27;TABLE&#x27; ;select * from table(dbms_xplan.display_cursor(null,null,&#x27;allstats last&#x27;));--将等值查询的列置后select /*+index(t,idx_type_id)*/ * from t where object_id&gt;=20 and object_id&lt;2000 and object_type=&#x27;TABLE&#x27;;select * from table(dbms_xplan.display_cursor(null,null,&#x27;allstats last&#x27;));/* 在统计信息中观察buffer值 ，可以发现 索引 idx_type_id性能要优于 idx_id_type, 即等值列在索引中要放在前面，范围查询放在后面。*/--2.3 索引扫描类型的分类与构造--1. INDEX RANGE SCAN--请记住这个INDEX RANGE SCAN扫描方式drop table t purge;create table t as select * from dba_objects;update t set object_id=rownum;commit;create index idx_object_id on t(object_id); --这是一个 索引范围扫描set autotrace traceonlyset linesize 1000--这里要注意 ownname是你登录用户的名字，我在 sql plus上的登录用户名为sysexec dbms_stats.gather_table_stats(ownname =&gt; &#x27;sys&#x27;,tabname =&gt; &#x27;T&#x27;,estimate_percent =&gt; 10,method_opt=&gt; &#x27;for all indexed columns&#x27;,cascade=&gt;TRUE) ;select * from t where object_id=8;/*---------------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |---------------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 101 | 2 (0)| 00:00:01 || 1 | TABLE ACCESS BY INDEX ROWID| T | 1 | 101 | 2 (0)| 00:00:01 ||* 2 | INDEX RANGE SCAN | IDX_OBJECT_ID | 1 | | 1 (0)| 00:00:01*/--2. INDEX UNIQUE SCAN--请注意这个INDEX UNIQUE SCAN扫描方式,在唯一索引情况下使用。drop table t purge;create table t as select * from dba_objects;update t set object_id=rownum;commit;create unique index idx_object_id on t(object_id);set autotrace traceonlyset linesize 1000select * from t where object_id=8;/*---------------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |---------------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 207 | 2 (0)| 00:00:01 || 1 | TABLE ACCESS BY INDEX ROWID| T | 1 | 207 | 2 (0)| 00:00:01 ||* 2 | INDEX UNIQUE SCAN | IDX_OBJECT_ID | 1 | | 1 (0)| 00:00:01 |*/--3. TABLE ACCESS BY USER ROWID--请注意这个TABLE ACCESS BY USER ROWID扫描方式,直接根据rowid来访问，最快的访问方式！drop table t purge;create table t as select * from dba_objects;update t set object_id=rownum;commit;--注意，这里连索引都没建!--create index idx_object_id on t(object_id);set autotrace offselect rowid from t where object_id=8;--ROWID-------AAARDxAABAAAVeiAAHset autotrace traceonlyset linesize 1000select * from t where object_id=8 and rowid=&#x27;AAARDxAABAAAVeiAAH&#x27;;/*-----------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |-----------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 219 | 1 (0)| 00:00:01 ||* 1 | TABLE ACCESS BY USER ROWID| T | 1 | 219 | 1 (0)| 00:00:01 |*/--4. INDEX FULL SCAN--请记住这个INDEX FULL SCAN扫描方式，并体会与下面INDEX FAST FULL SCAN的区别drop table t purge;create table t as select * from dba_objects;update t set object_id=rownum;commit;alter table T modify object_id not null;create index idx_object_id on t(object_id);set autotrace traceonlyset linesize 1000select * from t order by object_id;--5. INDEX FAST FULL SCAN---请记住这个INDEX FAST FULL SCAN扫描方式，并体会与上面INDEX FULL SCAN的区别drop table t purge;create table t as select * from dba_objects ;update t set object_id=rownum;commit;alter table T modify object_id not null;create index idx_object_id on t(object_id);set autotrace traceonlyset linesize 1000select count(*) from t;/*-------------------------------------------------------------------------------| Id | Operation | Name | Rows | Cost (%CPU)| Time |-------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 43 (0)| 00:00:01 || 1 | SORT AGGREGATE | | 1 | | || 2 | INDEX FAST FULL SCAN| IDX_OBJECT_ID | 63284 | 43 (0)| 00:00:01 |*/--6. INDEX FULL SCAN (MINMAX)--请注意这个INDEX FULL SCAN (MIN/MAX)扫描方式drop table t purge;create table t as select * from dba_objects;update t set object_id=rownum;commit;create index idx_object_id on t(object_id);set autotrace traceonlyset linesize 1000select max(object_id) from t;/*--------------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |--------------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 13 | 275 (1)| 00:00:04 || 1 | SORT AGGREGATE | | 1 | 13 | | || 2 | INDEX FULL SCAN (MIN/MAX)| IDX_OBJECT_ID | 63284 | 803K| |*/--7. INDEX SKIP SCAN--请记住这个INDEX SKIP SCAN扫描方式drop table t purge;create table t as select * from dba_objects;update t set object_type=&#x27;TABLE&#x27; ;commit;update t set object_type=&#x27;VIEW&#x27; where rownum&lt;=30000;commit;create index idx_type_id on t(object_type,object_id);exec dbms_stats.gather_table_stats(ownname =&gt; &#x27;sys&#x27;,tabname =&gt; &#x27;T&#x27;,estimate_percent =&gt; 10,method_opt=&gt; &#x27;for all indexed columns&#x27;,cascade=&gt;TRUE) ;set autotrace traceonlyset linesize 1000select * from t where object_id=8;/*-------------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |-------------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 98 | 4 (0)| 00:00:01 || 1 | TABLE ACCESS BY INDEX ROWID| T | 1 | 98 | 4 (0)| 00:00:01 ||* 2 | INDEX SKIP SCAN | IDX_TYPE_ID | 1 | | 3 (0)| 00:00:01*/--8. TABLE ACCESS BY INDEX ROWID--好好地体会前后两个试验，记住这个TABLE ACCESS BY INDEX ROWIDdrop table t purge;create table t as select * from dba_objects;update t set object_id=rownum;commit;create index idx_object_id on t(object_id);set autotrace traceonly explainset linesize 1000select object_id from t where object_id=2 and object_type=&#x27;TABLE&#x27;;--在接下来的试验中，你会看到，哇塞，TABLE ACCESS BY INDEX ROWID消失了。create index idx_id_type on t(object_id,object_type);select object_id from t where object_id=2 and object_type=&#x27;TABLE&#x27;;--3 索引相关优化案例--3.1 三大特性的相关案例--1. 分区表各类聚合优化玄机--语句1：select max(nbr) max_nbrfrom range_part_tabwhere deal_date &gt;= TO_DATE(&#x27;2015-05-01&#x27;, &#x27;YYYY-MM-DD&#x27;)and deal_date &lt; TO_DATE(&#x27;2015-06-01&#x27;, &#x27;YYYY-MM-DD&#x27;);--走全表扫描 table access full----------------------------------------------------------------------------------------------接下来看语句2：select max(nbr) max_nbr from range_part_tab partition(p_201505);--用 index full scan(min/max)----------------------------------------------------------------------------------------------语句3：select count(*) max_nbrfrom range_part_tabwhere deal_date &gt;= TO_DATE(&#x27;2015-05-01&#x27;, &#x27;YYYY-MM-DD&#x27;)and deal_date &lt; TO_DATE(&#x27;2015-06-01&#x27;, &#x27;YYYY-MM-DD&#x27;);--走全表扫描----------------------------------------------------------------------------------------------语句4：select count(*) max_nbr from range_part_tab partition(p_201505);--用 index fast full scan----------------------------------------------------------------------------------------------啥时分区索引性能反而低--假设有两张表 part_tab,norm_tab,前者为分区表，后者为普通表，记录数一样，在两个表的 col2列都有索引下，比较-- select * from xxx where col2=8的性能--环境准备drop table part_tab purge;create table part_tab (id int,col2 int,col3 int)partition by range (id)(partition p1 values less than (10000),partition p2 values less than (20000),partition p3 values less than (30000),partition p4 values less than (40000),partition p5 values less than (50000),partition p6 values less than (60000),partition p7 values less than (70000),partition p8 values less than (80000),partition p9 values less than (90000),partition p10 values less than (100000),partition p11 values less than (maxvalue));insert into part_tab select rownum,rownum+1,rownum+2 from dual connect by rownum &lt;=110000;commit;create index idx_par_tab_col2 on part_tab(col2) local;create index idx_par_tab_col3 on part_tab(col3) ;drop table norm_tab purge;create table norm_tab (id int,col2 int,col3 int);insert into norm_tab select rownum,rownum+1,rownum+2 from dual connect by rownum &lt;=110000;commit;create index idx_nor_tab_col2 on norm_tab(col2) ;create index idx_nor_tab_col3 on norm_tab(col3) ;----------------------------------------------------------------------------------------------分区表局部分区扫描的情况set autotrace traceonlyset linesize 1000set timing onselect * from part_tab where col2=8 ;/*-----------------------------------------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time | Pstart| Pstop |-----------------------------------------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 39 | 13 (0)| 00:00:01 | | || 1 | PARTITION RANGE ALL | | 1 | 39 | 13 (0)| 00:00:01 | 1 | 11 || 2 | TABLE ACCESS BY LOCAL INDEX ROWID| PART_TAB | 1 | 39 | 13 (0)| 00:00:01 | 1 | 11 ||* 3 | INDEX RANGE SCAN | IDX_PAR_TAB_COL2 | 1 | | 12 (0)| 00:00:01 | 1 | 11 |--------------------------------------------------------------------------------------------------------------统计信息---------------------------------------------------------- 52 recursive calls 0 db block gets 153 consistent gets*/--普通表索引扫描的情况select * from norm_tab where col2=8 ;/*------------------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |------------------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 39 | 2 (0)| 00:00:01 || 1 | TABLE ACCESS BY INDEX ROWID| NORM_TAB | 1 | 39 | 2 (0)| 00:00:01 ||* 2 | INDEX RANGE SCAN | IDX_NOR_TAB_COL2 | 1 | | 1 (0)| 00:00:01 |------------------------------------------------------------------------------------------------统计信息---------------------------------------------------------- 32 recursive calls 0 db block gets 80 consistent gets*/--小结: norm_tab对应的sql 的consistent gets为１５３，而分区表ｐａｒｔ＿ｔａｂ对应的ｓｑｌ的ｃｏｎｓｉｓｔｅｎｔ ｇｅｔｓ为 ８０--这个表有分区，但sql却没有这个分区条件，导到处该分区表的局部索引从pstarg1到pstop11遍历11个分区。--所以当分区表的分区条件无法加上时，全局索引性能要好于分区索引 。----------------------------------------------------------------------------------------------3. 同时取最大最小值的案例--环境准备drop table t purge;create table t as select * from dba_objects;update t set object_id=rownum;commit;alter table t add constraint pk_object_id primary key (OBJECT_ID);set autotrace onset linesize 1000--看看执行计划是什么：set linesize 1000set autotrace onselect max(object_id),min(object_id) from t;/*执行计划----------------------------------------------------------Plan hash value: 1265209789--------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |--------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 13 | 40 (0)| 00:00:01 || 1 | SORT AGGREGATE | | 1 | 13 | | || 2 | INDEX FAST FULL SCAN| PK_OBJECT_ID | 54956 | 697K| 40 (0)| 00:00:01 |--------------------------------------------------------------------------------------Note----- - dynamic sampling used for this statement统计信息---------------------------------------------------------- 145 recursive calls 0 db block gets 224 consistent gets 142 physical reads 0 redo size 494 bytes sent via SQL*Net to client 416 bytes received via SQL*Net from client 2 SQL*Net roundtrips to/from client 4 sorts (memory) 0 sorts (disk) 1 rows processed*//*小结: 执行计划并没有走高效的index full scan (min/max)扫描方式，而是走index fast full scan模式。这是因为oracle不能同时在索引 相同的两段寻找最大值 和最小值 。以上语句修改成以下利用笛卡尔积的查询方式完成.*/--同时取最大最小值的语句的改造写法select max, minfrom (select max(object_id) max from t ) a,(select min(object_id) min from t ) b;/*执行计划----------------------------------------------------------Plan hash value: 3319831621---------------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |---------------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 26 | 4 (0)| 00:00:01 || 1 | NESTED LOOPS | | 1 | 26 | 4 (0)| 00:00:01 || 2 | VIEW | | 1 | 13 | 2 (0)| 00:00:01 || 3 | SORT AGGREGATE | | 1 | 13 | | || 4 | INDEX FULL SCAN (MIN/MAX)| PK_OBJECT_ID | 54956 | 697K| 2 (0)| 00:00:01 || 5 | VIEW | | 1 | 13 | 2 (0)| 00:00:01 || 6 | SORT AGGREGATE | | 1 | 13 | | || 7 | INDEX FULL SCAN (MIN/MAX)| PK_OBJECT_ID | 54956 | 697K| 2 (0)| 00:00:01 |---------------------------------------------------------------------------------------------Note----- - dynamic sampling used for this statement统计信息---------------------------------------------------------- 7 recursive calls 0 db block gets 118 consistent gets 0 physical reads 0 redo size 472 bytes sent via SQL*Net to client 416 bytes received via SQL*Net from client 2 SQL*Net roundtrips to/from client 0 sorts (memory) 0 sorts (disk) 1 rows processed*/--性能在 consistent gets上得到了提升.----------------------------------------------------------------------------------------------------------------------3.2 组合索引的经典案例--1. 组合索引的写法drop table t purge;create table t as select * from dba_objects;update t set object_id=rownum ;create index idx_id_type on t(object_id,object_type);UPDATE t SET OBJECT_ID=20 WHERE ROWNUM&lt;=26000;UPDATE t SET OBJECT_ID=21 WHERE OBJECT_ID&lt;&gt;20;COMMIT;set linesize 1000set pagesize 1alter session set statistics_level=all ;select /*+index(t,idx1_object_id)*/ * from t where object_TYPE=&#x27;TABLE&#x27; AND OBJECT_ID &gt;= 20 AND OBJECT_ID&lt;= 21;select * from table(dbms_xplan.display_cursor(null,null,&#x27;allstats last&#x27;));/*执行计划----------------------------------------------------------Plan hash value: 3713220770----------------------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |----------------------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 8168 | 16336 | 29 (0)| 00:00:01 || 1 | COLLECTION ITERATOR PICKLER FETCH| DISPLAY_CURSOR | | | | |----------------------------------------------------------------------------------------------------统计信息---------------------------------------------------------- 19 recursive calls 0 db block gets 0 consistent gets 0 physical reads 0 redo size 1512 bytes sent via SQL*Net to client 427 bytes received via SQL*Net from client 3 SQL*Net roundtrips to/from client 3 sorts (memory) 0 sorts (disk) 18 rows processed*/--组合索引与In写法select /*+index(t,idx_id_type)*/ * from t t where object_TYPE=&#x27;TABLE&#x27; AND OBJECT_ID IN (20,21);select * from table(dbms_xplan.display_cursor(null,null,&#x27;allstats last&#x27;));/*执行计划----------------------------------------------------------Plan hash value: 3713220770----------------------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |----------------------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 8168 | 16336 | 29 (0)| 00:00:01 || 1 | COLLECTION ITERATOR PICKLER FETCH| DISPLAY_CURSOR | | | | |----------------------------------------------------------------------------------------------------统计信息---------------------------------------------------------- 14 recursive calls 0 db block gets 0 consistent gets 0 physical reads 0 redo size 1512 bytes sent via SQL*Net to client 427 bytes received via SQL*Net from client 3 SQL*Net roundtrips to/from client 3 sorts (memory) 0 sorts (disk) 18 rows processed*/----------------------------------------------------------------------------------------------2. 组合索引与增加检索条件--环境准备drop table t purge;create table t as select * from dba_objects;UPDATE t SET OBJECT_ID=20 WHERE ROWNUM&lt;=26000;UPDATE t SET OBJECT_ID=21 WHERE OBJECT_ID&lt;&gt;20;Update t set object_id=22 where rownum&lt;=10000;COMMIT;create index idx_union on t(object_type,object_id,owner);set autotrace offalter session set statistics_level=all ;set linesize 1000--写法1 未增加OBJECT_ID列的写法set autotrace onselect * from t where object_type=&#x27;VIEW&#x27; and OWNER=&#x27;SYS&#x27;;/*执行计划----------------------------------------------------------Plan hash value: 1570829420-----------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |-----------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 3286 | 664K| 42 (0)| 00:00:01 || 1 | TABLE ACCESS BY INDEX ROWID| T | 3286 | 664K| 42 (0)| 00:00:01 ||* 2 | INDEX RANGE SCAN | IDX_UNION | 30 | | 40 (0)| 00:00:01 |-----------------------------------------------------------------------------------------Predicate Information (identified by operation id):--------------------------------------------------- 2 - access(&quot;OBJECT_TYPE&quot;=&#x27;VIEW&#x27; AND &quot;OWNER&quot;=&#x27;SYS&#x27;) filter(&quot;OWNER&quot;=&#x27;SYS&#x27;)Note----- - dynamic sampling used for this statement统计信息---------------------------------------------------------- 0 recursive calls 0 db block gets 595 consistent gets 0 physical reads 0 redo size 125958 bytes sent via SQL*Net to client 2935 bytes received via SQL*Net from client 231 SQL*Net roundtrips to/from client 0 sorts (memory) 0 sorts (disk) 3445 rows processed*/ --写法2 增加OBJECT_ID列的写法select /*+index(T IDX_UNION)*/* from t T where object_type=&#x27;VIEW&#x27;and OBJECT_ID IN (20,21,22)AND OWNER=&#x27;LJB&#x27;;select * from table(dbms_xplan.display_cursor(null,null,&#x27;allstats last&#x27;));/*执行计划----------------------------------------------------------Plan hash value: 3713220770----------------------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |----------------------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 8168 | 16336 | 29 (0)| 00:00:01 || 1 | COLLECTION ITERATOR PICKLER FETCH| DISPLAY_CURSOR | | | | |----------------------------------------------------------------------------------------------------统计信息---------------------------------------------------------- 18 recursive calls 0 db block gets 0 consistent gets 0 physical reads 0 redo size 1512 bytes sent via SQL*Net to client 427 bytes received via SQL*Net from client 3 SQL*Net roundtrips to/from client 3 sorts (memory) 0 sorts (disk) 18 rows processed*/ --小结：三列组合索引的特点：互相依赖。 第三列依赖第二列，第二列依赖第一列2. INDEX UNIQUE SCAN--请注意这个INDEX UNIQUE SCAN扫描方式,在唯一索引情况下使用。drop table t purge;create table t as select * from dba_objects;update t set object_id=rownum;commit;create unique index idx_object_id on t(object_id);set autotrace traceonlyset linesize 1000select * from t where object_id=8; 2.位图索引 与位运算 3.函数索引 4.反向键索引 解决热块竞争问题。反转rowid，达到块索引记录随机分布的效果。 热块竞争：例如文章通过发布时间索引，那么最旧的文章放在树的左侧，最新的文章放在树的右侧。由于帖子展示总是最新的文章，因此会有大量的流量访问最新的块，造成竞争块。 5.全文索引 除B树练习脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488--2.1 位图索引--1. 位图索引之如何高效即席查询--做位图索引与即席查询试验前的准备：drop table t purge;set autotrace offcreate table t(name_id,gender not null,location not null,age_group not null,data)asselect rownum,decode(ceil(dbms_random.value(0,2)),1,&#x27;M&#x27;,2,&#x27;F&#x27;)gender,ceil(dbms_random.value(1,50)) location,decode(ceil(dbms_random.value(0,3)),1,&#x27;child&#x27;,2,&#x27;young&#x27;,3,&#x27;middle_age&#x27;,4,&#x27;old&#x27;),rpad(&#x27;*&#x27;,400,&#x27;*&#x27;)from dualconnect by rownum&lt;=100000;--注意，以下收集统计信息操作必须先执行。exec dbms_stats.gather_table_stats(ownname =&gt; &#x27;sys&#x27;,tabname =&gt; &#x27;T&#x27;,estimate_percent =&gt; 10,method_opt=&gt; &#x27;for all indexed columns&#x27;,cascade=&gt;TRUE) ;----------------------------------------------------------------------------------------------即席查询中应用全表扫描的代价：set linesize 1000set autotrace traceonlyselect *from twhere gender=&#x27;M&#x27; and location in (1,10,30) and age_group=&#x27;child&#x27;;/*执行计划----------------------------------------------------------Plan hash value: 1601196873--------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |--------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 237 | 1614 (1)| 00:00:20 ||* 1 | TABLE ACCESS FULL| T | 1 | 237 | 1614 (1)| 00:00:20 |--------------------------------------------------------------------------Predicate Information (identified by operation id):--------------------------------------------------- 1 - filter(&quot;GENDER&quot;=&#x27;M&#x27; AND (&quot;LOCATION&quot;=1 OR &quot;LOCATION&quot;=10 OR &quot;LOCATION&quot;=30) AND &quot;AGE_GROUP&quot;=&#x27;child&#x27;)统计信息---------------------------------------------------------- 116 recursive calls 0 db block gets 5995 consistent gets 5940 physical reads 0 redo size 13993 bytes sent via SQL*Net to client 889 bytes received via SQL*Net from client 45 SQL*Net roundtrips to/from client 3 sorts (memory) 0 sorts (disk) 658 rows processed 全表搜索 回表的代价高 consistent gets 5995*/----------------------------------------------------------------------------------------------即席查询中应用组合索引的代价drop index idx_union;create index idx_union on t(gender,location,age_group);select *from twhere gender=&#x27;M&#x27; and location in (1,10,30) and age_group=&#x27;child&#x27;;/*执行计划----------------------------------------------------------Plan hash value: 306189815------------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |------------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 3 | 711 | 5 (0)| 00:00:01 || 1 | INLIST ITERATOR | | | | | || 2 | TABLE ACCESS BY INDEX ROWID| T | 3 | 711 | 5 (0)| 00:00:01 ||* 3 | INDEX RANGE SCAN | IDX_UNION | 1 | | 4 (0)| 00:00:01 |------------------------------------------------------------------------------------------Predicate Information (identified by operation id):--------------------------------------------------- 3 - access(&quot;GENDER&quot;=&#x27;M&#x27; AND (&quot;LOCATION&quot;=1 OR &quot;LOCATION&quot;=10 OR &quot;LOCATION&quot;=30) AND &quot;AGE_GROUP&quot;=&#x27;child&#x27;)统计信息---------------------------------------------------------- 1 recursive calls 0 db block gets 698 consistent gets 5 physical reads 0 redo size 13048 bytes sent via SQL*Net to client 889 bytes received via SQL*Net from client 45 SQL*Net roundtrips to/from client 0 sorts (memory) 0 sorts (disk) 658 rows processed INDEX RANGE SCAN 搜索 回表的代价次之 consistent gets 698*/ ----------------------------------------------------------------------------------------------------------------------即席查询应用位图索引，性能有飞跃，Oracle自己选择了使用位图索引：drop index idx_union; --删除上面的组合索引create bitmap index gender_idx on t(gender);create bitmap index location_idx on t(location);create bitmap index age_group_idx on t(age_group);select *from twhere gender=&#x27;M&#x27; and location in (1,10,30) and age_group=&#x27;child&#x27;;/*执行计划----------------------------------------------------------Plan hash value: 642874377-----------------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |-----------------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 237 | 11 (0)| 00:00:01 || 1 | TABLE ACCESS BY INDEX ROWID | T | 1 | 237 | 11 (0)| 00:00:01 || 2 | BITMAP CONVERSION TO ROWIDS | | | | | || 3 | BITMAP AND | | | | | || 4 | BITMAP OR | | | | | ||* 5 | BITMAP INDEX SINGLE VALUE| LOCATION_IDX | | | | ||* 6 | BITMAP INDEX SINGLE VALUE| LOCATION_IDX | | | | ||* 7 | BITMAP INDEX SINGLE VALUE| LOCATION_IDX | | | | ||* 8 | BITMAP INDEX SINGLE VALUE | GENDER_IDX | | | | ||* 9 | BITMAP INDEX SINGLE VALUE | AGE_GROUP_IDX | | | | |-----------------------------------------------------------------------------------------------Predicate Information (identified by operation id):--------------------------------------------------- 5 - access(&quot;LOCATION&quot;=1) 6 - access(&quot;LOCATION&quot;=10) 7 - access(&quot;LOCATION&quot;=30) 8 - access(&quot;GENDER&quot;=&#x27;M&#x27;) 9 - access(&quot;AGE_GROUP&quot;=&#x27;child&#x27;)统计信息---------------------------------------------------------- 155 recursive calls 0 db block gets 671 consistent gets 16 physical reads 0 redo size 13993 bytes sent via SQL*Net to client 889 bytes received via SQL*Net from client 45 SQL*Net roundtrips to/from client 4 sorts (memory) 0 sorts (disk) 658 rows processed BITMAP CONVERSION TO ROWIDS 搜索 回表的代价次之 consistent gets 671*/----------------------------------------------------------------------------------------------2. 位图索引之如何快速统计条数--Count性能试验的环境准备drop table t purge;set autotrace offcreate table t as select * from dba_objects;insert into t select * from t;insert into t select * from t;insert into t select * from t;insert into t select * from t;insert into t select * from t;insert into t select * from t;update t set object_id=rownum;commit;----------------------------------------------------------------------------------------------场景1 Count（*）应用全表扫描的代价set autotrace onset linesize 1000select count(*) from t;/*执行计划----------------------------------------------------------Plan hash value: 2966233522-------------------------------------------------------------------| Id | Operation | Name | Rows | Cost (%CPU)| Time |-------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 17392 (1)| 00:03:29 || 1 | SORT AGGREGATE | | 1 | | || 2 | TABLE ACCESS FULL| T | 4865K| 17392 (1)| 00:03:29 |-------------------------------------------------------------------Note----- - dynamic sampling used for this statement统计信息---------------------------------------------------------- 4 recursive calls 0 db block gets 128107 consistent gets 65573 physical reads 5156 redo size 422 bytes sent via SQL*Net to client 416 bytes received via SQL*Net from client 2 SQL*Net roundtrips to/from client 0 sorts (memory) 0 sorts (disk) 1 rows processed*/----------------------------------------------------------------------------------------------场景2， Count应用普通索引的代价create index idx_t_obj on t(object_id);alter table T modify object_id not null;set autotrace onselect count(*) from t;/*执行计划----------------------------------------------------------Plan hash value: 278572740---------------------------------------------------------------------------| Id | Operation | Name | Rows | Cost (%CPU)| Time |---------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 2802 (1)| 00:00:34 || 1 | SORT AGGREGATE | | 1 | | || 2 | INDEX FAST FULL SCAN| IDX_T_OBJ | 4865K| 2802 (1)| 00:00:34 |---------------------------------------------------------------------------Note----- - dynamic sampling used for this statement统计信息---------------------------------------------------------- 145 recursive calls 0 db block gets 10366 consistent gets 11490 physical reads 0 redo size 422 bytes sent via SQL*Net to client 416 bytes received via SQL*Net from client 2 SQL*Net roundtrips to/from client 4 sorts (memory) 0 sorts (disk) 1 rows processed*/----------------------------------------------------------------------------------------------观察COUNT(*)用位图索引的代价create bitmap index idx_bitm_t_status on t(status);select count(*) from t;select count(*) from t;/*执行计划----------------------------------------------------------Plan hash value: 4272013625-------------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Cost (%CPU)| Time |-------------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 98 (0)| 00:00:02 || 1 | SORT AGGREGATE | | 1 | | || 2 | BITMAP CONVERSION COUNT | | 4865K| 98 (0)| 00:00:02 || 3 | BITMAP INDEX FAST FULL SCAN| IDX_BITM_T_STATUS | | | |-------------------------------------------------------------------------------------------Note----- - dynamic sampling used for this statement统计信息---------------------------------------------------------- 0 recursive calls 0 db block gets 115 consistent gets 0 physical reads 0 redo size 422 bytes sent via SQL*Net to client 416 bytes received via SQL*Net from client 2 SQL*Net roundtrips to/from client 0 sorts (memory) 0 sorts (disk) 1 rows processed*/----------------------------------------------------------------------------------------------------------------------2.2 函数索引--1. 函数索引妙用之部分记录建索引--首先看一个例子，普通索引的情况，如下：drop table t purge;set autotrace offcreate table t (id int ,status varchar2(2));--建立普通索引create index id_normal on t(status);insert into t select rownum ,&#x27;Y&#x27; from dual connect by rownum&lt;=1000000;insert into t select 1 ,&#x27;N&#x27; from dual;commit;analyze table t compute statistics for table for all indexes for all indexed columns;set linesize 1000set autotrace traceonlyselect * from t where status=&#x27;N&#x27;;/*执行计划----------------------------------------------------------Plan hash value: 2252729315-----------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |-----------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 10 | 4 (0)| 00:00:01 || 1 | TABLE ACCESS BY INDEX ROWID| T | 1 | 10 | 4 (0)| 00:00:01 ||* 2 | INDEX RANGE SCAN | ID_NORMAL | 1 | | 3 (0)| 00:00:01 |-----------------------------------------------------------------------------------------Predicate Information (identified by operation id):--------------------------------------------------- 2 - access(&quot;STATUS&quot;=&#x27;N&#x27;)统计信息---------------------------------------------------------- 1 recursive calls 0 db block gets 5 consistent gets 0 physical reads 0 redo size 471 bytes sent via SQL*Net to client 416 bytes received via SQL*Net from client 2 SQL*Net roundtrips to/from client 0 sorts (memory) 0 sorts (disk) 1 rows processed*/--看索引情况set autotrace offanalyze index id_normal validate structure;select name,btree_space,lf_rows,height from index_stats;set autotrace offanalyze index id_normal validate structure;select name,btree_space,lf_rows,height from index_stats;/* 索引叶子数 高度ID_NORMAL 15992192 1000001 3*/--------------------------------------------------------------------------------------------建函数索引的情况:因为绝大部分记录都是y,只有极少数 n,所以对n的情况建立索引 。drop index id_normal;create index id_status on t (Case when status= &#x27;N&#x27; then &#x27;N&#x27; end);analyze table t compute statistics for table for all indexes for all indexed columns;/*以下这个select * from t where (case when status=&#x27;N&#x27; then &#x27;N&#x27; end)=&#x27;N&#x27;写法不能变,如果是select * from t where status=&#x27;N&#x27;将无效!笔者见过有些人设置了选择性索引，却这样调用的，结果根本起不到任何效果！*/set autotrace traceonlyselect * from t where (case when status=&#x27;N&#x27; then &#x27;N&#x27; end)=&#x27;N&#x27;;/*执行计划----------------------------------------------------------Plan hash value: 1835552001-----------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |-----------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 1 | 10 | 2 (0)| 00:00:01 || 1 | TABLE ACCESS BY INDEX ROWID| T | 1 | 10 | 2 (0)| 00:00:01 ||* 2 | INDEX RANGE SCAN | ID_STATUS | 1 | | 1 (0)| 00:00:01 |-----------------------------------------------------------------------------------------Predicate Information (identified by operation id):--------------------------------------------------- 2 - access(CASE &quot;STATUS&quot; WHEN &#x27;N&#x27; THEN &#x27;N&#x27; END =&#x27;N&#x27;)统计信息---------------------------------------------------------- 15 recursive calls 0 db block gets 6 consistent gets 0 physical reads 0 redo size 471 bytes sent via SQL*Net to client 416 bytes received via SQL*Net from client 2 SQL*Net roundtrips to/from client 0 sorts (memory) 0 sorts (disk) 1 rows processed*/--接着观察id_status（即函数索引）索引的情况set autotrace offanalyze index id_status validate structure;select name,btree_space,lf_rows,height from index_stats;/* 索引叶子数 高度ID_STATUS 8000 1 1*/--------------------------------------------------------------------------------------2. 函数索引妙用之减少递归调用--首先构造自定义函数的环境，如下所示：drop table t1 purge;drop table t2 purge;create table t1 (first_name varchar2(200),last_name varchar2(200),id number);create table t2 as select * from dba_objects where rownum&lt;=1000;insert into t1 (first_name,last_name,id) select object_name,object_type,rownum from dba_objects where rownum&lt;=1000;commit;create or replace function get_obj_name(p_id t2.object_id%type) return t2.object_name%type DETERMINISTIC isv_name t2.object_name%type;beginselect object_nameinto v_namefrom t2where object_id=p_id;return v_name;end;/----------------------------------------------------------------------------------------------未建函数索引的函数调用性能set linesize 1000set autotrace traceonlyselect * from t1 where get_obj_name(id)=&#x27;TEST&#x27; ;/*执行计划----------------------------------------------------------Plan hash value: 3617692013--------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |--------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 10 | 2170 | 3 (0)| 00:00:01 ||* 1 | TABLE ACCESS FULL| T1 | 10 | 2170 | 3 (0)| 00:00:01 |--------------------------------------------------------------------------Predicate Information (identified by operation id):--------------------------------------------------- 1 - filter(&quot;GET_OBJ_NAME&quot;(&quot;ID&quot;)=&#x27;TEST&#x27;)Note----- - dynamic sampling used for this statement统计信息---------------------------------------------------------- 1175 recursive calls 0 db block gets 16064 consistent gets 13 physical reads 0 redo size 398 bytes sent via SQL*Net to client 405 bytes received via SQL*Net from client 1 SQL*Net roundtrips to/from client 0 sorts (memory) 0 sorts (disk) 0 rows processed*/--------------------------------------------------------------------------------------------------------------建自定义函数get_obj_name的函数索引create index idx_func_id on t1(get_obj_name(id));select * from t1 where get_obj_name(id)=&#x27;TEST&#x27; ;/*执行计划----------------------------------------------------------Plan hash value: 4083325411-------------------------------------------------------------------------------------------| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |-------------------------------------------------------------------------------------------| 0 | SELECT STATEMENT | | 10 | 22190 | 2 (0)| 00:00:01 || 1 | TABLE ACCESS BY INDEX ROWID| T1 | 10 | 22190 | 2 (0)| 00:00:01 ||* 2 | INDEX RANGE SCAN | IDX_FUNC_ID | 4 | | 1 (0)| 00:00:01 |-------------------------------------------------------------------------------------------Predicate Information (identified by operation id):--------------------------------------------------- 2 - access(&quot;SYS&quot;.&quot;GET_OBJ_NAME&quot;(&quot;ID&quot;)=&#x27;TEST&#x27;)Note----- - dynamic sampling used for this statement统计信息---------------------------------------------------------- 48 recursive calls 0 db block gets 14 consistent gets 1 physical reads 0 redo size 398 bytes sent via SQL*Net to client 405 bytes received via SQL*Net from client 1 SQL*Net roundtrips to/from client 0 sorts (memory) 0 sorts (disk) 0 rows processed*/","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"P31_5_字符大小写转换的几种方法","slug":"技术向/CSS/体验高质量的CSS教程/P31_5_字符大小写转换的几种方法","date":"2020-04-10T16:00:00.000Z","updated":"2022-06-15T08:32:49.817Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P31_5_字符大小写转换的几种方法/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P31_5_%E5%AD%97%E7%AC%A6%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/","excerpt":"","text":"P31 5 字符大小写转换的几种方法 font-variant 小型大写 和原来小写字符同等大小 1font-variant:samll-caps; text-transform 大小写格式 123456//全大写text-transform:uppercase;//全小写text-transform:lowercase;//首字母大写text-transform:capitalize;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P32_6_文本线条的控制技巧","slug":"技术向/CSS/体验高质量的CSS教程/P32_6_文本线条的控制技巧","date":"2020-04-10T16:00:00.000Z","updated":"2022-06-15T08:32:49.818Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P32_6_文本线条的控制技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P32_6_%E6%96%87%E6%9C%AC%E7%BA%BF%E6%9D%A1%E7%9A%84%E6%8E%A7%E5%88%B6%E6%8A%80%E5%B7%A7/","excerpt":"","text":"P32 6 文本线条的控制技巧 text-decoration 12345678//下划线text-decoration:underline;//上划线text-decoration:overline;//删除线text-decoration:line-through;//取消线text-decoration:none;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P33_7_文本阴影处理方式","slug":"技术向/CSS/体验高质量的CSS教程/P33_7_文本阴影处理方式","date":"2020-04-10T16:00:00.000Z","updated":"2022-06-15T08:32:49.818Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P33_7_文本阴影处理方式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P33_7_%E6%96%87%E6%9C%AC%E9%98%B4%E5%BD%B1%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/","excerpt":"","text":"P33 7 文本阴影处理方式 text-shadow 字体阴影 text-shadow:颜色 水平偏移量 垂直偏移量 模糊量 技巧：颜色可以使用rgba()，通过a来控制透明度","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P27_1_字体使用没那么简单","slug":"技术向/CSS/体验高质量的CSS教程/P27_1_字体使用没那么简单","date":"2020-04-09T16:00:00.000Z","updated":"2022-06-15T08:32:49.815Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P27_1_字体使用没那么简单/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P27_1_%E5%AD%97%E4%BD%93%E4%BD%BF%E7%94%A8%E6%B2%A1%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/","excerpt":"","text":"P27 1 字体使用没那么简单 使用**@font-face**引用本地字体 font-family:&#x2F;自定义字体名&#x2F; src:url(“&#x2F;字体文件路径&#x2F;“) format(“&#x2F;字体文件类型&#x2F;“) ** ** otf文件类型为：opentype","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P29_3_颜色与行高的声明","slug":"技术向/CSS/体验高质量的CSS教程/P29_3_颜色与行高的声明","date":"2020-04-09T16:00:00.000Z","updated":"2022-06-15T08:32:49.816Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P29_3_颜色与行高的声明/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P29_3_%E9%A2%9C%E8%89%B2%E4%B8%8E%E8%A1%8C%E9%AB%98%E7%9A%84%E5%A3%B0%E6%98%8E/","excerpt":"","text":"P29 3 颜色与行高的声明 color 字体颜色： 1.直接使用定义好的字符 color: red; 2.使用十六进制 color: #dddddd; 3.使用三原色 color: rgb(0-255,0-255,0-255); 4.使用三原色基础上设置半透明度，0透明至1不透明可取小数值 color:rgba(0-255,0-255,0-255,0-1); line-height 行高 建议使用方式：字体固定大小，行高随不同的设备自动适应。 1234p&#123; font-size: px; line-height: em;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P30_4_组合定义与倾斜","slug":"技术向/CSS/体验高质量的CSS教程/P30_4_组合定义与倾斜","date":"2020-04-09T16:00:00.000Z","updated":"2022-06-15T08:32:49.816Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P30_4_组合定义与倾斜/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P30_4_%E7%BB%84%E5%90%88%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%80%BE%E6%96%9C/","excerpt":"","text":"P30 4 组合定义与倾斜 font-style 字体风格 1234//倾斜font-style:italic;//取消倾斜 -&gt; 取消&lt;em&gt;标签的倾斜font-style:normal; **_ _** font 字体[简写] font:粗细 倾斜 字体大小&#x2F;行高 字体","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"有关springboot外部资源引入","slug":"技术向/Java/源辰技术储备/有关springboot外部资源引入","date":"2020-04-09T16:00:00.000Z","updated":"2022-05-11T01:51:54.389Z","comments":true,"path":"技术向/Java/源辰技术储备/有关springboot外部资源引入/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E6%9C%89%E5%85%B3springboot%E5%A4%96%E9%83%A8%E8%B5%84%E6%BA%90%E5%BC%95%E5%85%A5/","excerpt":"","text":"有关springboot外部资源引入 application.yml 配置路径：c:&#x2F;cocologimg&#x2F; 本地目录：c:&#x2F;cocoblogimg&#x2F;user&#x2F;demo.jpg 浏览器访问：&#x2F;user&#x2F;demo.jpg 总结 实际上浏览器访问的时候，根据静态资源列表依次查找，最后：c:&#x2F;cocologimg&#x2F; + user&#x2F;demo.jpg","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第136次课程-第x次课程_S3_CocoBlog","slug":"技术向/Java/源辰课程记录/第136次课程-第x次课程_S3_CocoBlog","date":"2020-03-29T16:00:00.000Z","updated":"2022-05-11T01:38:57.695Z","comments":true,"path":"技术向/Java/源辰课程记录/第136次课程-第x次课程_S3_CocoBlog/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC136%E6%AC%A1%E8%AF%BE%E7%A8%8B-%E7%AC%ACx%E6%AC%A1%E8%AF%BE%E7%A8%8B_S3_CocoBlog/","excerpt":"","text":"源辰74班 第136次课程 - 第x次课程 2020.03.30 - 2020.xx.xx 课程 第136次课程 RPJ_L1L1_阶段项目布置[廖彦] 2020.03.30 第137次课程 RPJ_L2L2_阶段项目需求评审[廖彦] 2020.04.01 第138次课程 RPJ_L3L3_阶段项目[廖彦] 2020.04.07 内容 S3项目 CocoBlog 项目组成员：胡燕卿 彭算泉 谭明亮 周彦辰 GitHub https://github.com/YCterm/CocoBlog","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第135次课程_微服务架构案例T6L6","slug":"技术向/Java/源辰课程记录/第135次课程_微服务架构案例T6L6","date":"2020-03-28T16:00:00.000Z","updated":"2022-05-11T01:37:51.341Z","comments":true,"path":"技术向/Java/源辰课程记录/第135次课程_微服务架构案例T6L6/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC135%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%A1%88%E4%BE%8BT6L6/","excerpt":"","text":"源辰76班 第135次课程 2020.03.29 内容 微服务架构案例T6L6[廖彦] 项目路径：****G:\\YC74\\200322_微服务架构案例T1L1\\code 1.拦截器 （过滤器） 1.在业务模块的启动类内实现WebMvcConfigurer接口，并实现接口添加拦截器。 EbuyIndexApplication.java 123456789101112131415161718192021222324252627282930313233343536373839package com.yc.ebuy;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;import org.springframework.cloud.openfeign.EnableFeignClients;import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;import com.yc.ebuy.web.LoginInterceptor;@SpringBootApplication//MyBatis 接口组件扫描@MapperScan(&quot;com.yc.ebuy&quot;)//开启声明式远程调用@EnableFeignClients//服务熔断降级开关@EnableCircuitBreaker//spring会话共享注解@EnableRedisHttpSessionpublic class EbuyIndexAppcation implements WebMvcConfigurer &#123; public static void main(String[] args) &#123; SpringApplication.run(EbuyIndexAppcation.class, args); &#125; /** * SpringBoot定义拦截器 * 1. 如果没有引入资源, 可以不用加组件注解 * 2. 简单配置实现 WebMvcConfigurer , 高级配置继承 WebMvcConfigurationSupport * 3. SpringBoot 启动类可以直接继承或实现 */ /* * 拦截器配置 addPathPatterns拦截 excludePathPatterns不拦截(排除) */ @Override public void addInterceptors(InterceptorRegistry registry) &#123; registry.addInterceptor(new LoginInterceptor()).addPathPatterns(&quot;/addCart&quot;); &#125;&#125; 2.创建一个拦截器代码逻辑的类,实现HandlerInterceptor接口，并实现其中的方法（方法就是前置过滤或其他过滤方式）。 LoginInterceptor.java 例如：这个样例中实现了如果用户没有登录，先将浏览的页面加入到session里，然后跳转至登录页面。 12345678910111213141516171819202122232425262728293031package com.yc.ebuy.web;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.springframework.web.servlet.HandlerInterceptor;/*** SpringBoot定义拦截器* 1. 如果没有引入资源, 可以不用加组件注解* 2. 简单配置实现 WebMvcConfigurer , 高级配置继承 WebMvcConfigurationSupport* 3. 启动类可以直接继承或实现*/public class LoginInterceptor implements HandlerInterceptor&#123; /** * 返回 true 允许访问目标资源 */ @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; HttpSession session = request.getSession(); if(session.getAttribute(&quot;loginedUser&quot;) == null) &#123; String uri = request.getRequestURI(); System.out.println(&quot;=======uri=======&quot; + uri); // 保存当前用户访问的地址和参数( GET ) session.setAttribute(&quot;uri&quot;, uri); System.out.println(&quot;session id: &quot; + session.getId()); response.sendRedirect(&quot;http://127.0.0.1/tologin&quot;); return false; &#125; return true; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第134次课程_微服务架构案例T5L5","slug":"技术向/Java/源辰课程记录/第134次课程_微服务架构案例T5L5","date":"2020-03-27T16:00:00.000Z","updated":"2022-05-11T01:37:32.259Z","comments":true,"path":"技术向/Java/源辰课程记录/第134次课程_微服务架构案例T5L5/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC134%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%A1%88%E4%BE%8BT5L5/","excerpt":"","text":"源辰76班 第134次课程 2020.03.28 内容 微服务架构案例T5L5[廖彦] 项目路径：****G:\\YC74\\200322_微服务架构案例T1L1\\code 1.含有参数发送给其他业务模块 在接口类里加入注解 如：127.0.0.1&#x2F;product?id&#x3D;1 12@GetMapping(&quot;product&quot;)public EasybuyProduct product(@RequestParam(&quot;id&quot;)int id); 2.修改mybaits的Mapper.xml 查找","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第133次课程_微服务架构案例T4L4","slug":"技术向/Java/源辰课程记录/第133次课程_微服务架构案例T4L4","date":"2020-03-26T16:00:00.000Z","updated":"2022-05-11T01:37:20.272Z","comments":true,"path":"技术向/Java/源辰课程记录/第133次课程_微服务架构案例T4L4/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC133%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%A1%88%E4%BE%8BT4L4/","excerpt":"","text":"源辰76班 第133次课程 2020.03.27 内容 微服务架构案例T4L4[廖彦] 项目路径：****G:\\YC74\\200322_微服务架构案例T1L1\\code 1.zuul服务模块寻找业务模块机理 在zuul服务的application.yml里写其他业务模块地址。 实践证明：127.0.0.1&#x2F;order&#x2F;test和127.0.0.1&#x2F;ebuy-order&#x2F;test均可访问，并返回同样的页面。 2.联动 关联查询 多级查询 表自查询 表自查询：数据库表内有两个字段，一个字段指向另一个字段。常见于多级目录。 2.1 修改实体类（bean），加入容器属性，并序列化。 EasyProductCategory.java 2.2 修改Mapper，加入查询SQL。 说明：把column&#x3D;”id”放入selectChildren的里，根据SQL语句查询出的值，返回装载进property&#x3D;”children”。 column：对应数据库字段名。 property：对应实体类属性名。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第132次课程_微服务架构案例T3L3","slug":"技术向/Java/源辰课程记录/第132次课程_微服务架构案例T3L3","date":"2020-03-24T16:00:00.000Z","updated":"2022-05-11T01:37:08.915Z","comments":true,"path":"技术向/Java/源辰课程记录/第132次课程_微服务架构案例T3L3/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC132%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%A1%88%E4%BE%8BT3L3/","excerpt":"","text":"源辰76班 第132次课程 2020.03.25 内容 微服务架构案例T3L3[廖彦] 项目路径：****G:\\YC74\\200322_微服务架构案例T1L1\\code 1.ModelAndView对象 可以存储数据之外，还可以转发页面。 123456789@GetMapping(&#123; &quot;/&quot;, &quot;index&quot;, &quot;index.html&quot; &#125;)public ModelAndView index(ModelAndView mav) &#123; mav.addObject(&quot;pclist&quot;,pca.getPc()); //存数据 mav.addObject(&quot;newslist&quot;,pca.getNews()); //转发页面 mav.setViewName(&quot;Index&quot;); return mav;&#125; *2.***@ModelAttribute注解 ** 如果每个页面都有用数据库数据来展示的动态部分，可以放在这个注解下的方法内，每次执行xxxAction都会首先调用这个方法内的代码。 1234@ModelAttributepublic void init() &#123; //more code&#125; 3.页面根据是否登录来展示不同字段 html 12345678&lt;span class=&quot;fl&quot;&gt;你好，&lt;!--未登录--&gt;&lt;span th:if=&quot;$&#123;session.loginedUser&#125; == null&quot;&gt;请&lt;a href=&quot;tologin&quot;&gt;登录&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&lt;!--已登录--&gt;&lt;span th:if=&quot;$&#123;session.loginedUser&#125; != null&quot; th:text=&quot;$&#123;session.loginedUser.username&#125;&quot;&gt; &lt;/span&gt; 4.Zuul网关补充 将Zuul模块设置为80端口。当访问127.0.0.1&#x2F;index时Zuul会根据自身模块的application.yml找到ebuy-index业务模块，再根据ebuy-index在Eureka服务内注册的服务器的地址（127.0.0.1:8000&#x2F;8003），找到IndexAction内的@GetMapping(“index”)对应的方法，并返回。 5.[重点]session共享 解决问题：浏览器向服务器发送请求，哪个服务器受理请求，哪个服务器创建session，默认情况下不共享。当再次发送请求时，如果分配给了其他服务器受理，那么没有session对象，造成登录丢失现象。 解决思路：使用redis作为中间临时session数据库，让集群各个服务器之间共享session数据。 Zuul前提说明：由于zuul的敏感头，默认会自动拦截cookie，而cookie正是浏览器和服务端传递session的桥梁。因此需要关闭zuul的敏感头。 在zuul模块下的application.yml加入以下配置： 1234567#zuul网关zuul: routes: ebuy-index: path: /** #过滤敏感头 sensitiveHeaders: 第一步 为业务模块加入以下依赖。 12345678910 &lt;!-- spring集成redis 数据库依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- spring基于redis 共享会话依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.session&lt;/groupId&gt; &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; 第二步 为业务模块启动类加入**@EnableRedisHttpSession**注解。 1234567891011121314151617181920212223package com.yc.ebuy;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;import org.springframework.cloud.openfeign.EnableFeignClients;import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;@SpringBootApplication//MyBatis 接口组件扫描@MapperScan(&quot;com.yc.ebuy&quot;)//开启声明式远程调用@EnableFeignClients//服务熔断降级开关@EnableCircuitBreaker//spring会话共享注解@EnableRedisHttpSessionpublic class EbuyIndexAppcation &#123; public static void main(String[] args) &#123; SpringApplication.run(EbuyIndexAppcation.class, args); &#125;&#125; 第三步 序列化实体类(bean)对象。 123456789101112public class EasybuyUser implements Serializable&#123; /** * 转存redis数据库，需要序列号对象 */ private static final long serialVersionUID = 1L; private Integer id; private String loginname; private String username; //more code ...&#125; 注意： 启动项目时，需要手动开启redis 可以通过命令来查看数据库数据 1keys * 7.出现服务器连接超时&#x2F;拒绝连接问题 解决方案 在zuul模块内加入以下配置： 1234#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 60000#ribbon:# ConnectTimeout: 3000# ReadTimeout: 60000 8.easybuy项目启动顺序","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"P03_3_样式组件设计与导入技巧","slug":"技术向/CSS/体验高质量的CSS教程/P03_3_样式组件设计与导入技巧","date":"2020-03-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.764Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P03_3_样式组件设计与导入技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P03_3_%E6%A0%B7%E5%BC%8F%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AF%BC%E5%85%A5%E6%8A%80%E5%B7%A7/","excerpt":"","text":"P03 3 样式组件设计与导入技巧 使用**@import**来引入其他css文件到本css文件中。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P12_7_入门伪类选择器","slug":"技术向/CSS/体验高质量的CSS教程/P12_7_入门伪类选择器","date":"2020-03-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.771Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P12_7_入门伪类选择器/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P12_7_%E5%85%A5%E9%97%A8%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8/","excerpt":"","text":"P12 7 入门伪类选择器 a标签 a:link{} 默认状态 a:visited{} 点击之后 a:hover{} 鼠标放上面时 a:active{} 点击一瞬间 input标签 input:focus{} 获取焦点时 input:active{} 点击时 input:hover{} 鼠标放上面时","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P13_8_目标与伪类及空元素的处理","slug":"技术向/CSS/体验高质量的CSS教程/P13_8_目标与伪类及空元素的处理","date":"2020-03-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.776Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P13_8_目标与伪类及空元素的处理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P13_8_%E7%9B%AE%E6%A0%87%E4%B8%8E%E4%BC%AA%E7%B1%BB%E5%8F%8A%E7%A9%BA%E5%85%83%E7%B4%A0%E7%9A%84%E5%A4%84%E7%90%86/","excerpt":"","text":"P13 8 目标与伪类及空元素的处理 **div:target {} ** 锚点，跳过去后使用里面的样式 :root {} 对全局进行设置，相当于html {} :empty {} 空元素选择器 例如： 123li:empty &#123; display:none;&#125; 可以将没有内容的li隐藏掉。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P14_9_首尾元素伪类选择","slug":"技术向/CSS/体验高质量的CSS教程/P14_9_首尾元素伪类选择","date":"2020-03-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.780Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P14_9_首尾元素伪类选择/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P14_9_%E9%A6%96%E5%B0%BE%E5%85%83%E7%B4%A0%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9/","excerpt":"","text":"P14 9 首尾元素伪类选择 所有元素的第一个 article :first-child {} 由于” “（空格），称之为”里面的”，因此和里面的都被选中。 article&gt;:first-child {} 由于”&gt;”，称之为”子辈份”，因此只有。 所有类型的第一个 article h1:first-of-type {} 表示里面的第一个元素。 所有元素的最后一个 article :last-child {} 所有类型的最后一个 article h1:last-of-type {}","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P15_10_伪类选择唯一子元素","slug":"技术向/CSS/体验高质量的CSS教程/P15_10_伪类选择唯一子元素","date":"2020-03-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.784Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P15_10_伪类选择唯一子元素/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P15_10_%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%94%AF%E4%B8%80%E5%AD%90%E5%85%83%E7%B4%A0/","excerpt":"","text":"P15 10 伪类选择唯一子元素 元素里的唯一一个 article 里面的 唯一的子元素，设置为样式。 123article :only-child&#123;&#125; 类型里的唯一一个 article 里面的 唯一的类型，设置为样式。 123article&gt;:only-of-type&#123;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P16_11_根据元素编号灵活选择","slug":"技术向/CSS/体验高质量的CSS教程/P16_11_根据元素编号灵活选择","date":"2020-03-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.788Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P16_11_根据元素编号灵活选择/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P16_11_%E6%A0%B9%E6%8D%AE%E5%85%83%E7%B4%A0%E7%BC%96%E5%8F%B7%E7%81%B5%E6%B4%BB%E9%80%89%E6%8B%A9/","excerpt":"","text":"P16 11 根据元素编号灵活选择 根据元素 :nth-child 通过第几个来改变样式，参数：1~x 123article&gt;:nth-child(1)&#123;&#125; 当参数为n时，改变全部的样式 123article&gt;:nth-child(n)&#123;&#125; 选取偶数行 1234567article&gt;:nth-child(2n)&#123;&#125;或article&gt;:nth-child(even)&#123;&#125; 选取奇数行 1234567article&gt;:nth-child(2n-1)&#123;&#125;或article&gt;:nth-child(odd)&#123;&#125; 选取前两个 123article&gt;:nth-child(-n+2)&#123;&#125; 从第二个开始 123article&gt;:nth-child(n+2)&#123;&#125; 根据类型 :nth-of-type 用法同上，略。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P17_12_元素尾部伪类选择操作","slug":"技术向/CSS/体验高质量的CSS教程/P17_12_元素尾部伪类选择操作","date":"2020-03-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.792Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P17_12_元素尾部伪类选择操作/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P17_12_%E5%85%83%E7%B4%A0%E5%B0%BE%E9%83%A8%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E6%93%8D%E4%BD%9C/","excerpt":"","text":"P17 12 元素尾部伪类选择操作 根据元素****从后面向前取元素 :nth-last-child 用法同上，略。 根据类型****从后面向前取元素 :nth-last-of-type 用法同上，略。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P18_13_NOT排除选择器的妙用","slug":"技术向/CSS/体验高质量的CSS教程/P18_13_NOT排除选择器的妙用","date":"2020-03-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.795Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P18_13_NOT排除选择器的妙用/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P18_13_NOT%E6%8E%92%E9%99%A4%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E5%A6%99%E7%94%A8/","excerpt":"","text":"P18 13 NOT排除选择器的妙用 ** ** :not 排除。 伪类选择可以在后面连着用。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P19_14_通过表单伪类创建个性化表单","slug":"技术向/CSS/体验高质量的CSS教程/P19_14_通过表单伪类创建个性化表单","date":"2020-03-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.798Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P19_14_通过表单伪类创建个性化表单/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P19_14_%E9%80%9A%E8%BF%87%E8%A1%A8%E5%8D%95%E4%BC%AA%E7%B1%BB%E5%88%9B%E5%BB%BA%E4%B8%AA%E6%80%A7%E5%8C%96%E8%A1%A8%E5%8D%95/","excerpt":"","text":"P19 14 通过表单伪类创建个性化表单 对禁用&#x2F;可用的控制 :disabled :enabled 对选中的控制 :checked 妙用：选择哪个哪个字变颜色。 123input:checked + label &#123; color:grean;&#125; 对必填&#x2F;非必填的控制 :required :optional 强制优先级 !important 对有效&#x2F;无效的控制 :valid :invalid 对input标签设置type，符合规定格式的是有效，否则是无效的。 例：第二个输入框要求是email格式，不符合要求格式，因此使用无效的样式。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"P20_15_文本伪类操作技巧","slug":"技术向/CSS/体验高质量的CSS教程/P20_15_文本伪类操作技巧","date":"2020-03-23T16:00:00.000Z","updated":"2022-06-15T08:32:49.801Z","comments":true,"path":"技术向/CSS/体验高质量的CSS教程/P20_15_文本伪类操作技巧/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/P20_15_%E6%96%87%E6%9C%AC%E4%BC%AA%E7%B1%BB%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/","excerpt":"","text":"P20 15 文本伪类操作技巧 对文章的第一个字&#x2F;第一行的控制 ::first-letter 第一个字 ::first-line 第一行 前面&#x2F;后面追加 ::before 前面追加 ::after 后面追加 123span::after&#123; content:&quot;com&quot;;&#125; 前面： 后面： 妙用： ** ** input边框消失 12border:none;outline:none; 给控件加上悬停小手 类似于a标签的悬停小手 1cursor:pointer;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"}],"author":"hooy"},{"title":"第131次课程_微服务架构案例T2L2","slug":"技术向/Java/源辰课程记录/第131次课程_微服务架构案例T2L2","date":"2020-03-23T16:00:00.000Z","updated":"2022-05-11T01:36:57.077Z","comments":true,"path":"技术向/Java/源辰课程记录/第131次课程_微服务架构案例T2L2/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC131%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%A1%88%E4%BE%8BT2L2/","excerpt":"","text":"源辰76班 第131次课程 2020.03.24 内容 微服务架构案例T2L2[廖彦] 项目路径：****G:\\YC74\\200322_微服务架构案例T1L1\\code 1.将实体类模块引入到其他业务模块的方式 common，通过Mybaits逆向工程插件，生成beas和dao类。 将common模块Maven install打包。 再引入到parent2父类工程的pom.xml中 2.探究下服务器和客户端的yml配置文件 server模块 application.yml 12345678910111213141516171819202122232425262728# 工程配置 ==&gt; 默认的服务名spring: application: name: ebuy-serverserver: port: 8761eureka: client: registerWithEureka: false fetchRegistry: false---spring: profiles: cs1server: port: 8100eureka: client: serviceUrl: defaultZone: http://127.0.0.1:8000/eureka,http://127.0.0.1:8200/eureka---spring: profiles: cs2server: port: 8200eureka: client: serviceUrl: defaultZone: http://127.0.0.1:8100/eureka,http://127.0.0.1:8000/eureka index模块 application.yml 这里没有指定服务器地址，因此使用默认本机127.0.0.1:8761地址注册。 1234567891011121314151617181920212223242526server: port: 80spring: application: name: ebuy-index#连接数据库配置 datasource: url: jdbc:mysql://127.0.0.1:3306/c76-s3-phooy-ebuy username: root password: a driver-class-name: com.mysql.jdbc.Driver#mybatismybatis: #实体类别名 com.yc.C76S3PlySpringBoot.bean -&gt; bean type-aliases-package: com.yc.ebuy.bean #驼峰命名法 类成员别名 configuration: map-underscore-to-camel-case: true#测试类配置 logging: level: com: yc: ebuy: dao: debug web: warn 3. Feign调用逻辑 首页（80端口）的分发器和接口的关系 与熔断&#x2F;降级的区别 和IProductCategoryAction接口同包下，创建一个ProductCategoryAction类，并实现前者接口，实现的内容（方法的内容）为如果发生了熔断&#x2F;降级，将执行的代码。 IProductCategoryAction和EbuyBackAction原本就是同一个文件，只是后面根据需要更改了类名，职能不变。 4.[补充]逆向工程 排序 NewsAction.java 升序asc 降序desc 123456789101112131415161718192021222324252627282930package com.yc.ebuy.web;import java.util.List;import javax.annotation.Resource;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;import com.github.pagehelper.Page;import com.github.pagehelper.PageHelper;import com.yc.ebuy.bean.EasybuyNews;import com.yc.ebuy.bean.EasybuyNewsExample;import com.yc.ebuy.bean.EasybuyProductCategory;import com.yc.ebuy.bean.EasybuyProductCategoryExample;import com.yc.ebuy.dao.EasybuyNewsMapper;import com.yc.ebuy.dao.EasybuyProductCategoryMapper;@RestControllerpublic class NewsAction &#123; @Resource private EasybuyNewsMapper nm; @GetMapping(&quot;getNews&quot;) public List&lt;EasybuyNews&gt; getNews()&#123; EasybuyNewsExample ne = new EasybuyNewsExample(); PageHelper.startPage(1, 5); ne.setOrderByClause(&quot;id desc&quot;); List&lt;EasybuyNews&gt; list = nm.selectByExample(ne); return list; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第130次课程_微服务架构案例T1L1","slug":"技术向/Java/源辰课程记录/第130次课程_微服务架构案例T1L1","date":"2020-03-21T16:00:00.000Z","updated":"2022-05-11T01:36:45.479Z","comments":true,"path":"技术向/Java/源辰课程记录/第130次课程_微服务架构案例T1L1/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC130%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%A1%88%E4%BE%8BT1L1/","excerpt":"","text":"源辰76班 第130次课程 2020.03.22 内容 微服务架构案例T1L1[廖彦] 项目路径：****G:\\YC74\\200322_微服务架构案例T1L1\\code 1.项目环境搭建 工程环境GitHub： https://github.com/huyanqing1998/YCcourse/tree/easybuy 第一次提交即是。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第129次课程_SpringCloud_ZuuI_配置中心","slug":"技术向/Java/源辰课程记录/第129次课程_SpringCloud_ZuuI_配置中心","date":"2020-03-20T16:00:00.000Z","updated":"2022-05-11T01:36:34.575Z","comments":true,"path":"技术向/Java/源辰课程记录/第129次课程_SpringCloud_ZuuI_配置中心/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC129%E6%AC%A1%E8%AF%BE%E7%A8%8B_SpringCloud_ZuuI_%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/","excerpt":"","text":"源辰76班 第129次课程 2020.03.21 内容 SpringCloud_Zuul_配置中心[廖彦] 项目路径： 1. 2.Zuul基本配置 配置Zuul后，直接可以通过服务名进行访问。 例如：http://127.0.0.1/**sc-user**/user/way 1.加入以下依赖 C76-S3-Ply-sc-index&#x2F;pom.xml 1234 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt; &lt;/dependency&gt; 2.Index启动类内加入注解 12345678910111213141516171819202122232425262728package com.yc.index;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;import org.springframework.cloud.client.loadbalancer.LoadBalanced;import org.springframework.cloud.netflix.zuul.EnableZuulProxy;import org.springframework.cloud.openfeign.EnableFeignClients;import org.springframework.context.annotation.Bean;import org.springframework.web.client.RestTemplate;@SpringBootApplication//开启声明式远程服务调用@EnableFeignClients//服务熔断降级开关@EnableCircuitBreaker//开启zuul网络网关服务@EnableZuulProxypublic class IndexApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(IndexApplication.class, args); &#125; //负载均衡 @LoadBalanced @Bean public RestTemplate getRestTemplate() &#123; return new RestTemplate(); &#125;&#125; C76-S3-Ply-sc-index -&gt; application.yml 12345678910111213141516171819202122server: port: 80spring: application: name: sc-indexeureka: client: serviceUrl: # 注册服务器的地址 defaultZone: http://127.0.0.1:8000/eureka # 开启声明式熔断降级开关feign: hystrix: enabled: true # zuulzuul: routes: #定义路有名称 test: 3.路由配置 **3.1 ****简单路由 ****跳转路由 **Ribbon路由 C76-S3-Ply-sc-index -&gt; application.yml 123456789101112131415161718192021222324252627282930313233343536373839404142434445server: port: 80spring: application: name: sc-indexeureka: client: serviceUrl: # 注册服务器的地址 defaultZone: http://127.0.0.1:8000/eureka # 开启声明式熔断降级开关feign: hystrix: enabled: true # zuulzuul: routes: #定义路有名称 ，zuul会默认路由子系统，格式：zuul服务器地址（这里是index的80端口）/服务名/路径 #1.简单路由，响应重定向（可访问服务器内/外部资源） #http://127.0.0.1/baidu/index.html test1: path: /baidu/** url: http://www.baidu.com #2.跳转路由，请求转发（仅访问服务器内部资源） #注意：由于/user/way在IndexAction.java内的方法，方法内指定了服务名，因此可以正常跳转 #http://127.0.0.1/zuser/way test2: path: /zuser/** url: forward:/user #3.1Ribbon路由 #http://127.0.0.1/ruser/user/way test3: path: /ruser/** serviceId: sc-user #3.2以服务名作为路由名称 #http://127.0.0.1/rruser/user/way sc-user: path: /rruser/** **3.2 ****配置忽略行为 ****默认路由 **去敏感头 C76-S3-Ply-sc-index -&gt; application.yml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465server: port: 80spring: application: name: sc-indexeureka: client: serviceUrl: # 注册服务器的地址 defaultZone: http://127.0.0.1:8000/eureka # 开启声明式熔断降级开关feign: hystrix: enabled: true # zuulzuul: # 配置忽略行为，忽略所有的子系统的默认路由 ignoredServices: &#x27;*&#x27; routes: #定义路有名称 ，zuul会默认路由子系统，格式：zuul服务器地址（这里是index的80端口）/服务名/路径 #1.简单路由，响应重定向（可访问服务器内/外部资源） #http://127.0.0.1/baidu/index.html test1: path: /baidu/** url: http://www.baidu.com #2.跳转路由，请求转发（仅访问服务器内部资源） #注意：由于/user/way在IndexAction.java内的方法，方法内指定了服务名，因此可以正常跳转 #http://127.0.0.1/zuser/way test2: path: /zuser/** url: forward:/user #3.1Ribbon路由 #http://127.0.0.1/ruser/user/way test3: path: /ruser/** serviceId: sc-user #由于zuul有默认的敏感头设定，所以要忽略默认的的敏感头设置，必须将敏感头设置为空 sensitiveHeaders: #3.2以服务名作为路由名称 #http://127.0.0.1/rruser/user/way sc-user: path: /rruser/** #4.默认路由 #如果是不存在或者被忽略的访问路径，将会调用这个，相当于switch内的default legacy: path: /** url: http://www.163.com #去敏感头 test4: # /suser/user/way -&gt; /sc-user/user/way path: /suser/** serviceId: sc-user #不是所有的头域字段都可以过滤 sensitiveHeaders: cookie,set-cookie 4.Zuul过滤器 （可能）在使用前需要配置一个路由，没有路由配置可能会报错。详见3。 12345# zuulzuul: routes: #定义路有名称 test: TokenFilter.java 需要继承ZuulFilter抽象类，实现里面的抽象方法（5个）。 12345678910111213141516171819202122232425262728293031323334353637383940414243package com.yc.index.web;import javax.servlet.http.HttpServletRequest;import org.springframework.stereotype.Component;import com.netflix.zuul.ZuulFilter;import com.netflix.zuul.context.RequestContext;import com.netflix.zuul.exception.ZuulException;@Componentpublic class TokenFilter extends ZuulFilter&#123; @Override //判断是否执行该过滤器 true开 false关 public boolean shouldFilter() &#123; return true; &#125; @Override //所要执行的具体过滤动作 public Object run() throws ZuulException &#123; //获取zuul上下文对象 RequestContext requestContext = RequestContext.getCurrentContext(); //获取servlet请求 HttpServletRequest req = requestContext.getRequest(); //获取令牌 String token = req.getParameter(&quot;token&quot;); if(token == null) &#123; //设置是否发送zull响应 requestContext.setSendZuulResponse(false); //设置结果码 requestContext.setResponseStatusCode(401); //设置响应信息 requestContext.setResponseBody(&quot;&#123;\\&quot;result\\&quot;:\\&quot;accessToken is empty!\\&quot;&#125;&quot;); &#125; return null; &#125; @Override //pre前置，post后置，route路由中，error错误 public String filterType() &#123; return &quot;pre&quot;; &#125; @Override //拦截顺序，值越小优先级越高 0表示第一个 public int filterOrder() &#123; return 0; &#125;&#125; 测试方式： 没有令牌参数 有令牌参数","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第128次课程_SpringCloud_Feign_Hystrix","slug":"技术向/Java/源辰课程记录/第128次课程_SpringCloud_Feign_Hystrix","date":"2020-03-19T16:00:00.000Z","updated":"2022-05-11T01:36:23.432Z","comments":true,"path":"技术向/Java/源辰课程记录/第128次课程_SpringCloud_Feign_Hystrix/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC128%E6%AC%A1%E8%AF%BE%E7%A8%8B_SpringCloud_Feign_Hystrix/","excerpt":"","text":"源辰76班 第128次课程 2020.03.20 内容 SpringCloud_Feign_Hystrix[廖彦] 项目路径： 0.启动类启动列表复制方式 1.服务器使用默认端口报错的解决方法 C76-S3-Ply-sc-server -&gt; application.yml ![F","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第127次课程_SpringCloud_Helloworld_服务注册与发现","slug":"技术向/Java/源辰课程记录/第127次课程_SpringCloud_Helloworld_服务注册与发现","date":"2020-03-17T16:00:00.000Z","updated":"2022-05-11T01:36:08.902Z","comments":true,"path":"技术向/Java/源辰课程记录/第127次课程_SpringCloud_Helloworld_服务注册与发现/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC127%E6%AC%A1%E8%AF%BE%E7%A8%8B_SpringCloud_Helloworld_%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/","excerpt":"","text":"源辰76班 第127次课程 2020.03.18 内容 SpringCloud_Helloworld_服务注册与发现[廖彦] 项目路径： 1.集群、分布式和微服务 ** ** 2.抽取pom.xml内的公共内容，作为父pom.xml [pom文件的继承关系] 关系树状图 pom：不作为具体开发，父工程pom.xml 将所有子工程都需要的配置作为 C76-S3-Ply-sc-parent1&#x2F;pom.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.yc&lt;/groupId&gt; &lt;artifactId&gt;C76-S3-Ply-sc-parent1&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Hoxton.SR1&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 将所有应用模块工程都需要的配置作为 C76-S3-Ply-sc-parent2&#x2F;pom.xml 123456789101112131415&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;C76-S3-Ply-sc-parent2&lt;/artifactId&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;!-- 父pom.xml是C76-S3-Ply-sc-parent1/pom.xml --&gt; &lt;parent&gt; &lt;groupId&gt;com.yc&lt;/groupId&gt; &lt;artifactId&gt;C76-S3-Ply-sc-parent1&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt;&lt;/project&gt; 3.每个工程设定不同端口，可同时启动 application.yml 12server: port: 8001 **4.服务互访 **RestTemplate IndexApplication.java 通过@Bean，创建RestTemplate类对象****并注入IOC容器,方便其他xxxAction引用这个对象。 访问地址： http://127.0.0.1/user/way 1234567891011121314151617181920package com.yc.index;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.Bean;import org.springframework.web.client.RestTemplate;@SpringBootApplicationpublic class IndexApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(IndexApplication.class, args); &#125; @Bean public RestTemplate getRestTemplate() &#123; return new RestTemplate(); &#125;&#125; IndexAction.java 123456789101112131415161718192021222324252627package com.yc.index.web;import javax.annotation.Resource;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.client.RestTemplate;@RestControllerpublic class IndexAction &#123; @Resource private RestTemplate restTemplate; @GetMapping(&quot;index/way&quot;) public String index() &#123; return &quot;index&quot;; &#125; @GetMapping(&quot;user/way&quot;) public String user() &#123; String url = &quot;http://127.0.0.1:8001/user/way&quot;; String ret = restTemplate.getForObject(url, String.class); return ret; &#125;&#125; UserAction.java 1234567891011121314package com.yc.user.web;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class UserAction &#123; @GetMapping(&quot;user/way&quot;) public String user() &#123; return &quot;user&quot;; &#125;&#125; 5.服务注册与发现 Eureka服务器 名词解释： 服务端****：指的是server，用于建立eureka服务器 客户端****：指的是业务模块（index order user），启动后将自动注册到server里。 5.1 分布式 配置eureka服务器依赖 C76-S3-Ply-sc-server&#x2F;pom.xml 123456789101112131415161718192021222324252627&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!-- 父pom.xml是C76-S3-Ply-sc-parent1/pom.xml --&gt; &lt;parent&gt; &lt;groupId&gt;com.yc&lt;/groupId&gt; &lt;artifactId&gt;C76-S3-Ply-sc-parent1&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;artifactId&gt;C76-S3-Ply-sc-server&lt;/artifactId&gt; &lt;name&gt;C76-S3-Ply-sc-server&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;dependencies&gt; &lt;!-- eureka-server：eureka服务端 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; C76-S3-Ply-sc-parent2&#x2F;pom.xml 123456789101112131415161718192021222324252627&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;C76-S3-Ply-sc-parent2&lt;/artifactId&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;!-- 父pom.xml是C76-S3-Ply-sc-parent1/pom.xml --&gt; &lt;parent&gt; &lt;groupId&gt;com.yc&lt;/groupId&gt; &lt;artifactId&gt;C76-S3-Ply-sc-parent1&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;!-- eureka-client：eureka客户端 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 服务器 ServerApplication.java server启动类 123456789101112131415package com.yc.server;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;@SpringBootApplication//使能eureka服务器@EnableEurekaServerpublic class ServerApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ServerApplication.class, args); &#125;&#125; application.yml 12345678910# 工程配置 ==&gt; 默认的服务名spring: application: name: sc-serverserver: port: 8000eureka: client: registerWithEureka: false fetchRegistry: false 客户端 各个业务模块（Index Order User）工程配置 以Index业务模块工程为例： IndexApplication.java index启动类 12345678910111213141516171819202122package com.yc.index;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.loadbalancer.LoadBalanced;import org.springframework.context.annotation.Bean;import org.springframework.web.client.RestTemplate;@SpringBootApplicationpublic class IndexApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(IndexApplication.class, args); &#125; //负载均衡 @LoadBalanced @Bean public RestTemplate getRestTemplate() &#123; return new RestTemplate(); &#125;&#125; application.yml 1234567891011server: port: 80# 名称spring: application: name: sc-indexeureka: client: serviceUrl: # 注册服务器的地址 defaultZone: http://127.0.0.1:8000/eureka 5.2 集群 客户端 以user业务模块工程为例： application.yml 12345678910111213141516171819202122232425# 没有指定 spring.profiles 是默认的分区配置server: port: 8001spring: application: name: sc-usereureka: client: serviceUrl: # 注册服务器的地址 defaultZone: http://127.0.0.1:8000/eureka# java 运行参数：--spring.profiles.active=cu1# mvn 运行参数：-Dspring.profiles.active=cu1# yml 分区配置---# 分区配置名称spring: profiles: cu1server: port: 8005---spring: profiles: cu2server: port: 8006 同一个启动类如何多次启动？ 答： 第一步： 第二步： java 运行参数：–spring.profiles.active&#x3D;cu1mvn 运行参数：-Dspring.profiles.active&#x3D;cu1 分布式和集群区别 图取自eureka服务器后台，即server默认页。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第126次课程_框架项目案例_T5L5","slug":"技术向/Java/源辰课程记录/第126次课程_框架项目案例_T5L5","date":"2020-03-14T16:00:00.000Z","updated":"2022-05-11T01:35:56.677Z","comments":true,"path":"技术向/Java/源辰课程记录/第126次课程_框架项目案例_T5L5/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC126%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE%E6%A1%88%E4%BE%8B_T5L5/","excerpt":"","text":"源辰76班 第126次课程 2020.03.15 内容 框架项目案例_T5L5[廖彦] 项目路径：****G:\\YC74\\200310_框架项目案例_T1L1\\code 1.Ueditor 注意： 1.thymeleaf使用Ueditor的jsp版本。 2.表单本身不能将富文本内的数据提交，需要将富文本内的数据通过js转移至内再提交。通过style&#x3D;”display&#x3D;none;”隐藏。 onsubmit&#x3D;”” 事件处理函数在提交前将执行里面的js代码&#x2F;函数。 首先下载插件 Ueditor网址： http://ueditor.baidu.com/website/download.html 以下代码 效果 demo.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;完整demo&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot;/&gt; &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;ueditor.config.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;ueditor.all.min.js&quot;&gt; &lt;/script&gt; &lt;!--建议手动加在语言，避免在ie下有时因为加载语言失败导致编辑器加载失败--&gt; &lt;!--这里加载的语言文件会覆盖你在配置项目里添加的语言类型，比如你在配置项目里配置的是英文，这里加载的中文，那最后就是中文--&gt; &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;lang/zh-cn/zh-cn.js&quot;&gt;&lt;/script&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123; width:100%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt; &lt;h1&gt;完整demo&lt;/h1&gt; &lt;script id=&quot;editor&quot; type=&quot;text/plain&quot; style=&quot;width:1024px;height:500px;&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div id=&quot;btns&quot;&gt; &lt;div&gt; &lt;button onclick=&quot;getAllHtml()&quot;&gt;获得整个html的内容&lt;/button&gt; &lt;button onclick=&quot;getContent()&quot;&gt;获得内容&lt;/button&gt; &lt;button onclick=&quot;setContent()&quot;&gt;写入内容&lt;/button&gt; &lt;button onclick=&quot;setContent(true)&quot;&gt;追加内容&lt;/button&gt; &lt;button onclick=&quot;getContentTxt()&quot;&gt;获得纯文本&lt;/button&gt; &lt;button onclick=&quot;getPlainTxt()&quot;&gt;获得带格式的纯文本&lt;/button&gt; &lt;button onclick=&quot;hasContent()&quot;&gt;判断是否有内容&lt;/button&gt; &lt;button onclick=&quot;setFocus()&quot;&gt;使编辑器获得焦点&lt;/button&gt; &lt;button onmousedown=&quot;isFocus(event)&quot;&gt;编辑器是否获得焦点&lt;/button&gt; &lt;button onmousedown=&quot;setblur(event)&quot; &gt;编辑器失去焦点&lt;/button&gt; &lt;/div&gt; &lt;div&gt; &lt;button onclick=&quot;getText()&quot;&gt;获得当前选中的文本&lt;/button&gt; &lt;button onclick=&quot;insertHtml()&quot;&gt;插入给定的内容&lt;/button&gt; &lt;button id=&quot;enable&quot; onclick=&quot;setEnabled()&quot;&gt;可以编辑&lt;/button&gt; &lt;button onclick=&quot;setDisabled()&quot;&gt;不可编辑&lt;/button&gt; &lt;button onclick=&quot; UE.getEditor(&#x27;editor&#x27;).setHide()&quot;&gt;隐藏编辑器&lt;/button&gt; &lt;button onclick=&quot; UE.getEditor(&#x27;editor&#x27;).setShow()&quot;&gt;显示编辑器&lt;/button&gt; &lt;button onclick=&quot; UE.getEditor(&#x27;editor&#x27;).setHeight(300)&quot;&gt;设置高度为300默认关闭了自动长高&lt;/button&gt; &lt;/div&gt; &lt;div&gt; &lt;button onclick=&quot;getLocalData()&quot; &gt;获取草稿箱内容&lt;/button&gt; &lt;button onclick=&quot;clearLocalData()&quot; &gt;清空草稿箱&lt;/button&gt; &lt;/div&gt;&lt;/div&gt;&lt;div&gt; &lt;button onclick=&quot;createEditor()&quot;&gt; 创建编辑器&lt;/button&gt; &lt;button onclick=&quot;deleteEditor()&quot;&gt; 删除编辑器&lt;/button&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt; //实例化编辑器 //建议使用工厂方法getEditor创建和引用编辑器实例，如果在某个闭包下引用该编辑器，直接调用UE.getEditor(&#x27;editor&#x27;)就能拿到相关的实例 var ue = UE.getEditor(&#x27;editor&#x27;); function isFocus(e)&#123; alert(UE.getEditor(&#x27;editor&#x27;).isFocus()); UE.dom.domUtils.preventDefault(e) &#125; function setblur(e)&#123; UE.getEditor(&#x27;editor&#x27;).blur(); UE.dom.domUtils.preventDefault(e) &#125; function insertHtml() &#123; var value = prompt(&#x27;插入html代码&#x27;, &#x27;&#x27;); UE.getEditor(&#x27;editor&#x27;).execCommand(&#x27;insertHtml&#x27;, value) &#125; function createEditor() &#123; enableBtn(); UE.getEditor(&#x27;editor&#x27;); &#125; function getAllHtml() &#123; alert(UE.getEditor(&#x27;editor&#x27;).getAllHtml()) &#125; function getContent() &#123; var arr = []; arr.push(&quot;使用editor.getContent()方法可以获得编辑器的内容&quot;); arr.push(&quot;内容为：&quot;); arr.push(UE.getEditor(&#x27;editor&#x27;).getContent()); alert(arr.join(&quot;\\n&quot;)); &#125; function getPlainTxt() &#123; var arr = []; arr.push(&quot;使用editor.getPlainTxt()方法可以获得编辑器的带格式的纯文本内容&quot;); arr.push(&quot;内容为：&quot;); arr.push(UE.getEditor(&#x27;editor&#x27;).getPlainTxt()); alert(arr.join(&#x27;\\n&#x27;)) &#125; function setContent(isAppendTo) &#123; var arr = []; arr.push(&quot;使用editor.setContent(&#x27;欢迎使用ueditor&#x27;)方法可以设置编辑器的内容&quot;); UE.getEditor(&#x27;editor&#x27;).setContent(&#x27;欢迎使用ueditor&#x27;, isAppendTo); alert(arr.join(&quot;\\n&quot;)); &#125; function setDisabled() &#123; UE.getEditor(&#x27;editor&#x27;).setDisabled(&#x27;fullscreen&#x27;); disableBtn(&quot;enable&quot;); &#125; function setEnabled() &#123; UE.getEditor(&#x27;editor&#x27;).setEnabled(); enableBtn(); &#125; function getText() &#123; //当你点击按钮时编辑区域已经失去了焦点，如果直接用getText将不会得到内容，所以要在选回来，然后取得内容 var range = UE.getEditor(&#x27;editor&#x27;).selection.getRange(); range.select(); var txt = UE.getEditor(&#x27;editor&#x27;).selection.getText(); alert(txt) &#125; function getContentTxt() &#123; var arr = []; arr.push(&quot;使用editor.getContentTxt()方法可以获得编辑器的纯文本内容&quot;); arr.push(&quot;编辑器的纯文本内容为：&quot;); arr.push(UE.getEditor(&#x27;editor&#x27;).getContentTxt()); alert(arr.join(&quot;\\n&quot;)); &#125; function hasContent() &#123; var arr = []; arr.push(&quot;使用editor.hasContents()方法判断编辑器里是否有内容&quot;); arr.push(&quot;判断结果为：&quot;); arr.push(UE.getEditor(&#x27;editor&#x27;).hasContents()); alert(arr.join(&quot;\\n&quot;)); &#125; function setFocus() &#123; UE.getEditor(&#x27;editor&#x27;).focus(); &#125; function deleteEditor() &#123; disableBtn(); UE.getEditor(&#x27;editor&#x27;).destroy(); &#125; function disableBtn(str) &#123; var div = document.getElementById(&#x27;btns&#x27;); var btns = UE.dom.domUtils.getElementsByTagName(div, &quot;button&quot;); for (var i = 0, btn; btn = btns[i++];) &#123; if (btn.id == str) &#123; UE.dom.domUtils.removeAttributes(btn, [&quot;disabled&quot;]); &#125; else &#123; btn.setAttribute(&quot;disabled&quot;, &quot;true&quot;); &#125; &#125; &#125; function enableBtn() &#123; var div = document.getElementById(&#x27;btns&#x27;); var btns = UE.dom.domUtils.getElementsByTagName(div, &quot;button&quot;); for (var i = 0, btn; btn = btns[i++];) &#123; UE.dom.domUtils.removeAttributes(btn, [&quot;disabled&quot;]); &#125; &#125; function getLocalData () &#123; alert(UE.getEditor(&#x27;editor&#x27;).execCommand( &quot;getlocaldata&quot; )); &#125; function clearLocalData () &#123; UE.getEditor(&#x27;editor&#x27;).execCommand( &quot;clearlocaldata&quot; ); alert(&quot;已清空草稿箱&quot;) &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 2.邮件 找回密码功能 廖彦老师的邮箱信息 所需依赖 pom.xml 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&lt;/dependency&gt; application.yml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#server.port=80#自定义配置参数myUploadPath: G:/YC74/200310_框架项目案例_T1L1/img/#服务器端口：80server: port: 80spring:#连接数据库配置 datasource: url: jdbc:mysql://127.0.0.1:3306/c76-s3-phooy-blog username: root password: a driver-class-name: com.mysql.jdbc.Driver #静态资源映射 resources: staticLocations: - classpath:/resources/ - classpath:/static/ - file:d:$&#123;myUploadPath&#125; #文件上传大小限制 servlet: multipart: maxFileSize: 10000000 mail: #邮件服务器地址 host: smtp.qq.com #用户名 username: 306529917@qq.com #密码 password: sgbfaqcdhxdwbhda #字符集 default-encoding: UTF-8#mybatismybatis: #实体类别名 com.yc.C76S3PlySpringBoot.bean -&gt; bean type-aliases-package: com.yc.blog.bean #驼峰命名法 类成员别名 configuration: map-underscore-to-camel-case: true#测试类配置 logging: level: com: yc: blog: dao: debug web: warn#自定义配置参数 mail: fromMail: addr: 306529917@qq.com MailService.java 三参数：to发给谁，subject标题，content内容 1234567891011121314151617181920212223package com.yc.blog.biz;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.mail.SimpleMailMessage;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.stereotype.Component;@Componentpublic class MailService &#123; @Autowired private JavaMailSender mailSender; @Value(&quot;$&#123;mail.fromMail.addr&#125;&quot;) private String from; public void sendSimpleMail(String to,String subject,String content) &#123; SimpleMailMessage message = new SimpleMailMessage(); message.setFrom(from); message.setTo(to); message.setSubject(subject); message.setText(content); mailSender.send(message); &#125;&#125; 调用发送邮件 123public void test2() &#123; ms.sendSimpleMail(&quot;584945164@qq.com&quot;, &quot;测试邮件&quot;, &quot;申请; 请求; 申请书; 申请表&quot;);&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第125次课程_框架项目案例_T4L4","slug":"技术向/Java/源辰课程记录/第125次课程_框架项目案例_T4L4","date":"2020-03-13T16:00:00.000Z","updated":"2022-05-11T01:35:45.955Z","comments":true,"path":"技术向/Java/源辰课程记录/第125次课程_框架项目案例_T4L4/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC125%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE%E6%A1%88%E4%BE%8B_T4L4/","excerpt":"","text":"源辰76班 第125次课程 2020.03.14 内容 框架项目案例_T4L4[廖彦] 项目路径：****G:\\YC74\\200310_框架项目案例_T1L1\\code 1.项目进度 1.1实现表单验证、业务类和将服务端的报错信息传到前端console显示 详见GitHub：yqxBlog -&gt; 20200314-1 1.2两次密码一致、实现登录和报错信息展示 详见GitHub：yqxBlog -&gt; 20200314-2 **2.**errors.rejectValue errors.rejectValue方法第一个参数为验证字段名，在实体类里必须有对应的类成员。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第124次课程_框架项目案例_T3L3","slug":"技术向/Java/源辰课程记录/第124次课程_框架项目案例_T3L3","date":"2020-03-12T16:00:00.000Z","updated":"2022-05-11T01:35:32.772Z","comments":true,"path":"技术向/Java/源辰课程记录/第124次课程_框架项目案例_T3L3/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC124%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE%E6%A1%88%E4%BE%8B_T3L3/","excerpt":"","text":"源辰76班 第124次课程 2020.03.13 内容 框架项目案例_T3L3[廖彦] 项目路径： 1.SpringBoot自定义配置参数和文件上传大小限制 application.yml 1234567891011121314151617181920212223242526272829303132333435363738#server.port=80#自定义的配置参数myUploadPath: E:/ba1/#服务器端口：80server: port: 80spring:#连接数据库配置 datasource: url: jdbc:mysql://127.0.0.1:3306/c76-s3-phooy-blog username: root password: a driver-class-name: com.mysql.jdbc.Driver #静态资源映射 resources: staticLocations: - classpath:/resources/ - classpath:/static/ - file:d:$&#123;myUploadPath&#125; #文件上传大小限制 servlet: multipart: maxFileSize: 10000000#mybatismybatis: #实体类别名 com.yc.C76S3PlySpringBoot.bean -&gt; bean type-aliases-package: com.yc.blog.bean #驼峰命名法 类成员别名 configuration: map-underscore-to-camel-case: true#测试类配置 logging: level: com: yc: blog: dao: debug web: warn 2.通过表达式读取yml文件里的参数和静态资源映射 IndexAction.java myUploadPath代表的是上传文件存储路径， @Value：配置静态资源位置 紫色部分SpringBoot文件上传对象 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192package com.yc.blog.web;import java.io.File;import java.io.IOException;import javax.annotation.Resource;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import com.github.pagehelper.Page;import com.github.pagehelper.PageHelper;import com.yc.blog.bean.Article;import com.yc.blog.bean.ArticleExample;import com.yc.blog.bean.User;import com.yc.blog.dao.ArticleMapper;import com.yc.blog.dao.CategoryMapper;import com.yc.blog.vo.Result;@Controllerpublic class IndexAction &#123; @Resource private ArticleMapper am; @Resource private CategoryMapper cm; @ModelAttribute public void init(Model m) &#123; //查询分类列表 m.addAttribute(&quot;clist&quot;,cm.selectByExample(null)); &#125; /* * 首页 */ @GetMapping(&#123;&quot;/&quot;,&quot;index&quot;,&quot;index.html&quot;&#125;) public String index(@RequestParam(defaultValue = &quot;1&quot;) Integer page,Model m) &#123; Page&lt;Article&gt; pg = PageHelper.startPage(page, 5); //注意：PageHelper.startPage(page, 5)必须在查询代码的前一行 am.selectByExampleWithBLOBs(null); m.addAttribute(&quot;alist&quot;,pg); return &quot;index&quot;; &#125; /* * 文章详情 */ @GetMapping(&#123;&quot;article&quot;&#125;) public String article(Integer id,Model m) &#123; Article a = am.selectByPrimaryKey(id); m.addAttribute(a); return &quot;article&quot;; &#125; /* * 分类查询 */ @GetMapping(&#123;&quot;category&quot;&#125;) public String category(Integer id,@RequestParam(defaultValue = &quot;1&quot;) Integer page,Model m) &#123; Page&lt;Article&gt; pg = PageHelper.startPage(page, 5); ArticleExample ae = new ArticleExample(); ae.createCriteria().andCategoryidEqualTo(id); am.selectByExampleWithBLOBs(ae); m.addAttribute(&quot;alist&quot;,pg); m.addAttribute(&quot;id&quot;,id); return &quot;category&quot;; &#125; @GetMapping(&#123;&quot;toreg&quot;&#125;) public String toreg() &#123; return &quot;reg&quot;; &#125; /* * AJAX 方法使用@ResponseBody返回字符串 */ @Value(&quot;$&#123;myUploadPath&#125;&quot;) private String myUploadPath; @ResponseBody @PostMapping(&#123;&quot;reg&quot;&#125;) public Result reg(User user,@RequestParam(&quot;file&quot;) MultipartFile file) throws IllegalStateException, IOException &#123; System.out.println(user); file.transferTo(new File(myUploadPath + file.getOriginalFilename())); return new Result(0,&quot;用户注册成功&quot;); &#125; &#125; Result.java 向前端返回数据时，推荐将信息打包成规范化的一个类，类内包含码、信息和数据等内容。 12345678910111213141516171819202122232425262728293031323334353637383940package com.yc.blog.vo;public class Result &#123; private int code; private String msg; private Object data; public Result(int code) &#123; super(); this.code = code; &#125; public Result(int code, String msg) &#123; super(); this.code = code; this.msg = msg; &#125; public Result(int code, String msg, Object data) &#123; super(); this.code = code; this.msg = msg; this.data = data; &#125; public int getCode() &#123; return code; &#125; public void setCode(int code) &#123; this.code = code; &#125; public String getMsg() &#123; return msg; &#125; public void setMsg(String msg) &#123; this.msg = msg; &#125; public Object getData() &#123; return data; &#125; public void setData(Object data) &#123; this.data = data; &#125; &#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第123次课程_框架项目案例_T2L2","slug":"技术向/Java/源辰课程记录/第123次课程_框架项目案例_T2L2","date":"2020-03-10T16:00:00.000Z","updated":"2022-05-11T01:35:18.550Z","comments":true,"path":"技术向/Java/源辰课程记录/第123次课程_框架项目案例_T2L2/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC123%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE%E6%A1%88%E4%BE%8B_T2L2/","excerpt":"","text":"源辰76班 第123次课程 2020.03.11 内容 框架项目案例_T2L2[廖彦] 项目路径： 1.分页查询 分页工具：pagehelper 引入以下依赖 pom.xml 123456&lt;!-- 分页工具 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.2.13&lt;/version&gt; &lt;/dependency&gt; 使用方法 神奇的是，调用PageHelper.startPage(页码，每页多少行)静态方法，自动会根据接口对象查询。 最后，将查询到的表数据以实体类数组的方式返回，再放入Model内，传送给前端。 1234567891011121314151617181920212223242526package com.yc.blog.web;import javax.annotation.Resource;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestParam;import com.github.pagehelper.Page;import com.github.pagehelper.PageHelper;import com.yc.blog.bean.Article;import com.yc.blog.dao.ArticleMapper;@Controllerpublic class IndexAction &#123; @Resource private ArticleMapper am; @GetMapping(&#123;&quot;/&quot;,&quot;index&quot;,&quot;index.html&quot;&#125;) public String index(@RequestParam(defaultValue = &quot;1&quot;) Integer page,Model m) &#123; Page&lt;Article&gt; pg = PageHelper.startPage(page, 5); //注意：PageHelper.startPage(page, 5)必须在查询代码的前一行 //接口对象 am.selectByExampleWithBLOBs(null); m.addAttribute(&quot;alist&quot;,pg); return &quot;index&quot;; &#125;&#125; 2.无限加载 当滚动条拉到某一位置时，列表将继续加载，一直向下延伸。应用于如百度首页，腾讯新闻评论区等。 jquery-ias-min.js 所需js文件 配置代码 将以下代码加入工程js内 1234567891011121314151617181920 var page = 1; var ias = jQuery.ias(&#123; container : &#x27;.content&#x27;, item : &#x27;.excerpt&#x27;, pagination : &#x27;.pagination&#x27;, next : &#x27;.next-page a&#x27; &#125;); // 加分页查询参数 ias.on( &quot;load&quot;, function(e)&#123; e.ajaxOptions.data = &#123;page:++page&#125;; &#125;); // 加载图片 ias.extension(new IASSpinnerExtension(&#123; src: &#x27;images/loading.gif&#x27;, // 图片地址 &#125;)); ias.extension(new IASTriggerExtension(&#123; text: &#x27;查看更多&#x27;, offset: 5 // 第几页后开始 &#125;)); 例： container：新加载的数据放在哪里 item：ajax返回的data里的哪些数据 pagination：当滚动条到哪触发 next：触发什么，如a标签地址 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-ias.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; // 官网 : https://plugins.jquery.com/ias/ // 文档 : https://docs.infiniteajaxscroll.com/getting-started var page = 1; $(function()&#123; var ias = jQuery.ias(&#123; container : &#x27;#posts&#x27;, item : &#x27;.post&#x27;, pagination : &#x27;#pagination&#x27;, next : &#x27;.next&#x27; &#125;); // 加分页查询参数 ias.on( &quot;load&quot;, function(e)&#123; e.ajaxOptions.data = &#123;page:page++&#125;; &#125;); // 加载图片 ias.extension(new IASSpinnerExtension(&#123; src: &#x27;loading.gif&#x27;, // 图片地址 &#125;)); ias.extension(new IASTriggerExtension(&#123; text: &#x27;查看更多&#x27;, offset: 5 // 第几页后开始 &#125;)); &#125;);&lt;/script&gt;&lt;style type=&quot;text/css&quot;&gt;.post &#123; height: 200px; background-color: #bbb; margin: 10px&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;posts&quot;&gt; &lt;div class=&quot;post&quot;&gt;...&lt;/div&gt; &lt;div class=&quot;post&quot;&gt;...&lt;/div&gt; &lt;div class=&quot;post&quot;&gt;...&lt;/div&gt; &lt;div class=&quot;post&quot;&gt;...&lt;/div&gt; &lt;/div&gt; &lt;!-- 分页条, 当滚动到该控件时, 触发加载 --&gt; &lt;div id=&quot;pagination&quot;&gt; &lt;a href=&quot;index.html&quot; class=&quot;next&quot;&gt;next&lt;/a&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 3.BLOBs和CLOBs数据 如果数据库字段类型属于标题两种之一，前端通过简单的 1&lt;x th:text=&quot;&#123;&#125;&quot;&gt;&lt;/x&gt; 是获取不到数据的，需要调用接口对象时候用以下方法 1am.selectByExampleWithBLOBs(null); 来调取大量数据。 4.th:utext 和 th:id th:utext 和 th:id都是thymeleaf的springEL语法。 th:utext：将获取到的字符串解析，把字符串内的html语言加载至页面。相当于js中的html()方法。th:text就是text()方法。 th:id：给元素加入id属性。 紫色部分，通过text()方法先将数据流内的html标签洗掉，然后再通过html()方法加载至页面。当然使用正则表达式来清洗数据库数据更好。 1234567891011121314151617&lt;article th:each=&quot;a:$&#123;alist&#125;&quot; class=&quot;excerpt excerpt-1&quot;&gt;&lt;a class=&quot;focus&quot; href=&quot;article.html&quot; title=&quot;&quot;&gt;&lt;img class=&quot;thumb&quot; data-original=&quot;images/excerpt.jpg&quot; src=&quot;images/excerpt.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;header&gt;&lt;a class=&quot;cat&quot; href=&quot;program&quot;&gt;后端程序&lt;i&gt;&lt;/i&gt;&lt;/a&gt; &lt;h2&gt;&lt;a th:text=&quot;$&#123;a.title&#125;&quot; th:href=&quot;&#x27;article?id=&#x27;+$&#123;a.id&#125;&quot; title=&quot;&quot;&gt;php如何判断一个日期的格式是否正确&lt;/a&gt;&lt;/h2&gt; &lt;/header&gt; &lt;p class=&quot;meta&quot;&gt; &lt;time class=&quot;time&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-time&quot;&gt;&lt;/i&gt; &lt;span th:text=&quot;$&#123;a.createtime&#125;&quot;&gt;2016-1-4 10:29:39&lt;/span&gt; &lt;/time&gt; &lt;span class=&quot;views&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-eye-open&quot;&gt;&lt;/i&gt; 共120人围观&lt;/span&gt; &lt;a class=&quot;comment&quot; th:href=&quot;&#x27;article?id=&#x27;+$&#123;a.id&#125;&quot; &gt;&lt;i class=&quot;glyphicon glyphicon-comment&quot;&gt;&lt;/i&gt; 0个不明物体&lt;/a&gt;&lt;/p&gt; &lt;div th:utext=&quot;$&#123;a.content&#125;&quot; th:id=&quot;&#x27;p&#x27;+$&#123;a.id&#125;&quot; class=&quot;note&quot;&gt;可以用strtotime()把日期（$date）转成时间戳，再用date()按需要验证的格式转成一个日期，来跟$date比较是否相同来验证这个日期的格式是否是正确的。所以要验证日期格式 ... &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; var id = &#x27;p[[$&#123;a.id&#125;]]&#x27;; var text = $(&quot;#&quot; + id).text(); text = text.substr(0,100); $(&quot;#&quot; + id).html(text); &lt;/script&gt;&lt;/article&gt; 5.复习 地址参数 如：index.html?page&#x3D;1 前端发送方式： 1&lt;h2&gt;&lt;a th:text=&quot;$&#123;a.title&#125;&quot; th:href=&quot;&#x27;article?id=&#x27;+$&#123;a.id&#125;&quot; title=&quot;&quot;&gt;php如何判断一个日期的格式是否正确&lt;/a&gt;&lt;/h2&gt; 后台接收方式： 根据SpringMVC的需要 别忘记：@Controller、@Resource和@GetMapping注解的应用，否则报错。 1234567891011121314151617181920212223package com.yc.blog.web;import javax.annotation.Resource;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestParam;import com.github.pagehelper.Page;import com.github.pagehelper.PageHelper;import com.yc.blog.bean.Article;import com.yc.blog.dao.ArticleMapper;@Controllerpublic class IndexAction &#123; @Resource private ArticleMapper am; @GetMapping(&#123;&quot;article&quot;&#125;) public String article(Integer id,Model m) &#123; Article a = am.selectByPrimaryKey(id); m.addAttribute(a); return &quot;article&quot;; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第122次课程_框架项目案例_T1L1","slug":"技术向/Java/源辰课程记录/第122次课程_框架项目案例_T1L1","date":"2020-03-09T16:00:00.000Z","updated":"2022-05-11T01:35:07.340Z","comments":true,"path":"技术向/Java/源辰课程记录/第122次课程_框架项目案例_T1L1/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC122%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE%E6%A1%88%E4%BE%8B_T1L1/","excerpt":"","text":"源辰76班 第122次课程 2020.03.10 内容 框架项目案例_T1L1[廖彦] 项目路径： 1.逆向工程 Mybatis工具：mybatis-generator 根据数据库结构生成Mybatis的bean包和dao包（包含接口类和对应的Mapper.xml）。 pom.xml插件 12345&lt;build&gt; &lt;plugins&gt; 插件 &lt;plugins&gt;&lt;/build&gt; 插件 在pom.xml内引入以下代码： pom.xml 12345678910111213141516171819202122&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;!-- MyBatis 反向工程插件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.7&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.47&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 配置文件 将配置文件放置resources&#x2F;generatorConfig.xml generatorConfig.xml 蓝色部分是根据项目而本地化更改的。 123456789101112131415161718192021222324252627282930313233343536&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt; &lt;!-- 覆盖之前生成的文件命令：-Dmybatis.generator.overwrite=true mybatis-generator:generate --&gt; &lt;context id=&quot;MySQLTables&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;commentGenerator&gt; &lt;!-- 不生成注释 --&gt; &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt; &lt;/commentGenerator&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://127.0.0.1/C76-S3-Phooy-blog?serverTimezone=UTC&amp;amp;CharacterEncoding=UTF-8&amp;amp;useSSL=false&quot; userId=&quot;root&quot; password=&quot;a&quot;&gt; &lt;property name=&quot;nullCatalogMeansCurrent&quot; value=&quot;true&quot; /&gt; &lt;/jdbcConnection&gt; &lt;!-- 实体类包名 --&gt; &lt;javaModelGenerator targetPackage=&quot;com.yc.blog.bean&quot; targetProject=&quot;src/main/java&quot;&gt; &lt;!-- 字符串属性加入 trim 函数 --&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt; &lt;/javaModelGenerator&gt; &lt;!-- Dao类包名 --&gt; &lt;sqlMapGenerator targetPackage=&quot;com.yc.blog.dao&quot; targetProject=&quot;src/main/java&quot;&gt; &lt;/sqlMapGenerator&gt; &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.yc.blog.dao&quot; targetProject=&quot;src/main/java&quot;&gt; &lt;/javaClientGenerator&gt; &lt;!-- % 表示所有表，更改时间类型 --&gt; &lt;table tableName=&quot;%&quot;&gt; &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;mysql&quot; identity=&quot;true&quot; /&gt; &lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; 执行 maven build… 1-Dmybatis.generator.overwrite=true mybatis-generator:generate 插件和配置文件在生成对应的包后，可以删除并不会影响项目。这仅仅是一个工具。 1.2 生成的Mapper.java接口词汇解析 定义方法名： count：返回的是数字，例如表记录的个数。 含有Excample：组合条件查询对象。 含有Selective：一条表记录，更改了哪个分量，哪个分量数据更新，其他分量不变。 不含有Selective：一条表记录，更改了分量，全分量都更新，没有修改的分量将null。相当于删除了这条记录，又添加了一条新的记录，有些字段没值就成了null。 含有WithBLOBs：表示操作数据库中的BLOB or CLOB（很大数据类型）。 含有PrimaryKey：表示根据主键进行的操作。 2.MG生成代码的使用 BlogApplicationTest.java 介绍方法使用 例如数据库表Article。首先创建一个ArticleExample组合条件查询对象，然后为这个对象创建条件Criteria，最后将组合条件查询对象放入Mapper接口对象里查询，返回表记录bean对象。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.yc.blog;import java.util.List;import javax.annotation.Resource;import org.junit.jupiter.api.Test;import org.mockito.Mockito;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.util.Assert;import com.yc.blog.bean.Article;import com.yc.blog.bean.ArticleExample;import com.yc.blog.bean.ArticleExample.Criteria;import com.yc.blog.dao.ArticleMapper;import com.yc.blog.dao.UserMapper;@SpringBootTestclass BlogApplicationTests &#123; @Resource private UserMapper um; @Resource private ArticleMapper am; @Test void contextLoads() &#123; Assert.isTrue(um.selectByExample(null).size() &gt; 0, &quot;结果集数量不正确!&quot;); // 如何使用组合条件查询 // careatetime is not null and title like &#x27;%css%&#x27; //创建一个组合条件查询对象 ArticleExample ae = new ArticleExample(); //由这个对象来创建条件 Criteria c = ae.createCriteria(); c.andCreatetimeIsNotNull(); c.andTitleLike(&quot;%css%&quot;); //相当于以下代码，每次调用都返回同一个对象，因此可以链接下去 //c.andCreatetimeIsNotNull().andTitleLike(&quot;%css%&quot;); //组合条件查询对象放入到 接口对象里查询，返回数据库表记录（bean对象） List&lt;Article&gt; list = am.selectByExample(ae); System.out.println(list); // 查询文章: label 带 s 分类 category = 3 的记录 &#125; &#125; 3.thymeleaf 引入模板 动态的将其他html文件内的代码加入到另一个html中。 1.在被引入页面元素定义，使用th:fragment属性定义片段。 2.在引入页面使用： ** th:insert** ** th:replace** ** th:include** 被引入页面 格式：th:fragment&#x3D;”模板id“ 引入页面 格式：th:replace&#x3D;”被引入页面路径::模板id”","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第121次课程_Springboot_websocket_定时任务","slug":"技术向/Java/源辰课程记录/第121次课程_Springboot_websocket_定时任务","date":"2020-03-07T16:00:00.000Z","updated":"2022-05-11T01:34:52.099Z","comments":true,"path":"技术向/Java/源辰课程记录/第121次课程_Springboot_websocket_定时任务/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC121%E6%AC%A1%E8%AF%BE%E7%A8%8B_Springboot_websocket_%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/","excerpt":"","text":"源辰76班 第121次课程 2020.03.08 内容 Springboot_websocket_定时任务[廖彦] 项目路径： 1.WebSocket 实时性，全双工，本地浏览器（客户端）连接至服务器后，当有消息时，服务器自动推送至本地。 解决了过去技术，每次都要向服务器发送请求，才能获取最新消息的问题。 WebSocket必要依赖 pom.xml spring-boot-starter-websocket内部集成了spring-boot-starter-web，因此不需要这个依赖。 12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; --&gt; C76S3PlySpringBootApplication.java 在启动器中加入以下代码 @Bean … 12345678910111213141516171819202122package com.yc.C76S3PlySpringBoot;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.Bean;import org.springframework.web.socket.server.standard.ServerEndpointExporter;@SpringBootApplication//Mybatis包扫描 - 扫接口@MapperScan(&quot;com.yc.C76S3PlySpringBoot&quot;)public class C76S3PlySpringBootApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(C76S3PlySpringBootApplication.class, args); &#125; @Bean public ServerEndpointExporter serverEndpointExporter() &#123; return new ServerEndpointExporter(); &#125;&#125; MyWebSocket.java @OnOpen：获取到连接时的操作。 @OnClose：关闭连接时操作。 @OnMessage：消息处理操作。 1234567891011121314151617181920212223242526272829303132333435363738394041package com.yc.C76S3PlySpringBoot;import java.io.IOException;import java.util.Hashtable;import javax.websocket.OnClose;import javax.websocket.OnMessage;import javax.websocket.OnOpen;import javax.websocket.Session;import javax.websocket.server.PathParam;import javax.websocket.server.ServerEndpoint;import org.springframework.stereotype.Component;@ServerEndpoint(value = &quot;/websocket/&#123;id&#125;&quot;)@Componentpublic class MyWebSocket &#123; private static Hashtable&lt;String,Session&gt; webSocketMap = new Hashtable&lt;String,Session&gt;(); @OnOpen public void onOpen(@PathParam(&quot;id&quot;)String id,Session session) &#123; System.out.println(session); webSocketMap.put(id,session); &#125; @OnClose public void onClose(Session session) &#123; //webSocketSet.remove(session); &#125; @OnMessage public void onMessage(String message,Session session) throws IOException &#123; //逻辑解释：当收到&quot;武松&quot;的消息，message=&quot;张三:你好&quot;，服务器根据&quot;张三&quot;找到对应的session，然后向session内写入&quot;你好&quot;并传送给前端。 String[] strings = message.split(&quot;:&quot;); String id = strings[0]; message = strings[1]; Session targetSession = webSocketMap.get(id); if(targetSession!=null) &#123; targetSession.getBasicRemote().sendText(message); &#125; else &#123; System.out.println(id + &quot; 不在线！&quot;); &#125; &#125;&#125; msg.html 前端 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; var websocket; function conn()&#123; //创建websocket对象 websocket = new WebSocket(&quot;ws://localhost/websocket/&quot; + manid.value); //连接发生错误回调方法 websocket.onerror = function()&#123; &#125; //连接成功建立的回调方法 websocket.onopen = function(event)&#123; console.info(event); &#125; //接收到消息的回调方法 websocket.onmessage = function(event)&#123; console.info(event); msgtxt.innerHTML += event.data + &quot;\\n&quot;; &#125; //连接关闭的回调方法 websocket.onclose = function()&#123; &#125; &#125; //关闭连接 function closeWebSocket()&#123; websocket.close(); &#125; //发送消息 function send(msg)&#123; websocket.send(msg); &#125; &lt;/script&gt; 聊天人：&lt;input id=&quot;manid&quot;&gt; &lt;button onclick=&quot;conn()&quot;&gt;连接&lt;/button&gt;&lt;br/&gt; 消息区：&lt;textarea id=&quot;msgtxt&quot; rows=&quot;10&quot; cols=&quot;&quot;&gt;&lt;/textarea&gt;&lt;br/&gt; 我说：&lt;input id=&quot;msgid&quot;&gt; &lt;button onclick=&quot;send(msgid.value)&quot;&gt;发送&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 样例： 2.定时任务 C76S3PlySpringBootApplication.java 启动器内加入**@EnableScheduling**注解。 12345678910111213141516171819202122232425package com.yc.C76S3PlySpringBoot;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.Bean;import org.springframework.scheduling.annotation.EnableScheduling;import org.springframework.web.socket.server.standard.ServerEndpointExporter;@SpringBootApplication//定时任务启动注解@EnableScheduling//Mybatis包扫描 - 扫接口@MapperScan(&quot;com.yc.C76S3PlySpringBoot&quot;)public class C76S3PlySpringBootApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(C76S3PlySpringBootApplication.class, args); &#125; @Bean public ServerEndpointExporter serverEndpointExporter() &#123; return new ServerEndpointExporter(); &#125;&#125; MyWebSocket.java 任意一个存在**@Component**注解的类，都可以将定时器方法代码加入其中。 定时器方法注解：**@Scheduled(cron&#x3D;”&#x2F;5 * 10-13 * * ?”)* 其中： *&#x2F;5 每五秒执行一次。 10-13当天10:00至13:00内执行。 秒 分 时 日 月 星期 年 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package com.yc.C76S3PlySpringBoot;import java.io.IOException;import java.util.Hashtable;import javax.websocket.OnClose;import javax.websocket.OnMessage;import javax.websocket.OnOpen;import javax.websocket.Session;import javax.websocket.server.PathParam;import javax.websocket.server.ServerEndpoint;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;@ServerEndpoint(value = &quot;/websocket/&#123;id&#125;&quot;)@Componentpublic class MyWebSocket &#123; private static Hashtable&lt;String,Session&gt; webSocketMap = new Hashtable&lt;String,Session&gt;(); @OnOpen public void onOpen(@PathParam(&quot;id&quot;)String id,Session session) &#123; System.out.println(session); session.getUserProperties().put(&quot;id&quot;, id); webSocketMap.put(id,session); &#125; @OnClose public void onClose(Session session) &#123; //webSocketSet.remove(session); &#125; @OnMessage public void onMessage(String message,Session session) throws IOException &#123; String[] strings = message.split(&quot;:&quot;); String id = strings[0]; message = strings[1]; Session targetSession = webSocketMap.get(id); if(targetSession!=null) &#123; targetSession.getBasicRemote().sendText(message); &#125; else &#123; System.out.println(id + &quot; 不在线！&quot;); &#125; &#125; @Scheduled(cron=&quot;*/5 * 10-13 * * ?&quot;) private void process() throws IOException &#123; System.out.println(&quot;===============&quot; + System.currentTimeMillis()); //消息群发 for(Session session : webSocketMap.values()) &#123; String id = (String) session.getUserProperties().get(&quot;id&quot;); session.getBasicRemote().sendText(id + &quot;：您好，现在的时间是：&quot; + System.currentTimeMillis()); &#125; &#125;&#125; cron表达式实例： 1234567891011121314cron表达式实例： 0 0 2 1 * ? * 表示在每月的1日的凌晨2点调整任务 0 15 10 ? * MON-FRI 表示周一到周五每天上午10:15执行作业 0 15 10 ? 6L 2002-2006 表示2002-2006年的每个月的最后一个星期五上午10:15执行作 0 0 10,14,16 * * ? 每天上午10点，下午2点，4点 0 0/30 9-17 * * ? 朝九晚五工作时间内每半小时 0 0 12 ? * WED 表示每个星期三中午12点 0 0 12 * * ? 每天中午12点触发 0 15 10 ? * * 每天上午10:15触发 0 15 10 * * ? 每天上午10:15触发 0 15 10 * * ? * 每天上午10:15触发 0 15 10 * * ? 2005 2005年的每天上午10:15触发 0 * 14 * * ? 在每天下午2点到下午2:59期间的每1分钟触发 0 0/5 14 * * ? 在每天下午2点到下午2:55期间的每5分钟触发","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"加载其他页面至本页面","slug":"技术向/Java/源辰技术储备/【重要】加载其他页面至本页面","date":"2020-03-06T16:00:00.000Z","updated":"2022-05-11T01:44:08.013Z","comments":true,"path":"技术向/Java/源辰技术储备/【重要】加载其他页面至本页面/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E3%80%90%E9%87%8D%E8%A6%81%E3%80%91%E5%8A%A0%E8%BD%BD%E5%85%B6%E4%BB%96%E9%A1%B5%E9%9D%A2%E8%87%B3%E6%9C%AC%E9%A1%B5%E9%9D%A2/","excerpt":"","text":"【重要】加载其他页面至本页面 例如： 12345678&lt;!-- 头引入： --&gt;&lt;%-- &lt;%@ include file=&quot;common/header.jsp&quot;%&gt; --%&gt;&lt;!js代替jsp&gt;&lt;div id=&quot;feeds&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt; $($(&quot;#feeds&quot;).load(&quot;common/header.jsp&quot;));&lt;/script&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第120次课程_Springboot_thymeleaf_mock","slug":"技术向/Java/源辰课程记录/第120次课程_Springboot_thymeleaf_mock","date":"2020-03-06T16:00:00.000Z","updated":"2022-05-11T01:34:39.027Z","comments":true,"path":"技术向/Java/源辰课程记录/第120次课程_Springboot_thymeleaf_mock/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC120%E6%AC%A1%E8%AF%BE%E7%A8%8B_Springboot_thymeleaf_mock/","excerpt":"","text":"源辰76班 第120次课程 2020.03.07 内容 Springboot_thymeleaf_mock 项目路径： **1.**Mock 用于测试，创建虚拟对象。 例如biz需要dao的对象，但dao还未开发完成。就可以mock出一个dao对象，来用于biz测试。 SpringBoot 使用的是：Mockito User.java [bean] 123package com.yc.C76S3PlySpringBoot.bean;public class User &#123;&#125; UserBiz.java 1234567891011121314151617package com.yc.C76S3PlySpringBoot.biz;import javax.annotation.Resource;import org.springframework.stereotype.Service;import com.yc.C76S3PlySpringBoot.bean.User;import com.yc.C76S3PlySpringBoot.dao.UserMapper;@Servicepublic class UserBiz &#123; @Resource private UserMapper um; public boolean login(String name,String pwd) &#123; User user = um.selectByNameAndPassword(name, pwd); return user != null; &#125;&#125; UserMapper.java 由于还没完成，所以就一个接口。 12345package com.yc.C76S3PlySpringBoot.dao;import com.yc.C76S3PlySpringBoot.bean.User;public interface UserMapper &#123; public User selectByNameAndPassword(String name,String pwd);&#125; C76S3PlySpringBootApplicationTests.java @MockBean：标记需要创建的虚拟对象 存根验证：提前设置好每种输入值和对应的返回值。 行为验证：验证执行过程中是否调用过某个方法。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package com.yc.C76S3PlySpringBoot;import javax.annotation.Resource;import org.junit.jupiter.api.Test;import org.mockito.Mockito;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.util.Assert;import com.yc.C76S3PlySpringBoot.bean.User;import com.yc.C76S3PlySpringBoot.biz.UserBiz;import com.yc.C76S3PlySpringBoot.dao.TagMapper;import com.yc.C76S3PlySpringBoot.dao.UserMapper;@SpringBootTestclass C76S3PlySpringBootApplicationTests &#123; @Resource private TagMapper tm; @Resource private UserBiz ubiz; @MockBean private UserMapper um; @Test void test1() &#123; User user = new User(); /** * 输入值的设置 */ Mockito.when(um.selectByNameAndPassword(Mockito.anyString(), Mockito.anyString())).thenReturn(null); /* * 存根验证 */ Mockito.when(um.selectByNameAndPassword(&quot;yc&quot;, &quot;123&quot;)).thenReturn(user); Mockito.when(um.selectByNameAndPassword(&quot;zhangsan&quot;, &quot;123&quot;)).thenReturn(null); Mockito.when(um.selectByNameAndPassword(&quot;lisi&quot;, &quot;111&quot;)).thenReturn(user); boolean bool = ubiz.login(&quot;zhangsan&quot;, &quot;123&quot;); Assert.isTrue(bool == false, &quot;登录测试失败&quot;); bool = ubiz.login(&quot;yc&quot;, &quot;123&quot;); Assert.isTrue(bool, &quot;登录测试失败&quot;); bool = ubiz.login(&quot;lisi&quot;, &quot;111&quot;); Assert.isTrue(bool, &quot;登录测试失败3&quot;); bool = ubiz.login(&quot;武松&quot;, &quot;111&quot;); Assert.isTrue(bool == false, &quot;登录测试失败4&quot;); bool = ubiz.login(&quot;李逵&quot;, &quot;111&quot;); Assert.isTrue(bool == false, &quot;登录测试失败5&quot;); /** * 行为验证 */ Mockito.verify(um).selectByNameAndPassword(&quot;zhangsan&quot;, &quot;123&quot;); Mockito.verify(um).selectByNameAndPassword(&quot;yc&quot;, &quot;123&quot;); Mockito.verify(um).selectByNameAndPassword(&quot;lisi&quot;, &quot;111&quot;); Mockito.verify(um).selectByNameAndPassword(&quot;武松&quot;, &quot;111&quot;); Mockito.verify(um).selectByNameAndPassword(&quot;李逵&quot;, &quot;111&quot;); //Mockito.verify(um).selectByNameAndPassword(&quot;林冲&quot;, &quot;111&quot;); &#125;&#125; **2.**Thymeleaf 应用Thymeleaf技术，前提是springboot项目。 Spring EL表达式 Thymeleaf依赖，将以下代码加入到pom.xml 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt; application.yml 从JSP迁移到Thymeleaf，由于Thymeleaf内部集成了视图解析器，因此不需要了。 123456789101112131415161718192021222324252627282930313233#server.port=80#服务器端口：80server: port: 80spring:#连接数据库配置 datasource: url: jdbc:mysql://127.0.0.1:3306/c76-s3-ply-favorite username: root password: a driver-class-name: com.mysql.jdbc.Driver#视图解析器：接收浏览器url，返回页面# mvc:# view: # prefix: WEB-INF/page/ # suffix: .jsp#mybatismybatis: #实体类别名 com.yc.C76S3PlySpringBoot.bean -&gt; bean type-aliases-package: com.yc.C76S3PlySpringBoot.bean #驼峰命名法 类成员别名 configuration: map-underscore-to-camel-case: true#测试类配置 logging: level: com: yc: C76S3PlySpringBoot: dao: debug web: warn 文件迁移： JSP技术相关 “webapp&#x2F;“不再需要，内部的如web.xml和WEB-INF废止。 Thymeleaf技术相关 将资源新分配至src&#x2F;main&#x2F;resources “static&#x2F;“ &lt;– css js “templates” &lt;– html index.html 从jstl迁移到Thymeleaf。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en-US&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&lt;head&gt;&lt;title&gt;搜藏&lt;/title&gt;&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt;&lt;script type=&quot;text/javascript&quot;&gt; function add() &#123; window .open( &#x27;fav.do?op=toAdd&#x27;, &#x27;newwindow&#x27;, &#x27;height=300, width=400, toolbar=no, menubar=no, scrollbars=no, resizable=no,location=no, status=no&#x27;); &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form name=&quot;favForm&quot; method=&quot;post&quot; action=&quot;/cang/fav.do;jsessionid=FF8C0487A99814B144B07E5633524A0F&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;op&quot; value=&quot;toList&quot; /&gt; &lt;div class=&quot;banner&quot; valign=&quot;top&quot;&gt;搜藏&lt;/div&gt; &lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot;&gt; &lt;tr&gt; &lt;td style=&quot;text-align: right;&quot; valign=&quot;top&quot;&gt; &lt;!-- 左边Tag列表 --&gt; &lt;div class=&quot;left_labels&quot;&gt; &lt;table class=&quot;labels_table&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot;&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;toedit&quot; style=&quot;font-weight: bold;&quot;&gt;添加书签&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;selected_label&quot;&gt;&lt;a href=&quot;index.s?flag=1&quot;&gt;全部&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;index.s?flag=2&quot;&gt;未分类&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;!-- &lt;c:forEach items=&quot;$&#123;tList&#125;&quot; var=&quot;tag&quot;&gt; --&gt; &lt;!-- th:text==null显示标签名，th:text!=null显示text内容并将标签名覆盖 --&gt; &lt;tr th:each=&quot;tag : $&#123;tList&#125;&quot;&gt; &lt;td&gt;&lt;a th:text=&quot;$&#123;tag.tName&#125;&quot; th:href=&quot;&#x27;index.s?tId=&#x27;+$&#123;tag.tId&#125;&quot;&gt;标签名&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;!-- &lt;/c:forEach&gt; --&gt; &lt;tr&gt; &lt;td&gt;&lt;a style=&quot;font-weight: bold;&quot; href=&quot;fav.do?op=toCloud&quot;&gt;云图&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/td&gt; &lt;td&gt; &lt;!-- 右边fav内容 --&gt; &lt;div class=&quot;content_links&quot;&gt; &lt;!-- &lt;c:set var=&quot;showFlist&quot; value=&quot;$&#123;empty fList ? showTag.favorites : fList &#125;&quot;&gt;&lt;/c:set&gt; --&gt; &lt;!-- &lt;c:forEach items=&quot;$&#123;showFlist &#125;&quot; var=&quot;fav&quot;&gt; --&gt; &lt;div th:each=&quot;fav:$&#123;showTag != null &amp;&amp; showTag.favorites!=null ? showTag.favorites : fList&#125;&quot; style=&quot;padding: 6px 10px;&quot;&gt; &lt;div&gt; &lt;a th:text=&quot;$&#123;fav.fLabel &#125;&quot; th:href=&quot;&#x27;http://&#x27;+$&#123;fav.fUrl &#125;&quot; style=&quot;color: blue; font-size: 18px;&quot; target=&quot;_blank&quot;&gt;网站名&lt;/a&gt; &lt;/div&gt; &lt;div th:text=&quot;$&#123;fav.fDesc &#125;&quot; style=&quot;color: black; font-size: 16px;&quot;&gt;网站说明&lt;/div&gt; &lt;div th:text=&quot;$&#123;fav.fUrl &#125;&quot; style=&quot;color: green; font-size: 14px;&quot;&gt;网址 &lt;/div&gt; &lt;/div&gt; &lt;!-- &lt;/c:forEach&gt; --&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第119次课程_Springboot_HelloWorld_整合SSM_邮件","slug":"技术向/Java/源辰课程记录/第119次课程_Springboot_HelloWorld_整合SSM_邮件","date":"2020-03-05T16:00:00.000Z","updated":"2022-05-11T01:34:23.067Z","comments":true,"path":"技术向/Java/源辰课程记录/第119次课程_Springboot_HelloWorld_整合SSM_邮件/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC119%E6%AC%A1%E8%AF%BE%E7%A8%8B_Springboot_HelloWorld_%E6%95%B4%E5%90%88SSM_%E9%82%AE%E4%BB%B6/","excerpt":"","text":"源辰76班 第119次课程 2020.03.06 内容 Springboot_HelloWorld_整合SSM_邮件 项目路径： 1.什么是SSM Spring \\ SpringMVC &#x3D;&#x3D;&#x3D;&gt; SSM MyBatis &#x2F; 2.创建一个springboot工程 2.1 到spring官网( https://spring.io/) -&gt; spring boot -&gt; Spring Initializr 2.2 填写项目的基本信息（Maven工程），选择项目需要的套餐，最后点击Generate下载zip压缩包。 2.3 将项目导入eclipse即可。 新导入的spring boot工程可能存在报错，在内可以添加一下代码： 1234&lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;maven-jar-plugin.version&gt;3.1.1&lt;/maven-jar-plugin.version&gt;&lt;/properties&gt; 项目启动： 版本覆盖的方式： 默认情况springboot已经将版本配置好了，如果想用其他版本的jar，可以自定义版本。同时会警告，通过后面的注释，可将警告忽略。 123456&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.47&lt;/version&gt;&lt;!--$NO-MVN-MAN-VER$--&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt; 3.认识yml 前提：安装yml编辑器。 Marketplace内搜索 “yml” 。 yml格式 4.spring boot连接数据库、整合mybatis、测试类配置和服务器端口设置 application.yml 默认：application.properties yml更好用，对中文支持 1234567891011121314151617181920212223242526#server.port=80#服务器端口：80server: port: 80#连接数据库配置 spring: datasource: url: jdbc:mysql://127.0.0.1:3306/c76-s3-ply-favorite username: root password: a driver-class-name: com.mysql.jdbc.Driver#告诉mybatis 实体类（bean）位置 mybatis: type-aliases-package: com.yc.C76S3PlySpringBoot.bean#测试类配置 logging: level: com: yc: C76S3PlySpringBoot: dao: debug web: warn C76S3PlySpringBootApplication.java spring boot项目启动文件（含有main方法）。 12345678910111213141516package com.yc.C76S3PlySpringBoot;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplication//Mybatis包扫描 - 扫接口@MapperScan(&quot;com.yc.C76S3PlySpringBoot&quot;)public class C76S3PlySpringBootApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(C76S3PlySpringBootApplication.class, args); &#125;&#125; C76S3PlySpringBootApplicationTest.java spring boot自带测试文件 12345678910111213141516171819package com.yc.C76S3PlySpringBoot;import javax.annotation.Resource;import org.junit.jupiter.api.Test;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.util.Assert;import com.yc.C76S3PlySpringBoot.dao.TagMapper;@SpringBootTestclass C76S3PlySpringBootApplicationTests &#123; @Resource private TagMapper tm; @Test void contextLoads() &#123; Assert.isTrue(tm.selectAll().size() &gt; 0,&quot;结果集数量不正确&quot;); &#125;&#125; 参考：如果缺失Junit 5，将以下代码加入到pom.xml 123456789101112&lt;dependency&gt; &lt;groupId&gt; org.junit.jupiter&lt;/groupId&gt; &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt; &lt;version&gt;5.1.0&lt;/version&gt;&lt;!--$NO-MVN-MAN-VER$--&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.junit.platform&lt;/groupId&gt; &lt;artifactId&gt;junit-platform-launcher&lt;/artifactId&gt; &lt;version&gt; 1.1.0 &lt;/version&gt;&lt;!--$NO-MVN-MAN-VER$--&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; 5.项目迁移 项目：favorite SpringMVC -&gt; SpringBoot 5.1 加入JSP所需依赖，将以下代码加入到pom.xml 12345678910111213&lt;!--SpringBoot 集成 JSP 依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;/dependency&gt; 5.2创建以下目录 application.yml 12345678910111213141516171819202122232425262728293031#server.port=80#服务器端口：80server: port: 80spring:#连接数据库配置 datasource: url: jdbc:mysql://127.0.0.1:3306/c76-s3-ply-favorite username: root password: a driver-class-name: com.mysql.jdbc.Driver#视图解析器：接收浏览器url，返回页面 mvc: view: prefix: WEB-INF/page/ suffix: .jsp#mybatismybatis: #实体类别名 com.yc.C76S3PlySpringBoot.bean -&gt; bean type-aliases-package: com.yc.C76S3PlySpringBoot.bean #驼峰命名法 类成员别名 configuration: map-underscore-to-camel-case: true#测试类配置 logging: level: com: yc: C76S3PlySpringBoot: dao: debug web: warn webapp&#x2F;WEB-INF&#x2F;web.xml 12springboot集成了服务器项目不会读取本web.xml文件,可有可无 GitHub：favorite_toSpringBoot https://github.com/huyanqing1998/YCcourse/tree/favorite_toSpringBoot","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第118次课程_Spring_MVC框架整合","slug":"技术向/Java/源辰课程记录/第118次课程_Spring_MVC框架整合","date":"2020-03-03T16:00:00.000Z","updated":"2022-05-11T01:34:07.085Z","comments":true,"path":"技术向/Java/源辰课程记录/第118次课程_Spring_MVC框架整合/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC118%E6%AC%A1%E8%AF%BE%E7%A8%8B_Spring_MVC%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/","excerpt":"","text":"源辰76班 第118次课程 2020.03.04 内容 Spring_MVC框架整合 项目路径： 1.Spring_MVC整合Mybatis GitHub： https://github.com/huyanqing1998/YCcourse/tree/favorite_toSpring","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第117次课程_Spring_MVC框架整合","slug":"技术向/Java/源辰课程记录/第117次课程_Spring_MVC框架整合","date":"2020-03-02T16:00:00.000Z","updated":"2022-05-11T01:33:56.080Z","comments":true,"path":"技术向/Java/源辰课程记录/第117次课程_Spring_MVC框架整合/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC117%E6%AC%A1%E8%AF%BE%E7%A8%8B_Spring_MVC%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/","excerpt":"","text":"源辰76班 第117次课程 2020.03.03 内容 Spring_MVC框架整合 项目路径： 1.Spring文件上传 1.1表单提交 以往两种上传技术： 1.smartupload（淘汰，不推荐，存在乱码问题等）。 2.web.xml version&#x3D;”3.1” 支持的方式，详见”第102次课程 复习3_Web项目”。 导入依赖 pom.xml 12345&lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;1.3.3&lt;/version&gt;&lt;/dependency&gt; 加入Spring配置 beans.xml 123456&lt;!-- 定义 文件上传解析器 --&gt;&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt; &lt;!-- one of the properties available; the maximum file size in bytes --&gt; &lt;property name=&quot;maxUploadSize&quot; value=&quot;100000&quot; /&gt;&lt;/bean&gt; upload.html 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;Upload a file please&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Please upload a file&lt;/h1&gt; &lt;form method=&quot;post&quot; action=&quot;upload.do&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot;/&gt; &lt;input type=&quot;file&quot; name=&quot;file1&quot;/&gt; &lt;input type=&quot;file&quot; name=&quot;file2&quot;/&gt; &lt;input type=&quot;submit&quot;/&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; UploadAction.java 1234567891011121314151617181920212223242526272829303132333435363738package com.yc.springmvc.web.d0303;import java.io.File;import java.io.IOException;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.multipart.MultipartFile;@Controllerpublic class UploadAction &#123; //需要做属性名的映射 //前端 属性name 对应后端 形参 @PostMapping(&quot;upload.do&quot;) public String handleFormUpload(@RequestParam(&quot;name&quot;) String name, @RequestParam(&quot;file&quot;) MultipartFile file) throws IllegalStateException, IOException &#123; //判断前端有文件上传 if (!file.isEmpty()) &#123; /* * 返回上传流 * 平时不用，有更好的 */ //file.getInputStream(); //获取表单内的name file.getName(); //获取文件名 String filename = file.getOriginalFilename(); //获取文件大小 file.getSize(); File diskFile = new File(&quot;E:\\\\ba2&quot;,filename); file.transferTo(diskFile); return &quot;success&quot;; &#125; return &quot;redirect:upload.html&quot;; &#125;&#125; 1.2AJAX提交 知识点：单input多图片上传，访问webapp以外的资源，后端返回json格式 将后端返回的数据都以json格式返回的依赖 pom.xml 1234567&lt;!-- 控制器Action 返回json数据 --&gt;&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.9.8&lt;/version&gt;&lt;/dependency&gt; 访问webapp以外的资源 作用：将上传到服务器的资源，放置在服务器路径之外。可以应用于web服务器和file服务器分离等。 beans.xml 123456&lt;!-- webapp以外文件获取方式：映射标签 --&gt;&lt;!-- location:映射的真实路径 mapping:映射的web路径--&gt;&lt;mvc:resources location=&quot;file:/E:/ba2/&quot; mapping=&quot;/ba2/**&quot;&gt;&lt;/mvc:resources&gt; UploadAction.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package com.yc.springmvc.web.d0303;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.List;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;@Controllerpublic class UploadAction &#123; @PostMapping(&quot;upload.do&quot;) public String handleFormUpload(@RequestParam(&quot;name&quot;) String name, @RequestParam(&quot;file&quot;) MultipartFile file,@RequestParam(&quot;file1&quot;) MultipartFile file1) throws IllegalStateException, IOException &#123; if (!file.isEmpty()) &#123; /* * 返回上传流 * 平时不用，有更好的 */ //file.getInputStream(); //获取表单内的name file.getName(); //获取文件名 String filename = file.getOriginalFilename(); //获取文件大小 file.getSize(); File diskFile = new File(&quot;E:\\\\ba2&quot;,filename); file.transferTo(diskFile); return &quot;success&quot;; &#125; return &quot;redirect:upload.html&quot;; &#125; @GetMapping(&quot;upload.html&quot;) public String toupload() &#123; return &quot;upload&quot;; &#125; @ResponseBody @PostMapping(&quot;upload_ajax.do&quot;) public List&lt;String&gt; handleFormUpload1(@RequestParam(&quot;name&quot;) String name, @RequestParam(&quot;file&quot;) MultipartFile[] files ) throws IllegalStateException, IOException &#123; List&lt;String&gt; ret = new ArrayList&lt;String&gt;(); for(MultipartFile file : files) &#123; if (!file.isEmpty()) &#123; String filename = file.getOriginalFilename(); // ===&gt; 提交的文件名 File diskFile = new File(&quot;E:/ba2/&quot;, filename); // ??????? file.transferTo(diskFile); // 保存文件 ret.add(&quot;ba2/&quot; + filename); &#125; &#125; System.out.println(ret.toString()); return ret; &#125;&#125; upload.jsp 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt; img&#123; width: 300px; &#125;&lt;/style&gt;&lt;/head&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;../js/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; function uploadImgs()&#123; //FormData抓取整张表单数据 var formData = new FormData(ff); $.ajax(&#123; type : &quot;POST&quot;, url : &#x27;upload_ajax.do&#x27;, data : formData, processData : false, contentType : false, success : function(data)&#123; img1.src = data[0]; img2.src = data[1]; img3.src = data[2]; &#125; &#125;); &#125; &lt;/script&gt;&lt;body&gt; &lt;h1&gt;Please upload a file&lt;/h1&gt; &lt;form id=&quot;ff&quot; method=&quot;post&quot; action=&quot;upload.do&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; multiple=&quot;multiple&quot;/&gt; &lt;input type=&quot;submit&quot; value=&quot;表单文件上传&quot;/&gt; &lt;input type=&quot;button&quot; value=&quot;AJAX文件上传&quot; onclick=&quot;uploadImgs()&quot;&gt; &lt;/form&gt; &lt;img id=&quot;img1&quot; alt=&quot;&quot; src=&quot;&quot;&gt; &lt;img id=&quot;img2&quot; alt=&quot;&quot; src=&quot;&quot;&gt; &lt;img id=&quot;img3&quot; alt=&quot;&quot; src=&quot;&quot;&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第116次课程_Spring_MVC配置详解","slug":"技术向/Java/源辰课程记录/第116次课程_Spring_MVC配置详解","date":"2020-02-29T16:00:00.000Z","updated":"2022-05-11T01:33:43.552Z","comments":true,"path":"技术向/Java/源辰课程记录/第116次课程_Spring_MVC配置详解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC116%E6%AC%A1%E8%AF%BE%E7%A8%8B_Spring_MVC%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"源辰76班 第116次课程 2020.03.01 内容 Spring_MVC配置详解 项目路径： 1.@ResponseBody 和 @RequestBody @ResponseBody：与@Controller()同用，由于@Controller的类返回的是具体的文件，使用该注解后，返回字符串。（回顾：@RestController的类返回字符串） @RequestBody： 返回Post请求报文中的Body（请求体）内容，因此使用该注解之前请先注解@PostMapping(“…”)。 login.jsp 12345678910111213141516171819202122232425&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;c:if test=&quot;$&#123;!empty msg &#125;&quot;&gt; &lt;font color=&quot;red&quot;&gt;$&#123;msg&#125;&lt;/font&gt;&lt;/c:if&gt;&lt;form action=&quot;signin&quot;&gt; username:&lt;input name=&quot;username&quot;/&gt;&lt;br/&gt; password:&lt;input name=&quot;password&quot;/&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot;/&gt;&lt;br/&gt;&lt;/form&gt;&lt;form action=&quot;reg&quot; method=&quot;post&quot;&gt; username:&lt;input name=&quot;username&quot;/&gt;&lt;br/&gt; password:&lt;input name=&quot;password&quot;/&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot;/&gt;&lt;br/&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; UserAction.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778package com.yc.springmvc.web.d0301;import java.util.Map;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.ModelAndView;import com.yc.springmvc.bean.User;@Controller(&quot;UserAction0301&quot;)public class UserAction &#123; @GetMapping(&quot;tosign&quot;) public String tologin() &#123; return &quot;login&quot;; &#125; /* * 实现数据推送的对象： * 1.Model * 2.ModelAndView Model + View * 3.Map * */ //Model /*@GetMapping(&quot;signin&quot;) public String login(User user,Model model) &#123; if(&quot;yc&quot;.equals(user.getUsername()) &amp;&amp; &quot;123&quot;.equals(user.getPassword())) &#123; user.setEmail(&quot;123123123@qq.com&quot;); user.setPhone(&quot;1313501111&quot;); model.addAttribute(&quot;user&quot;,user); return &quot;success&quot;; &#125; else &#123; model.addAttribute(&quot;msg&quot;, &quot;用户名或密码错误&quot;); return &quot;login&quot;; &#125; &#125;*/ //ModelAndView /*@GetMapping(&quot;signin&quot;) public ModelAndView login(User user) &#123; ModelAndView mav = new ModelAndView(&quot;success&quot;); if(&quot;yc&quot;.equals(user.getUsername()) &amp;&amp; &quot;123&quot;.equals(user.getPassword())) &#123; user.setEmail(&quot;123123123@qq.com&quot;); user.setPhone(&quot;1313501111&quot;); mav.addObject(&quot;user&quot;,user); return mav; &#125; else &#123; mav.addObject(&quot;msg&quot;, &quot;用户名或密码错误&quot;); mav.setViewName(&quot;login&quot;); return mav; &#125; &#125;*/ //Map @GetMapping(&quot;sign&quot;) public String login(User user,Map&lt;String,Object&gt; map) &#123; if(&quot;yc&quot;.equals(user.getUsername()) &amp;&amp; &quot;123&quot;.equals(user.getPassword())) &#123; user.setEmail(&quot;123123123@qq.com&quot;); user.setPhone(&quot;1313501111&quot;); map.put(&quot;user&quot;,user); return &quot;success&quot;; &#125; else &#123; map.put(&quot;msg&quot;, &quot;用户名或密码错误&quot;); return &quot;login&quot;; &#125; &#125; //紫色字：设置响应请求字符集 解决乱码问题 @PostMapping(path=&quot;reg&quot;,produces=&quot;text/html;charset=utf-8&quot;) @ResponseBody() public String reg(User user,@RequestBody String reqBody) &#123; System.out.println(reqBody); return &quot;成功！&quot;; &#125;&#125; 2.ModelAttribute UserAction.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package com.yc.springmvc.web.d0301;import java.util.Map;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.ModelAndView;import com.yc.springmvc.bean.User;@Controller(&quot;UserAction0301&quot;)public class UserAction &#123; /* @ModelAttribute * 1.加在方法上 * 在所有控制器方法之前执行 */ @ModelAttribute public String init(Model model) &#123; System.out.println(&quot;============&quot;); User user = new User(); user.setUsername(&quot;hooy&quot;); user.setPassword(&quot;123&quot;); model.addAttribute(&quot;user&quot;,user); /* * 该方法返回值自动添加到model中 没有指定model名，那么数据的类型就是名字 * 类名首字母小写：String -&gt; string / User -&gt; user */ return &quot;你好&quot;; &#125; /* @ModelAttribute(&quot;&quot;) * 2.加在参数上 * 从model里寻找一个对象名为user的对象，然后传递给形参变量 */ @GetMapping(&quot;tosign&quot;) public String tologin(@ModelAttribute(&quot;user&quot;) User user) &#123; System.out.println(user); return &quot;login&quot;; &#125; //Map @GetMapping(&quot;sign&quot;) public String login(User user,Map&lt;String,Object&gt; map) &#123; if(&quot;yc&quot;.equals(user.getUsername()) &amp;&amp; &quot;123&quot;.equals(user.getPassword())) &#123; user.setEmail(&quot;123123123@qq.com&quot;); user.setPhone(&quot;1313501111&quot;); map.put(&quot;user&quot;,user); return &quot;success&quot;; &#125; else &#123; map.put(&quot;msg&quot;, &quot;用户名或密码错误&quot;); return &quot;login&quot;; &#125; &#125; @PostMapping(path=&quot;reg&quot;,produces=&quot;text/html;charset=utf-8&quot;) @ResponseBody() public String reg(User user,@RequestBody String reqBody) &#123; System.out.println(reqBody); return &quot;成功！&quot;; &#125;&#125; 3.@SessionAttributes() 和 @SessionAttribute()区别 响应重定向 UserAction.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495package com.yc.springmvc.web.d0301;import java.util.Map;import org.springframework.beans.factory.annotation.Required;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.SessionAttribute;import org.springframework.web.bind.annotation.SessionAttributes;import org.springframework.web.servlet.ModelAndView;import com.yc.springmvc.bean.User;@Controller(&quot;UserAction0301&quot;)/* @SessionAttributes(&quot;&quot;)* 加在类上* 用于监控Model中数据，如果出现指定名称或类型的数据，那么就将该数据添加到会话中去*/@SessionAttributes(&quot;loginedUser&quot;)public class UserAction &#123; /* @ModelAttribute * 1.加在方法上 * 在所有控制器方法之前执行 * 该方法还可以添加 Model对象 */ @ModelAttribute public String init(Model model) &#123; System.out.println(&quot;============&quot;); User user = new User(); user.setUsername(&quot;hooy&quot;); user.setPassword(&quot;123&quot;); model.addAttribute(&quot;user&quot;,user); /* * 该方法返回值自动添加到model中 没有指定model名，那么数据的类型就是名字 * 类名首字母小写：String -&gt; string / User -&gt; user */ return &quot;你好&quot;; &#125; /* @ModelAttribute(&quot;&quot;) * 2.加在参数上 * 从model里寻找一个对象名为user的对象，然后传递给形参变量 */ @GetMapping(&quot;tosign&quot;) public String tologin(@ModelAttribute(&quot;user&quot;) User user) &#123; System.out.println(user); return &quot;login&quot;; &#125; //ModelAndView @GetMapping(&quot;sign&quot;) public ModelAndView login(User user) &#123; /* * 响应重定向: * 使用 &quot;视图名&quot; 方式默认的是请求转发方式 * 响应重定向 使用 &quot;redirect: 地址&quot; 跳转 */ //请求转发 //ModelAndView mav = new ModelAndView(&quot;tosuccess&quot;); //响应重定向 ModelAndView mav = new ModelAndView(&quot;redirect:tosuccess&quot;); if(&quot;yc&quot;.equals(user.getUsername()) &amp;&amp; &quot;123&quot;.equals(user.getPassword())) &#123; user.setEmail(&quot;123123123@qq.com&quot;); user.setPhone(&quot;1313501111&quot;); mav.addObject(&quot;loginedUser&quot;,user); return mav; &#125; else &#123; mav.addObject(&quot;msg&quot;, &quot;用户名或密码错误&quot;); mav.setViewName(&quot;login&quot;); return mav; &#125; &#125; /* @SessionAttribute * 加在方法参数上 * 用于将会话中的数据取出来, 注入到方法参数中 */ @GetMapping(&quot;tosuccess&quot;)//reuired=false 设置为false，如果session里没有的对象，也能正常访问页面。否则，报错。 public String toSuccess(@SessionAttribute(required=false,value=&quot;loginedUser&quot;) User user) &#123; System.out.println(&quot;==========toSuccess==========&quot;); System.out.println(user); System.out.println(&quot;==========toSuccess==========&quot;); return &quot;success&quot;; &#125; @PostMapping(path=&quot;reg&quot;,produces=&quot;text/html;charset=utf-8&quot;) @ResponseBody() public String reg(User user,@RequestBody String reqBody) &#123; System.out.println(reqBody); return &quot;成功！&quot;; &#125;&#125; **4.**springMVC的页面标签 User.java [Bean] 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107package com.yc.springmvc.bean;import java.util.Arrays;import java.util.Date;public class User &#123; private String[] likes; private String edu; private String subject; //--------------------------------------------------------------------------- public String[] getLikes() &#123; return likes; &#125; public void setLikes(String[] likes) &#123; this.likes = likes; &#125; public String getEdu() &#123; return edu; &#125; public void setEdu(String edu) &#123; this.edu = edu; &#125; public String getSubject() &#123; return subject; &#125; public void setSubject(String subject) &#123; this.subject = subject; &#125; private Integer id; private String username; private String password; private String email; private String headImg; private String phone; private Integer status; private Date regtime; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username == null ? null : username.trim(); &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password == null ? null : password.trim(); &#125; public String getEmail() &#123; return email; &#125; public void setEmail(String email) &#123; this.email = email == null ? null : email.trim(); &#125; public String getHeadImg() &#123; return headImg; &#125; public void setHeadImg(String headImg) &#123; this.headImg = headImg == null ? null : headImg.trim(); &#125; public String getPhone() &#123; return phone; &#125; public void setPhone(String phone) &#123; this.phone = phone == null ? null : phone.trim(); &#125; public Integer getStatus() &#123; return status; &#125; public void setStatus(Integer status) &#123; this.status = status; &#125; public Date getRegtime() &#123; return regtime; &#125; public void setRegtime(Date regtime) &#123; this.regtime = regtime; &#125; @Override public String toString() &#123; return &quot;User [likes=&quot; + Arrays.toString(likes) + &quot;, edu=&quot; + edu + &quot;, subject=&quot; + subject + &quot;, id=&quot; + id + &quot;, username=&quot; + username + &quot;, password=&quot; + password + &quot;, email=&quot; + email + &quot;, headImg=&quot; + headImg + &quot;, phone=&quot; + phone + &quot;, status=&quot; + status + &quot;, regtime=&quot; + regtime + &quot;]&quot;; &#125; &#125; Subject.java [Bean] 12345678910111213141516171819202122232425package com.yc.springmvc.bean;public class Subject &#123; private int id; private String name; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public Subject(int id, String name) &#123; super(); this.id = id; this.name = name; &#125; public Subject() &#123; super(); &#125;&#125; reg.jsp 123456789101112131415161718192021222324252627282930&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;%@ taglib uri=&quot;http://www.springframework.org/tags/form&quot; prefix=&quot;form&quot; %&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;%-- &lt;form action=&quot;sign&quot;&gt; 姓名：&lt;input/&gt;&lt;br/&gt; 密码：&lt;input/&gt;&lt;br/&gt; 爱好： 学历： 专业： &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;&lt;br/&gt;&lt;/form&gt; --%&gt;&lt;!-- modelAttribute用于定义从model哪个对象对表单进行填充 --&gt;&lt;form:form modelAttribute=&quot;user&quot;&gt; 姓名：&lt;form:input path=&quot;username&quot;/&gt;&lt;br/&gt; 密码：&lt;form:input path=&quot;password&quot;/&gt;&lt;br/&gt; 爱好：&lt;form:checkboxes items=&quot;$&#123;likeItems &#125;&quot; path=&quot;likes&quot;/&gt;&lt;br/&gt; 学历：&lt;form:radiobuttons items=&quot;$&#123;eduItems &#125;&quot; path=&quot;edu&quot;/&gt;&lt;br/&gt; 专业：&lt;form:select items=&quot;$&#123;subjectItems &#125;&quot; path=&quot;subject&quot; itemLabel=&quot;name&quot; itemValue=&quot;id&quot;&gt;&lt;/form:select&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;&lt;br/&gt;&lt;/form:form&gt;&lt;/body&gt;&lt;/html&gt; UserAction.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.yc.springmvc.web.d0301;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.Map;import org.springframework.beans.factory.annotation.Required;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.SessionAttribute;import org.springframework.web.bind.annotation.SessionAttributes;import org.springframework.web.servlet.ModelAndView;import com.yc.springmvc.bean.Subject;import com.yc.springmvc.bean.User;@Controller(&quot;UserAction0301&quot;)@SessionAttributes(&quot;loginedUser&quot;)public class UserAction &#123; @ModelAttribute public String init(Model model) &#123; System.out.println(&quot;============&quot;); User user = new User(); user.setUsername(&quot;hooy&quot;); user.setPassword(&quot;123&quot;); model.addAttribute(&quot;user&quot;,user); return &quot;你好&quot;; &#125; //-------------------------------------------------------------------------------------------- @GetMapping(&quot;toreg&quot;) public String toreg(Model model,@ModelAttribute(&quot;user&quot;) User user) &#123; user.setLikes(new String[] &#123;&quot;跳舞&quot;,&quot;手游&quot;&#125;); user.setEdu(&quot;本科&quot;); user.setSubject(&quot;3&quot;); String[] likeItems = &#123;&quot;篮球&quot;,&quot;跳舞&quot;,&quot;唱歌&quot;,&quot;看书&quot;,&quot;手游&quot;&#125;; //Array -&gt; List List&lt;String&gt; eduItems = Arrays.asList(new String[] &#123;&quot;初中&quot;,&quot;高中&quot;,&quot;专科&quot;,&quot;本科&quot;&#125;); List&lt;Subject&gt; subjectItems = new ArrayList&lt;&gt;(); subjectItems.add(new Subject(1,&quot;计算机网络&quot;)); subjectItems.add(new Subject(2,&quot;计算机应用计算&quot;)); subjectItems.add(new Subject(3,&quot;财务管理&quot;)); subjectItems.add(new Subject(4,&quot;市场营销&quot;)); subjectItems.add(new Subject(5,&quot;企业管理&quot;)); model.addAttribute(&quot;likeItems&quot;,likeItems); model.addAttribute(&quot;eduItems&quot;,eduItems); model.addAttribute(&quot;subjectItems&quot;,subjectItems); return &quot;reg&quot;; &#125;&#125; 5.表单验证 pom.xml 首先要引入两个Jar包。 12345678910&lt;dependency&gt; &lt;groupId&gt;javax.validation&lt;/groupId&gt; &lt;artifactId&gt;validation-api&lt;/artifactId&gt; &lt;version&gt;2.0.0.Final&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt; &lt;version&gt;6.1.0.Final&lt;/version&gt;&lt;/dependency&gt; User.java 将注释加在属性上，即对该属性做对应验证。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115package com.yc.springmvc.bean;import java.util.Arrays;import java.util.Date;import javax.validation.constraints.Email;import javax.validation.constraints.NotEmpty;import org.hibernate.validator.constraints.Length;public class User &#123; private String[] likes; private String edu; private String subject; //--------------------------------------------------------------------------- public String[] getLikes() &#123; return likes; &#125; public void setLikes(String[] likes) &#123; this.likes = likes; &#125; public String getEdu() &#123; return edu; &#125; public void setEdu(String edu) &#123; this.edu = edu; &#125; public String getSubject() &#123; return subject; &#125; public void setSubject(String subject) &#123; this.subject = subject; &#125; private Integer id; @NotEmpty @Length(max=16,min=3,message=&quot;用户名长度必须在3~16位之间&quot;) private String username; @NotEmpty @Length(max=12,min=6) private String password; @Email(message=&quot;请输入正确的电子邮箱格式&quot;) private String email; private String headImg; private String phone; private Integer status; private Date regtime; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username == null ? null : username.trim(); &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password == null ? null : password.trim(); &#125; public String getEmail() &#123; return email; &#125; public void setEmail(String email) &#123; this.email = email == null ? null : email.trim(); &#125; public String getHeadImg() &#123; return headImg; &#125; public void setHeadImg(String headImg) &#123; this.headImg = headImg == null ? null : headImg.trim(); &#125; public String getPhone() &#123; return phone; &#125; public void setPhone(String phone) &#123; this.phone = phone == null ? null : phone.trim(); &#125; public Integer getStatus() &#123; return status; &#125; public void setStatus(Integer status) &#123; this.status = status; &#125; public Date getRegtime() &#123; return regtime; &#125; public void setRegtime(Date regtime) &#123; this.regtime = regtime; &#125; @Override public String toString() &#123; return &quot;User [likes=&quot; + Arrays.toString(likes) + &quot;, edu=&quot; + edu + &quot;, subject=&quot; + subject + &quot;, id=&quot; + id + &quot;, username=&quot; + username + &quot;, password=&quot; + password + &quot;, email=&quot; + email + &quot;, headImg=&quot; + headImg + &quot;, phone=&quot; + phone + &quot;, status=&quot; + status + &quot;, regtime=&quot; + regtime + &quot;]&quot;; &#125; &#125; UserAction.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980package com.yc.springmvc.web.d0301;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.Map;import javax.validation.Valid;import org.springframework.beans.factory.annotation.Required;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.validation.Errors;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.SessionAttribute;import org.springframework.web.bind.annotation.SessionAttributes;import org.springframework.web.servlet.ModelAndView;import com.yc.springmvc.bean.Subject;import com.yc.springmvc.bean.User;@Controller(&quot;UserAction0301&quot;)/* @SessionAttributes(&quot;&quot;)* 加在类上* 用于监控 Model中数据，如果出现指定名称或类型的数据，那么就将该数据添加到会话中去*/@SessionAttributes(&quot;loginedUser&quot;)public class UserAction &#123; /* @ModelAttribute * 1.加在方法上 * 在所有控制器方法之前执行 * 该方法还可以添加 Model对象 */ @ModelAttribute public String init(Model model) &#123; System.out.println(&quot;============&quot;); User user = new User(); user.setUsername(&quot;hooy&quot;); user.setPassword(&quot;123&quot;); model.addAttribute(&quot;user&quot;,user); String[] likeItems = &#123;&quot;篮球&quot;,&quot;跳舞&quot;,&quot;唱歌&quot;,&quot;看书&quot;,&quot;手游&quot;&#125;; List&lt;String&gt; eduItems = Arrays.asList(new String[] &#123;&quot;初中&quot;,&quot;高中&quot;,&quot;专科&quot;,&quot;本科&quot;&#125;); List&lt;Subject&gt; subjectItems = new ArrayList&lt;&gt;(); subjectItems.add(new Subject(1,&quot;计算机网络&quot;)); subjectItems.add(new Subject(2,&quot;计算机应用计算&quot;)); subjectItems.add(new Subject(3,&quot;财务管理&quot;)); subjectItems.add(new Subject(4,&quot;市场营销&quot;)); subjectItems.add(new Subject(5,&quot;企业管理&quot;)); model.addAttribute(&quot;likeItems&quot;,likeItems); model.addAttribute(&quot;eduItems&quot;,eduItems); model.addAttribute(&quot;subjectItems&quot;,subjectItems); /* * 该方法返回值自动添加到model中 没有指定model名，那么数据的类型就是名字 * 类名首字母小写：String -&gt; string / User -&gt; user */ return &quot;你好&quot;; &#125; //-------------------------------------------------------------------------------------------- @GetMapping(&quot;toreg&quot;) public String toreg(Model model,@ModelAttribute(&quot;user&quot;) User user) &#123; user.setLikes(new String[] &#123;&quot;跳舞&quot;,&quot;手游&quot;&#125;); user.setEdu(&quot;本科&quot;); user.setSubject(&quot;3&quot;); return &quot;reg&quot;; &#125; @GetMapping(&quot;reg&quot;)//@Valid 必须后面紧接着Errors public String reg(@Valid User user,Errors error) &#123; if(error.hasFieldErrors()) &#123; return &quot;reg&quot;; &#125; else &#123; return &quot;success&quot;; &#125; &#125;&#125; reg.jsp 前端页面 后端传过来的错误信息所显示的位置 12345678910111213141516171819202122232425262728293031323334353637&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;%@ taglib uri=&quot;http://www.springframework.org/tags/form&quot; prefix=&quot;form&quot; %&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;%-- &lt;form action=&quot;sign&quot;&gt; 姓名：&lt;input/&gt;&lt;br/&gt; 密码：&lt;input/&gt;&lt;br/&gt; 爱好： 学历： 专业： &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;&lt;br/&gt;&lt;/form&gt; --%&gt;&lt;!-- modelAttribute用于定义从model哪个对象对表单进行填充 --&gt;&lt;form:form modelAttribute=&quot;user&quot; method=&quot;GET&quot; action=&quot;reg&quot;&gt; 姓名：&lt;form:input path=&quot;username&quot;/&gt; &lt;form:errors path=&quot;username&quot;&gt;&lt;/form:errors&gt; &lt;br/&gt; 密码：&lt;form:input path=&quot;password&quot;/&gt; &lt;form:errors path=&quot;password&quot;&gt;&lt;/form:errors&gt; &lt;br/&gt; 邮箱：&lt;form:input path=&quot;email&quot;/&gt; &lt;form:errors path=&quot;email&quot;&gt;&lt;/form:errors&gt; &lt;br/&gt; 爱好：&lt;form:checkboxes items=&quot;$&#123;likeItems &#125;&quot; path=&quot;likes&quot;/&gt;&lt;br/&gt; 学历：&lt;form:radiobuttons items=&quot;$&#123;eduItems &#125;&quot; path=&quot;edu&quot;/&gt;&lt;br/&gt; 专业：&lt;form:select items=&quot;$&#123;subjectItems &#125;&quot; path=&quot;subject&quot; itemLabel=&quot;name&quot; itemValue=&quot;id&quot;&gt;&lt;/form:select&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;&lt;br/&gt;&lt;/form:form&gt;&lt;/body&gt;&lt;/html&gt; 效果图：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第115次课程_Spring_MVC架构","slug":"技术向/Java/源辰课程记录/第115次课程_Spring_MVC架构","date":"2020-02-28T16:00:00.000Z","updated":"2022-05-11T01:33:29.945Z","comments":true,"path":"技术向/Java/源辰课程记录/第115次课程_Spring_MVC架构/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC115%E6%AC%A1%E8%AF%BE%E7%A8%8B_Spring_MVC%E6%9E%B6%E6%9E%84/","excerpt":"","text":"源辰76班 第115次课程 2020.02.29 内容 Spring_MVC架构 项目路径：****G:\\YC74\\200228_Spring_MVC原理\\code web测试地址： http://127.0.0.1/注解路径 （例如： http://127.0.0.1/servlet） 1.参数映射 1.1基础：参数映射和地址映射 ParamAction.java 1234567891011121314151617181920212223242526272829303132333435363738package com.yc.springmvc.web.d0229;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class ParamAction &#123; /* * 参数映射 * 请求参数名必须和方法参数名一致 * 参数类型必须兼容 * 1.请求参数 /..?param * 如果名称不同@RequestParam * 2.地址参数 /param/param * spring支持地址参数@PathVariable */ //请求参数 @GetMapping(&quot;login&quot;) public String login(String user,String pwd) &#123; return &quot;user = &quot; + user + &quot; pwd = &quot; + pwd; &#125; @GetMapping(path=&quot;login1&quot;,params=&quot;username&quot;) public String login1(@RequestParam(&quot;username&quot;)String user,String pwd) &#123; return &quot;user = &quot; + user + &quot; pwd = &quot; + pwd; &#125; //地址参数 @GetMapping(&quot;login2/&#123;username&#125;/&#123;password&#125;&quot;) public String login2(@PathVariable(&quot;username&quot;)String user,@PathVariable(&quot;password&quot;)String pwd) &#123; return &quot;user = &quot; + user + &quot; pwd = &quot; + pwd; &#125;&#125; 2.高级****参数映射 hall.html 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;saveHall&quot; method=&quot;post&quot;&gt; id:&lt;input name=&quot;id&quot;/&gt;&lt;br/&gt; name:&lt;input name=&quot;name&quot;/&gt;&lt;br/&gt; hallType&lt;input name=&quot;hallType&quot;/&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; beans.xml 2.1直接可以访问webapp目录下的静态文件 123456789101112131415161718192021222324252627282930313233&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt; &lt;!-- 加入 mvc 命名空间 --&gt; &lt;!-- SpringMVC 控制器注解驱动 --&gt; &lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt; &lt;!-- 包扫描 --&gt; &lt;context:component-scan base-package=&quot;com.yc.springmvc&quot;&gt;&lt;/context:component-scan&gt; &lt;!-- 定义视图解析器 --&gt; &lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;&gt; &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt; &lt;!-- 视图解析器视图前缀 --&gt; &lt;!-- webapp /WEB-INF/jsp/hello.jsp --&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt; &lt;!-- 视图解析器视图后缀 --&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt; &lt;/bean&gt; &lt;!-- 处理静态资源请求 --&gt; &lt;!-- 用于直接访问静态资源 --&gt; &lt;mvc:default-servlet-handler/&gt;&lt;/beans&gt; ParamAction.java 12345678910111213141516171819202122232425package com.yc.springmvc.web.d0229;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.yc.springmvc.bean.Hall;@RestControllerpublic class ParamAction &#123; /* * 高级参数映射 * 自动装箱 请求参数名与对象属性名一致 * 例如：Integer i = new Integer(100) -自动装箱-&gt; Integer i = 100; */ @PostMapping(&quot;saveHall&quot;) public String saveHall(Hall hall) &#123; hall.setCapacity(10000); hall.setCinemaId(2222); return hall.toString(); &#125;&#125; 2.2嵌套属性 Hall.java [Bean] 1234567891011public class Hall &#123; private Integer id; private String name; private String hallType; private Integer capacity; private Integer cinemaId; private Cinema cinema; //get set toString code ...&#125; hall.html 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;saveHall&quot; method=&quot;post&quot;&gt; id:&lt;input name=&quot;id&quot;/&gt;&lt;br/&gt; name:&lt;input name=&quot;name&quot;/&gt;&lt;br/&gt; hallType&lt;input name=&quot;hallType&quot;/&gt;&lt;br/&gt; 影院ID:&lt;input name=&quot;cinema.id&quot;/&gt;&lt;br/&gt; 影院名称:&lt;input name=&quot;cinema.name&quot;/&gt;&lt;br/&gt; 影院GPS:&lt;input name=&quot;cinema.gps&quot;/&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 2.3获取Cookie值、请求头和Servlet原生对象（request response session） ParamAction.java 123456789101112131415161718192021222324252627282930313233343536373839404142package com.yc.springmvc.web.d0229;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.springframework.web.bind.annotation.CookieValue;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestHeader;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.yc.springmvc.bean.Hall;@RestControllerpublic class ParamAction &#123; /* * 获取Cookie值 */ @GetMapping(&quot;cookie&quot;) public String cookie(@CookieValue(&quot;JSESSIONID&quot;) String sessionid) &#123; return &quot;JSESSIONID : &quot; + sessionid; &#125; /* * 获取请求头 */ @GetMapping(&quot;header&quot;) public String cookie(@RequestHeader(&quot;Host&quot;) String host,@RequestHeader(&quot;Accept&quot;) String accpet) &#123; return &quot;Host : &quot; + host + &quot;Accept : &quot; + accpet; &#125; /* * 获取原生Servlet对象 -&gt; 请求 响应 会话 */ @GetMapping(&quot;servlet&quot;) public String servlet(HttpServletRequest req,HttpServletResponse resp,HttpSession session) &#123; return &quot;Request : &quot; + req + &quot;&lt;br/&gt;======================&lt;br/&gt;&quot; + &quot;Response : &quot; + resp + &quot;&lt;br/&gt;======================&lt;br/&gt;&quot; + &quot;Session : &quot; + session; &#125;&#125; 3.数据推送 **Model **ModelAndView Map login.jsp 1234567891011121314151617181920&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;c:if test=&quot;$&#123;!empty msg &#125;&quot;&gt; &lt;font color=&quot;red&quot;&gt;$&#123;msg&#125;&lt;/font&gt;&lt;/c:if&gt;&lt;form action=&quot;signin&quot;&gt; username:&lt;input name=&quot;username&quot;/&gt;&lt;br/&gt; password:&lt;input name=&quot;password&quot;/&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot;/&gt;&lt;br/&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; success.jsp 12345678910111213141516&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;成功页面&lt;br/&gt;username:$&#123;user.username &#125;&lt;br/&gt;password:$&#123;user.password &#125;&lt;br/&gt;email:$&#123;user.email &#125;&lt;br/&gt;phone:$&#123;user.phone &#125;&lt;br/&gt;&lt;/body&gt;&lt;/html&gt; UserAction.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package com.yc.springmvc.web.d0229;import java.util.Map;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.servlet.ModelAndView;import com.yc.springmvc.bean.User;@Controllerpublic class UserAction &#123; @GetMapping(&quot;tologin&quot;) public String tologin() &#123; return &quot;login&quot;; &#125; /* * 实现数据推送的对象： * 1.Model * 2.ModelAndView Model + View * 3.Map * */ //Model /*@GetMapping(&quot;signin&quot;) public String login(User user,Model model) &#123; if(&quot;yc&quot;.equals(user.getUsername()) &amp;&amp; &quot;123&quot;.equals(user.getPassword())) &#123; user.setEmail(&quot;123123123@qq.com&quot;); user.setPhone(&quot;1313501111&quot;); model.addAttribute(&quot;user&quot;,user); return &quot;success&quot;; &#125; else &#123; model.addAttribute(&quot;msg&quot;, &quot;用户名或密码错误&quot;); return &quot;login&quot;; &#125; &#125;*/ //ModelAndView /*@GetMapping(&quot;signin&quot;) public ModelAndView login(User user) &#123; ModelAndView mav = new ModelAndView(&quot;success&quot;); if(&quot;yc&quot;.equals(user.getUsername()) &amp;&amp; &quot;123&quot;.equals(user.getPassword())) &#123; user.setEmail(&quot;123123123@qq.com&quot;); user.setPhone(&quot;1313501111&quot;); mav.addObject(&quot;user&quot;,user); return mav; &#125; else &#123; mav.addObject(&quot;msg&quot;, &quot;用户名或密码错误&quot;); mav.setViewName(&quot;login&quot;); return mav; &#125; &#125;*/ //Map @GetMapping(&quot;signin&quot;) public String login(User user,Map&lt;String,Object&gt; map) &#123; if(&quot;yc&quot;.equals(user.getUsername()) &amp;&amp; &quot;123&quot;.equals(user.getPassword())) &#123; user.setEmail(&quot;123123123@qq.com&quot;); user.setPhone(&quot;1313501111&quot;); map.put(&quot;user&quot;,user); return &quot;success&quot;; &#125; else &#123; map.put(&quot;msg&quot;, &quot;用户名或密码错误&quot;); return &quot;login&quot;; &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第114次课程_Spring_MVC原理","slug":"技术向/Java/源辰课程记录/第114次课程_Spring_MVC原理","date":"2020-02-27T16:00:00.000Z","updated":"2022-05-11T01:33:16.230Z","comments":true,"path":"技术向/Java/源辰课程记录/第114次课程_Spring_MVC原理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC114%E6%AC%A1%E8%AF%BE%E7%A8%8B_Spring_MVC%E5%8E%9F%E7%90%86/","excerpt":"","text":"源辰76班 第114次课程 2020.02.28 内容 Spring_MVC原理 项目路径： 1.初始化一个Spring_MVC的maven工程 配置流程：pom.xml（maven工程） -&gt; web.xml（web服务器） -&gt; beans.xml（spring框架） pom.xml &#x2F; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.yc&lt;/groupId&gt; &lt;artifactId&gt;C76-S3-Ply-springMVC&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;4.3.17.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;4.3.17.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;4.3.17.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; web.xml src&#x2F;main&#x2F;webapp&#x2F;WEB-INF 1234567891011121314151617181920212223&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot; version=&quot;3.1&quot;&gt; &lt;display-name&gt;C76-S3-Ply-springmvc&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;hello.s&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;servlet&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:beans.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; bean.xml src&#x2F;main&#x2F;resources 123456789101112131415161718192021222324252627282930&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt; &lt;!-- 加入 mvc 命名空间 --&gt; &lt;!-- SpringMVC 控制器注解驱动 --&gt; &lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt; &lt;!-- 包扫描 --&gt; &lt;context:component-scan base-package=&quot;com.yc.springmvc&quot;&gt;&lt;/context:component-scan&gt; &lt;!-- 定义视图解析器 --&gt; &lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;&gt; &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt; &lt;!-- 视图解析器视图前缀 --&gt; &lt;!-- webapp /WEB-INF/jsp/hello.jsp --&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt; &lt;!-- 视图解析器视图后缀 --&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt; &lt;/bean&gt; &lt;/beans&gt; 2.如何返回JSP页面 beans.xml 123456789101112131415161718192021222324252627282930&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt; &lt;!-- 加入 mvc 命名空间 --&gt; &lt;!-- SpringMVC 控制器注解驱动 --&gt; &lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt; &lt;!-- 包扫描 --&gt; &lt;context:component-scan base-package=&quot;com.yc.springmvc&quot;&gt;&lt;/context:component-scan&gt; &lt;!-- 定义视图解析器 --&gt; &lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;&gt; &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt; &lt;!-- 视图解析器视图前缀 --&gt; &lt;!-- webapp /WEB-INF/jsp/hello.jsp --&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt; &lt;!-- 视图解析器视图后缀 --&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt; &lt;/bean&gt; &lt;/beans&gt; IndexAction.java 控制器。相当于Servlet，跳转至指定页面。 @RestController 注解的类内部方法返回的是字符串 应用于返回”json&#x2F;xml”数据 @Controller 注解的类内部方法返回的是页面名(jsp&#x2F;html) 应用于跳转页面 @RequestMapping(“hello.s”) 注解用于将请求映射到方法上，支持多种映射。 通俗来讲：浏览器的Url内输入”…&#x2F;hello.s”时调用”hello()”方法，返回”hello”并与beas.xml的定义字符串组装成”jsp&#x2F;hello.jsp”，最后按照路径找到页面且提供给用户。 123456789101112131415161718192021package com.yc.springmvc.web;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;/** @RestController 注解的类内部方法返回的是字符串* @Controller 注解的类内部方法返回的是页面名(jsp/html)*///@RestController@Controllerpublic class IndexAction &#123; @RequestMapping(&quot;hello.s&quot;) public String hello() &#123; return &quot;hello&quot;; &#125; &#125; 3.RequestMapping详解 IndexAction.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package com.yc.springmvc.web;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;/** @RestController 注解的类内部方法返回的是字符串* @Controller 注解的类内部方法返回的是页面名(jsp/html)*///@RestController@Controllerpublic class IndexAction &#123; //@RequestMapping(&quot;默认参数value==path&quot;) @RequestMapping(&quot;hello.s&quot;) public String hello() &#123; return &quot;hello&quot;; &#125; /* * 带目录的地址(虚拟地址) */ @RequestMapping(&quot;/page/hello1&quot;) public String hello1() &#123; return &quot;hello&quot;; &#125; /* * 多个地址 */ @RequestMapping(&#123;&quot;abc&quot;,&quot;efg&quot;&#125;) public String hello2() &#123; return &quot;hello&quot;; &#125; /* * method 限定HTTP方法类型 */ @RequestMapping(path=&quot;hello3&quot;,method=RequestMethod.GET) public String hello3() &#123; return &quot;hello&quot;; &#125; @GetMapping(&quot;hello4&quot;) public String hello4() &#123; return &quot;hello&quot;; &#125; //相当于@RequestMapping(path=&quot;hello5&quot;,method=RequestMethod.GET) @PostMapping(&quot;hello5&quot;) public String hello5() &#123; return &quot;hello&quot;; &#125;&#125; HelloAction.java 123456789101112131415161718192021222324252627282930313233343536package com.yc.springmvc.web;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;/** @RequestMapping(&quot;&quot;)加在类上表示，在该类下所有的方法的映射地址，共同的虚拟目录*/@RequestMapping(&quot;user&quot;)@Controllerpublic class HelloAction &#123; @GetMapping(&quot;hello&quot;) public String hello6() &#123; return &quot;hello&quot;; &#125; @GetMapping(&quot;hello1&quot;) public String hello7() &#123; return &quot;hello&quot;; &#125; @GetMapping(&quot;hello2&quot;) public String hello8() &#123; return &quot;hello&quot;; &#125; /* * params限定请求必须带的参数，否则页面报错 * path==value */ @RequestMapping(value=&quot;show&quot;,params=&quot;user&quot;) public String hello9() &#123; return &quot;hello&quot;; &#125; @RequestMapping(value=&quot;show1&quot;,params=&quot;user==root&quot;) public String hello10() &#123; return &quot;hello&quot;; &#125;&#125; 4.jetty服务器 4.1.加入以下代码 pom.xml 123456789101112131415161718192021222324252627282930313233343536373839&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.yc&lt;/groupId&gt; &lt;artifactId&gt;C76-S3-Ply-springMVC&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt; &lt;/properties&gt; &lt;build&gt; &lt;plugins&gt; &lt;!-- run as ==&gt; builder... ==&gt; jetty:run --&gt; &lt;plugin&gt; &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt; &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt; &lt;version&gt;9.4.15.v20190215&lt;/version&gt; &lt;configuration&gt; &lt;httpConnector&gt; &lt;port&gt;80&lt;/port&gt; &lt;/httpConnector&gt; &lt;!-- 组件扫描时间间隔 --&gt; &lt;scanIntervalSeconds&gt;2&lt;/scanIntervalSeconds&gt; &lt;!-- 手动启动服务器 --&gt; &lt;reload&gt;manual&lt;/reload&gt; &lt;!-- 自定义上下文路径 --&gt; &lt;contextPath&gt;/&lt;/contextPath&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt; 4.2.运行服务器","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第113次课程_Spring部分作业检查、复习及指导","slug":"技术向/Java/源辰课程记录/第113次课程_Spring部分作业检查、复习及指导","date":"2020-02-26T16:00:00.000Z","updated":"2022-05-11T01:33:00.872Z","comments":true,"path":"技术向/Java/源辰课程记录/第113次课程_Spring部分作业检查、复习及指导/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC113%E6%AC%A1%E8%AF%BE%E7%A8%8B_Spring%E9%83%A8%E5%88%86%E4%BD%9C%E4%B8%9A%E6%A3%80%E6%9F%A5%E3%80%81%E5%A4%8D%E4%B9%A0%E5%8F%8A%E6%8C%87%E5%AF%BC/","excerpt":"","text":"源辰76班 第113次课程 2020.02.27 内容 Spring部分作业检查、复习及指导 项目路径：****G:\\YC74\\200227_Spring部分作业检查、复习及指导\\teach 1.Spring事务控制 关于rollbackFor的使用 @Transactional默认遇到RuntimeException才执行回滚操作 可以在参数列表中声明，当抛出非运行期异常时也执行回滚操作 1234567891011121314151617@Transactional(rollbackFor=BusiException.class)public void deposit(Account account) throws BusiException &#123; System.out.println(&quot;模拟存款业务！&quot;); aDao.update(account); Record r = new Record(); r.setAccountId(account.getId()); r.setMoney(account.getMoney()); //运行期异常 测试事务 //int i = 1/0; if(account.getMoney() &lt; 10000) &#123; throw new BusiException(); &#125; rDao.insert(r);&#125; 2.JDK动态代理 和 CGLIB动态代理 代理：AOP中，通过切面技术，为源方法加上增强功能而包装出的代理方法 JDK动态代理：需要继承接口 I:共同接口 P：代理对象 R：真实对象 当程序调用R，由于R和P实现了同一个I，所有将P返回。 IAccountBiz.java I 1234567891011121314151617181920package com.yc.spring.bank.biz;import java.util.List;import org.springframework.transaction.annotation.Transactional;import com.yc.spring.bank.bean.Account;import com.yc.spring.bank.bean.Record;public interface IAccountBiz &#123; void deposit(Account account) throws BusiException; void withdraw(Account account); void transfer(Account account1, Account account2); List&lt;Record&gt; details(); List&lt;Record&gt; details1();&#125; AccountBiz.java R 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182package com.yc.spring.bank.biz;import java.util.ArrayList;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.yc.spring.bank.bean.Account;import com.yc.spring.bank.bean.Record;import com.yc.spring.bank.dao.AccountDao;import com.yc.spring.bank.dao.RecordDao;@Transactionalpublic class AccountBiz implements IAccountBiz &#123; @Autowired private AccountDao aDao; @Autowired private RecordDao rDao; /* （非 Javadoc） * @see com.yc.spring.bank.biz.IAccountBiz#deposit(com.yc.spring.bank.bean.Account) */ @Override @Transactional(rollbackFor=BusiException.class) public void deposit(Account account) throws BusiException &#123; System.out.println(&quot;模拟存款业务！&quot;); aDao.update(account); Record r = new Record(); r.setAccountId(account.getId()); r.setMoney(account.getMoney()); //运行期异常 测试事务 //int i = 1/0; if(account.getMoney() &lt; 10000) &#123; throw new BusiException(); &#125; rDao.insert(r); &#125; /* （非 Javadoc） * @see com.yc.spring.bank.biz.IAccountBiz#withdraw(com.yc.spring.bank.bean.Account) */ @Override public void withdraw(Account account) &#123; System.out.println(&quot;模拟取款业务！&quot;); aDao.update(account); rDao.insert(new Record()); &#125; /* （非 Javadoc） * @see com.yc.spring.bank.biz.IAccountBiz#transfer(com.yc.spring.bank.bean.Account, com.yc.spring.bank.bean.Account) */ @Override public void transfer(Account account1, Account account2) &#123; System.out.println(&quot;模拟转账业务！&quot;); aDao.update(account1); aDao.update(account2); rDao.insert(new Record()); rDao.insert(new Record()); &#125; /* （非 Javadoc） * @see com.yc.spring.bank.biz.IAccountBiz#details() */ @Override public List&lt;Record&gt; details()&#123; return new ArrayList&lt;Record&gt;(); &#125; /* （非 Javadoc） * @see com.yc.spring.bank.biz.IAccountBiz#details1() */ @Override public List&lt;Record&gt; details1()&#123; int a = 1/0; return new ArrayList&lt;Record&gt;(); &#125; &#125; BankTest.java 1234567891011121314151617181920212223242526272829303132package com.yc.spring.bank;import java.sql.Date;import javax.annotation.Resource;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringRunner;import com.yc.spring.bank.action.BankAction;import com.yc.spring.bank.bean.Account;import com.yc.spring.bank.biz.BusiException;import com.yc.spring.bank.biz.IAccountBiz;import com.yc.spring.bank.dao.AccountDao;@RunWith(SpringRunner.class)@ContextConfiguration(&quot;/bank-beans.xml&quot;)public class BankTest &#123; @Autowired private BankAction bankAction; @Resource private IAccountBiz aBiz; @Test public void test3() throws BusiException &#123; Account account = new Account(); account.setId(1); account.setMoney(500d); aBiz.deposit(account); &#125;&#125; CGLIB动态代理：Spring默认代理方式 3.IOC 控制反转 控制反转：由Spring创建对象，不用自己来写”A a &#x3D; new A();” DI：依赖注入 4.如何实例化一个ApplicationContext对象 读取xml文件（xml方式配置文件） ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(“beans.xml”); 读取java文件（注解方式配置文件） ApplicationContext ac &#x3D; new AnnocationApplicationContext(“注解配置类.class”); 配置Spring测试类 @RunWith(SpringRunner.class) @ContextConfiguration(“&#x2F;bank-beans.xml”) 5.Spring事务管理分类 1.编成式事务：try {业务} catch {回滚} finally {关闭} 2.声明式事务：所学的Spring注解@Transactional 6.JoinPoint与ProceedingJoinPoint有什么联系？用于什么场景？ JoinPoint 是 ProceedingJoinPoint 的父类 JoinPoint 应用于”非环绕增强“的场景下 JoinPoint 只是对 方法对象 和 参数 的封装 ProceedingJoinPoint 应用于”环绕增强“的场景下 环绕增强的业务方法不会自动的执行 jpj.proceed(); &#x2F;&#x2F; 执行业务方法","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第112次课程_Spring整合Mybatis及事务管理","slug":"技术向/Java/源辰课程记录/第112次课程_Spring整合Mybatis及事务管理","date":"2020-02-24T16:00:00.000Z","updated":"2022-05-11T01:32:48.603Z","comments":true,"path":"技术向/Java/源辰课程记录/第112次课程_Spring整合Mybatis及事务管理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC112%E6%AC%A1%E8%AF%BE%E7%A8%8B_Spring%E6%95%B4%E5%90%88Mybatis%E5%8F%8A%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/","excerpt":"","text":"源辰76班 第112次课程 2020.02.25 内容 Spring整合Mybatis及事务管理 项目路径： 1.Spring-jdbc 连接数据库 1.1.基础 必要依赖 pom.xml 12345678910&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;4.3.17.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.47&lt;/version&gt;&lt;/dependency&gt; Spring xml方式配置 bank-beans.xml 1234567891011121314151617&lt;!-- jdbc 连接数据库 --&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt; &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot; /&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt; &lt;/bean&gt; &lt;!-- 读取数据库配置文件 --&gt; &lt;context:property-placeholder location=&quot;jdbc.properties&quot;/&gt; &lt;!-- 执行SQL模板对象配置和使用 --&gt; &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt; &lt;/bean&gt; 数据库配置文件 jdbc.properties 1234jdbc.driverClassName=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://127.0.0.1/bankjdbc.username=rootjdbc.password=a 测试 BankTest.java 12345678910111213141516171819202122package com.yc.spring.bank;import java.sql.Date;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringRunner;import com.yc.spring.bank.action.BankAction;import com.yc.spring.bank.bean.Account;@RunWith(SpringRunner.class)@ContextConfiguration(&quot;/bank-beans.xml&quot;)public class BankTest &#123; @Autowired private JdbcTemplate jdbcTemplate; @Test public void test2() &#123; Date now = jdbcTemplate.queryForObject(&quot;select now()&quot;, Date.class); System.out.println(now); &#125;&#125; 1.2.项目案例 2.Spring 事务管理 Spring xml方式配置 bank-beans.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt; &lt;!-- 相当于java注解：@ComponentScan(&quot;com.yc.spring.bank&quot;) 包扫描 --&gt; &lt;context:component-scan base-package=&quot;com.yc.spring.bank&quot;&gt;&lt;/context:component-scan&gt; &lt;!-- AOP XML 配置方案 --&gt; &lt;aop:config&gt; &lt;!-- 切点定义：aop:pointcut 技术来源：AspectJ execution (* com.xyz.myapp.service.*.*(..)) 执行方法 (返回值 .包名.类名(所有参数列表))*表示所有 --&gt; &lt;aop:pointcut expression=&quot;execution (* com.yc.spring.bank.biz.*.*(..))&quot; id=&quot;bankBiz&quot;/&gt; &lt;!-- 切面定义：aop:aspect --&gt; &lt;aop:aspect id=&quot;myAspect&quot; ref=&quot;logAdvice&quot;&gt; &lt;!-- 通知位置定义 --&gt; &lt;aop:before pointcut-ref=&quot;bankBiz&quot; method=&quot;before&quot;/&gt; &lt;/aop:aspect&gt; &lt;/aop:config&gt; &lt;!-- 增强类/通知类定义 --&gt; &lt;bean id=&quot;logAdvice&quot; class=&quot;com.yc.spring.bank.aop.LogAdvice&quot;&gt;&lt;/bean&gt; &lt;!-- AspectJ自动代理 --&gt; &lt;aop:aspectj-autoproxy /&gt; &lt;!-- ================================================================================ --&gt; &lt;!-- jdbc 连接数据库 --&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt; &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot; /&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt; &lt;/bean&gt; &lt;!-- 读取数据库配置文件 --&gt; &lt;context:property-placeholder location=&quot;jdbc.properties&quot;/&gt; &lt;!-- --&gt; &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- ================================================================================ --&gt; &lt;!-- Spring 事务配置 --&gt; &lt;!-- 1.配置事务管理器 --&gt; &lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; &lt;/bean&gt; &lt;!-- 2.添加事务命名空间 关键字tx --&gt; &lt;!-- 3.添加事务注解驱动 --&gt; &lt;tx:annotation-driven transaction-manager=&quot;txManager&quot;/&gt; &lt;!-- 4.业务方法的事务配置 一般情况下，事务注解是要加在 业务层bean上(@Service) --&gt; &lt;!-- 传播行为 意义 *REQUIRED｛默认值｝ 业务方法需要在一个事务中运行。如果方法运行时，已经处在一个事务中，那么加入到该事务，否则为自己创建一个新的事务 NOT_SUPPORTED 声明方法不需要事务。如果方法没有关联到一个事务，容器不会为它开启事务。如果方法在一个事务中被调用，该事务会被挂起，在方法调用结束后，原先的事务便会恢复执行 *REQUIRESNEW 属性表明不管是否存在事务，业务方法总会为自己发起一个新的事务。如果方法已经运行在一个事务中，则原有事务会被挂起，新的事务会被创建，直到方法执行结束，新事务才算结束，原先的事务才会恢复执行 MANDATORY 该属性指定业务方法只能在一个已经存在的事务中执行，业务方法不能发起自己的事务。如果业务方法在没有事务的环境下调用，容器就会抛出例外。 *SUPPORTS 这一事务属性表明，如果业务方法在某个事务范围内被调用，则方法成为该事务的一部分。如果业务方法在事务范围外被调用，则方法在没有事务的环境下执行 Never 指定业务方法绝对不能在事务范围内执行。如果业务方法在某个事务中执行，容器会抛出例外，只有业务方法没有关联到任何事务，才能正常执行 NESTED 如果一个活动的事务存在，则运行在一个嵌套的事务中. 如果没有活动事务, 则按REQUIRED属性执行.它使用了一个单独的事务， 这个事务拥有多个可以回滚的保存点。内部事务的回滚不会对外部事务造成影响。它只对DataSourceTransactionManager事务管理器起效 --&gt; &lt;!-- 隔离级别 含义 DEFAULT 使用后端数据库默认的隔离级别(spring中的的选择项) READ_UNCOMMITED 允许你读取还未提交的改变了的数据。可能导致脏、幻、不可重复读 READ_COMMITTED 允许在并发事务已经提交后读取。可防止脏读，但幻读和 不可重复读仍可发生 REPEATABLE_READ 对相同字段的多次读取是一致的，除非数据被事务本身改变。可防止脏、不可重复读，但幻读仍可能发生。 SERIALIZABLE 完全服从ACID的隔离级别，确保不发生脏、幻、不可重复读。这在所有的隔离级别中是最慢的，它是典型的通过完全锁定在事务中涉及的数据表来完成的。 --&gt; &lt;/beans&gt; AccountBiz.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485package com.yc.spring.bank.biz;import java.util.ArrayList;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.yc.spring.bank.bean.Account;import com.yc.spring.bank.bean.Record;import com.yc.spring.bank.dao.AccountDao;import com.yc.spring.bank.dao.RecordDao;@Service/** 事务注解* @Transactional(* isolation = Isolation.DEFAULT , //隔离级别：4类 有关脏读、不可重复读和幻读* propagation = Propagation.REQUIRED , //传播行为：7类* readOnly = false , //只读事务* timeout = 3000 , //事务超时设置，默认是不限时* transactionManager = &quot;其他的事务管理器&quot; , //手动的设置事务管理器* rollbackFor , //重点：Spring默认情况下只会在运行期异常出现时，执行回滚，那么如果你有其他的类型的异常要回滚事务，就必须设置该属性。* noRollbackFor , //设置不回滚的异常类型* )*/@Transactionalpublic class AccountBiz &#123; @Autowired private AccountDao aDao; @Autowired private RecordDao rDao; /** * 存款业务 */ public void deposit(Account account) &#123; System.out.println(&quot;模拟存款业务！&quot;); aDao.update(account); Record r = new Record(); r.setAccountId(account.getId()); r.setMoney(account.getMoney()); //运行期异常 测试事务 //int i = 1/0; rDao.insert(r); &#125; /** * 取款业务 */ public void withdraw(Account account) &#123; System.out.println(&quot;模拟取款业务！&quot;); aDao.update(account); rDao.insert(new Record()); &#125; /** * 转账业务 */ public void transfer(Account account1, Account account2) &#123; System.out.println(&quot;模拟转账业务！&quot;); aDao.update(account1); aDao.update(account2); rDao.insert(new Record()); rDao.insert(new Record()); &#125; /** * 查询明细 */ public List&lt;Record&gt; details()&#123; return new ArrayList&lt;Record&gt;(); &#125; public List&lt;Record&gt; details1()&#123; int a = 1/0; return new ArrayList&lt;Record&gt;(); &#125; &#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第111次课程_Spring_AOP","slug":"技术向/Java/源辰课程记录/第111次课程_Spring_AOP","date":"2020-02-22T16:00:00.000Z","updated":"2022-05-11T01:32:37.096Z","comments":true,"path":"技术向/Java/源辰课程记录/第111次课程_Spring_AOP/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC111%E6%AC%A1%E8%AF%BE%E7%A8%8B_Spring_AOP/","excerpt":"","text":"源辰76班 第111次课程 2020.02.23 内容 Spring_AOP 项目路径： **1.**AOP [注解方式]配置 前置、后置、返回和异常增强 LogAdviceAnno.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.yc.spring.bank;import java.util.Arrays;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.AfterReturning;import org.aspectj.lang.annotation.AfterThrowing;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.annotation.Pointcut;import org.springframework.stereotype.Component;@Component@Aspectpublic class LogAdviceAnno &#123; //定义切点方法 @Pointcut(&quot;execution (* com.yc.spring.bank.biz.*.*(..))&quot;) public void myPc() &#123;&#125; @Pointcut(&quot;execution (* com.yc.spring.bank.biz.*.*(..))&quot;) public void myPc1() &#123;&#125; //前置增强 @Before(&quot;myPc()&quot;) public void before(JoinPoint jp) &#123; System.out.println(&quot;Anno 方法签名&quot; + jp.getSignature()); System.out.println(&quot;Anno 方法参数列表&quot; + Arrays.toString(jp.getArgs())); System.out.println(&quot;===== Anno before =====&quot;); &#125; //后置增强 @After(&quot;myPc()&quot;) public void after(JoinPoint jp) &#123; System.out.println(&quot;===== Anno after =====&quot;); &#125; //返回增强：方法正常执行后，才调用，返回增强要指定业务方法返回的值，对应的参数 @AfterReturning(value=&quot;myPc()&quot;,returning=&quot;ret&quot;) public void afterReturning(JoinPoint jp,Object ret) &#123; System.out.println(ret); System.out.println(&quot;===== Anno afterReturning =====&quot;); &#125; //异常增强 @AfterThrowing(value=&quot;myPc()&quot;,throwing=&quot;e&quot;) public void afterTrowing(JoinPoint jp,Throwable e) &#123; System.out.println(e); System.out.println(&quot;===== Anno afterTrowing =====&quot;); &#125;&#125; 2.环绕增强 功能强大，集成了前四种增强方式。 LogAdviceAnno.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879package com.yc.spring.bank;import java.util.Arrays;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.AfterReturning;import org.aspectj.lang.annotation.AfterThrowing;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.annotation.Pointcut;import org.springframework.stereotype.Component;@Component@Aspectpublic class LogAdviceAnno &#123; //定义切点方法 @Pointcut(&quot;execution (* com.yc.spring.bank.biz.*.*(..))&quot;) public void myPc() &#123;&#125; @Pointcut(&quot;execution (* com.yc.spring.common.dao.*.*(..))&quot;) public void myPc1() &#123;&#125; @Pointcut(&quot;execution (* com.yc.spring.bank.action.*.*(..))&quot;) public void myPc2() &#123;&#125; //前置增强 @Before(&quot;myPc1()&quot;) public void before(JoinPoint jp) &#123; System.out.println(&quot;Anno 方法签名&quot; + jp.getSignature()); System.out.println(&quot;Anno 方法参数列表&quot; + Arrays.toString(jp.getArgs())); System.out.println(&quot;===== Anno before =====&quot;); &#125; //后置增强 @After(&quot;myPc()&quot;) public void after(JoinPoint jp) &#123; System.out.println(&quot;===== Anno after =====&quot;); &#125; //返回增强：方法正常执行后，才调用，返回增强要指定业务方法返回的值，对应的参数 @AfterReturning(value=&quot;myPc()&quot;,returning=&quot;ret&quot;) public void afterReturning(JoinPoint jp,Object ret) &#123; System.out.println(ret); System.out.println(&quot;===== Anno afterReturning =====&quot;); &#125; //异常增强 @AfterThrowing(value=&quot;myPc()&quot;,throwing=&quot;e&quot;) public void afterTrowing(JoinPoint jp,Throwable e) &#123; System.out.println(e); System.out.println(&quot;===== Anno afterTrowing =====&quot;); &#125; /* * 环绕增强： * 性能监控 * 事务管理 * * ProceedingoinPoint 环绕增强特有的连接点 * 环绕增强的业务的执行，由环绕增强特有的连接点对象来控制执行 */ @Around(&quot;myPc2()&quot;) public Object around(ProceedingJoinPoint pjp) &#123; try &#123; long starttime = System.currentTimeMillis(); System.out.println(&quot;=====环绕增强 before =====&quot;); Object ret = pjp.proceed(); //执行业务方法并返回结果 System.out.println(&quot;共耗时：&quot; + (System.currentTimeMillis() - starttime)); System.out.println(&quot;=====环绕增强 afterReturning =====&quot;); return ret; &#125; catch (Throwable e) &#123; System.out.println(&quot;=====环绕增强 afterThrowing =====&quot;); return null; &#125; finally &#123; System.out.println(&quot;=====环绕增强 after =====&quot;); &#125; &#125;&#125; 3.JDK动态代理 和 CGLIB动态代理 Desktop.zip","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第110次课程_Spring_AOP","slug":"技术向/Java/源辰课程记录/第110次课程_Spring_AOP","date":"2020-02-20T16:00:00.000Z","updated":"2022-05-11T01:32:25.440Z","comments":true,"path":"技术向/Java/源辰课程记录/第110次课程_Spring_AOP/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC110%E6%AC%A1%E8%AF%BE%E7%A8%8B_Spring_AOP/","excerpt":"","text":"源辰76班 第110次课程 2020.02.21 内容 Spring_AOP 项目路径： 1.[注解方式]自动装配 和 [xml方式]包扫描 案例是以 注解方式 和 xml方式 混合 自动装配部分 方法注解： 123@Controller //Action 控制器@Service //Biz @Repository //Dao 属性注解： 1@Autowired //private 属性 例： BankAction.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package com.yc.spring.bank.action;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import com.yc.spring.bank.bean.Account;import com.yc.spring.bank.biz.AccountBiz;import com.yc.spring.bank.biz.RecordBiz;/*** SpringMVC 控制器*/@Controllerpublic class BankAction &#123; @Autowired private AccountBiz aBiz; @Autowired private RecordBiz rBiz; /** * 存款 * @param account * @return */ public String deposit(Account account) &#123; aBiz.deposit(account); return &quot;details&quot;; &#125; /** * 取款 * @param account * @return */ public String withdraw(Account account) &#123; aBiz.withdraw(account); return &quot;details&quot;; &#125; /** * 转账 * @param account1 * @param account2 * @return */ public String transfer(Account account1, Account account2) &#123; aBiz.transfer(account1, account2); return &quot;details&quot;; &#125; /** * 查询交易明细 * @param accountId * @return */ public String details(int accountId) &#123; rBiz.queryByAccountId(accountId); return &quot;details&quot;; &#125;&#125; AccountBiz.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.yc.spring.bank.biz;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.yc.spring.bank.bean.Account;import com.yc.spring.bank.bean.Record;import com.yc.spring.bank.dao.AccountDao;import com.yc.spring.bank.dao.RecordDao;@Servicepublic class AccountBiz &#123; @Autowired private AccountDao aDao; @Autowired private RecordDao rDao; /** * 存款业务 */ public void deposit(Account account) &#123; System.out.println(&quot;模拟存款业务！&quot;); aDao.update(account); rDao.insert(new Record()); &#125; /** * 取款业务 */ public void withdraw(Account account) &#123; System.out.println(&quot;模拟取款业务！&quot;); aDao.update(account); rDao.insert(new Record()); &#125; /** * 转账业务 */ public void transfer(Account account1, Account account2) &#123; System.out.println(&quot;模拟转账业务！&quot;); aDao.update(account1); aDao.update(account2); rDao.insert(new Record()); rDao.insert(new Record()); &#125; &#125; 包扫描部分 xml配置文件中使用 bank-beans.xml 1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt; &lt;!-- 相当于java注解：@ComponentScan(&quot;com.yc.spring.bank&quot;) 包扫描 --&gt; &lt;context:component-scan base-package=&quot;com.yc.spring.bank&quot;&gt;&lt;/context:component-scan&gt;&lt;/beans&gt; 测试部分 BankTest.java 1234567891011121314151617181920212223package com.yc.spring.bank;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringRunner;import com.yc.spring.bank.action.BankAction;import com.yc.spring.bank.bean.Account;//引入SpringRunner驱动，让程序可以自动装载@RunWith(SpringRunner.class)//引入xml配置文件@ContextConfiguration(&quot;/bank-beans.xml&quot;)public class BankTest &#123; @Autowired private BankAction bankAction; @Test public void test1() &#123; bankAction.deposit(new Account()); &#125;&#125; 2.AOP [XML方式]配置 关系图 切面 &#x3D; 切点 + 通知（增强） bank-beans.xml 12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt; &lt;!-- 相当于java注解：@ComponentScan(&quot;com.yc.spring.bank&quot;) 包扫描 --&gt; &lt;context:component-scan base-package=&quot;com.yc.spring.bank&quot;&gt;&lt;/context:component-scan&gt; &lt;!-- AOP XML 配置方案 --&gt; &lt;aop:config&gt; &lt;!-- 切点定义：aop:pointcut 技术来源：AspectJ execution (* com.xyz.myapp.service.*.*(..)) 执行方法 (返回值 .包名.类名(所有参数列表))*表示所有 --&gt; &lt;aop:pointcut expression=&quot;execution (* com.yc.spring.bank.biz.*.*(..))&quot; id=&quot;bankBiz&quot;/&gt; &lt;!-- 切面定义：aop:aspect --&gt; &lt;aop:aspect id=&quot;myAspect&quot; ref=&quot;logAdvice&quot;&gt; &lt;!-- 通知位置定义 --&gt; &lt;aop:before pointcut-ref=&quot;bankBiz&quot; method=&quot;before&quot;/&gt; &lt;/aop:aspect&gt; &lt;/aop:config&gt; &lt;!-- 增强类/通知类定义 --&gt; &lt;bean id=&quot;logAdvice&quot; class=&quot;com.yc.spring.bank.aop.LogAdvice&quot;&gt;&lt;/bean&gt; &lt;!-- AspectJ自动代理 --&gt; &lt;aop:aspectj-autoproxy /&gt;&lt;/beans&gt; 增强类&#x2F;通知类 LogAdvice.java [JoinPoint jp]可以判断是那个方法来调用的增强类 1234567891011package com.yc.spring.bank.aop;import java.util.Arrays;import org.aspectj.lang.JoinPoint;public class LogAdvice &#123; public void before(JoinPoint jp) &#123; System.out.println(&quot;方法签名&quot; + jp.getSignature()); System.out.println(&quot;方法参数列表&quot; + Arrays.toString(jp.getArgs())); System.out.println(&quot;=====before=====&quot;); &#125;&#125; AOP依赖 pom.xml 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;4.3.17.RELEASE&lt;/version&gt;&lt;/dependency&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"多个项目通过分支公用同一个仓库的解决方案","slug":"技术向/Java/源辰技术储备/多个项目通过分支公用同一个仓库的解决方案","date":"2020-02-18T16:00:00.000Z","updated":"2022-05-11T01:46:00.205Z","comments":true,"path":"技术向/Java/源辰技术储备/多个项目通过分支公用同一个仓库的解决方案/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E5%A4%9A%E4%B8%AA%E9%A1%B9%E7%9B%AE%E9%80%9A%E8%BF%87%E5%88%86%E6%94%AF%E5%85%AC%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","excerpt":"","text":"多个项目通过分支公用同一个仓库的解决方案 以下将按照顺序在Git Bash中使用！ #msg 更新信息 #branchname 新建分支的名字 12345678首先cd到项目路径下git init 创建本地仓库git add * 将目录下所有文件提交到缓存区（实际上跟踪所有文件，为后面push做准备）git commit -m &quot;#msg&quot;git branch #branchname 在本地创建一个分支git checkout #branchname 切换到分支下git remote add origin git@github.com:huyanqing1998/YCcourse.git 联系远程仓库git push -u origin #branchname 将缓存区的内容push到远程仓库分支里","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第109次课程_Spring_IOC原理","slug":"技术向/Java/源辰课程记录/第109次课程_Spring_IOC原理","date":"2020-02-18T16:00:00.000Z","updated":"2022-05-11T01:32:11.877Z","comments":true,"path":"技术向/Java/源辰课程记录/第109次课程_Spring_IOC原理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC109%E6%AC%A1%E8%AF%BE%E7%A8%8B_Spring_IOC%E5%8E%9F%E7%90%86/","excerpt":"","text":"源辰76班 第109次课程 2020.02.19 内容 Spring_IOC原理 项目路径： 1.XML方式 IOC01.xml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;!-- 1 --&gt; &lt;bean id=&quot;myUser&quot; class=&quot;com.yc.spring.bbs.bean.User&quot;&gt; &lt;property name=&quot;uname&quot; value=&quot;武松&quot;&gt;&lt;/property&gt; &lt;property name=&quot;upass&quot; value=&quot;abc123&quot;&gt;&lt;/property&gt; &lt;property name=&quot;head&quot; value=&quot;20.gif&quot;&gt;&lt;/property&gt; &lt;property name=&quot;gender&quot; value=&quot;1&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- 2 --&gt; &lt;bean primary=&quot;true&quot; class=&quot;com.yc.spring.bbs.bean.User&quot;&gt; &lt;property name=&quot;uname&quot; value=&quot;石秀&quot;&gt;&lt;/property&gt; &lt;property name=&quot;upass&quot; value=&quot;XYZ890&quot;&gt;&lt;/property&gt; &lt;property name=&quot;head&quot; value=&quot;345.gif&quot;&gt;&lt;/property&gt; &lt;property name=&quot;gender&quot; value=&quot;0&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- 3 --&gt; &lt;bean id=&quot;page1&quot; class=&quot;com.yc.spring.bbs.bean.Page&quot;&gt; &lt;property name=&quot;total&quot; value=&quot;100&quot;&gt;&lt;/property&gt; &lt;property name=&quot;rows&quot;&gt; &lt;list&gt; &lt;value&gt;湖南&lt;/value&gt; &lt;value&gt;广东&lt;/value&gt; &lt;value&gt;&lt;/value&gt; &lt;value type=&quot;java.lang.Integer&quot;&gt;100&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 4 --&gt; &lt;bean id=&quot;board&quot; primary=&quot;true&quot; class=&quot;com.yc.spring.bbs.bean.Board&quot;&gt; &lt;constructor-arg name=&quot;boardid&quot; value=&quot;100&quot;&gt;&lt;/constructor-arg&gt; &lt;constructor-arg name=&quot;parentid&quot; value=&quot;200&quot;&gt;&lt;/constructor-arg&gt; &lt;constructor-arg name=&quot;boardname&quot; value=&quot;jsp&quot;&gt;&lt;/constructor-arg&gt; &lt;property name=&quot;parent&quot; ref=&quot;boardparent&quot;&gt;&lt;/property&gt; &lt;property name=&quot;topicList&quot;&gt; &lt;list&gt; &lt;null/&gt; &lt;null/&gt; &lt;null/&gt; &lt;bean class=&quot;com.yc.spring.bbs.bean.Topic&quot;&gt; &lt;property name=&quot;uid&quot; value=&quot;400&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;null/&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean id=&quot;boardparent&quot; scope=&quot;prototype&quot; class=&quot;com.yc.spring.bbs.bean.Board&quot;&gt; &lt;constructor-arg name=&quot;boardid&quot; value=&quot;300&quot;&gt;&lt;/constructor-arg&gt; &lt;constructor-arg name=&quot;parentid&quot; value=&quot;0&quot;&gt;&lt;/constructor-arg&gt; &lt;constructor-arg name=&quot;boardname&quot; value=&quot;java&quot;&gt;&lt;/constructor-arg&gt; &lt;/bean&gt; &lt;!-- 5 --&gt; &lt;bean id=&quot;page2&quot; class=&quot;com.yc.spring.bbs.bean.Page&quot;&gt; &lt;property name=&quot;total&quot; value=&quot;200&quot;&gt;&lt;/property&gt; &lt;property name=&quot;rows&quot;&gt; &lt;list&gt; &lt;bean class=&quot;com.yc.spring.bbs.bean.User&quot;&gt; &lt;property name=&quot;uname&quot; value=&quot;华荣&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;map&gt; &lt;entry key=&quot;0734&quot; value=&quot;衡阳&quot;&gt;&lt;/entry&gt; &lt;entry key=&quot;0731&quot; value=&quot;长沙&quot;&gt;&lt;/entry&gt; &lt;/map&gt; &lt;set&gt; &lt;value type=&quot;java.lang.Integer&quot;&gt;100&lt;/value&gt; &lt;value&gt;呵呵&lt;/value&gt; &lt;ref bean=&quot;myUser&quot;&gt;&lt;/ref&gt; &lt;/set&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt; E01locForXmlTest.java 测试文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899package com.yc.spring.test.ioc;import java.util.Map;import java.util.Set;import org.junit.Assert;import org.junit.Test;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.yc.spring.bbs.bean.Board;import com.yc.spring.bbs.bean.Page;import com.yc.spring.bbs.bean.User;/*** 配置Spring，让测试方法全部测试通过*/public class E01IocForXmlTest &#123; ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;IOC01.xml&quot;); @Test public void test1() &#123; User user = (User) context.getBean(&quot;myUser&quot;); Assert.assertNotNull(user); Assert.assertEquals(&quot;武松&quot;, user.getUname()); Assert.assertEquals(&quot;abc123&quot;, user.getUpass()); Assert.assertEquals(&quot;20.gif&quot;, user.getHead()); Assert.assertEquals(Integer.valueOf(1), user.getGender()); &#125; // 必须设置主bean primary=true @Test public void test2() &#123; User user = (User) context.getBean(User.class); Assert.assertNotNull(user); Assert.assertEquals(&quot;石秀&quot;, user.getUname()); Assert.assertEquals(&quot;XYZ890&quot;, user.getUpass()); Assert.assertEquals(&quot;345.gif&quot;, user.getHead()); Assert.assertEquals(Integer.valueOf(0), user.getGender()); &#125; @Test public void test3() &#123; Page page = (Page) context.getBean(&quot;page1&quot;); Assert.assertNotNull(page); Assert.assertEquals(100, page.getTotal()); Assert.assertNotNull(page.getRows()); Assert.assertEquals(&quot;湖南&quot;, page.getRows().get(0)); Assert.assertEquals(&quot;广东&quot;, page.getRows().get(1)); Assert.assertEquals(100, page.getRows().get(3)); &#125; @Test public void test4() &#123; Board board = (Board) context.getBean(&quot;board&quot;); Assert.assertEquals((Integer) 100, board.getBoardid()); Assert.assertEquals((Integer) 200, board.getParentid()); Assert.assertEquals(&quot;jsp&quot;, board.getBoardname()); Assert.assertEquals((Integer) 300, board.getParent().getBoardid()); Assert.assertEquals(&quot;java&quot;, board.getParent().getBoardname()); Assert.assertEquals(5, board.getTopicList().size()); Assert.assertEquals(null, board.getTopicList().get(0)); Assert.assertNull(board.getTopicList().get(1)); Assert.assertEquals((Integer) 400, board.getTopicList().get(3).getUid()); &#125; @SuppressWarnings(&quot;unchecked&quot;) @Test public void test5() &#123; Page page = (Page) context.getBean(&quot;page2&quot;); Assert.assertNotNull(page); Assert.assertEquals(200, page.getTotal()); Assert.assertNotNull(page.getRows()); /** * 测试实体对象 */ User user = (User) page.getRows().get(0); Assert.assertEquals(&quot;华荣&quot;, user.getUname()); /** * 测试Map集合 */ Map&lt;String, Object&gt; map = (Map&lt;String, Object&gt;) page.getRows().get(1); Assert.assertEquals(&quot;衡阳&quot;, map.get(&quot;0734&quot;)); Assert.assertEquals(&quot;长沙&quot;, map.get(&quot;0731&quot;)); /** * 测试Set集合 */ User wuSong = (User) context.getBean(&quot;myUser&quot;); Set&lt;Object&gt; set = (Set&lt;Object&gt;) page.getRows().get(2); Assert.assertEquals(true, set.contains(100)); Assert.assertEquals(true, set.contains(wuSong)); Assert.assertEquals(true, set.contains(&quot;呵呵&quot;)); &#125;&#125; 2.注解方式 BeanConfig.java 相当于XML配置文件 自动装配 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596package com.yc.spring;import org.springframework.beans.factory.config.ConfigurableBeanFactory;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.ComponentScan;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.context.annotation.Scope;import com.yc.spring.bank.bean.Account;import com.yc.spring.bank.biz.impl.AccountBizImpl;import com.yc.spring.bbs.bean.User;/*** 注解配置bean 类*/ /* * 自动装配 * 1.组件注解：Component 注解，加在类上，相当于Bean * (如果说Configuration注解的类内部为本地居民Bean，那么Component注解标记为属于本地居民却在外地的Bean) * Component 通用 组件 * Service biz类 * Repository dao类 * Controller 控制器 * 2.属性上面加上@Autowired注解，可以让spring容器自动的注入一个对象，实现自动装配 * 3.在配置类加上@ComponentScan，是对某个包下的所有类进行扫描，扫描到加了&quot;1.组件注解&quot;的bean，自动添加到IOC中并完成装载 * */@Configuration // -&gt; &lt;beans&gt;@ComponentScan(&quot;com.yc.spring&quot;) // 配置spring扫描的包路径public class BeanConfig &#123; /* * @Bean(#name) == &lt;bean id=&quot;#name&quot;&gt;&lt;/bean&gt; //设置实体类名 * @Primary == &lt;bean primary=&quot;ture&quot;&gt;&lt;/bean&gt; //.Class唯一 * @Scope(&quot;prototype&quot;) == &lt;bean scope=&quot;prototype&quot;&gt;&lt;/bean&gt;//单例，调用一次创建一个新对象 * prototype -&gt; ConfigurableBeanFactory.SCOPE_PROTOTYPE */ /** * 创建 Account 对象的方法 * @return */ @Bean(&quot;accountBiz&quot;) public AccountBizImpl createAcountBiz() &#123; return new AccountBizImpl(); &#125; @Bean(&quot;account&quot;) @Primary public Account createAcount() &#123; return new Account(); &#125; @Bean(&quot;account1&quot;) @Scope(&quot;prototype&quot;) public Account createAcount1() &#123; return new Account(); &#125; @Bean(&quot;account2&quot;) public Account createAcount2() &#123; // 必须与 createAcount3 方法一样 // 单例模式 return Account.getInstance(); &#125; @Bean(&quot;account3&quot;) public Account createAcount3() &#123; // 必须与 createAcount2 方法一样 // 单例模式 return Account.getInstance(); &#125; int count; @Bean(&quot;account4&quot;) @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) public Account create1() &#123; return count++ &lt; 3 ? new Account() : Account.getInstance(); &#125; @Bean(&quot;myUser&quot;) public User createUser() &#123; User user = new User(); /** * 使用java代码设置属性 */ user.setUname(&quot;武松&quot;); user.setUpass(&quot;abc123&quot;); user.setHead(&quot;20.gif&quot;); user.setGender(1); return user; &#125;&#125; UserBiz.java 123456789101112131415161718package com.yc.spring.taobao;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;/** 业务类* @Component =&gt; @Bean*/@Servicepublic class UserBiz &#123; @Autowired private UserDao udao; public UserDao getUdao() &#123; return udao; &#125; public void setUdao(UserDao udao) &#123; this.udao = udao; &#125;&#125; UserDao.java 123456package com.yc.spring.taobao;import org.springframework.stereotype.Repository;@Repositorypublic class UserDao &#123; &#125; E03locForAnnoTest.java 12345678910111213141516171819202122Class&lt;?&gt; beanConfigClass;&#123; try &#123; beanConfigClass = Class.forName(&quot;com.yc.spring.BeanConfig&quot;); //相当于：beanConfigClass = BeanConfig.class; &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(&quot;请定义注解配置类 (BeanConfig) !!!!&quot;,e); &#125;&#125; // 创建注解容器上下文对象 ApplicationContext cxt = new AnnotationConfigApplicationContext(beanConfigClass);//相当于：ApplicationContext cxt = new AnnotationConfigApplicationContext(BeanConfig.class); //=====================================================================// @Test public void testUserBiz() &#123; com.yc.spring.taobao.UserBiz ubiz = cxt.getBean(com.yc.spring.taobao.UserBiz.class); Assert.assertNotNull(ubiz); Assert.assertNotNull(ubiz.getUdao()); &#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第108次课程_Spring_IOC原理","slug":"技术向/Java/源辰课程记录/第108次课程_Spring_IOC原理","date":"2020-02-17T16:00:00.000Z","updated":"2022-05-11T01:32:00.773Z","comments":true,"path":"技术向/Java/源辰课程记录/第108次课程_Spring_IOC原理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC108%E6%AC%A1%E8%AF%BE%E7%A8%8B_Spring_IOC%E5%8E%9F%E7%90%86/","excerpt":"","text":"源辰76班 第108次课程 2020.02.18 内容 Spring_IOC原理 项目路径： 1.创建工程 1.常规创建Maven工程 2.pom.xml导入Spring-Contents包 maven仓库网址： https://mvnrepository.com/ 1234567891011121314151617&lt;properties&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;&lt;/properties&gt; &lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;5.1.3.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 3.工程内创建Beans.xml文件 参考网址： https://docs.spring.io/spring/docs/5.1.13.RELEASE/spring-framework-reference/core.html#spring-core Beans.xml 123456789101112&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;!-- &lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt; &lt;/bean&gt; &lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt; &lt;/bean&gt; --&gt;&lt;/beans&gt; 2.Spring基础 set方法对bean对象设值 构造方法对bean对象设置 基础bean类 User.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121package com.yc.mybatis.bean;import java.util.Date;public class User &#123; private Integer id; private String username; private String password; private String email; private String headImg; private String phone; private Integer status; private Date regtime; private Hall hall; /* * 构造方法(构造器) */ public User() &#123;&#125; public User(Integer id,String username,String password) &#123; super(); System.out.println(&quot;===== Integer id,String username,String password =====&quot;); this.id = id; this.username = username; this.password = password; &#125; //重载 public User(String username,String password,Integer id) &#123; super(); System.out.println(&quot;===== String username,String password,Integer id =====&quot;); this.id = id; this.username = username; this.password = password; &#125; /* * 初始化方法 */ public void initA() &#123; System.out.println(&quot;=====initA=====&quot;); &#125; /* * 销毁方法 */ public void close() &#123; System.out.println(&quot;=====close=====&quot;); &#125; /* * 静态工厂方法 */ public static User create() &#123; System.out.println(&quot;=====create=====&quot;); return new User(); &#125; /* * 动态工厂方法 */ public User create1() &#123; System.out.println(&quot;=====create1=====&quot;); return new User(); &#125; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username == null ? null : username.trim(); &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password == null ? null : password.trim(); &#125; public String getEmail() &#123; return email; &#125; public void setEmail(String email) &#123; this.email = email == null ? null : email.trim(); &#125; public String getHeadImg() &#123; return headImg; &#125; public void setHeadImg(String headImg) &#123; this.headImg = headImg == null ? null : headImg.trim(); &#125; public String getPhone() &#123; return phone; &#125; public void setPhone(String phone) &#123; this.phone = phone == null ? null : phone.trim(); &#125; public Integer getStatus() &#123; return status; &#125; public void setStatus(Integer status) &#123; this.status = status; &#125; public Date getRegtime() &#123; return regtime; &#125; public void setRegtime(Date regtime) &#123; this.regtime = regtime; &#125; public Hall getHall() &#123; return hall; &#125; public void setHall(Hall hall) &#123; this.hall = hall; &#125;&#125; Hall.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.yc.mybatis.bean;public class Hall &#123; private Integer id; private String name; private String hallType; private Integer capacity; private Integer cinemaId; private Cinema cinema; public Cinema getCinema() &#123; return cinema; &#125; public void setCinema(Cinema cinema) &#123; this.cinema = cinema; &#125; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name == null ? null : name.trim(); &#125; public String getHallType() &#123; return hallType; &#125; public void setHallType(String hallType) &#123; this.hallType = hallType == null ? null : hallType.trim(); &#125; public Integer getCapacity() &#123; return capacity; &#125; public void setCapacity(Integer capacity) &#123; this.capacity = capacity; &#125; public Integer getCinemaId() &#123; return cinemaId; &#125; public void setCinemaId(Integer cinemaId) &#123; this.cinemaId = cinemaId; &#125;&#125; Cinema.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package com.yc.mybatis.bean;import java.util.List;public class Cinema &#123; private Integer id; private String name; private String address; private String gps; private String img; private List&lt;Hall&gt; halls; public List&lt;Hall&gt; getHalls() &#123; return halls; &#125; public void setHalls(List&lt;Hall&gt; halls) &#123; this.halls = halls; &#125; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name == null ? null : name.trim(); &#125; public String getAddress() &#123; return address; &#125; public void setAddress(String address) &#123; this.address = address == null ? null : address.trim(); &#125; public String getGps() &#123; return gps; &#125; public void setGps(String gps) &#123; this.gps = gps == null ? null : gps.trim(); &#125; public String getImg() &#123; return img; &#125; public void setImg(String img) &#123; this.img = img == null ? null : img.trim(); &#125;&#125; Spring设置文件 Beans.xml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;!-- bean详解 --&gt; &lt;!-- id bean对象标识 class scope 作用范围 &#123; singleton(默认，单例公用唯一一个) prototype(原型，每次获取的bean都是一个新创建的bean) request(请求期间获取的bean 唯一的) session(会话期间获取的bean 唯一的) global(全局与一种特殊的应用有关 ) &#125; depends-on 值：另一个bean的id。依赖属性，表示当前的bean必须依赖其他的bean destroy-method 用于指定销毁方法，会在对象被销毁时执行，也就是容器关闭时 init-method 用于指定初始化方法，会在对象创建的时被执行，也就是容器启动时 lazy-init 默认请求下所有的对象都在容器启动时创建(所以容器启动很慢)，可通过该属性设置延迟加载，延迟到getBean时加载 primary 主要bean配置，同一类型的bean出现多次，必须设置该属性为为true factory-method 设置工厂方法(动态和静态之分)，如果单独使用factory-method，那么就是静态工厂 factory-bean 值：另一个bean的id factory-method + factory-bean = 动态工厂 --&gt; &lt;bean id=&quot;user&quot; class=&quot;com.yc.mybatis.bean.User&quot; scope=&quot;prototype&quot; init-method=&quot;initA&quot; destroy-method=&quot;close&quot; lazy-init=&quot;true&quot; primary=&quot;true&quot; factory-method=&quot;create&quot; &gt;&lt;/bean&gt; &lt;bean id=&quot;user1&quot; class=&quot;com.yc.mybatis.bean.User&quot; factory-method=&quot;create1&quot; factory-bean=&quot;user&quot; &gt;&lt;/bean&gt; &lt;!-- ================================================================== --&gt; &lt;!-- 向bean内set数据 --&gt; &lt;!-- 1.set方法注入 2.构造方法(构造器)注入 3.接口注入 --&gt; &lt;bean id=&quot;user2&quot; class=&quot;com.yc.mybatis.bean.User&quot;&gt; &lt;!-- 1.set方法注入 --&gt; &lt;property name=&quot;id&quot; value=&quot;1&quot;&gt;&lt;/property&gt; &lt;property name=&quot;username&quot; value=&quot;武松&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;bean id=&quot;user3&quot; class=&quot;com.yc.mybatis.bean.User&quot;&gt; &lt;!-- 2.构造方法(构造器)注入 --&gt; &lt;constructor-arg name=&quot;username&quot; value=&quot;李逵&quot; index=&quot;1&quot;&gt;&lt;/constructor-arg&gt; &lt;constructor-arg name=&quot;id&quot; value=&quot;1&quot; index=&quot;0&quot;&gt;&lt;/constructor-arg&gt; &lt;constructor-arg name=&quot;password&quot; value=&quot;123&quot; index=&quot;2&quot;&gt;&lt;/constructor-arg&gt; &lt;property name=&quot;hall&quot; ref=&quot;hall&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- ref 表示引用其他bean，写bean的id --&gt; &lt;bean id=&quot;user4&quot; class=&quot;com.yc.mybatis.bean.User&quot;&gt; &lt;property name=&quot;hall&quot; ref=&quot;hall&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;bean id=&quot;hall&quot; class=&quot;com.yc.mybatis.bean.Hall&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;小象&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- bean对象中放入list对象 --&gt; &lt;bean id=&quot;cinema&quot; class=&quot;com.yc.mybatis.bean.Cinema&quot;&gt; &lt;property name=&quot;halls&quot;&gt; &lt;list&gt; &lt;bean class=&quot;com.yc.mybatis.bean.Hall&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;红旗&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;bean class=&quot;com.yc.mybatis.bean.Hall&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;万达&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;bean class=&quot;com.yc.mybatis.bean.Hall&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;红色&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;bean class=&quot;com.yc.mybatis.bean.Hall&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;进步&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;/beans&gt; Junit测试类 Test1.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com.yc.spring.bean;import org.junit.Assert;import org.junit.Test;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.yc.mybatis.bean.Cinema;import com.yc.mybatis.bean.User;public class Test1 &#123; //导入Spring配置文件 private ApplicationContext context = new ClassPathXmlApplicationContext(&quot;Beans.xml&quot;); @Test public void test() &#123; System.out.println(&quot;-------------测试开始------------&quot;); //使用id获取bean需要做强制类型转换 User user1 = (User) context.getBean(&quot;user&quot;); Assert.assertNotNull(user1); User user2 = context.getBean(User.class); User user3 = context.getBean(User.class); Assert.assertNotEquals(user1, user2); Assert.assertNotEquals(user1, user3); //默认情况下，getBean同一个bean，返回同一个对象 user1 == user2 System.out.println(&quot;------------------------------&quot;); //测试动态的工厂方法 User user4 = (User) context.getBean(&quot;user1&quot;); &#125; @Test public void test1() &#123; User user = (User) context.getBean(&quot;user2&quot;); Assert.assertEquals(&quot;武松&quot;,user.getUsername()); Assert.assertEquals((Integer)1,user.getId()); User user1 = (User) context.getBean(&quot;user3&quot;); Assert.assertEquals(&quot;李逵&quot;,user1.getUsername()); Assert.assertEquals((Integer)1,user.getId()); Assert.assertEquals(&quot;小象&quot;,user1.getHall().getName()); User user2 = (User) context.getBean(&quot;user4&quot;); Assert.assertEquals(user1.getHall(),user2.getHall()); &#125; @Test public void test2() &#123; Cinema c = context.getBean(Cinema.class); Assert.assertEquals(4, c.getHalls().size()); Assert.assertEquals(&quot;进步&quot;,c.getHalls().get(3).getName()); &#125;&#125; 附加：Maven导入包 pom.xml 12345678910111213&lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;4.3.17.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.13&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第107次课程_注解","slug":"技术向/Java/源辰课程记录/第107次课程_注解","date":"2020-02-15T16:00:00.000Z","updated":"2022-05-11T01:31:45.173Z","comments":true,"path":"技术向/Java/源辰课程记录/第107次课程_注解/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC107%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E6%B3%A8%E8%A7%A3/","excerpt":"","text":"源辰76班 第107次课程 2020.02.16 内容 注解 项目路径：****G:\\YC74\\200212_Mybatis动态SQL\\code 1.反射机制 Movie.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package com.yc.mybatis.bean;import java.util.Date;public class Movie &#123; private Integer id; private String name; private Integer duration; private Date releaseTime; private String foreignName; private String region; private String language; private String description; private String status; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name == null ? null : name.trim(); &#125; public Integer getDuration() &#123; return duration; &#125; public void setDuration(Integer duration) &#123; this.duration = duration; &#125; public Date getReleaseTime() &#123; return releaseTime; &#125; public void setReleaseTime(Date releaseTime) &#123; this.releaseTime = releaseTime; &#125; public String getForeignName() &#123; return foreignName; &#125; public void setForeignName(String foreignName) &#123; this.foreignName = foreignName == null ? null : foreignName.trim(); &#125; public String getRegion() &#123; return region; &#125; public void setRegion(String region) &#123; this.region = region == null ? null : region.trim(); &#125; public String getLanguage() &#123; return language; &#125; public void setLanguage(String language) &#123; this.language = language == null ? null : language.trim(); &#125; public String getDescription() &#123; return description; &#125; public void setDescription(String description) &#123; this.description = description == null ? null : description.trim(); &#125; public String getStatus() &#123; return status; &#125; public void setStatus(String status) &#123; this.status = status == null ? null : status.trim(); &#125;&#125; ReflectTest.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768package com.yc.mybatis.dao;import java.lang.reflect.*;import com.yc.mybatis.bean.Movie;public class ReflectTest &#123; public static void main(String[] args) throws Exception &#123; Movie m = new Movie(); //多态==&gt;引用转型(父类指向子类对象) Object o = m; System.out.println(o==m); //通过反射来获取成员对象：属性、方法、构造函数、块、内部类 //获取类对象：1、class 关键字；2、使用getClass()；3、使用Class.forName() System.out.println(Movie.class); System.out.println(o.getClass()); System.out.println(Class.forName(&quot;com.yc.mybatis.bean.Movie&quot;)); @SuppressWarnings(&quot;unchecked&quot;) //1. Class&lt;Movie&gt; cls = (Class&lt;Movie&gt;) o.getClass(); //2. Class&lt;Movie&gt; cls = (Class&lt;Movie&gt;) m.getClass(); //3. Class&lt;Movie&gt; cls = Movie.class; /* * 带Declared表示在当前类&quot;定义&quot;的属性、方法 * 不带Declared表示是一个共有的属性、方法 */ //属性 Field nameField = cls.getDeclaredField(&quot;name&quot;); Field[] f2 = cls.getDeclaredFields(); //Field f3 = cls.getField(&quot;name&quot;); Field[] f4 = cls.getFields(); //方法对象 Method getNameMethod = cls.getDeclaredMethod(&quot;getName&quot;); Method setNameMethod = cls.getDeclaredMethod(&quot;setName&quot;,String.class); cls.getDeclaredMethods(); cls.getMethod(&quot;setName&quot;, String.class); cls.getMethods(); //构造方法 Constructor c1 = cls.getConstructor(); cls.getConstructors(); cls.getDeclaredConstructor(); cls.getDeclaredConstructors(); System.out.println(&quot;==================获取设置属性、调用方法、构造函数创建对象==================&quot;); /* * 获取设置属性、调用方法、构造函数创建对象 */ //设置成员的可见性，临时将属性或方法设置为public可见 nameField.setAccessible(true); nameField.set(m, &quot;终结者6&quot;); Object nameValue = nameField.get(m); //执行方法 setNameMethod.invoke(m, &quot;少年派的奇幻旅行&quot;); //第二个参数 可变参数组 nameValue = getNameMethod.invoke(m); System.out.println(nameValue); &#125;&#125; 2.注解 AnnotationTest.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package com.yc.mybatis.dao;import java.lang.annotation.ElementType;import java.lang.annotation.Inherited;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;@MyAnnopublic class AnnotationTest &#123; @MyAnno String name; @MyAnno public void test() &#123; &#125; public static void main(String[] args) &#123; MyAnno myanno = AnnotationTest.class.getAnnotation(MyAnno.class); System.out.println(myanno); //用于测试@Inherited，注解是否对子类有效 myanno = SubAnnotationTest.class.getAnnotation(MyAnno.class); System.out.println(myanno); &#125;&#125;class SubAnnotationTest extends AnnotationTest&#123; &#125;//---------------------------------------------------------------------------------//定义注解&lt;4个元注解&gt;//元注解：目标注解//表示这个定义的注解可以加在哪些上面：FIELD加在属性上，METHOD加在方法上@Target(&#123;ElementType.TYPE,ElementType.FIELD,ElementType.METHOD&#125;)//元注解：保持性：SOURSE源码有效 CLASS字节码有效 RUNTIME运行时有效@Retention(RetentionPolicy.RUNTIME)/** @Documented:默认情况下使用javadoc自动生成文档时，注解将被忽略掉* 如果想在文档中也包含注解，必须使用Documented为文档注解*//** @Inherited：表示该注解可以被子类继承*/@Inherited@interface MyAnno&#123; //定义name 属性 default 是默认选项 public String name() default &quot;test&quot;; //value 是缺省属性名，默认属性在只有一个属性值的情况下，可以在定义时不加value public String value() default &quot;&quot;; //注解数组属性，使用&#123;&#125;进行数组赋值，如果只有一个值，可以省略&#123;&#125; public String[] type() default &#123;&#125;;&#125; 3.注解案例 模仿Junit类（@Before @Test @After） Before.java 12345678910package com.yc.mybatis.junit;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)public @interface Before &#123;&#125; Test.java 12345678910package com.yc.mybatis.junit;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)public @interface Test &#123;&#125; After.java 12345678910package com.yc.mybatis.junit;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)public @interface After &#123;&#125; JunitDemo.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485package com.yc.mybatis.junit;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.List;import com.yc.mybatis.dao.HallMapperTest;public class JunitDemo &#123; /* * Test注解：表示该方式是一个测试的方法 * Before注解：表示该方式是在被测试方法执行&quot;前&quot;执行的方法 * After注解：表示该方式是在被测试方法执行&quot;后&quot;执行的方法 * * 作业： * Junit测试结果：1、测试失败 2、测试错误 */ public static void main(String[] args) &#123; Object obj = new HallMapperTest(); JunitDemo jd = new JunitDemo(); jd.testObject(obj); &#125; public void testObject(Object obj) &#123; if(obj == null) &#123; return; &#125; Class&lt;?&gt; cls = obj.getClass(); //获取所有的共有方法 Method[] methods = cls.getMethods(); //将不同方法(Test、Before、After)放入各自集合中 List&lt;Method&gt; tList = new ArrayList&lt;Method&gt;(); List&lt;Method&gt; bList = new ArrayList&lt;Method&gt;(); List&lt;Method&gt; aList = new ArrayList&lt;Method&gt;(); for(Method m : methods) &#123; Test t = m.getAnnotation(Test.class); if(t != null) &#123; tList.add(m); &#125; Before b = m.getAnnotation(Before.class); if(b != null) &#123; bList.add(m); &#125; After a = m.getAnnotation(After.class); if(b != null) &#123; aList.add(m); &#125; &#125; int success = 0; int failure = 0; //启动测试：循环test方法集合 for(Method m : tList) &#123; //调动test方法，在执行前后，调用before方法和after方法 try &#123; //执行before方法 for(Method bm : bList) &#123; try &#123; bm.invoke(obj); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; //执行test方法 m.invoke(obj); //执行after方法 for(Method am : aList) &#123; try &#123; am.invoke(obj); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; success++; &#125; catch (Exception e) &#123; e.printStackTrace(); failure++; &#125; &#125; //运行通过，没有异常，统计正确，出现异常则错误数加一 System.out.println(&quot;测试通过方法数量：&quot; + success); System.out.println(&quot;测试失败方法数量：&quot; + failure); &#125;&#125; 测试目标： HallMapperTest.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package com.yc.mybatis.dao;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Assert;import com.yc.mybatis.bean.Cinema;import com.yc.mybatis.bean.Hall;import com.yc.mybatis.junit.*;public class HallMapperTest &#123; private SqlSession session; @Before public void before() throws IOException &#123; // 定义mybatis配置文件路径，默认从classpath开始 String resource = &quot;mybatis.xml&quot;; // 读入配置文件 InputStream inputStream = Resources.getResourceAsStream(resource); // 创建会话工厂bean SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); // MyBatis的会话底层包装一个JDBC连接 session = sqlSessionFactory.openSession(); &#125; @Test public void SelectAll() &#123; HallMapper hm = session.getMapper(HallMapper.class); Hall h = hm.selectById(1); Assert.assertEquals(&quot;3号厅&quot;, h.getName()); Assert.assertEquals(&quot;2D&quot;, h.getHallType()); &#125; @Test public void text() &#123; CinemaMapper cm = session.getMapper(CinemaMapper.class); Cinema c = cm.selectById(4); List&lt;Hall&gt; halls = c.getHalls(); Assert.assertEquals(4, halls.size()); Assert.assertEquals(&quot;3号厅&quot;, halls.get(0).getName()); &#125; &#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第106次课程_Mybatis项目案例","slug":"技术向/Java/源辰课程记录/第106次课程_Mybatis项目案例","date":"2020-02-14T16:00:00.000Z","updated":"2022-05-11T01:31:29.225Z","comments":true,"path":"技术向/Java/源辰课程记录/第106次课程_Mybatis项目案例/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC106%E6%AC%A1%E8%AF%BE%E7%A8%8B_Mybatis%E9%A1%B9%E7%9B%AE%E6%A1%88%E4%BE%8B/","excerpt":"","text":"源辰76班 第106次课程 2020.02.15 内容 Mybatis项目案例 1.jstl中的&lt;c:set&gt; index.jsp 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;&lt;!DOCTYPE HTML&gt;&lt;html lang=&quot;en-US&quot;&gt;&lt;head&gt;&lt;title&gt;搜藏&lt;/title&gt;&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt;&lt;script type=&quot;text/javascript&quot;&gt; function add() &#123; window .open( &#x27;fav.do?op=toAdd&#x27;, &#x27;newwindow&#x27;, &#x27;height=300, width=400, toolbar=no, menubar=no, scrollbars=no, resizable=no,location=no, status=no&#x27;); &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form name=&quot;favForm&quot; method=&quot;post&quot; action=&quot;/cang/fav.do;jsessionid=FF8C0487A99814B144B07E5633524A0F&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;op&quot; value=&quot;toList&quot; /&gt; &lt;div class=&quot;banner&quot; valign=&quot;top&quot;&gt;搜藏&lt;/div&gt; &lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot;&gt; &lt;tr&gt; &lt;td style=&quot;text-align: right;&quot; valign=&quot;top&quot;&gt; &lt;!-- 左边Tag列表 --&gt; &lt;div class=&quot;left_labels&quot;&gt; &lt;table class=&quot;labels_table&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot;&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;#&quot; onclick=&quot;add();&quot; style=&quot;font-weight: bold;&quot;&gt;添加书签&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;selected_label&quot;&gt;&lt;a href=&quot;index.s?flag=1&quot;&gt;全部&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;index.s?flag=2&quot;&gt;未分类&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;c:forEach items=&quot;$&#123;tList&#125;&quot; var=&quot;tag&quot;&gt; &lt;tr&gt; &lt;td&gt;&lt;a href=&quot;index.s?tId=$&#123;tag.tId&#125;&quot;&gt;$&#123;tag.tName&#125;&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;tr&gt; &lt;td&gt;&lt;a style=&quot;font-weight: bold;&quot; href=&quot;fav.do?op=toCloud&quot;&gt;云图&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/td&gt; &lt;td&gt; &lt;!-- 右边fav内容 --&gt; &lt;div class=&quot;content_links&quot;&gt; &lt;c:set var=&quot;showFlist&quot; value=&quot;$&#123;empty fList ? showTag.favorites : fList &#125;&quot;&gt;&lt;/c:set&gt; &lt;c:forEach items=&quot;$&#123;showFlist &#125;&quot; var=&quot;fav&quot;&gt; &lt;div style=&quot;padding: 6px 10px;&quot;&gt; &lt;div&gt; &lt;a href=&quot;$&#123;fav.fUrl &#125;&quot; style=&quot;color: blue; font-size: 18px;&quot; target=&quot;_blank&quot;&gt;$&#123;fav.fLabel &#125;&lt;/a&gt; &lt;/div&gt; &lt;div style=&quot;color: black; font-size: 16px;&quot;&gt;$&#123;fav.fDesc &#125;&lt;/div&gt; &lt;div style=&quot;color: green; font-size: 14px;&quot;&gt; $&#123;fav.fUrl &#125;&lt;/div&gt; &lt;/div&gt; &lt;/c:forEach&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第105次课程_Mybatis项目案例","slug":"技术向/Java/源辰课程记录/第105次课程_Mybatis项目案例","date":"2020-02-13T16:00:00.000Z","updated":"2022-05-11T01:31:15.918Z","comments":true,"path":"技术向/Java/源辰课程记录/第105次课程_Mybatis项目案例/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC105%E6%AC%A1%E8%AF%BE%E7%A8%8B_Mybatis%E9%A1%B9%E7%9B%AE%E6%A1%88%E4%BE%8B/","excerpt":"","text":"源辰76班 第105次课程 2020.02.14 内容 Mybatis项目案例","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第104次课程_Mybatis优化及高级特性","slug":"技术向/Java/源辰课程记录/第104次课程_Mybatis优化及高级特性","date":"2020-02-12T16:00:00.000Z","updated":"2022-05-11T01:31:02.993Z","comments":true,"path":"技术向/Java/源辰课程记录/第104次课程_Mybatis优化及高级特性/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC104%E6%AC%A1%E8%AF%BE%E7%A8%8B_Mybatis%E4%BC%98%E5%8C%96%E5%8F%8A%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/","excerpt":"","text":"源辰76班 第104次课程 2020.02.13 内容 Mybatis优化及高级特性 1.insert&#x2F;selectkey MovieMapper.xml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.yc.mybatis.dao.MovieMapper&quot;&gt; &lt;select id=&quot;selectAll&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie; &lt;/select&gt; &lt;!-- if else --&gt; &lt;select id=&quot;selectByMovie&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie &lt;where&gt; &lt;if test=&quot;name != null&quot;&gt;and name like #&#123;name&#125;&lt;/if&gt; &lt;if test=&quot;region != null&quot;&gt;and region = #&#123;region&#125;&lt;/if&gt; &lt;if test=&quot;language != null&quot;&gt;and language = #&#123;language&#125;&lt;/if&gt; &lt;/where&gt; &lt;/select&gt; &lt;!-- switch==choose/case==when/default==otherwise --&gt; &lt;select id=&quot;selectByFlag&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie &lt;where&gt; &lt;choose&gt; &lt;when test=&quot;flag == 1&quot;&gt;name = #&#123;name&#125;&lt;/when&gt; &lt;when test=&quot;flag == 2&quot;&gt;name like #&#123;name&#125;&lt;/when&gt; &lt;when test=&quot;flag == 3&quot;&gt;name is null&lt;/when&gt; &lt;otherwise&gt;name is not null&lt;/otherwise&gt; &lt;/choose&gt; &lt;/where&gt; &lt;/select&gt; &lt;!-- update --&gt; &lt;select id=&quot;selectById&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie where id = #&#123;id&#125; &lt;/select&gt; &lt;update id=&quot;update&quot;&gt; update movie &lt;set&gt; &lt;if test=&quot;name != null&quot;&gt;name = #&#123;name&#125;,&lt;/if&gt; &lt;if test=&quot;duration != null&quot;&gt;duration = #&#123;duration&#125;,&lt;/if&gt; &lt;if test=&quot;region != null&quot;&gt;region = #&#123;region&#125;,&lt;/if&gt; &lt;/set&gt; where id = #&#123;id&#125; &lt;/update&gt; &lt;!-- foreach:循环 --&gt; &lt;select id=&quot;selectInLanguage&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie where &lt;foreach collection=&quot;languages&quot; item=&quot;l&quot; open=&quot;language in (&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt; #&#123;l&#125; &lt;/foreach&gt; &lt;/select&gt; &lt;!-- 两种方式在插入新记录时，自动生成主键值 --&gt; &lt;!-- useGeneratedKeys属性:打开返回值 --&gt; &lt;insert id=&quot;insert&quot; useGeneratedKeys=&quot;true&quot; keyColumn=&quot;id&quot; keyProperty=&quot;id&quot;&gt; insert into movie(name,duration) values (#&#123;name&#125;,#&#123;duration&#125;) &lt;/insert&gt; &lt;!-- selectKey --&gt; &lt;insert id=&quot;insert&quot;&gt; &lt;!-- order表示该语句执行的时机 --&gt; &lt;selectKey keyColumn=&quot;id&quot; keyProperty=&quot;id&quot; order=&quot;AFTER&quot; resultType=&quot;int&quot;&gt; select last_insert_id() &lt;/selectKey&gt; insert into movie(name,duration) values (#&#123;name&#125;,#&#123;duration&#125;) &lt;/insert&gt; &lt;/mapper&gt; MovieMapper.java 1234567891011121314151617181920212223242526272829package com.yc.mybatis.dao;import java.util.List;import org.apache.ibatis.annotations.Param;import com.yc.mybatis.bean.Movie;public interface MovieMapper &#123; List&lt;Movie&gt; selectAll(); List&lt;Movie&gt; selectByMovie(Movie m); /** Mybatis默认参数[param1,param2] 可以用@Param(&quot;name&quot;) 将形参名 param1 -&gt; name */ List&lt;Movie&gt; selectByFlag(@Param(&quot;name&quot;) String n,@Param(&quot;flag&quot;) String f); Movie selectById(int id); void update(Movie m); List&lt;Movie&gt; selectInLanguage(@Param(&quot;languages&quot;) String[] l); void insert(Movie m);&#125; MovieMapperTest.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108package com.yc.mybatis.dao;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Before;import org.junit.Test;import com.yc.mybatis.bean.Movie;import org.junit.Assert;public class MovieMapperTest &#123; private SqlSession session; @Before public void before() throws IOException &#123; // 定义mybatis配置文件路径，默认从classpath开始 String resource = &quot;mybatis.xml&quot;; // 读入配置文件 InputStream inputStream = Resources.getResourceAsStream(resource); // 创建会话工厂bean SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); // MyBatis的会话底层包装一个JDBC连接 session = sqlSessionFactory.openSession(); &#125; @Test public void text() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); List&lt;Movie&gt; list = mm.selectAll(); //Assert.assertEquals(23, list.size()); &#125; @Test public void testSelectByMovie() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); mm.selectByMovie(null); Movie m = new Movie(); mm.selectByMovie(m); m.setName(&quot;少年派&quot;); mm.selectByMovie(m); m.setRegion(&quot;美国&quot;); mm.selectByMovie(m); m.setLanguage(&quot;英语&quot;); mm.selectByMovie(m); &#125; @Test public void testSelectByFlag() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); mm.selectByFlag(&quot;少年&quot;, &quot;1&quot;); mm.selectByFlag(&quot;少年&quot;, &quot;2&quot;); mm.selectByFlag(&quot;少年&quot;, &quot;3&quot;); mm.selectByFlag(&quot;少年&quot;, &quot;4&quot;); &#125; @Test public void testUpdate() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); Movie m = mm.selectById(1); mm.update(m); m.setName(null); mm.update(m); m.setRegion(null); mm.update(m); m.setDuration(null); //mm.update(m); &#125; @Test public void testSelectInLanguage() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); String[] languages = &#123;&quot;英语&quot;,&quot;国语&quot;,&quot;粤语&quot;,&quot;法语&quot;&#125;; mm.selectInLanguage(languages); &#125; @Test public void testInsert() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); Movie m = new Movie(); m.setName(&quot;终结者6&quot;); m.setDuration(1000); mm.insert(m); //提交 session.commit(); /* * 在insert完成后，直接获取到movie记录的id值 * 需要进行表要的配置 */ Assert.assertEquals(true, m.getId()&gt;0); &#125; &#125; 2.include&#x2F;sql 和 cache 标签 include&#x2F;sql：统一替换变量。 cache：二级缓存。所有session共享二级缓存块内容。 MovieMapper.xml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.yc.mybatis.dao.MovieMapper&quot;&gt; &lt;select id=&quot;selectAll&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie; &lt;/select&gt; &lt;!-- if else --&gt; &lt;select id=&quot;selectByMovie&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie &lt;where&gt; &lt;if test=&quot;name != null&quot;&gt;and name like #&#123;name&#125;&lt;/if&gt; &lt;if test=&quot;region != null&quot;&gt;and region = #&#123;region&#125;&lt;/if&gt; &lt;if test=&quot;language != null&quot;&gt;and language = #&#123;language&#125;&lt;/if&gt; &lt;/where&gt; &lt;/select&gt; &lt;!-- switch==choose/case==when/default==otherwise --&gt; &lt;select id=&quot;selectByFlag&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie &lt;where&gt; &lt;choose&gt; &lt;when test=&quot;flag == 1&quot;&gt;name = #&#123;name&#125;&lt;/when&gt; &lt;when test=&quot;flag == 2&quot;&gt;name like #&#123;name&#125;&lt;/when&gt; &lt;when test=&quot;flag == 3&quot;&gt;name is null&lt;/when&gt; &lt;otherwise&gt;name is not null&lt;/otherwise&gt; &lt;/choose&gt; &lt;/where&gt; &lt;/select&gt; &lt;!-- update --&gt; &lt;select id=&quot;selectById&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie where id = #&#123;id&#125; &lt;/select&gt; &lt;update id=&quot;update&quot;&gt; update movie &lt;set&gt; &lt;if test=&quot;name != null&quot;&gt;name = #&#123;name&#125;,&lt;/if&gt; &lt;if test=&quot;duration != null&quot;&gt;duration = #&#123;duration&#125;,&lt;/if&gt; &lt;if test=&quot;region != null&quot;&gt;region = #&#123;region&#125;,&lt;/if&gt; &lt;/set&gt; where id = #&#123;id&#125; &lt;/update&gt; &lt;!-- foreach:循环 --&gt; &lt;select id=&quot;selectInLanguage&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie where &lt;foreach collection=&quot;languages&quot; item=&quot;l&quot; open=&quot;language in (&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt; #&#123;l&#125; &lt;/foreach&gt; &lt;/select&gt; &lt;!-- 两种方式在插入新记录时，自动生成主键值 --&gt; &lt;!-- useGeneratedKeys属性:打开返回值 --&gt; &lt;!-- &lt;insert id=&quot;insert&quot; useGeneratedKeys=&quot;true&quot; keyColumn=&quot;id&quot; keyProperty=&quot;id&quot;&gt; insert into movie(name,duration) values (#&#123;name&#125;,#&#123;duration&#125;) &lt;/insert&gt; --&gt; &lt;!-- selectKey --&gt; &lt;insert id=&quot;insert&quot;&gt; &lt;!-- order表示该语句执行的时机 --&gt; &lt;selectKey keyColumn=&quot;id&quot; keyProperty=&quot;id&quot; order=&quot;AFTER&quot; resultType=&quot;int&quot;&gt; select last_insert_id() &lt;/selectKey&gt; insert into movie(name,duration) values (#&#123;name&#125;,#&#123;duration&#125;) &lt;/insert&gt; &lt;!-- 命名语句块 语法格式$&#123;语句块名&#125; --&gt; &lt;select id=&quot;selectAllWithOrder&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie order by $&#123;orders&#125;; &lt;/select&gt; &lt;!-- include --&gt; &lt;!-- select &lt;include refid=&quot;allColumns&quot;&gt;&lt;/include&gt; from movie order by $&#123;orders&#125;; --&gt; &lt;sql id=&quot;allColumns&quot;&gt; id,name,duration,region,language &lt;/sql&gt; &lt;!-- 开启二级缓存 --&gt; &lt;cache&gt;&lt;/cache&gt; &lt;/mapper&gt; MovieMapper.java 123456789101112131415161718192021222324252627282930package com.yc.mybatis.dao;import java.util.List;import org.apache.ibatis.annotations.Param;import com.yc.mybatis.bean.Movie;public interface MovieMapper &#123; List&lt;Movie&gt; selectAll(); List&lt;Movie&gt; selectByMovie(Movie m); /** Mybatis默认参数[param1,param2] 可以用@Param(&quot;name&quot;) 将形参名 param1 -&gt; name */ List&lt;Movie&gt; selectByFlag(@Param(&quot;name&quot;) String n,@Param(&quot;flag&quot;) String f); Movie selectById(int id); void update(Movie m); List&lt;Movie&gt; selectInLanguage(@Param(&quot;languages&quot;) String[] l); void insert(Movie m); /* * 根据用户的要求进行排序 * 命名语句块，在单参数时，也需要加@Param(&quot;&quot;)注解 */ List&lt;Movie&gt; selectAllWithOrder(@Param(&quot;orders&quot;) String orders);&#125; MovieMapperTest.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121package com.yc.mybatis.dao;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Before;import org.junit.Test;import com.yc.mybatis.bean.Movie;import org.junit.Assert;public class MovieMapperTest &#123; private SqlSession session; @Before public void before() throws IOException &#123; // 定义mybatis配置文件路径，默认从classpath开始 String resource = &quot;mybatis.xml&quot;; // 读入配置文件 InputStream inputStream = Resources.getResourceAsStream(resource); // 创建会话工厂bean SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); // MyBatis的会话底层包装一个JDBC连接 session = sqlSessionFactory.openSession(); &#125; @Test public void text() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); List&lt;Movie&gt; list = mm.selectAll(); //Assert.assertEquals(23, list.size()); &#125; @Test public void testSelectByMovie() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); mm.selectByMovie(null); Movie m = new Movie(); mm.selectByMovie(m); m.setName(&quot;少年派&quot;); mm.selectByMovie(m); m.setRegion(&quot;美国&quot;); mm.selectByMovie(m); m.setLanguage(&quot;英语&quot;); mm.selectByMovie(m); &#125; @Test public void testSelectByFlag() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); mm.selectByFlag(&quot;少年&quot;, &quot;1&quot;); mm.selectByFlag(&quot;少年&quot;, &quot;2&quot;); mm.selectByFlag(&quot;少年&quot;, &quot;3&quot;); mm.selectByFlag(&quot;少年&quot;, &quot;4&quot;); &#125; @Test public void testUpdate() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); Movie m = mm.selectById(1); mm.update(m); m.setName(null); mm.update(m); m.setRegion(null); mm.update(m); m.setDuration(null); //mm.update(m); &#125; @Test public void testSelectInLanguage() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); String[] languages = &#123;&quot;英语&quot;,&quot;国语&quot;,&quot;粤语&quot;,&quot;法语&quot;&#125;; mm.selectInLanguage(languages); &#125; @Test public void testInsert() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); Movie m = new Movie(); m.setName(&quot;终结者6&quot;); m.setDuration(1000); mm.insert(m); //提交 session.commit(); /* * 在insert完成后，直接获取到movie记录的id值 * 需要进行表要的配置 */ Assert.assertEquals(true, m.getId()&gt;0); &#125; @Test public void testSelectAllWithOrder() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); mm.selectAllWithOrder(&quot; id desc&quot;); System.out.println(&quot;===============================&quot;); mm.selectAllWithOrder(&quot; name&quot;); System.out.println(&quot;===============================&quot;); mm.selectAllWithOrder(&quot; name&quot;); System.out.println(&quot;===============================&quot;); mm.selectAllWithOrder(&quot; name&quot;); //二级缓存要求，会话必须在提交之后，才能数据共享 System.out.println(&quot;*******************************&quot;); MovieMapper mm1 = session.getMapper(MovieMapper.class); System.out.println(&quot;===============================&quot;); mm1.selectAllWithOrder(&quot; name&quot;); System.out.println(&quot;===============================&quot;); mm1.selectAllWithOrder(&quot; name&quot;); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第103次课程_Mybatis动态SQL","slug":"技术向/Java/源辰课程记录/第103次课程_Mybatis动态SQL","date":"2020-02-11T16:00:00.000Z","updated":"2022-05-11T01:30:47.659Z","comments":true,"path":"技术向/Java/源辰课程记录/第103次课程_Mybatis动态SQL/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC103%E6%AC%A1%E8%AF%BE%E7%A8%8B_Mybatis%E5%8A%A8%E6%80%81SQL/","excerpt":"","text":"源辰76班 第103次课程 2020.02.12 内容 Mybatis动态SQL 1.基础复习 MovieMapper.xml：对SQL语句定义 MovieMapper.java：接口，java调用内部函数 mybatis.xml：注册Mapper MovieMapperTest.java：测试 mybatis.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;!-- 数据环境配置 --&gt; &lt;environments default=&quot;test&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;!-- 设置事务管理 --&gt; &lt;transactionManager type=&quot;JDBC&quot; /&gt; &lt;!-- 连接参数--&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot; /&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot; /&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;environment id=&quot;test&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot; /&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1/C0-S3-Ply-mybatis&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;a&quot; /&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;environment id=&quot;production&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot; /&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot; /&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot; /&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;!-- 注册SQL映射文件 --&gt; &lt;!-- &lt;mapper resource=&quot;com/yc/mybatis/dao/HallMapper.xml&quot; /&gt; &lt;mapper resource=&quot;com/yc/mybatis/dao/CinemaMapper.xml&quot; /&gt; --&gt; &lt;!-- package 可以设置包扫描，自动的将该包下的映射文件注册进来 --&gt; &lt;package name=&quot;com.yc.mybatis.dao&quot;/&gt; &lt;/mappers&gt;&lt;/configuration&gt; MovieMapper.xml 12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.yc.mybatis.dao.MovieMapper&quot;&gt; &lt;select id=&quot;selectAll&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie; &lt;/select&gt; &lt;/mapper&gt; MovieMapper.java 1234567package com.yc.mybatis.dao;import java.util.List;import com.yc.mybatis.bean.Movie;public interface MovieMapper &#123; List&lt;Movie&gt; selectAll();&#125; MovieMapperTest.java 123456789101112131415161718192021222324252627282930313233343536373839package com.yc.mybatis.dao;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Before;import org.junit.Test;import com.yc.mybatis.bean.Movie;import org.junit.Assert;public class MovieMapperTest &#123; private SqlSession session; @Before public void before() throws IOException &#123; // 定义mybatis配置文件路径，默认从classpath开始 String resource = &quot;mybatis.xml&quot;; // 读入配置文件 InputStream inputStream = Resources.getResourceAsStream(resource); // 创建会话工厂bean SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); // MyBatis的会话底层包装一个JDBC连接 session = sqlSessionFactory.openSession(); &#125; @Test public void text() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); List&lt;Movie&gt; list = mm.selectAll(); Assert.assertEquals(23, list.size()); &#125; &#125; 2.where&#x2F;if 和 where&#x2F;choose&#x2F;when|otherwise 标签 where&#x2F;if相当于if&#x2F;else where&#x2F;choose&#x2F;when|otherwise相当于switch&#x2F;case|default MovieMapper.xml 123456789101112131415161718192021222324252627282930313233&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.yc.mybatis.dao.MovieMapper&quot;&gt; &lt;select id=&quot;selectAll&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie; &lt;/select&gt; &lt;!-- if else --&gt; &lt;select id=&quot;selectByMovie&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie &lt;where&gt; &lt;if test=&quot;name != null&quot;&gt;and name like #&#123;name&#125;&lt;/if&gt; &lt;if test=&quot;region != null&quot;&gt;and region = #&#123;region&#125;&lt;/if&gt; &lt;if test=&quot;language != null&quot;&gt;and language = #&#123;language&#125;&lt;/if&gt; &lt;/where&gt; &lt;/select&gt; &lt;!-- switch==choose/case==when/default==otherwise --&gt; &lt;select id=&quot;selectByFlag&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie &lt;where&gt; &lt;choose&gt; &lt;when test=&quot;flag == 1&quot;&gt;name = #&#123;name&#125;&lt;/when&gt; &lt;when test=&quot;flag == 2&quot;&gt;name like #&#123;name&#125;&lt;/when&gt; &lt;when test=&quot;flag == 3&quot;&gt;name is null&lt;/when&gt; &lt;otherwise&gt;name is not null&lt;/otherwise&gt; &lt;/choose&gt; &lt;/where&gt; &lt;/select&gt; &lt;/mapper&gt; MovieMapper.java 1234567891011121314151617package com.yc.mybatis.dao;import java.util.List;import org.apache.ibatis.annotations.Param;import com.yc.mybatis.bean.Movie;public interface MovieMapper &#123; List&lt;Movie&gt; selectAll(); List&lt;Movie&gt; selectByMovie(Movie m); /** Mybatis默认参数[param1,param2] 可以用@Param(&quot;name&quot;) 将形参名 param1 -&gt; name */ List&lt;Movie&gt; selectByFlag(@Param(&quot;name&quot;) String n,@Param(&quot;flag&quot;) String f);&#125; MovieMapperTest.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package com.yc.mybatis.dao;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Before;import org.junit.Test;import com.yc.mybatis.bean.Movie;import org.junit.Assert;public class MovieMapperTest &#123; private SqlSession session; @Before public void before() throws IOException &#123; // 定义mybatis配置文件路径，默认从classpath开始 String resource = &quot;mybatis.xml&quot;; // 读入配置文件 InputStream inputStream = Resources.getResourceAsStream(resource); // 创建会话工厂bean SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); // MyBatis的会话底层包装一个JDBC连接 session = sqlSessionFactory.openSession(); &#125; @Test public void text() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); List&lt;Movie&gt; list = mm.selectAll(); Assert.assertEquals(23, list.size()); &#125; @Test public void testSelectByMovie() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); mm.selectByMovie(null); Movie m = new Movie(); mm.selectByMovie(m); m.setName(&quot;少年派&quot;); mm.selectByMovie(m); m.setRegion(&quot;美国&quot;); mm.selectByMovie(m); m.setLanguage(&quot;英语&quot;); mm.selectByMovie(m); &#125; @Test public void testSelectByFlag() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); mm.selectByFlag(&quot;少年&quot;, &quot;1&quot;); mm.selectByFlag(&quot;少年&quot;, &quot;2&quot;); mm.selectByFlag(&quot;少年&quot;, &quot;3&quot;); mm.selectByFlag(&quot;少年&quot;, &quot;4&quot;); &#125; &#125; 3.update 和 foreach 标签 foreach相当于for循环 MovieMapper.xml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.yc.mybatis.dao.MovieMapper&quot;&gt; &lt;select id=&quot;selectAll&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie; &lt;/select&gt; &lt;!-- if else --&gt; &lt;select id=&quot;selectByMovie&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie &lt;where&gt; &lt;if test=&quot;name != null&quot;&gt;and name like #&#123;name&#125;&lt;/if&gt; &lt;if test=&quot;region != null&quot;&gt;and region = #&#123;region&#125;&lt;/if&gt; &lt;if test=&quot;language != null&quot;&gt;and language = #&#123;language&#125;&lt;/if&gt; &lt;/where&gt; &lt;/select&gt; &lt;!-- switch==choose/case==when/default==otherwise --&gt; &lt;select id=&quot;selectByFlag&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie &lt;where&gt; &lt;choose&gt; &lt;when test=&quot;flag == 1&quot;&gt;name = #&#123;name&#125;&lt;/when&gt; &lt;when test=&quot;flag == 2&quot;&gt;name like #&#123;name&#125;&lt;/when&gt; &lt;when test=&quot;flag == 3&quot;&gt;name is null&lt;/when&gt; &lt;otherwise&gt;name is not null&lt;/otherwise&gt; &lt;/choose&gt; &lt;/where&gt; &lt;/select&gt; &lt;!-- update --&gt; &lt;select id=&quot;selectById&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie where id = #&#123;id&#125; &lt;/select&gt; &lt;update id=&quot;update&quot;&gt; update movie &lt;set&gt; &lt;if test=&quot;name != null&quot;&gt;name = #&#123;name&#125;,&lt;/if&gt; &lt;if test=&quot;duration != null&quot;&gt;duration = #&#123;duration&#125;,&lt;/if&gt; &lt;if test=&quot;region != null&quot;&gt;region = #&#123;region&#125;,&lt;/if&gt; &lt;/set&gt; where id = #&#123;id&#125; &lt;/update&gt; &lt;!-- foreach:循环 --&gt; &lt;select id=&quot;selectInLanguage&quot; resultType=&quot;com.yc.mybatis.bean.Movie&quot;&gt; select * from movie where &lt;foreach collection=&quot;languages&quot; item=&quot;l&quot; open=&quot;language in (&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt; #&#123;l&#125; &lt;/foreach&gt; &lt;/select&gt; &lt;/mapper&gt; MovieMapper.java 12345678910111213141516171819202122package com.yc.mybatis.dao;import java.util.List;import org.apache.ibatis.annotations.Param;import com.yc.mybatis.bean.Movie;public interface MovieMapper &#123; List&lt;Movie&gt; selectAll(); List&lt;Movie&gt; selectByMovie(Movie m); /** Mybatis默认参数[param1,param2] 可以用@Param(&quot;name&quot;) 将形参名 param1 -&gt; name */ List&lt;Movie&gt; selectByFlag(@Param(&quot;name&quot;) String n,@Param(&quot;flag&quot;) String f); Movie selectById(int id); void update(Movie m); List&lt;Movie&gt; selectInLanguage(@Param(&quot;languages&quot;) String[] l);&#125; MovieMapperTest.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687package com.yc.mybatis.dao;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Before;import org.junit.Test;import com.yc.mybatis.bean.Movie;import org.junit.Assert;public class MovieMapperTest &#123; private SqlSession session; @Before public void before() throws IOException &#123; // 定义mybatis配置文件路径，默认从classpath开始 String resource = &quot;mybatis.xml&quot;; // 读入配置文件 InputStream inputStream = Resources.getResourceAsStream(resource); // 创建会话工厂bean SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); // MyBatis的会话底层包装一个JDBC连接 session = sqlSessionFactory.openSession(); &#125; @Test public void text() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); List&lt;Movie&gt; list = mm.selectAll(); Assert.assertEquals(23, list.size()); &#125; @Test public void testSelectByMovie() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); mm.selectByMovie(null); Movie m = new Movie(); mm.selectByMovie(m); m.setName(&quot;少年派&quot;); mm.selectByMovie(m); m.setRegion(&quot;美国&quot;); mm.selectByMovie(m); m.setLanguage(&quot;英语&quot;); mm.selectByMovie(m); &#125; @Test public void testSelectByFlag() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); mm.selectByFlag(&quot;少年&quot;, &quot;1&quot;); mm.selectByFlag(&quot;少年&quot;, &quot;2&quot;); mm.selectByFlag(&quot;少年&quot;, &quot;3&quot;); mm.selectByFlag(&quot;少年&quot;, &quot;4&quot;); &#125; @Test public void testUpdate() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); Movie m = mm.selectById(1); mm.update(m); m.setName(null); mm.update(m); m.setRegion(null); mm.update(m); m.setDuration(null); //mm.update(m); &#125; @Test public void testSelectInLanguage() &#123; MovieMapper mm = session.getMapper(MovieMapper.class); String[] languages = &#123;&quot;英语&quot;,&quot;国语&quot;,&quot;粤语&quot;,&quot;法语&quot;&#125;; mm.selectInLanguage(languages); &#125; &#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"便签","slug":"技术向/Java/源辰技术储备/便签","date":"2020-02-10T16:00:00.000Z","updated":"2022-05-11T01:44:34.582Z","comments":true,"path":"技术向/Java/源辰技术储备/便签/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E4%BE%BF%E7%AD%BE/","excerpt":"","text":"便签 ajax contentType 主要设置你发送给服务器的格式，dataType设置你收到服务器数据的格式。 Ajax上传文件的cache、processdata、contentType属性以及FormData对象的总结https://blog.csdn.net/qq_41564928&#x2F;article&#x2F;details&#x2F;90580375","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第102次课程_复习3_Web项目","slug":"技术向/Java/源辰课程记录/第102次课程_复习3_Web项目","date":"2020-02-10T16:00:00.000Z","updated":"2022-05-11T01:30:07.250Z","comments":true,"path":"技术向/Java/源辰课程记录/第102次课程_复习3_Web项目/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC102%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E5%A4%8D%E4%B9%A03_Web%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"源辰76班 第102次课程 2020.02.11 内容 复习3_Web项目 复习知识点：jQuery、Servlet 1.动态展示图片 index.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Multiverse by HTML5 UP&lt;/title&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=no&quot; /&gt;&lt;!--[if lte IE 8]&gt;&lt;script src=&quot;assets/js/ie/html5shiv.js&quot;&gt;&lt;/script&gt;&lt;![endif]--&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;assets/css/main.css&quot; /&gt;&lt;!--[if lte IE 9]&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;assets/css/ie9.css&quot; /&gt;&lt;![endif]--&gt;&lt;!--[if lte IE 8]&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;assets/css/ie8.css&quot; /&gt;&lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- Wrapper --&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;!-- Header --&gt; &lt;header id=&quot;header&quot;&gt; &lt;h1&gt; &lt;a href=&quot;index.html&quot;&gt; &lt;strong&gt;HOME&lt;/strong&gt; &lt;/a&gt; &lt;/h1&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#footer&quot; class=&quot;icon fa-info-circle&quot;&gt;About&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/header&gt; &lt;!-- Main --&gt; &lt;div id=&quot;main&quot;&gt; &lt;!-- &lt;article class=&quot;thumb&quot;&gt; &lt;a href=&quot;images/fulls/01.jpg&quot; class=&quot;image&quot;&gt; &lt;img src=&quot;images/fulls/01.jpg&quot; alt=&quot;&quot; /&gt; &lt;/a&gt; &lt;h2&gt;照片名&lt;/h2&gt; &lt;p&gt;照片介绍&lt;/p&gt; &lt;/article&gt; --&gt; &lt;/div&gt; &lt;div class=&quot;copyrights&quot;&gt; Collect from &lt;a href=&quot;http://www.hyycinfo.com/&quot;&gt;源辰信息&lt;/a&gt; &lt;/div&gt; &lt;!-- Footer --&gt; &lt;footer id=&quot;footer&quot; class=&quot;panel&quot;&gt; &lt;div class=&quot;inner split&quot;&gt; &lt;div&gt; &lt;section&gt; &lt;h2&gt;Magna feugiat sed adipiscing&lt;/h2&gt; &lt;p&gt;Nulla consequat, ex ut suscipit rutrum, mi dolor tincidunt erat, et scelerisque turpis ipsum eget quis orci mattis aliquet. Maecenas fringilla et ante at lorem et ipsum. Dolor nulla eu bibendum sapien. Donec non pharetra dui. Nulla consequat, ex ut suscipit rutrum, mi dolor tincidunt erat, et scelerisque turpis ipsum.&lt;/p&gt; &lt;/section&gt; &lt;section&gt; &lt;h2&gt;Follow me on ...&lt;/h2&gt; &lt;ul class=&quot;icons&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;icon fa-twitter&quot;&gt; &lt;span class=&quot;label&quot;&gt;Twitter&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;icon fa-facebook&quot;&gt; &lt;span class=&quot;label&quot;&gt;Facebook&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;icon fa-instagram&quot;&gt; &lt;span class=&quot;label&quot;&gt;Instagram&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;icon fa-github&quot;&gt; &lt;span class=&quot;label&quot;&gt;GitHub&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;icon fa-dribbble&quot;&gt; &lt;span class=&quot;label&quot;&gt;Dribbble&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;icon fa-linkedin&quot;&gt; &lt;span class=&quot;label&quot;&gt;LinkedIn&lt;/span&gt; &lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/section&gt; &lt;p class=&quot;copyright&quot;&gt; &amp;copy; Unttled. More Templates &lt;a href=&quot;http://www.hyycinfo.com/&quot; target=&quot;_blank&quot; title=&quot;源辰信息&quot;&gt;源辰信息&lt;/a&gt; - Collect from &lt;a href=&quot;http://www.hyycinfo.com/&quot; title=&quot;源辰信息&quot; target=&quot;_blank&quot;&gt;源辰信息&lt;/a&gt; . &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;section&gt; &lt;h2&gt;Get in touch&lt;/h2&gt; &lt;form method=&quot;post&quot; action=&quot;#&quot;&gt; &lt;div class=&quot;field half first&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; placeholder=&quot;Name&quot; /&gt; &lt;/div&gt; &lt;div class=&quot;field half&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;email&quot; id=&quot;email&quot; placeholder=&quot;Email&quot; /&gt; &lt;/div&gt; &lt;div class=&quot;field&quot;&gt; &lt;textarea name=&quot;message&quot; id=&quot;message&quot; rows=&quot;4&quot; placeholder=&quot;Message&quot;&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;ul class=&quot;actions&quot;&gt; &lt;li&gt;&lt;input type=&quot;submit&quot; value=&quot;Send&quot; class=&quot;special&quot; /&gt;&lt;/li&gt; &lt;li&gt;&lt;input type=&quot;reset&quot; value=&quot;Reset&quot; /&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/form&gt; &lt;/section&gt; &lt;/div&gt; &lt;/div&gt; &lt;/footer&gt; &lt;/div&gt; &lt;!-- Scripts --&gt; &lt;script src=&quot;assets/js/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;assets/js/jquery.poptrox.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;assets/js/skel.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;assets/js/util.js&quot;&gt;&lt;/script&gt; &lt;!--[if lte IE 8]&gt;&lt;script src=&quot;assets/js/ie/respond.min.js&quot;&gt;&lt;/script&gt;&lt;![endif]--&gt; &lt;script src=&quot;assets/js/main.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(function()&#123; $(&#x27;#main&#x27;).load(&quot;getImg.do&quot;); &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; GetImgServlet.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.yc.photo.servlet;import java.io.File;import java.io.IOException;import javax.servlet.ServletContext;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;@WebServlet(&quot;/getImg.do&quot;)public class GetImgServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; String webpath = &quot;/images/fulls&quot;; // 获取应用上下文对象 ServletContext application = this.getServletContext(); // 将web路径转成磁盘路径 String diskpath = application.getRealPath(webpath); // 创建文件对象 File dir = new File(diskpath); // 获取目录下所有文件 String[] filenameArray = dir.list(); String s = &quot;&lt;article class=\\&quot;thumb\\&quot;&gt;\\n&quot; + &quot; &lt;a href=\\&quot;images/fulls/%s\\&quot; class=\\&quot;image\\&quot;&gt;\\n&quot; + &quot; &lt;img src=\\&quot;images/fulls/%s\\&quot; alt=\\&quot;\\&quot; /&gt;\\n&quot; + &quot; &lt;/a&gt;\\n&quot; + &quot; &lt;h2&gt;照片名&lt;/h2&gt;\\n&quot; + &quot; &lt;p&gt;照片介绍&lt;/p&gt;\\n&quot; + &quot;&lt;/article&gt;&quot;; for(String filename:filenameArray) &#123; String ss = String.format(s, filename,filename); response.getWriter().append(ss); &#125; &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse * response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub doGet(request, response); &#125;&#125; 2.文件上传（form方式） web.xml 123456789101112131415161718192021222324&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot; version=&quot;3.1&quot;&gt; &lt;display-name&gt;C71-S3-Ply-phone&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;servlet&gt; &lt;servlet-name&gt;文件上传&lt;/servlet-name&gt; &lt;servlet-class&gt;com.yc.photo.servlet.UploadServlet&lt;/servlet-class&gt; &lt;!-- 文件夹上传 --&gt; &lt;multipart-config&gt;&lt;/multipart-config&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;文件上传&lt;/servlet-name&gt; &lt;url-pattern&gt;/upload.do&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; UploadServlet.java 1234567891011121314151617181920212223242526package com.yc.photo.servlet;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.Part;@WebServlet(&quot;/UploadServlet&quot;)public class UploadServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; Part part = request.getPart(&quot;file&quot;); String filename = part.getSubmittedFileName(); part.write(&quot;G:/YC74/200211_复习3/testbox/&quot; + filename); response.getWriter().append(&quot;success&quot;); &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request, response); &#125;&#125; upload.html 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;upload.do&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 3.文件上传（ajax方式） upload.html 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form id=&quot;ff&quot; action=&quot;upload.do&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt; &lt;input type=&quot;button&quot; onclick=&quot;postData()&quot; value=&quot;上传&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;script src=&quot;assets/js/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; function postData()&#123; var formData = new FormData(ff); $.ajax(&#123; url:&#x27;upload.do&#x27;, type:&#x27;post&#x27;, data:formData, contentType:false, processData:false, success:function(res)&#123; if(res==&quot;success&quot;)&#123; location.href = &quot;index.html&quot;; &#125; else &#123; alert(&#x27;失败&#x27;); &#125; &#125; &#125;); &#125;&lt;/script&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第101次课程_复习2_多线程下载","slug":"技术向/Java/源辰课程记录/第101次课程_复习2_多线程下载","date":"2020-02-09T16:00:00.000Z","updated":"2022-05-11T01:29:55.710Z","comments":true,"path":"技术向/Java/源辰课程记录/第101次课程_复习2_多线程下载/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC101%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E5%A4%8D%E4%B9%A02_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD/","excerpt":"","text":"源辰76班 第101次课程 2020.02.10 内容 **复习2_**多线程下载 关键字：多线程、断点续传 Download.java 注：断点存在BUG，续传模块未实现。package com.yc.download;import java.io.*;import java.net.*;import java.util.Properties;public class Download &#123; /** * 定义下载属性 */ private int blockSize = 1024 * 1024; // 文件分区的大小 private int threadSize = 3; // 线程的数量 private String filePath = &quot;G:/YC74/200209_复习1/testbox/&quot;; // 文件存放的路径 // 定义当前运行的线程数 private Integer runThreadCount = 0; // 记录已经下载的文件数量 private Integer downloadedCount = 0; /** * 当前下载的字节数 / 总的字节数 = 比率 ==》百分数 在每次下载到数据时，将字节数加入到字节数统计变量中 然后计算百分比，显示出来 */ // 下载的字节数 private long downloadBytes; /** * 实现断点续传 * 1、保存当前下载的进度 * txt : 自己定义文件保存的格式，方便解析 ，不推荐 * properties : 属性文件：格式： * 键1=值1 * 键2=值2 * 。。。。 * a.zip 文件 * a.zip.0=已经下载的进度数 * a.zip.1=已经下载的进度数 * a.zip.3=已经下载的进度数 * 2、当下次启动下载时，检查有没有保存的进度 * 3、如果有，则回复下载进度 4、如果没有，则重新下载 */ // 存储下载进度的集合 private Properties downloadMap = new Properties(); // Map ==》Hashtable线程安全（HashMap线程不安全） ==》Properties（存储字符串数据） /** * 分块下载 * * @param urlstr 地址 * @param index 块数 * @param size 块的大小 */ public void downloadBlock(String urlstr, int index) &#123; InputStream in = null; FileOutputStream fos = null; try &#123; URL url = new URL(urlstr); // 全局资源定位器对象 URLConnection conn = url.openConnection(); // 打开连接 返回实际类型是：HttpURLConnection /** * 获取文件实际大小 */ long fileSize = conn.getContentLengthLong(); in = conn.getInputStream(); // 获取输入流 // 获取文件名 String filename = url.getFile().substring(url.getFile().lastIndexOf(&quot;/&quot;) + 1); // 将下载的资源保存成文件 fos = new FileOutputStream(filePath + filename + &quot;.&quot; + index); /** * 计算开始下载的起止位置 */ long begin = index * blockSize; long end = begin + blockSize; // 根据文件实际大小修正 end if (end &gt; fileSize) &#123; end = fileSize; &#125; long current = begin; // 记录当前的下载的进度 /** * 将输入流跳过N个字节 */ in.skip(begin); byte[] buffer = new byte[1024]; int count; while ((count = in.read(buffer)) &gt; -1) &#123; // 临时进度字节数 long tmpCurrent = current; // 加上当前的进度 tmpCurrent += count; if (tmpCurrent &lt;= end) &#123; fos.write(buffer, 0, count); current += count; /** * 更新进度 */ saveProgress(filename, index, current); // 更新字节数 synchronized (this) &#123; downloadBytes += count; int rate = (int) (downloadBytes * 100 / fileSize); System.out.println(&quot;下载进度：&quot; + rate + &quot;%&quot;); &#125; &#125; else &#123; // 计算最后一块的大小， 这是跨分界线的情况 int tmpSize = (int) (end - current); fos.write(buffer, 0, tmpSize); /** * 更新进度 */ saveProgress(filename, index, blockSize); synchronized (this) &#123; downloadBytes += tmpSize; int rate = (int) (downloadBytes * 100 / fileSize); System.out.println(&quot;下载进度：&quot; + rate + &quot;%&quot;); // 实现显示的百分没有重复值 &#125; break; &#125; &#125; System.out.println(filename + &quot; 第&quot; + (index + 1) + &quot;块下载完成&quot;); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; try &#123; if (fos != null) fos.close(); if (in != null) in.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; /** * 保存进度 * @param filename * @param index * @param current */ public /*synchronized*/ void saveProgress(String filename, int index, long current) &#123; /** * 更新进度 */ downloadMap.setProperty(&quot;&quot; + filename + &quot;.&quot; + index, &quot;&quot; + current); /** * 不能在这里保存进度文件 * 自动定时的保存==》 开启一个线程定时得循环执行保存的操作=》1秒钟保存一次进度 * 建议 在 downloadFile 中保存进度文件 */ /* try &#123; FileOutputStream fos = new FileOutputStream(&quot;d:/download.properties&quot;); downloadMap.store(fos, &quot;download progress ...&quot;); fos.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; */ &#125; /** * 下载文件 * * @param urlstr */ public void downloadFile(String urlstr) &#123; try &#123; URL url = new URL(urlstr); long fileSize = url.openConnection().getContentLengthLong(); int blockNumber = (int) (fileSize / blockSize); if (fileSize % blockSize != 0) &#123; blockNumber++; &#125; /** * 启动进度保存线程 */ int tmpBlockNumber = blockNumber; Thread progressThread = new Thread() &#123; public void run() &#123; while (downloadedCount &lt; tmpBlockNumber) &#123; FileOutputStream fos = null; try &#123; fos = new FileOutputStream(&quot;G:/YC74/200209_复习1/testbox/download.properties&quot;); downloadMap.store(fos, &quot;download progress ...&quot;); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; if(fos!=null) &#123; try &#123; fos.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; /** *问题： * 1、bug 少了最后一个文件块的进度 * 2、正常下载完成之后，要移除进度信息 * 3、异常情况： * 当异常退出时，下载中的文件，没有保存到数据 */ &#125; &#125;; progressThread.start(); /** * 开启多线程下载 */ for (int i = 0; i &lt; blockNumber; i++) &#123; int index = i; new Thread() &#123; public void run() &#123; downloadBlock(urlstr, index); finish(); &#125; &#125;.start(); // 一定锁定 Download 对象 synchronized (this) &#123; // 运行的线程数加一 runThreadCount += 1; // 判断线程数是否超过设定值 if (runThreadCount &gt;= threadSize) &#123; // 等待 try &#123; this.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; // 如果直接拼接，会有问题 /** * 在此等待，等待所有线程下载完成 wait(); */ synchronized (this) &#123; while (downloadedCount &lt; blockNumber) &#123; try &#123; wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; // 完成文件合并 mergeFile(urlstr); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; /** * 拼接文件 * * @param urlstr */ public void mergeFile(String urlstr) &#123; try &#123; URL url = new URL(urlstr); long fileSize = url.openConnection().getContentLengthLong(); int blockNumber = (int) (fileSize / blockSize); if (fileSize % blockSize != 0) &#123; blockNumber++; &#125; String filename = url.getFile().substring(url.getFile().lastIndexOf(&quot;/&quot;) + 1); FileOutputStream fos = new FileOutputStream(filePath + filename); for (int i = 0; i &lt; blockNumber; i++) &#123; FileInputStream fis = new FileInputStream(filePath + filename + &quot;.&quot; + i); byte[] buffer = new byte[1024]; int count; while ((count = fis.read(buffer)) &gt; -1) &#123; fos.write(buffer, 0, count); &#125; fis.close(); &#125; fos.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; /** * 文件块下载完成 */ public void finish() &#123; synchronized (this) &#123; // 线程数减一 runThreadCount--; downloadedCount++; this.notify(); &#125; &#125; public void showRate() &#123; &#125; public static void main(String[] args) throws IOException &#123; String urlstr = &quot;http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.50/bin/apache-tomcat-8.5.50.zip&quot;; Download d = new Download(); d.downloadFile(urlstr); /** * 作业题： * 1，如何限制下载进程数 * 2，如果在现在完成之后，自动合并，删除临时文件 * 3，实现进度显示：进度条，百分数：10% * 4，实现断点续传，关闭程序后，下次可以继续下载 * 5，列表下载，依次下载多个文件 */ /* * String urlstr = * &quot;http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.50/bin/apache-tomcat-8.5.50.zip&quot;; * * URL url = new URL(urlstr); // 全局资源定位器对象 * * URLConnection conn = url.openConnection(); // 打开连接 返回实际类型是：HttpURLConnection * * // 1\\ MalformedURLException 子异常 2\\IOException 父异常 * * InputStream in = conn.getInputStream(); // 获取输入流 * * // 将下载的资源保存成文件 FileOutputStream fos = new * FileOutputStream(&quot;d:/apache-tomcat-8.5.50.zip&quot;); * * byte[] buffer = new byte[1024]; * * int count; * * while ((count = in.read(buffer)) &gt; -1) &#123; fos.write(buffer, 0, count); &#125; * * fos.close(); * * in.close(); */ &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第100次课程_复习1_多线程下载","slug":"技术向/Java/源辰课程记录/第100次课程_复习1_多线程下载","date":"2020-02-08T16:00:00.000Z","updated":"2022-05-11T01:29:42.158Z","comments":true,"path":"技术向/Java/源辰课程记录/第100次课程_复习1_多线程下载/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC100%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E5%A4%8D%E4%B9%A01_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD/","excerpt":"","text":"源辰76班 第100次课程 2020.02.09 内容 复习1**_**多线程下载 ** ** 【详见：第101次课程】","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第99次课程_Mybatis关联映射","slug":"技术向/Java/源辰课程记录/第99次课程_Mybatis关联映射","date":"2020-01-02T16:00:00.000Z","updated":"2022-05-11T01:29:25.488Z","comments":true,"path":"技术向/Java/源辰课程记录/第99次课程_Mybatis关联映射/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC99%E6%AC%A1%E8%AF%BE%E7%A8%8B_Mybatis%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84/","excerpt":"","text":"源辰76班 第99次课程 2020.01.03 内容 Mybatis关联映射[廖彦] 文件目录结构 逻辑关联 resultType&#x2F;resultMap的区别 resultType是最基本，直接调用基本实体类（容器）来装数据。 resultMap更灵活，如果加入 字段名转变量名&#x2F;一对一&#x2F;一对多 功能，需要自定义（标签：…），然后再通过id再引用这个定义。 12345678910&lt;mapper namespace=&quot;com.yc.mybatis.dao.CinemaMapper&quot;&gt;&lt;resultMap type=&quot;com.yc.mybatis.bean.Cinema&quot; id=&quot;rmCinema&quot;&gt; &lt;!-- 一对多 --&gt; &lt;collection property=&quot;halls&quot; column=&quot;id&quot; select=&quot;com.yc.mybatis.dao.HallMapper.selectByCinemaId&quot;&gt;&lt;/collection&gt;&lt;/resultMap&gt; &lt;select id=&quot;selectById&quot; resultMap=&quot;rmCinema&quot;&gt; select * from cinema where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; 解决数据库字段与bean变量名不一致问题:result ** ** 数据库字段”hall_type” 转换 实体类变量”hallType” 一对一:association 从实体类变量”cinema_id”获取值，通过CinemaMapper.xml中定义的selectById，查询到对象，放入该实体类的变量(bean)”cinema”中。 一对多:collection 从实体类变量”id”获取值，通过HallMapper.xml中定义的selectByCinemaId，查询到多个对象，放入该实体类的变量组(List)”cinema”中。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第98次课程_Mybatis入门","slug":"技术向/Java/源辰课程记录/第98次课程_Mybatis入门","date":"2020-01-01T16:00:00.000Z","updated":"2022-05-11T01:29:11.011Z","comments":true,"path":"技术向/Java/源辰课程记录/第98次课程_Mybatis入门/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC98%E6%AC%A1%E8%AF%BE%E7%A8%8B_Mybatis%E5%85%A5%E9%97%A8/","excerpt":"","text":"源辰76班 第98次课程 2020.01.02 内容 Mybatis入门[廖彦]","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第97次课程_Maven基础","slug":"技术向/Java/源辰课程记录/第97次课程_Maven基础","date":"2019-12-29T16:00:00.000Z","updated":"2022-05-11T01:28:50.182Z","comments":true,"path":"技术向/Java/源辰课程记录/第97次课程_Maven基础/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC97%E6%AC%A1%E8%AF%BE%E7%A8%8B_Maven%E5%9F%BA%E7%A1%80/","excerpt":"","text":"源辰76班 第97次课程 2019.12.30 内容 Maven基础[廖彦] 1.Maven环境 1.Maven下载网址：http://maven.apache.org/ 2.eclipse内配置Maven 3.配置settings.xml文件 本地仓库： 远程仓库（阿里仓库）： 4.创建Maven工程 5.如果使用war，还要配置路径（否则报错） 6.配置pom.xml文件 有关maven所有配置都将在pom中进行，否则无效。 2.依赖（导入Jar包） 1.依赖仓库网址：https://mvnrepository.com/ 2.导入pom.xml 3.Maven基本命令 在cmd中执行： 在eclipse中执行： 创建新命令： 常用命令： maven常用几个命令 （1）mvn help:system：该命令打印出所有的java系统属性和环境变量。 （2）mvn clean：清理输出目录默认target&#x2F;。 （3）mvn clean compline：编译项目主代码，默认编译至target&#x2F;classes目录下。 （4）mvn clean test：maven测试，但实际执行的命令有：clean:clean，resource:resources，compiler:compile, resources:testResources, compiler:testCompile，maven在执行test之前，会先自动执行项目主资源处理，主代码编译，测试资源处理，测试代码编译等工作，测试代码编译通过之后默认在target&#x2F;test-calsses目录下生成二进制文件，紧接着surefile:test 任务运行测试，并输出测试报告，显示一共运行了多少次测试，失败成功等等。 （5）mvn celan package：maven打包，maven会在打包之前默认执行编译，测试等操作，打包成功之后默认输出在target&#x2F;目录中。 （6）mvn clean install：maven安装，让其他的项目直接引用这个项目。 （7）echo %MAVEN_HOME%：查看maven安装路径。 （8）mvn：检查是否安装了maven。 （9）mvn dependency:list：查看当前项目中的已解析依赖 （10）mvn dependency:tree：查看当前项目的依赖树 （11）mvn dependency:analyse： 查看当前项目中使用未声明的依赖和已声明但未使用的依赖","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第96次课程_网络、线程部分作业检查、复习及指导","slug":"技术向/Java/源辰课程记录/第96次课程_网络、线程部分作业检查、复习及指导","date":"2019-12-28T16:00:00.000Z","updated":"2022-05-11T01:28:38.212Z","comments":true,"path":"技术向/Java/源辰课程记录/第96次课程_网络、线程部分作业检查、复习及指导/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC96%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E7%BD%91%E7%BB%9C%E3%80%81%E7%BA%BF%E7%A8%8B%E9%83%A8%E5%88%86%E4%BD%9C%E4%B8%9A%E6%A3%80%E6%9F%A5%E3%80%81%E5%A4%8D%E4%B9%A0%E5%8F%8A%E6%8C%87%E5%AF%BC/","excerpt":"","text":"源辰76班 第96次课程 2019.12.29 内容 网络、线程部分作业检查、复习及指导[廖彦]","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第95次课程_网络线程协议案例","slug":"技术向/Java/源辰课程记录/第95次课程_网络线程协议案例","date":"2019-12-27T16:00:00.000Z","updated":"2022-05-11T01:28:23.546Z","comments":true,"path":"技术向/Java/源辰课程记录/第95次课程_网络线程协议案例/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC95%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E7%BD%91%E7%BB%9C%E7%BA%BF%E7%A8%8B%E5%8D%8F%E8%AE%AE%E6%A1%88%E4%BE%8B/","excerpt":"","text":"源辰76班 第95次课程 2019.12.28 内容 网络线程协议案例[廖彦] 1.Tomcat项目案例 Server.java 说明：服务器启动&#x2F;停止 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.yc.http.v2;import java.io.IOException;import java.net.ServerSocket;import java.net.Socket;public class Server &#123; //默认路径：127.0.0.1/Untitled-1.html public final static String WEBAPPS = &quot;G:/源码库/HTML/多图校园官网&quot;; /** * 启动服务器 * @throws IOException */ public void startup() throws IOException &#123; //启动Socket服务器 ServerSocket server = new ServerSocket(80); System.out.println(&quot;服务器启动成功：80&quot;); Socket socket; //循环接收浏览器请求 while((socket = server.accept()) != null) &#123; final Socket innerSocket = socket; //启动多线程，创建处理器处理客户请求 new Thread() &#123; public void run() &#123; Processor p; try &#123; p = new Processor(innerSocket); p.process(); &#125; catch (IOException e) &#123; // TODO 自动生成的 catch 块 e.printStackTrace(); &#125; &#125; &#125;.start(); &#125; &#125; /** * 停止服务器 */ public void shutdown() &#123; &#125; public static void main(String[] args) throws IOException &#123; new Server().startup();; &#125;&#125; Processor.java 说明：服务器对每一个请求单独创建一个线程处理 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package com.yc.http.v2;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.Socket;import java.util.HashMap;import java.util.Map;public class Processor &#123; private Socket socket; private InputStream in; private OutputStream out; private static Map&lt;String,HttpServlet&gt; servletMap = new HashMap&lt;&gt;(); static &#123; //将Servlet配置到服务器中 servletMap.put(&quot;/hello.do&quot;, new HelloServlet()); &#125; /** * 构造方法 */ public Processor(Socket innerSocket) throws IOException &#123; this.socket = innerSocket; in = socket.getInputStream(); out = socket.getOutputStream(); &#125; /** * 处理方法 */ public void process() throws IOException &#123; //创建请求对象 HttpServletRequest request = new HttpServletRequest(in); //创建响应响应 HttpServletResponse response = new HttpServletResponse(request,out); File file = new File(Server.WEBAPPS + request.getRequestURL()); /** * 1.判断当前的请求地址是否是动态请求 * 判断当前的地址是否在服务器中注册，那么根据地址可以获取到Servlet对象 * 2.如果是，则使用Servlet的方法处理请求，返回结果。 * 3.如果不是则当成静态请求处理 */ HttpServlet servlet = servletMap.get(request.getRequestURL()); if(servlet != null) &#123; //动态请求 servlet.service(request, response); //默认设置响应结果码 if(response.getStatus()==0) &#123; response.setStatus(200, &quot;OK&quot;); &#125; &#125; else &#123; //静态请求 if(file.exists()) &#123; response.setStatus(200, &quot;OK&quot;); &#125; else &#123; response.setStatus(404, &quot;Not Found&quot;); &#125; &#125; response.commit(); socket.close(); &#125;&#125; HttpServletRequest.java 说明：请求，由客户发送给服务器 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697package com.yc.http.v2;import java.io.IOException;import java.io.InputStream;import java.util.HashMap;public class HttpServletRequest &#123; private String method; private String requestURI; private String protocol; private HashMap&lt;String,String&gt; headerMap = new HashMap&lt;&gt;(); private HashMap&lt;String,String[]&gt; paramMap = new HashMap&lt;&gt;(); public HttpServletRequest(InputStream in) throws IOException &#123; byte[] buffer = new byte[1024]; int count = in.read(buffer); if(count&gt;0) &#123; String reqstring = new String(buffer,0,count); //显示请求报文 System.out.println(reqstring); //获取请求报文 String[] lines = reqstring.split(&quot;\\r\\n&quot;); method = lines[0].split(&quot;\\\\s&quot;)[0]; //获取资源路径 requestURI = lines[0].split(&quot;\\\\s&quot;)[1]; /** * 从URL 解析中解析 解析请求参数 ~?a=100&amp;a=200&amp;b=300&amp;c=&amp;d */ if(requestURI.contains(&quot;?&quot;)) &#123; int index = requestURI.indexOf(&quot;?&quot;); String paramStr = requestURI.substring(index+1); String[] params = paramStr.split(&quot;&amp;&quot;); for(String param : params) &#123; String[] nav = param.split(&quot;=&quot;); addParameter(nav[0],nav.length==1 ? &quot;&quot; : nav[1]); &#125; //重设置地址 requestURI = requestURI.substring(0,index); &#125; protocol = lines[0].split(&quot;\\\\s&quot;)[2]; for(int i=1;i&lt;lines.length;i++) &#123; if(lines[i].isEmpty()) &#123; break; &#125; String[] kv = lines[i].split(&quot;:\\\\s&quot;); headerMap.put(kv[0], kv[1]); &#125; /** * 在此处解析 POST 提交的参数 */ System.out.println(headerMap); &#125; &#125; private void addParameter(String name,String value) &#123; String[] values = paramMap.get(name); if(values==null) &#123; paramMap.put(name,new String[] &#123;value&#125;); &#125;else &#123; //数组扩容 String[] newValues = new String[values.length+1]; //源数组 源起始 新数组 新数组起始 拷贝长度 System.arraycopy(values, 0, newValues, 0, values.length); newValues[newValues.length-1] = value; paramMap.put(name, newValues); &#125; &#125; public String getMethod() &#123; return method; &#125; public String getProtocol() &#123; return protocol; &#125; public String getRequestURL() &#123; return requestURI; &#125; public String getHeader(String headerName) &#123; return headerMap.get(headerName); &#125; public String getParameter(String parameter) &#123; String[] values = paramMap.get(parameter); return values == null ? null : values[0]; &#125; public String[] getParameterValues(String parameter) &#123; return paramMap.get(parameter); &#125;&#125; HttpServletResponse.java 说明：响应，由服务器发送给客户浏览器 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798package com.yc.http.v2;import java.io.CharArrayWriter;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.OutputStream;import java.io.PrintWriter;import java.util.HashMap;import java.util.Map.Entry;public class HttpServletResponse &#123; private HashMap&lt;String,String&gt; headerMap = new HashMap&lt;&gt;(); private int status; private String statusMsg; private HttpServletRequest request; private OutputStream out; public HttpServletResponse(HttpServletRequest request, OutputStream out) &#123; this.request = request; this.out = out; &#125; public void setHeader(String key,String value) &#123; headerMap.put(key, value); &#125; public void setStatus(int status,String statusMsg) &#123; this.status = status; this.statusMsg = statusMsg; &#125; //提交，根据请求的页面路径，返回页面的内容 public void commit() throws IOException &#123; //响应头行 out.write((&quot;HTTP/1.1 &quot; + status + &quot; &quot; + statusMsg+&quot;\\n&quot;).getBytes()); String contextType = getContextType(request.getRequestURL()); out.write((&quot;Context-Type: &quot; + contextType + &quot;\\n&quot;).getBytes()); //遍历map集合，将集合中的键值对输出到头域中 for(Entry&lt;String,String&gt; e : headerMap.entrySet()) &#123; out.write((e.getKey() + &quot;: &quot; + e.getValue() + &quot;\\n&quot;).getBytes()); &#125; //空行 分隔 CRLF out.write(&quot;\\n&quot;.getBytes()); File file; if(status == 404) &#123; file = new File(Server.WEBAPPS + &quot;404.html&quot;); &#125; else &#123; //判断 caw 流中是否有数据 String data = caw.toString(); if(data.length()&gt;0) &#123; out.write(data.getBytes()); &#125; else &#123; String filepath = Server.WEBAPPS + request.getRequestURL(); file = new File(filepath); FileInputStream fos = new FileInputStream(file); byte[] buffer = new byte[1024]; int count; while((count = fos.read(buffer)) &gt; 0) &#123; out.write(buffer, 0, count); &#125; fos.close(); &#125; &#125; &#125; private static String getContextType(String srcpath) &#123; int beginIndex = srcpath.lastIndexOf(&quot;.&quot;); String suffix = srcpath.substring(beginIndex); switch(suffix) &#123; case &quot;.css&quot;: return &quot;text/css&quot;; case &quot;.js&quot;: return &quot;application/javascript&quot;; case &quot;.jpg&quot;: return &quot;image/jpeg&quot;; case &quot;.gif&quot;: return &quot;image/gif&quot;; case &quot;.png&quot;: return &quot;image/png&quot;; &#125; return &quot;text/html&quot;; &#125; //临时保存 数据流 private CharArrayWriter caw = new CharArrayWriter(); private PrintWriter pw = new PrintWriter(caw); public PrintWriter getWriter() &#123; return pw; &#125; public int getStatus() &#123; return status; &#125;&#125; HttpServlet.java 说明：定义请求方式的不同动作 123456789101112131415161718192021222324252627282930package com.yc.http.v2;import java.io.IOException;public class HttpServlet &#123; protected void service(HttpServletRequest request, HttpServletResponse response) throws IOException&#123; switch(request.getMethod()) &#123; case &quot;GET&quot;: doGet(request,response); break; case &quot;POST&quot;: doPost(request,response); break; case &quot;PUT&quot;: doPut(request,response); break; case &quot;DELETE&quot;: doDelete(request,response); break; &#125; &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; &#125; protected void doPut(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; &#125; protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; &#125;&#125; HelloServlet.java 说明：servlet样例 12345678910111213141516171819202122232425262728package com.yc.http.v2;import java.io.IOException;import java.io.PrintWriter;/*** 定义Servlet的过程* 1.继承：HttpServlet* 2.重写：doXXX方法* 3.配置：URL(注解，web.xml)*/public class HelloServlet extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; PrintWriter out = response.getWriter(); String name = request.getParameter(&quot;name&quot;); out.print(&quot;hello &quot; + name + &quot;!&quot;); &#125; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; // TODO 自动生成的方法存根 doGet(request, response); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"html文本水平-垂直居中","slug":"技术向/Java/源辰技术储备/html文本水平-垂直居中","date":"2019-12-25T16:00:00.000Z","updated":"2022-05-11T01:54:02.236Z","comments":true,"path":"技术向/Java/源辰技术储备/html文本水平-垂直居中/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/html%E6%96%87%E6%9C%AC%E6%B0%B4%E5%B9%B3-%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/","excerpt":"","text":"html文本水平&#x2F;垂直居中 水平居中 text-align:center; 垂直居中 vertical-align:middle;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第94次课程_网络线程协议案例","slug":"技术向/Java/源辰课程记录/第94次课程_网络线程协议案例","date":"2019-12-25T16:00:00.000Z","updated":"2022-05-11T01:28:06.944Z","comments":true,"path":"技术向/Java/源辰课程记录/第94次课程_网络线程协议案例/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC94%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E7%BD%91%E7%BB%9C%E7%BA%BF%E7%A8%8B%E5%8D%8F%E8%AE%AE%E6%A1%88%E4%BE%8B/","excerpt":"","text":"源辰76班 第94次课程 2019.12.26 内容 网络线程协议案例[廖彦] **1.**Tomcat项目案例 **[详见：第95次课程 网络线程协议案例] **","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"XML_DOM_解析","slug":"技术向/Java/源辰技术储备/XML_DOM_解析","date":"2019-12-21T16:00:00.000Z","updated":"2022-05-11T02:00:06.160Z","comments":true,"path":"技术向/Java/源辰技术储备/XML_DOM_解析/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/XML_DOM_%E8%A7%A3%E6%9E%90/","excerpt":"","text":"XML DOM 解析 样品 12345678&lt;mime-mapping&gt; &lt;extension&gt;htm&lt;/extension&gt; &lt;mime-type&gt;text/html&lt;/mime-type&gt;&lt;/mime-mapping&gt;&lt;mime-mapping&gt; &lt;extension&gt;html&lt;/extension&gt; &lt;mime-type&gt;text/html&lt;/mime-type&gt;&lt;/mime-mapping&gt; 解析 12345678910111213141516 // 创建解析器工厂 DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // 通过解析器工厂创建dom解析器 DocumentBuilder builder = factory.newDocumentBuilder(); // 获取xml文件路径，生成Document对象 Document doc = builder.parse(&quot;src/web.xml&quot;); NodeList node = doc.getElementsByTagName(&quot;mime-mapping&quot;); webXML = new HashMap&lt;String, String&gt;(); for (int i = 0; i &lt; node.getLength(); i++) &#123; Element e = (Element) node.item(i); String webXMLsuffix = e.getElementsByTagName(&quot;extension&quot;).item(0).getFirstChild().getNodeValue(); String webXMLtype = e.getElementsByTagName(&quot;mime-type&quot;).item(0).getFirstChild().getNodeValue(); //System.out.println(&quot;文件后缀：&quot; + webXMLsuffix); //System.out.println(&quot;http格式：&quot; + webXMLtype); webXML.put(webXMLsuffix, webXMLtype); &#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"JSP_页面导入_静态导入与动态导入","slug":"技术向/Java/源辰技术储备/JSP_页面导入_静态导入与动态导入","date":"2019-12-20T16:00:00.000Z","updated":"2022-05-11T01:57:35.243Z","comments":true,"path":"技术向/Java/源辰技术储备/JSP_页面导入_静态导入与动态导入/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/JSP_%E9%A1%B5%E9%9D%A2%E5%AF%BC%E5%85%A5_%E9%9D%99%E6%80%81%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8A%A8%E6%80%81%E5%AF%BC%E5%85%A5/","excerpt":"","text":"JSP 页面导入 静态导入与动态导入 12345671.第一种：jstl import&lt;c:import url=&quot;inlayingJsp.jsp&quot;&gt;&lt;/c:import&gt;2. 第二种：jsp include指令include指令告诉容器：复制被包含文件汇总的所有内容，再把它粘贴到这个文件中。&lt;%@ include file=&quot;inlayingJsp.jsp&quot; %&gt;3. 第三种：jsp include动作&lt;jsp:include page=&quot;inlayingJsp.jsp&quot; flush=&quot;true&quot;/&gt; 12第1种要单独引入jstl使用jstl标签时，一定要在jsp文件头加入以下代码：&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://Java.sun.com/jsp/jstl/core&quot;%&gt; ** ** 静态导入： &lt;%@include%&gt;：页面请求之前预编译，所有代码包含进来之后，一起进行处理，把所有代码合在一起，编译成一个servlet 动态导入：&lt; jsp:include&gt;（尖括号中间没有空格）：所有代码分别处理，在页面被请求的时候才编译，被编译成多个servlet，页面语法相对独立，处理完成之后再将代码的显示结果（处理结果）组合进来。 JSP中的两种包含页面的方法 第一种：include指令：当JSP转换成Servlet时引入指定文件 （静态包含） 第二种：&lt; jsp:include&gt;动作元素：当JSP页面被请求时引入指定文件（动态包含） 总结 对于静态包含，&lt;%@include%&gt;，中包含的文件（无论html文件还是jsp文件），只是简单的嵌入到主文件中，就是在jsp页面转化成Servlet时才嵌入到主文件中，因为运行的结果是只生成了一个Servlet。 而对于动态包含&lt; jsp:incude&gt;，如果被包含文件是动态的（jsp文件），那么就会生成两个Servlet，也就是被包含文件也要经过jsp引擎编译执行生成一个Servlet，两个Servlet通过request和reponse进行通信（包含的jsp是一个完整的文件有html、body等标签）。如果被包含的文件是静态的（html文件），那么这种情况和&lt;%@include&gt;就很相似，只生成了一个Servlet，但是他们之间没有进行简单的嵌入，而依然是通过request和reponse进行的通信","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"页面跳转","slug":"技术向/Java/源辰技术储备/页面跳转","date":"2019-12-20T16:00:00.000Z","updated":"2022-05-11T01:50:53.397Z","comments":true,"path":"技术向/Java/源辰技术储备/页面跳转/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/","excerpt":"","text":"页面跳转 Jsp 和 Java（servlet） request 1request.getRequestDispatcher(&quot;url&quot;).forward(request, response); response 1response.sendRedirect(&quot;url&quot;); javaScript 123456781、在原来的窗体中直接跳转用&lt;script type=&quot;text/javascript&quot;&gt; window.location.href=&quot;你所要跳转的页面&quot;;&lt;/script&gt;2、在新窗体中打开页面用：&lt;script type=&quot;text/javascript&quot;&gt; window.open(&#x27;你所要跳转的页面&#x27;);&lt;/script&gt; 解决window.location.href不跳转，无反应，不执行的问题 https://blog.csdn.net/q1054261752/article/details/70256610","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第93次课程_HTTP协议","slug":"技术向/Java/源辰课程记录/第93次课程_HTTP协议","date":"2019-12-20T16:00:00.000Z","updated":"2022-05-11T01:27:54.506Z","comments":true,"path":"技术向/Java/源辰课程记录/第93次课程_HTTP协议/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC93%E6%AC%A1%E8%AF%BE%E7%A8%8B_HTTP%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"源辰76班 第93次课程 2019.12.21 内容 HTTP协议[廖彦] 1.[案例]精简版Tomcat 请求：客户端 -&gt; 服务器 响应：服务器 -&gt; 客户端 [重点]报文格式 server.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102package com.yc.http;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.ServerSocket;import java.net.Socket;public class Server &#123; //默认路径：127.0.0.1/Untitled-1.html public final static String WEBAPPS = &quot;G:/源码库/HTML/多图校园官网&quot;; public static void main(String[] args) throws IOException &#123; ServerSocket server = new ServerSocket(80); System.out.println(&quot;服务器启动成功：80&quot;); Socket socket; while((socket= server.accept())!=null) &#123; InputStream in = socket.getInputStream(); OutputStream out = socket.getOutputStream(); byte[] buffer = new byte[1024]; int count = in.read(buffer); //显示请求报文 System.out.println(new String(buffer,0,count)); if(count &gt; 0) &#123; //获取请求报文 String reqstring = new String(buffer,0,count); String[] lines = reqstring.split(&quot;\\r\\n&quot;); //获取资源路径 String srcpath = lines[0].split(&quot;\\\\s&quot;)[1]; //响应头行 out.write(&quot;HTTP/1.1 200 OK\\n&quot;.getBytes()); //响应头域 String contextType = getContextType(srcpath); out.write((&quot;Context-Type: &quot; + contextType + &quot;\\n&quot;).getBytes()); //空行 分隔 CRLF out.write(&quot;\\n&quot;.getBytes()); String filepath = WEBAPPS + srcpath; //读取本地文件 File file = new File(filepath); if(file.exists()==false) &#123; file = new File(WEBAPPS + &quot;&quot;); &#125; InputStream inFile = new FileInputStream(file); byte[] bufferFile = new byte[1024]; int countFile = -1; //响应实体 while((countFile = inFile.read(bufferFile)) != -1) &#123; out.write(bufferFile,0,countFile); &#125; inFile.close(); &#125; //正常响应必须关闭socket socket.close(); &#125; /** * 请求报文 * 请求头行： GET /index.jsp?a=100&amp;b=200&amp;c=%E5%AE%9E%E4%BD%93 HTTP/1.1 * 头行分成3段 方法名 空格 服务器资源的地址 空格 协议版本 * 头域： 每行一个键值对，以冒号分隔 作用：设置一些请求信息的相关属性 * CRLF：空行 作用：分割头域和实体 * 实体：post 有实体内容 GET请求无实体 * * * 响应报文 * 响应头行： HTTP/1.1 200 OK * 头行分成3段 协议版本 空格 响应码 空格 响应码描述 * 头域： 每行一个键值对，以冒号分隔 作用：设置一些请求信息的相关属性 * CRLF：空行 作用：分割头域和实体 * 实体：一般都有实体，3xx响应码没有实体 post 有实体内容 GET请求无实体 * * 响应码： * 1xxx 接受请求，继续处理 * 2xxx 正常结果 * 3xxx 响应重定向 * 4xxx 客户端错误 * 5xxx 服务器错误 * */ &#125; private static String getContextType(String srcpath) &#123; int beginIndex = srcpath.lastIndexOf(&quot;.&quot;); String suffix = srcpath.substring(beginIndex); switch(suffix) &#123; case &quot;.css&quot;: return &quot;text/css&quot;; case &quot;.js&quot;: return &quot;application/javascript&quot;; case &quot;.jpg&quot;: return &quot;image/jpeg&quot;; case &quot;.gif&quot;: return &quot;image/gif&quot;; case &quot;.png&quot;: return &quot;image/png&quot;; &#125; return &quot;text/html&quot;; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第92次课程_网络线程案例_ATM系统模拟","slug":"技术向/Java/源辰课程记录/第92次课程_网络线程案例_ATM系统模拟","date":"2019-12-18T16:00:00.000Z","updated":"2022-05-11T01:27:42.182Z","comments":true,"path":"技术向/Java/源辰课程记录/第92次课程_网络线程案例_ATM系统模拟/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC92%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E7%BD%91%E7%BB%9C%E7%BA%BF%E7%A8%8B%E6%A1%88%E4%BE%8B_ATM%E7%B3%BB%E7%BB%9F%E6%A8%A1%E6%8B%9F/","excerpt":"","text":"源辰76班 第92次课程 2019.12.19 内容 网络线程案例_ATM系统模拟[廖彦] 1.项目案例 ATM.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164package com.yc.net.atm;import java.io.DataInputStream;import java.io.DataOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.ObjectInputStream;import java.io.OutputStream;import java.net.Socket;import java.net.UnknownHostException;import java.util.List;import java.util.Scanner;/**** 银行柜员机类**/public class ATM &#123; private Scanner sc = new Scanner(System.in); private Socket server; private DataOutputStream dos; private DataInputStream dis; // 记录当前登录的用户卡号 private String card; public static void main(String[] args) throws UnknownHostException, IOException, ClassNotFoundException &#123; new ATM().start(); &#125; public void start() throws UnknownHostException, IOException, ClassNotFoundException &#123; System.out.println(&quot;开始连接银行服务器！&quot;); server = new Socket(&quot;127.0.0.1&quot;, 8888); System.out.println(&quot;银行服务器连接成功！&quot;); InputStream in = server.getInputStream(); OutputStream out = server.getOutputStream(); dis = new DataInputStream(in); dos = new DataOutputStream(out); System.out.println(&quot;银行服务器准备就绪！&quot;); int op = 0; boolean ok = false; while (ok == false) &#123; System.out.println(&quot;******************************&quot;); System.out.println(&quot;* 我的银行 *&quot;); System.out.println(&quot;******************************&quot;); System.out.println(&quot;* 1、登录 *&quot;); System.out.println(&quot;* 2、开户 *&quot;); System.out.println(&quot;******************************&quot;); System.out.print(&quot;请输入你要办理的业务编号：&quot;); op = sc.nextInt(); switch (op) &#123; case 1: if ((ok = login()) == false) &#123; System.out.println(&quot;密码错误！&quot;); &#125; break; case 2: register(); break; &#125; &#125; while (true) &#123; System.out.println(&quot;\\n&quot;); System.out.println(&quot;******************************&quot;); System.out.println(&quot;* 我的银行 *&quot;); System.out.println(&quot;******************************&quot;); System.out.println(&quot;* 1、查看余额 *&quot;); System.out.println(&quot;* 2、存 款 *&quot;); System.out.println(&quot;* 3、取 款 *&quot;); System.out.println(&quot;* 4、转 账 *&quot;); System.out.println(&quot;* 5、查询明细 *&quot;); System.out.println(&quot;* 0、退 出 *&quot;); System.out.println(&quot;******************************&quot;); System.out.print(&quot;请输入你要办理的业务编号：&quot;); op = sc.nextInt(); switch (op) &#123; case 0: System.exit(0); case 1: balance(); break; case 2: deposit(); break; case 3: withdraw(); break; case 4: transfer(); break; case 5: details(); break; default: System.out.println(&quot;输入错误，请求重新输入！&quot;); &#125; &#125; &#125; /** * 注册 */ private void register() &#123; // TODO Auto-generated method stub &#125; /** * 余额 */ private void balance() &#123; // TODO Auto-generated method stub &#125; /** * 转账 */ private void transfer() &#123; // TODO Auto-generated method stub &#125; /** * 存款 * @throws IOException */ private void deposit() throws IOException &#123; System.out.print(&quot;请放入现金：&quot;); int money = sc.nextInt(); dos.writeUTF(&quot;deposit&quot;); dos.writeUTF(card); dos.writeInt(money); String result = dis.readUTF(); System.out.println(result); &#125; /** * 取款 */ private void withdraw() &#123; // TODO Auto-generated method stub &#125; /** * 查询明细 * @throws IOException * @throws ClassNotFoundException */ private void details() throws IOException, ClassNotFoundException &#123; dos.writeUTF(&quot;details&quot;); dos.writeUTF(card); ObjectInputStream oos = new ObjectInputStream(dis); @SuppressWarnings(&quot;unchecked&quot;) List&lt;OpRecord&gt; ret = (List&lt;OpRecord&gt;)oos.readObject(); for(OpRecord o : ret)&#123; System.out.println(o); &#125; &#125; private boolean login() throws IOException &#123; System.out.print(&quot;请输入卡号：&quot;); String card = sc.next(); System.out.print(&quot;请输入密码：&quot;); String pwd = sc.next(); dos.writeUTF(&quot;login&quot;); dos.writeUTF(card); dos.writeUTF(pwd); dos.flush(); String result = dis.readUTF(); System.out.println(result); boolean ret = &quot;登录成功！&quot;.equals(result); if(ret == true)&#123; this.card = card; &#125; return ret; &#125;&#125; Bank.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899package com.yc.net.atm;import java.io.DataInputStream;import java.io.IOException;import java.io.InputStream;import java.io.ObjectOutputStream;import java.io.DataOutputStream;import java.io.OutputStream;import java.net.ServerSocket;import java.net.Socket;import java.sql.Timestamp;import java.util.ArrayList;import java.util.List;/*** 银行类*/public class Bank &#123; private ServerSocket server; &#123; try &#123; server = new ServerSocket(8888); &#125; catch (IOException e) &#123; throw new RuntimeException(e); &#125; &#125; public static void main(String[] args) throws IOException &#123; Bank bank = new Bank(); bank.begin(); &#125; private void begin() throws IOException &#123; // 建立服务器，等待客户端连接 System.out.println(&quot;银行服务器启动完成！&quot;); Socket client = server.accept(); System.out.println(&quot;客户端连接成功！&quot;); // 当客户端连接成功之后，fwq进入就绪状态 InputStream in = client.getInputStream(); OutputStream out = client.getOutputStream(); DataInputStream dis = new DataInputStream(in); DataOutputStream dos = new DataOutputStream(out); System.out.println(&quot;客户端就绪！&quot;); while (true) &#123; String cmd = dis.readUTF(); String card; // 当客户端发送命令过来，解析命令 switch (cmd) &#123; case &quot;login&quot;: card = dis.readUTF(); String pwd = dis.readUTF(); System.out.println(&quot;登录判断&quot;); if (login(card, pwd)) &#123; dos.writeUTF(&quot;登录成功！&quot;); &#125; else &#123; dos.writeUTF(&quot;登录失败！&quot;); &#125; break; case &quot;register&quot;: break; case &quot;deposit&quot;: card = dis.readUTF(); int money = dis.readInt(); if(deposit(card,money))&#123; dos.writeUTF(&quot;存款成功！&quot;); &#125; else &#123; dos.writeUTF(&quot;存款失败！&quot;); &#125; break; case &quot;details&quot;: card = dis.readUTF(); List&lt;OpRecord&gt; ret = details(card); ObjectOutputStream oos = new ObjectOutputStream(out); oos.writeObject(ret); oos.flush(); break; default: // 错误的命令 &#125; &#125; // 执行对应的操作，并返回结果 &#125; private List&lt;OpRecord&gt; details(String card) &#123; // TODO Auto-generated method stub List&lt;OpRecord&gt; ret = new ArrayList&lt;&gt;(); ret.add(new OpRecord(1,&quot;123456&quot;,1000,0,new Timestamp(System.currentTimeMillis()))); ret.add(new OpRecord(2,&quot;123456&quot;,-2000,0,new Timestamp(System.currentTimeMillis()))); ret.add(new OpRecord(3,&quot;123456&quot;,8888,0,new Timestamp(System.currentTimeMillis()))); ret.add(new OpRecord(4,&quot;123456&quot;,-6666,7,new Timestamp(System.currentTimeMillis()))); return ret; &#125; private boolean deposit(String card, int money) &#123; // TODO Auto-generated method stub return true; &#125; private boolean login(String card, String pwd) &#123; if (&quot;123456&quot;.equals(card) &amp;&amp; &quot;123&quot;.equals(pwd)) &#123; return true; &#125; else &#123; return false; &#125; &#125;&#125; OpRecord.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.yc.net.atm;import java.sql.Timestamp;public class OpRecord implements java.io.Serializable&#123; private int id; private String accountid; private double opmoney; private double charge; private Timestamp optime; /** * JavaBean 规范 * 1、所有的属性都是私有 * 2、所有的属性都提供 getter 和 setter 方法 * 3、必须提供无参数的构造方法 * .... */ public OpRecord()&#123;&#125; public OpRecord(int id, String accountid, double opmoney, double charge, Timestamp optime) &#123; super(); this.id = id; this.accountid = accountid; this.opmoney = opmoney; this.charge = charge; this.optime = optime; &#125; @Override public String toString() &#123; return &quot;OpRecord [id=&quot; + id + &quot;, accountid=&quot; + accountid + &quot;, opmoney=&quot; + opmoney + &quot;, charge=&quot; + charge + &quot;, optime=&quot; + optime + &quot;]&quot;; &#125; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getAccountid() &#123; return accountid; &#125; public void setAccountid(String accountid) &#123; this.accountid = accountid; &#125; public double getOpmoney() &#123; return opmoney; &#125; public void setOpmoney(double opmoney) &#123; this.opmoney = opmoney; &#125; public double getCharge() &#123; return charge; &#125; public void setCharge(double charge) &#123; this.charge = charge; &#125; public Timestamp getOptime() &#123; return optime; &#125; public void setOptime(Timestamp optime) &#123; this.optime = optime; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第91次课程_网络","slug":"技术向/Java/源辰课程记录/第91次课程_网络","date":"2019-12-16T16:00:00.000Z","updated":"2022-05-11T01:27:30.077Z","comments":true,"path":"技术向/Java/源辰课程记录/第91次课程_网络/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC91%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E7%BD%91%E7%BB%9C/","excerpt":"","text":"源辰76班 第91次课程 2019.12.17 内容 网络[廖彦] 1.notify()和wait() notify() 向自身以外的一个线程发送通知 wait() 进入等待状态，等待其他线程的通知，接到通知才能解除等待 Company.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.yc.thread;import java.util.*;public class Company &#123; private List&lt;Object&gt; list = new ArrayList&lt;Object&gt;(); public static void main(String[] args) &#123; Company c = new Company(); c.product(); c.comsume(); &#125; public void product() &#123; new Thread(&quot;生产者&quot;) &#123; public void run() &#123; try &#123; while(true) &#123; synchronized(list) &#123; for(int i=0;i&lt;10;i++) &#123; System.out.println(Thread.currentThread().getName()+&quot;：生产了一个产品&quot;); Thread.sleep(200); list.add(new Object()); &#125; //通知消费者线程 list.notify(); //等待消费者线程通知 list.wait(); &#125; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;.start(); &#125; public void comsume() &#123; new Thread(&quot;消费者&quot;) &#123; public void run() &#123; try &#123; while(true) &#123; synchronized (list) &#123; while(list.size()&gt;0) &#123; System.out.println(Thread.currentThread().getName()+&quot;：消费了一个产品&quot;); Thread.sleep(100); list.remove(0); &#125; //通知生产者线程 list.notify(); //等待消费者线程通知 list.wait(); &#125; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;.start(); &#125;&#125; 2.网络编程 URL类的应用 Demo1.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344package com.yc.net;import java.io.IOException;import java.io.InputStream;import java.net.URL;import java.net.URLConnection;public class Demo1 &#123; /** * 网络编程 * ISO * * TCP/IP * * IP 是计算机在网络中的数字地址 * 端口：0~65535 1024以下的端口是预留给系统的 */ /** * URL 类：用于访问网络上的资源 * Socket 类：用于两个计算机之间的通信 */ public static void main(String[] args) throws IOException &#123; //URL 全局资源定位器 URL url = new URL(&quot;http://www.hyycinfo.com/index.html&quot;); URLConnection conn = url.openConnection(); System.out.println(conn); /* conn.getContentType();//网络资源类型 conn.getLastModified(); //最后修改时间 conn.getContentLength();//获取大小 */ InputStream in = conn.getInputStream(); byte[] buffer = new byte[1024]; int count; while((count = in.read(buffer)) &gt; 0) &#123; //0 -&gt; count :为了防止最后一次读取时，误读到垃圾数据 String s = new String(buffer,0,count); System.out.println(s); &#125; &#125;&#125; 3.[案例]即时聊天室 Socket类的应用 Client.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package com.yc.net;import java.io.*;import java.net.InetAddress;import java.net.Socket;import java.util.Arrays;import java.util.Scanner;public class Client &#123; public static void main(String[] args) throws IOException &#123; Socket socket = new Socket(&quot;127.0.0.1&quot;,8888); //获取客户端地址对象 InetAddress addr = socket.getInetAddress(); System.out.println(addr.getHostName()); System.out.println(Arrays.toString(addr.getAddress())); InputStream in = socket.getInputStream(); OutputStream out = socket.getOutputStream(); Scanner sc = new Scanner(System.in); //读线程 new Thread() &#123; public void run() &#123; while (true) &#123; try &#123; byte[] buffer = new byte[1024]; int count; count = in.read(buffer); String s = new String(buffer, 0, count); System.out.println(s); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;.start(); //写线程 new Thread() &#123; public void run() &#123; while (true) &#123; try &#123; out.write(sc.nextLine().getBytes()); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;.start(); &#125;&#125; Server.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package com.yc.net;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.InetAddress;import java.net.ServerSocket;import java.net.Socket;import java.util.Arrays;import java.util.Scanner;public class Server &#123; public static void main(String[] args) throws IOException &#123; // 创建Socket服务端 ServerSocket server = new ServerSocket(8888); System.out.println(&quot;服务器启动成功，等待客户端连接：8888&quot;); // server等待客户端连接，进入阻塞状态 Socket socket = server.accept(); // 获取客户端地址对象 InetAddress addr = socket.getInetAddress(); System.out.println(addr.getHostName()); System.out.println(Arrays.toString(addr.getAddress())); InputStream in = socket.getInputStream(); OutputStream out = socket.getOutputStream(); Scanner sc = new Scanner(System.in); out.write(&quot;欢迎来到Hooy聊天室&quot;.getBytes()); new Thread() &#123; public void run() &#123; while (true) &#123; try &#123; byte[] buffer = new byte[1024]; int count; count = in.read(buffer); String s = new String(buffer, 0, count); System.out.println(s); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;.start(); new Thread() &#123; public void run() &#123; while (true) &#123; try &#123; out.write(sc.nextLine().getBytes()); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;.start(); /* * 存在问题 已作废 byte[] buffer = new byte[1024]; int count = in.read(buffer); String * s = new String(buffer, 0, count); System.out.println(s); */ &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"MD5_生成方法","slug":"技术向/Java/源辰技术储备/MD5_生成方法","date":"2019-12-14T16:00:00.000Z","updated":"2022-05-11T01:58:18.869Z","comments":true,"path":"技术向/Java/源辰技术储备/MD5_生成方法/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/MD5_%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/","excerpt":"","text":"MD5 生成方法 12345678910111213141516171819public class HooyUtil &#123; //盐，用于混交md5 private static final String slat = &quot;#ysw#fsb&amp;lym&amp;hooy*2019&quot;; public static String getMD5(String dataStr) &#123; try &#123; dataStr += slat; MessageDigest m = MessageDigest.getInstance(&quot;MD5&quot;); m.update(dataStr.getBytes(&quot;UTF8&quot;)); byte s[] = m.digest(); String result = &quot;&quot;; for (int i = 0; i &lt; s.length; i++) &#123; result += Integer.toHexString((0x000000FF &amp; s[i]) | 0xFFFFFF00).substring(6); &#125; return result; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return &quot;&quot;;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第90次课程_线程","slug":"技术向/Java/源辰课程记录/第90次课程_线程","date":"2019-12-09T16:00:00.000Z","updated":"2022-05-11T01:27:16.632Z","comments":true,"path":"技术向/Java/源辰课程记录/第90次课程_线程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC90%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E7%BA%BF%E7%A8%8B/","excerpt":"","text":"源辰76班 第90次课程 2019.12.10 内容 线程[廖彦] 1.创建线程的方式 1.继承Thread类 2.实现Runnable接口 Demo.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172package com.yc.thread;public class Demo &#123; public static void main(String[] args) &#123; /** * 线程创建方式： * 1.继承Thread类 * 2.实现Runnable接口 */ Thread t1 = new MyThread1(); //优先级 10最高 0最低 t1.setPriority(10); t1.start(); Runnable r1 = new MyRunnable2(); Thread t2 = new Thread(r1); t2.setPriority(10); t2.start(); &#125; public void demo() throws InterruptedException &#123; Thread t = Thread.currentThread(); //返回当前线程 //实例方法 t.getId(); //唯一标识 t.getName(); //名称 t.getPriority(); //优先级 t.getState(); //状态 t.getThreadGroup(); //线程组 t.isAlive(); //判断线程是否处于活动状态 t.isDaemon(); //判断线程是否是精灵线程 t.isInterrupted(); //判断线程是否处于中断状态 //静态方法 Thread.currentThread(); //返回当前线程对象 Thread.sleep(2000); //线程休眠 Thread.yield(); //让渡/屈服 t.join(); //加入 t.run(); //逻辑代码 t.start(); //启动线程 &#125; &#125;class MyThread1 extends Thread &#123; @Override public void run() &#123; for(int i=0;i&lt;100;i++) &#123; System.out.println(&quot;听歌&quot; + i); /*try &#123; Thread.sleep(20); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125;*/ &#125; &#125; &#125;class MyRunnable2 implements Runnable&#123; @Override public void run() &#123; for(int i=0;i&lt;100;i++) &#123; System.out.println(&quot;玩游戏&quot; + i); /*try &#123; Thread.sleep(20); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125;*/ &#125; &#125; &#125; **2.**匿名类创建线程&#x2F;join()方法阻塞线程 Demo1.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.yc.thread;public class Demo1 &#123; public static void main(String[] args) &#123; /*使用匿名类创建线程*/ Thread t1 = new Thread(&quot;看书&quot;) &#123; @Override public void run() &#123; for(int i=0;i&lt;100;i++) &#123; System.out.println(Thread.currentThread().getName() + i); try &#123; Thread.sleep(20); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;; Thread t2 = new Thread(&quot;听歌&quot;) &#123; @Override public void run() &#123; for(int i=0;i&lt;100;i++) &#123; if(i==50) &#123; try &#123; //t2线程阻塞，持续到t1线程结束 t1.join(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; System.out.println(Thread.currentThread().getName() + i); try &#123; Thread.sleep(20); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;; t1.start(); t2.start(); &#125;&#125; 3.线程分类 1.父线程：默认情况下，父线程会等到所有子线程执行完才结束，尽管主线程代码已经执行完，主线程仍会等待。 2.子线程 2.精灵线程&#x2F;守护线程：当父线程执行完毕时，无论精灵线程&#x2F;守护线程是否执行完毕，都将其直接结束（咔嚓）。 Demo2.java 1234567891011121314151617181920212223242526272829303132333435363738394041package com.yc.thread;public class Demo2 &#123; /* * 线程分类： * 1.父线程 默认情况下，父线程会等到所有子线程执行完才结束，尽管主线程代码已经执行完，主线程仍会等待 * 2.子线程 * 2.精灵线程/守护线程 setDaemon(true)必须在启动前设置好 */ public static void main(String[] args) &#123; //main方法本身就是一个线程，为父线程 //在此方法之下创建的线程，为子线程 Thread t1 = new Thread(&quot;精灵线程/守护线程&quot;) &#123; @Override public void run() &#123; for(int i=0;i&lt;100;i++) &#123; System.out.println(Thread.currentThread().getName() + i); try &#123; Thread.sleep(50); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;; //设置为守护线程 true t1.setDaemon(true); t1.start(); for(int i=0;i&lt;100;i++) &#123; System.out.println(Thread.currentThread().getName() + i); try &#123; Thread.sleep(20); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; System.out.println(&quot;主程序的代码已经执行完毕&quot;); &#125;&#125; **4.资源竞争问题&#x2F;**synchronized同步关键字 synchronized 加入关键字后，逻辑代码每次仅允许一个线程执行。解决了资源竞争问题。 加在方法上 123public synchronized Object functionName() &#123; //more code ...&#125; 加在代码块上 123synchronized (this) &#123; //more code ...&#125; Demo3.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package com.yc.thread;import java.util.ArrayList;public class Demo3 &#123; ArrayList&lt;Object&gt; list = new ArrayList&lt;Object&gt;(); public Demo3() &#123; for(int i=0;i&lt;100;i++) &#123; list.add(i); &#125; &#125; /** * synchronized 同步关键字 * 1.加在方法之上 * 实例方法加synchronized 会锁定 当前对象(this) * 静态方法加synchronized 会锁定 当前类(class) * 2.加在代码块上 */ //public synchronized Object synchronizedgetObj() throws InterruptedException &#123; public Object getObj() throws InterruptedException &#123; //(对象名) 填写被竞争资源名或包含其的父类名 //synchronized (list) synchronized (this) &#123; //资源竞争 if(list.size()&gt;0) &#123; Thread.sleep(10); return list.remove(0); &#125; &#125; return null; &#125; public static void main(String[] args) &#123; Demo3 demo3 = new Demo3(); MyThread t1 = new MyThread(demo3); MyThread t2 = new MyThread(demo3); MyThread t3 = new MyThread(demo3); MyThread t4 = new MyThread(demo3); t1.start(); t2.start(); t3.start(); t4.start(); &#125;&#125;class MyThread extends Thread&#123; private Demo3 demo3; public MyThread(Demo3 demo3) &#123; this.demo3 = demo3; &#125; public void run() &#123; Object obj; try &#123; while((obj=demo3.getObj())!=null) &#123; System.out.println(Thread.currentThread().getName()+&quot;获取了元素：&quot;+obj); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"常用Linux命令","slug":"技术向/Java/源辰技术储备/常用Linux命令","date":"2019-12-07T16:00:00.000Z","updated":"2022-05-11T01:45:13.503Z","comments":true,"path":"技术向/Java/源辰技术储备/常用Linux命令/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4/","excerpt":"","text":"常用Linux命令 1.创建新目录（文件夹） mkdir |文件名| 2.打开目录 cd |目录名| 3.修改文件 vim |文件名| i（修改模式） esc :wq （保存） 4.解压tar.gz压缩文件 tar -zxvf |文件名|.tar.gz 5.查看当前目录下文件 简要：ls 详细：ll","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第89次课程_云技术","slug":"技术向/Java/源辰课程记录/第89次课程_云技术","date":"2019-12-07T16:00:00.000Z","updated":"2022-05-11T01:27:03.752Z","comments":true,"path":"技术向/Java/源辰课程记录/第89次课程_云技术/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC89%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E4%BA%91%E6%8A%80%E6%9C%AF/","excerpt":"","text":"源辰76班 第89次课程 2019.12.08 内容 云技术[廖彦] 云端部署 构建云端环境：MySQL、Tomcat 部署步骤 1.部署MySQL 上一页笔记 2.部署Tomcat 下载Tomcat压缩包至本地（下载地址：https://tomcat.apache.org/download-90.cgi）。 通过winSCP将Tomcat压缩包上传至服务器soft目录下（在root路径下创建新目录soft（Linux命令：mkdir soft））。 通过Xshell进入soft目录，使用Linux命令：tar -zxvf apache-tomcat-9.0.29.tar.gz。执行解压。 3.将项目打包成wer文件。生成文件EBN.war 4.通过winSCP将EBN.war上传至apache-tomcat-9.0.29&#x2F;webapps目录下。 5.启动Tomcat服务器。apache-tomcat-9.0.29&#x2F;bin 目录下 执行 Linux命令： .&#x2F;startup.sh &#x2F;&#x2F; 启动tomcat服务 .&#x2F;shutdown.sh &#x2F;&#x2F; 停止tomcat服务 监控Tomcat运行状态 新建Xshell端作为Tomcat监控视窗。 apache-tomcat-9.0.29&#x2F;logs 目录下 tail -f n200 catalina.2019-12-08.log &#x2F;&#x2F; 监控日志 参数说明：n200：最大显示记录行数 日期：选择当前日期 温馨提示： 1.阿里云服务器应开启3306（MySQL数据库端口号）和8080（Tomcat服务器端口号）。 2.导出项目之前，应将配置适配云端服务器。 3.在服务器上创建与开发环境相同的数据库镜像。 4.访问路径：公网IP:8080&#x2F;工程名&#x2F;页面路径","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"A1-章节刷题散装知识点","slug":"技术向/Java/源辰技术储备/A1-章节刷题散装知识点","date":"2019-12-06T16:00:00.000Z","updated":"2022-05-11T01:52:35.888Z","comments":true,"path":"技术向/Java/源辰技术储备/A1-章节刷题散装知识点/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/A1-%E7%AB%A0%E8%8A%82%E5%88%B7%E9%A2%98%E6%95%A3%E8%A3%85%E7%9F%A5%E8%AF%86%E7%82%B9/","excerpt":"","text":"章节刷题散装知识点 J2EE中，HttpServletRequest类的（ ）方法用于返回与当前请求相关联的会话，如果没有，则返回NULL。 123形参：(ServletRequest request, ServletResponse response, FilterChain chain)HttpServletRequest httpRequest = (HttpServletRequest) request;HttpSession session = httpRequest.getSession(); 如何将后端返回的数据以json格式传到前端 后端代码： 12345Gson gson = new Gson();String json = gson.toJson(&lt;List&lt;实体类对象&gt;&gt;);// 返回json格式数据response.setContentType(&quot;application/json;charset=UTF-8&quot;);response.getWriter().append(json); 在J2EE实现企业级应用开发中，（ ）动作允许JSP进行页面跳转。 jsp:forward Servlet生命周期由一系列事件组成，把这些事件按照先后顺序排列，以下正确的是（ ）。 加载类，实例化，初始化，请求处理，销毁","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"setAttribute","slug":"技术向/Java/源辰技术储备/setAttribute","date":"2019-12-06T16:00:00.000Z","updated":"2022-05-11T01:58:34.870Z","comments":true,"path":"技术向/Java/源辰技术储备/setAttribute/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/setAttribute/","excerpt":"","text":"setAttribute pageContext.setAttribute( “key” , value ) pageContext.getAttribute( “key” ) 本页面有效 request.setAttribute( “key” , value ) request.getAttribute( “key” ) 仅消息传递时有效 session.setAttribute( “key” , value ) session.getAttribute( “key” ) 用户在服务器中专属数据空间 application.setAttribute( “key” , value ) application.getAttribute( “key” ) 全局唯一","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"防范html注入，通过js代码对输入的字符串过滤","slug":"技术向/Java/源辰技术储备/防范html注入，通过js代码对输入的字符串过滤","date":"2019-12-06T16:00:00.000Z","updated":"2022-05-11T01:46:46.117Z","comments":true,"path":"技术向/Java/源辰技术储备/防范html注入，通过js代码对输入的字符串过滤/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E9%98%B2%E8%8C%83html%E6%B3%A8%E5%85%A5%EF%BC%8C%E9%80%9A%E8%BF%87js%E4%BB%A3%E7%A0%81%E5%AF%B9%E8%BE%93%E5%85%A5%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%87%E6%BB%A4/","excerpt":"","text":"防范html注入，通过js代码对输入的字符串过滤 12345678function forma(s)&#123; var pattern = new RegExp(&quot;[`~!@#$^&amp;*()=|&#123;&#125;&#x27;:;&#x27;,\\\\[\\\\].&lt;&gt;/?~！@#￥……&amp;*（）——|&#123;&#125;【】‘；：”“&#x27;。，、？]&quot;) var rs = &quot;&quot;; for (var i = 0; i &lt; s.length; i++) &#123; rs = rs+s.substr(i, 1).replace(pattern, &#x27;&#x27;); &#125; return rs;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第88次课程_Linux基础","slug":"技术向/Java/源辰课程记录/第88次课程_Linux基础","date":"2019-12-06T16:00:00.000Z","updated":"2022-05-11T01:26:51.520Z","comments":true,"path":"技术向/Java/源辰课程记录/第88次课程_Linux基础/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC88%E6%AC%A1%E8%AF%BE%E7%A8%8B_Linux%E5%9F%BA%E7%A1%80/","excerpt":"","text":"源辰76班 第88次课程 2019.12.07 内容 Linux基础[廖彦] 1.阿里云服务器 廖老师的案例站 http://47.106.66.89:1112/ 新手阿里云服务器操作指南（图文教程） https://blog.csdn.net/u011002997/article/details/83933365 CentOS 7 常用命令大全 https://blog.csdn.net/qq_40087415&#x2F;article&#x2F;details&#x2F;79367151 CentOS 7 yum 安装与配置 JDK [不用配置环境变量] https://blog.csdn.net/github_38336924&#x2F;article&#x2F;details&#x2F;82221258 CentOS 7 安装mysql（YUM源方式） https://www.cnblogs.com/zhaochenguang/p/11465650.html MySQL设置简单密码 https://www.cnblogs.com/zgxblog/p/10708182.html 注意远程连接数据库时：1.创建远程连接登录用户 2.阿里云服务器上开放3306端口（包含入口和出口）","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"DBHelper","slug":"技术向/Java/源辰技术储备/DBHelper","date":"2019-12-04T16:00:00.000Z","updated":"2022-05-11T01:53:22.008Z","comments":true,"path":"技术向/Java/源辰技术储备/DBHelper/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/DBHelper/","excerpt":"","text":"DBHelper.java v1.0 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204package tandard.util.dbhelper;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.SQLException;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import javax.naming.Context;import javax.naming.InitialContext;import javax.sql.DataSource;import org.apache.commons.beanutils.BeanUtils;public class DBHelper &#123; /* * 通过连接池方式获取数据库连接 */ public static Connection getConnection() &#123; try &#123; //创建JNDI上下文对象 Context ctx = new InitialContext(); DataSource ds = (DataSource) ctx.lookup(&quot;java:comp/env/mysql/&lt;数据库名&gt;&quot;); return ds.getConnection(); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; /* * 更新数据库中的数据 */ public static int update(String sql, Object... param) &#123; Connection conn = null; try &#123; conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql); System.out.println(sql); for (int i = 1; i &lt;= param.length; i++) &#123; ps.setObject(i, param[i - 1]); &#125; return ps.executeUpdate(); &#125; catch (SQLException e) &#123; throw new RuntimeException(&quot;更新数据失败&quot;, e); &#125; finally &#123; try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; /* * 查询所需要的数据 返回对象打包成List */ public static List&lt;Map&lt;String, Object&gt;&gt; selectList(String sql, Object... param) &#123; Connection conn = null; try &#123; conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql); System.out.println(sql); for (int i = 1; i &lt;= param.length; i++) &#123; ps.setObject(i, param[i - 1]); &#125; ResultSet rs = ps.executeQuery(); List&lt;Map&lt;String, Object&gt;&gt; ret = new ArrayList&lt;Map&lt;String, Object&gt;&gt;(); ResultSetMetaData rsmd = rs.getMetaData(); while (rs.next()) &#123; Map&lt;String, Object&gt; row = new LinkedHashMap&lt;String, Object&gt;(); for (int i = 1; i &lt; rsmd.getColumnCount() + 1; i++) &#123; String ColumnName = rsmd.getColumnName(i); row.put(ColumnName, rs.getObject(ColumnName)); &#125; ret.add(row); &#125; return ret; &#125; catch (SQLException e) &#123; throw new RuntimeException(&quot;查询数据失败&quot;, e); &#125; finally &#123; try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; /* * 快速查询 返回对象Object */ public static Object selectValue(String sql, Object... param) &#123; Connection conn = null; try &#123; conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql); System.out.println(sql); for (int i = 1; i &lt;= param.length; i++) &#123; ps.setObject(i, param[i - 1]); &#125; ResultSet rs = ps.executeQuery(); if (rs.next()) &#123; return rs.getObject(1); &#125; else &#123; return null; &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(&quot;查询数据失败&quot;, e); &#125; finally &#123; try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; /* * 分页：通用实体类 */ public static class Page &#123; private List&lt;Map&lt;String,Object&gt;&gt; data; private long total; private int page; private int rows; public Page(long total, int page, int rows, List&lt;Map&lt;String,Object&gt;&gt; data) &#123; this.data = data; this.page = page; this.rows = rows; this.total = total; &#125; public List&lt;Map&lt;String,Object&gt;&gt; getData() &#123; return data; &#125; public long getTotal() &#123; return total; &#125; public int getPage()&#123; return page; &#125; public int getFirstPage()&#123; return 1; &#125; public int getPreviousPage()&#123; return page &gt; 1 ? page - 1 : 1; &#125; public int getNextPage()&#123; int lastpage = getLastPage(); return page &lt; lastpage ? page + 1 : lastpage; &#125; public int getLastPage()&#123; long lastPage = total / rows; return (int) (total % rows == 0 ? lastPage : (lastPage + 1)); &#125; &#125; /* * 分页：Oracle */ public static Page selectPageForOracle(String sql, int page, int rows, Object... params) &#123; String totalSql = &quot;select count(*) from (&quot;+sql+&quot;)&quot;; Object totalObj = selectValue(totalSql, params); long total = Long.parseLong(totalObj.toString()); int startRow = (page - 1 ) * rows; int endRow= page * rows + 1; String pageSql = &quot; select * from &quot; + &quot;(select a.*,rownum rn from (&quot;+sql+&quot;) a where rownum &lt; &quot;+endRow+&quot;) a&quot; + &quot; where a.rn &gt; &quot; + startRow; List&lt;Map&lt;String,Object&gt;&gt; data = selectList(pageSql,params); return new Page(total, page, rows, data); &#125; /* * 分页：MySQL */ public static Page selectPageForMysql(String sql, int page, int rows, Object... params) &#123; String totalSql = &quot;select count(*) from (&quot;+sql+&quot;) a&quot;; Object totalObj = selectValue(totalSql, params); long total = Long.parseLong(totalObj.toString()); int startRow = (page - 1 ) * rows; String pageSql = &quot;select * from (&quot;+sql+&quot;) a limit &quot; + startRow + &quot;, &quot; + rows; List&lt;Map&lt;String,Object&gt;&gt; data = selectList(pageSql,params); return new Page(total, page, rows, data); &#125; /* * 将List&lt;Map&lt;String,Object&gt;&gt; 转换 实体类 */ public static &lt;T&gt; List&lt;T&gt; populate(List&lt;Map&lt;String, Object&gt;&gt; list, Class&lt;T&gt; cls) &#123; List&lt;T&gt; retList = new ArrayList&lt;T&gt;(); for(Map&lt;String, Object&gt; row : list) &#123; try &#123; T p = cls.newInstance(); BeanUtils.populate(p, row); retList.add(p); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; return retList; &#125;&#125; DBHelper.java v1.0.1 更新内容： 完善了getConnection方法，如果连接池失效，将通过常规方式获取数据库连接，提升了程序的健壮性。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223package com.yc.util;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.SQLException;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import javax.naming.Context;import javax.naming.InitialContext;import javax.sql.DataSource;import org.apache.commons.beanutils.BeanUtils;public class DBHelper &#123; /* * 与数据库建立连接 */ public static Connection getConnection() &#123; Connection conn = null; try &#123; Context ctx = new InitialContext(); DataSource ds = (DataSource) ctx.lookup(&quot;java:comp/env/mysql/hooyantsing666&quot;); conn = ds.getConnection(); &#125; catch (Exception e) &#123; try &#123; Class.forName(&quot;com.mysql.jdbc.Driver&quot;); String url = &quot;jdbc:mysql://127.0.0.1/yishuwang&quot;; String user = &quot;root&quot;; String password = &quot;a&quot;; conn = DriverManager.getConnection(url,user,password); &#125; catch (Exception e1) &#123; e1.printStackTrace(); &#125; &#125; if(conn==null) &#123; throw new RuntimeException(); &#125; return conn; &#125; /* * 更新数据库中的数据 */ public static int update(String sql, Object... param) &#123; Connection conn = null; try &#123; conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql); System.out.println(sql); for (int i = 1; i &lt;= param.length; i++) &#123; ps.setObject(i, param[i - 1]); &#125; return ps.executeUpdate(); &#125; catch (SQLException e) &#123; throw new RuntimeException(&quot;更新数据失败&quot;, e); &#125; finally &#123; try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; /* * 查询所需要的数据 返回对象打包成List */ public static List&lt;Map&lt;String, Object&gt;&gt; selectList(String sql, Object... param) &#123; Connection conn = null; try &#123; conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql); System.out.println(sql); for (int i = 1; i &lt;= param.length; i++) &#123; System.out.println(param[i-1]); ps.setObject(i, param[i - 1]); &#125; ResultSet rs = ps.executeQuery(); List&lt;Map&lt;String, Object&gt;&gt; ret = new ArrayList&lt;Map&lt;String, Object&gt;&gt;(); ResultSetMetaData rsmd = rs.getMetaData(); while (rs.next()) &#123; Map&lt;String, Object&gt; row = new LinkedHashMap&lt;String, Object&gt;(); for (int i = 1; i &lt; rsmd.getColumnCount() + 1; i++) &#123; String ColumnName = rsmd.getColumnName(i); row.put(ColumnName, rs.getObject(ColumnName)); &#125; ret.add(row); &#125; return ret; &#125; catch (SQLException e) &#123; throw new RuntimeException(&quot;查询数据失败&quot;, e); &#125; finally &#123; try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; /* * 快速查询 返回对象Object */ public static Object selectValue(String sql, Object... param) &#123; Connection conn = null; try &#123; conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql); System.out.println(sql); for (int i = 1; i &lt;= param.length; i++) &#123; ps.setObject(i, param[i - 1]); &#125; ResultSet rs = ps.executeQuery(); if (rs.next()) &#123; return rs.getObject(1); &#125; else &#123; return null; &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(&quot;查询数据失败&quot;, e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; /* * 分页：通用实体类 */ public static class Page &#123; private List&lt;Map&lt;String,Object&gt;&gt; data; private long total; private int page; private int rows; public Page(long total, int page, int rows, List&lt;Map&lt;String,Object&gt;&gt; data) &#123; this.data = data; this.page = page; this.rows = rows; this.total = total; &#125; public List&lt;Map&lt;String,Object&gt;&gt; getData() &#123; return data; &#125; public long getTotal() &#123; return total; &#125; public int getPage()&#123; return page; &#125; //首页 public int getFirstPage()&#123; return 1; &#125; //上一页 public int getPreviousPage()&#123; return page &gt; 1 ? page - 1 : 1; &#125; //下一页 public int getNextPage()&#123; int lastpage = getLastPage(); return page &lt; lastpage ? page + 1 : lastpage; &#125; //尾页 public int getLastPage()&#123; long lastPage = total / rows; return (int) (total % rows == 0 ? lastPage : (lastPage + 1)); &#125; &#125; /* * 分页：Oracle */ public static Page selectPageForOracle(String sql, int page, int rows, Object... params) &#123; String totalSql = &quot;select count(*) from (&quot;+sql+&quot;)&quot;; Object totalObj = selectValue(totalSql, params); long total = Long.parseLong(totalObj.toString()); int startRow = (page - 1 ) * rows; int endRow= page * rows + 1; String pageSql = &quot; select * from &quot; + &quot;(select a.*,rownum rn from (&quot;+sql+&quot;) a where rownum &lt; &quot;+endRow+&quot;) a&quot; + &quot; where a.rn &gt; &quot; + startRow; List&lt;Map&lt;String,Object&gt;&gt; data = selectList(pageSql,params); return new Page(total, page, rows, data); &#125; /* * 分页：MySQL */ public static Page selectPageForMysql(String sql, int page, int rows, Object... params) &#123; String totalSql = &quot;select count(*) from (&quot;+sql+&quot;) a&quot;; Object totalObj = selectValue(totalSql, params); long total = Long.parseLong(totalObj.toString()); int startRow = (page - 1 ) * rows; String pageSql = &quot;select * from (&quot;+sql+&quot;) a limit &quot; + startRow + &quot;, &quot; + rows; List&lt;Map&lt;String,Object&gt;&gt; data = selectList(pageSql,params); return new Page(total, page, rows, data); &#125; /* * 将List&lt;Map&lt;String,Object&gt;&gt; 转换 实体类 */ public static &lt;T&gt; List&lt;T&gt; populate(List&lt;Map&lt;String, Object&gt;&gt; list, Class&lt;T&gt; cls) &#123; List&lt;T&gt; retList = new ArrayList&lt;T&gt;(); for(Map&lt;String, Object&gt; row : list) &#123; try &#123; T p = cls.newInstance(); BeanUtils.populate(p, row); retList.add(p); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; return retList; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"常规方式获取数据库连接","slug":"技术向/Java/源辰技术储备/常规方式获取数据库连接","date":"2019-12-04T16:00:00.000Z","updated":"2022-05-11T01:44:55.474Z","comments":true,"path":"技术向/Java/源辰技术储备/常规方式获取数据库连接/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E5%B8%B8%E8%A7%84%E6%96%B9%E5%BC%8F%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/","excerpt":"","text":"常规方式获取数据库连接 12345Class.forName(&quot;com.mysql.jdbc.Driver&quot;);String url = &quot;jdbc:mysql://127.0.0.1/market&quot;;String user = &quot;root&quot;;String password = &quot;a&quot;;conn = DriverManager.getConnection(url,user,password); 一般的，使用连接池获取数据库连接。 详见笔记：DBHelper TODO: 建议DBHelper中，获取连接池连接失败，在try-catch中再单独获取连接，使用以上代码。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"快速构建敏感操作确认弹窗","slug":"技术向/Java/源辰技术储备/快速构建敏感操作确认弹窗","date":"2019-12-04T16:00:00.000Z","updated":"2022-05-11T01:48:09.784Z","comments":true,"path":"技术向/Java/源辰技术储备/快速构建敏感操作确认弹窗/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E6%95%8F%E6%84%9F%E6%93%8D%E4%BD%9C%E7%A1%AE%E8%AE%A4%E5%BC%B9%E7%AA%97/","excerpt":"","text":"快速构建敏感操作确认弹窗 123if(confirm(&quot;提示信息&quot;))&#123; //more code&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"在过滤器（Filter）中配置过滤器保护对象地址","slug":"技术向/Java/源辰技术储备/在过滤器（Filter）中配置过滤器保护对象地址","date":"2019-12-02T16:00:00.000Z","updated":"2022-05-11T01:52:13.356Z","comments":true,"path":"技术向/Java/源辰技术储备/在过滤器（Filter）中配置过滤器保护对象地址/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E5%9C%A8%E8%BF%87%E6%BB%A4%E5%99%A8%EF%BC%88Filter%EF%BC%89%E4%B8%AD%E9%85%8D%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8%E4%BF%9D%E6%8A%A4%E5%AF%B9%E8%B1%A1%E5%9C%B0%E5%9D%80/","excerpt":"","text":"在过滤器（Filter）中配置过滤器保护对象地址 注解： 1@WebFilter(urlPatterns = &#123;&quot;/edit.s&quot;,&quot;/query.s&quot;,&quot;/save.s&quot;,&quot;/editProduct.jsp&quot;,&quot;/queryProduct.jsp&quot;&#125;) 可以通过在web.xml中配置过滤器保护对象地址 详见笔记：Web.xml 配置文件","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第87次课程_考前复习","slug":"技术向/Java/源辰课程记录/第87次课程_考前复习","date":"2019-12-02T16:00:00.000Z","updated":"2022-05-11T01:26:30.672Z","comments":true,"path":"技术向/Java/源辰课程记录/第87次课程_考前复习/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC87%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E8%80%83%E5%89%8D%E5%A4%8D%E4%B9%A0/","excerpt":"","text":"源辰76班 第87次课程 2019.12.03 内容 考前复习[廖彦] 项目案例 market 前端 WebContent&#x2F;login.jsp 1234567891011121314151617181920&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;登录页面&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;登录页面&lt;/h3&gt;&lt;font color=&quot;red&quot;&gt;$&#123;msg &#125;&lt;/font&gt;&lt;form action=&quot;login.s&quot; method=&quot;post&quot;&gt;用户名：&lt;input name=&quot;name&quot;&gt;密码：&lt;input name=&quot;pwd&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; WebContent&#x2F;queryProduct.jsp 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;%@page import=&quot;java.util.*&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;商品查询&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;商品查询&lt;/h3&gt;&lt;form action=&quot;query.s&quot;&gt;&lt;button&gt;查询&lt;/button&gt;&lt;/form&gt;&lt;table style=&quot;width:100%&quot; border=&quot;1px&quot;&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;名称&lt;/th&gt; &lt;th&gt;价格&lt;/th&gt; &lt;th&gt;库存&lt;/th&gt; &lt;th&gt;进价&lt;/th&gt; &lt;th&gt;类型&lt;/th&gt; &lt;th&gt;描述&lt;/th&gt; &lt;th&gt;图片&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;% List&lt;Map&lt;?,?&gt;&gt; list = (List&lt;Map&lt;?,?&gt;&gt;)request.getAttribute(&quot;list&quot;); if(list==null)&#123; %&gt; &lt;tr&gt;&lt;td colspan=&quot;10&quot;&gt;没有查询到商品记录&lt;/td&gt;&lt;/tr&gt; &lt;% &#125; else &#123; for(Map&lt;?,?&gt; row : list)&#123; pageContext.setAttribute(&quot;r&quot;, row); %&gt; &lt;tr&gt; &lt;td&gt;$&#123;r.pid&#125;&lt;/td&gt; &lt;td&gt;$&#123;r.pname&#125;&lt;/td&gt; &lt;td&gt;$&#123;r.pprice&#125;&lt;/td&gt; &lt;td&gt;$&#123;r.cost&#125;&lt;/td&gt; &lt;td&gt;$&#123;r.inprice&#125;&lt;/td&gt; &lt;td&gt;$&#123;r.ptype&#125;&lt;/td&gt; &lt;td&gt;$&#123;r.pdesc&#125;&lt;/td&gt; &lt;td&gt;&lt;img alt=&quot;&quot; src=&quot;$&#123;r.pimg&#125;&quot; height=&quot;30px&quot;&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;edit.s?pid=$&#123;r.pid &#125;&quot;&gt;修改&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;%&#125; &#125;%&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt; WebContent&#x2F;editProduct.jsp 1234567891011121314151617181920212223242526272829&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;商品编辑&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;save.s&quot; method=&quot;post&quot;&gt;&lt;input name=&quot;pid&quot; type=&quot;hidden&quot; value=&quot;$&#123;row.pid &#125;&quot;&gt;名称：&lt;input name=&quot;pname&quot; value=&quot;$&#123;row.pname &#125;&quot;&gt;价格：&lt;input name=&quot;pprice&quot; value=&quot;$&#123;row.pprice &#125;&quot;&gt;数量：&lt;input name=&quot;cost&quot; value=&quot;$&#123;row.cost &#125;&quot;&gt;进价：&lt;input name=&quot;inprice&quot; value=&quot;$&#123;row.inprice &#125;&quot;&gt;类型：&lt;input name=&quot;ptype&quot; value=&quot;$&#123;row.ptype &#125;&quot;&gt;描述：&lt;input name=&quot;pdesc&quot; value=&quot;$&#123;row.pdesc &#125;&quot;&gt;图片：&lt;input name=&quot;pimg&quot; value=&quot;$&#123;row.pimg &#125;&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;保存&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 后端 src&#x2F;com&#x2F;yc&#x2F;market&#x2F;servlet&#x2F;LoginFilter.java 12345678910111213141516171819202122232425262728293031package com.yc.market.servlet;import java.io.IOException;import javax.servlet.Filter;import javax.servlet.FilterChain;import javax.servlet.FilterConfig;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.annotation.WebFilter;import javax.servlet.http.HttpServletRequest;@WebFilter(urlPatterns = &#123;&quot;/edit.s&quot;,&quot;/query.s&quot;,&quot;/save.s&quot;,&quot;/editProduct.jsp&quot;,&quot;/queryProduct.jsp&quot;&#125;)public class LoginFilter implements Filter &#123; public LoginFilter() &#123; &#125; public void destroy() &#123; &#125; public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123; HttpServletRequest req = (HttpServletRequest) request; if(req.getSession().getAttribute(&quot;loginedUser&quot;) == null) &#123; req.setAttribute(&quot;msg&quot;, &quot;请先登录系统&quot;); req.getRequestDispatcher(&quot;login.jsp&quot;).forward(req, response); &#125;else &#123; chain.doFilter(request, response); &#125; &#125; public void init(FilterConfig fConfig) throws ServletException &#123; &#125;&#125; src&#x2F;com&#x2F;yc&#x2F;market&#x2F;servlet&#x2F;LoginServlet.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package com.yc.market.servlet;import java.io.IOException;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.*;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;@WebServlet(&quot;/login.s&quot;)public class LoginServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; String name = request.getParameter(&quot;name&quot;); String pwd = request.getParameter(&quot;pwd&quot;); Connection conn = null; try &#123; Class.forName(&quot;com.mysql.jdbc.Driver&quot;); String url = &quot;jdbc:mysql://127.0.0.1/market&quot;; String user = &quot;root&quot;; String password = &quot;a&quot;; conn = DriverManager.getConnection(url,user,password); String sql = &quot;select * from user where account = ? and pwd = ? and isadmin = 1 &quot;; PreparedStatement ps = conn.prepareStatement(sql); ps.setString(1, name); ps.setString(2, pwd); ResultSet rs = ps.executeQuery(); Map&lt;String,Object&gt; row = new HashMap&lt;&gt;(); if(rs.next()) &#123; row.put(&quot;id&quot;, rs.getObject(&quot;id&quot;)); row.put(&quot;name&quot;, rs.getObject(&quot;name&quot;)); row.put(&quot;tel&quot;, rs.getObject(&quot;tel&quot;)); row.put(&quot;email&quot;, rs.getObject(&quot;email&quot;)); row.put(&quot;pwd&quot;, rs.getObject(&quot;pwd&quot;)); row.put(&quot;account&quot;, rs.getObject(&quot;account&quot;)); row.put(&quot;isadmin&quot;, rs.getObject(&quot;isadmin&quot;)); request.getSession().setAttribute(&quot;loginedUser&quot;, row); response.sendRedirect(&quot;query.s&quot;); &#125; else &#123; request.setAttribute(&quot;msg&quot;, &quot;用户名或密码错误&quot;); request.getRequestDispatcher(&quot;login.jsp&quot;).forward(request, response); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request, response); &#125;&#125; src&#x2F;com&#x2F;yc&#x2F;market&#x2F;servlet&#x2F;QueryProductServlet.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package com.yc.market.servlet;import java.io.IOException;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.*;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;@WebServlet(&quot;/query.s&quot;)public class QueryProductServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; Connection conn = null; try &#123; Class.forName(&quot;com.mysql.jdbc.Driver&quot;); String url = &quot;jdbc:mysql://127.0.0.1/market&quot;; String user = &quot;root&quot;; String password = &quot;a&quot;; conn = DriverManager.getConnection(url,user,password); String sql = &quot;select * from product &quot;; PreparedStatement ps = conn.prepareStatement(sql); ResultSet rs = ps.executeQuery(); List&lt;Map&lt;String,Object&gt;&gt; list = new ArrayList&lt;&gt;(); while(rs.next()) &#123; HashMap&lt;String,Object&gt; row = new HashMap&lt;&gt;(); row.put(&quot;pid&quot;, rs.getObject(&quot;pid&quot;)); row.put(&quot;pname&quot;, rs.getObject(&quot;pname&quot;)); row.put(&quot;pprice&quot;, rs.getObject(&quot;pprice&quot;)); row.put(&quot;cost&quot;, rs.getObject(&quot;cost&quot;)); row.put(&quot;inprice&quot;, rs.getObject(&quot;inprice&quot;)); row.put(&quot;ptype&quot;, rs.getObject(&quot;ptype&quot;)); row.put(&quot;pdesc&quot;, rs.getObject(&quot;pdesc&quot;)); row.put(&quot;pimg&quot;, rs.getObject(&quot;pimg&quot;)); list.add(row); &#125; request.setAttribute(&quot;list&quot;, list); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; request.getRequestDispatcher(&quot;queryProduct.jsp&quot;).forward(request, response); try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request, response); &#125;&#125; src&#x2F;com&#x2F;yc&#x2F;market&#x2F;servlet&#x2F;SaveProductServlet.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package com.yc.market.servlet;import java.io.IOException;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.*;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;@WebServlet(&quot;/query.s&quot;)public class QueryProductServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; Connection conn = null; try &#123; Class.forName(&quot;com.mysql.jdbc.Driver&quot;); String url = &quot;jdbc:mysql://127.0.0.1/market&quot;; String user = &quot;root&quot;; String password = &quot;a&quot;; conn = DriverManager.getConnection(url,user,password); String sql = &quot;select * from product &quot;; PreparedStatement ps = conn.prepareStatement(sql); ResultSet rs = ps.executeQuery(); List&lt;Map&lt;String,Object&gt;&gt; list = new ArrayList&lt;&gt;(); while(rs.next()) &#123; HashMap&lt;String,Object&gt; row = new HashMap&lt;&gt;(); row.put(&quot;pid&quot;, rs.getObject(&quot;pid&quot;)); row.put(&quot;pname&quot;, rs.getObject(&quot;pname&quot;)); row.put(&quot;pprice&quot;, rs.getObject(&quot;pprice&quot;)); row.put(&quot;cost&quot;, rs.getObject(&quot;cost&quot;)); row.put(&quot;inprice&quot;, rs.getObject(&quot;inprice&quot;)); row.put(&quot;ptype&quot;, rs.getObject(&quot;ptype&quot;)); row.put(&quot;pdesc&quot;, rs.getObject(&quot;pdesc&quot;)); row.put(&quot;pimg&quot;, rs.getObject(&quot;pimg&quot;)); list.add(row); &#125; request.setAttribute(&quot;list&quot;, list); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; request.getRequestDispatcher(&quot;queryProduct.jsp&quot;).forward(request, response); try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request, response); &#125;&#125; src&#x2F;com&#x2F;yc&#x2F;market&#x2F;servlet&#x2F;EditProductServlet.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package com.yc.market.servlet;import java.io.IOException;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.*;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;@WebServlet(&quot;/edit.s&quot;)public class EditProductServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; String pid = request.getParameter(&quot;pid&quot;); Connection conn = null; try &#123; Class.forName(&quot;com.mysql.jdbc.Driver&quot;); String url = &quot;jdbc:mysql://127.0.0.1/market&quot;; String user = &quot;root&quot;; String password = &quot;a&quot;; conn = DriverManager.getConnection(url,user,password); String sql = &quot;select * from product where pid = ? &quot;; PreparedStatement ps = conn.prepareStatement(sql); ps.setString(1, pid); ResultSet rs = ps.executeQuery(); Map&lt;String,Object&gt; row = new HashMap&lt;&gt;(); if(rs.next()) &#123; row.put(&quot;pid&quot;, rs.getObject(&quot;pid&quot;)); row.put(&quot;pname&quot;, rs.getObject(&quot;pname&quot;)); row.put(&quot;pprice&quot;, rs.getObject(&quot;pprice&quot;)); row.put(&quot;cost&quot;, rs.getObject(&quot;cost&quot;)); row.put(&quot;inprice&quot;, rs.getObject(&quot;inprice&quot;)); row.put(&quot;ptype&quot;, rs.getObject(&quot;ptype&quot;)); row.put(&quot;pdesc&quot;, rs.getObject(&quot;pdesc&quot;)); row.put(&quot;pimg&quot;, rs.getObject(&quot;pimg&quot;)); &#125; request.setAttribute(&quot;row&quot;, row); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; request.getRequestDispatcher(&quot;editProduct.jsp&quot;).forward(request, response); try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request, response); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"isEmpty()、\"\"和null的区别","slug":"技术向/Java/源辰技术储备/isEmpty()、-和null的区别","date":"2019-11-29T16:00:00.000Z","updated":"2022-05-11T01:55:07.507Z","comments":true,"path":"技术向/Java/源辰技术储备/isEmpty()、-和null的区别/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/isEmpty()%E3%80%81-%E5%92%8Cnull%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"isEmpty()、””和null的区别","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"有关编码设置","slug":"技术向/Java/源辰技术储备/有关编码设置","date":"2019-11-29T16:00:00.000Z","updated":"2022-05-11T01:51:23.368Z","comments":true,"path":"技术向/Java/源辰技术储备/有关编码设置/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E6%9C%89%E5%85%B3%E7%BC%96%E7%A0%81%E8%AE%BE%E7%BD%AE/","excerpt":"","text":"有关编码设置 123request.setCharacterEncoding(&quot;utf-8&quot;);response.setCharacterEncoding(&quot;utf-8&quot;);response.setContentType(&quot;text/html; charset=utf-8&quot;);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"Form表单参数补充","slug":"技术向/Java/源辰技术储备/Form表单参数补充","date":"2019-11-25T16:00:00.000Z","updated":"2022-05-11T01:53:41.449Z","comments":true,"path":"技术向/Java/源辰技术储备/Form表单参数补充/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/Form%E8%A1%A8%E5%8D%95%E5%8F%82%E6%95%B0%E8%A1%A5%E5%85%85/","excerpt":"","text":"Form表单参数补充 1&lt;input id=&quot;op&quot; name=&quot;op&quot; value=&quot;password&quot; type=&quot;hidden&quot;&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"文件上传至服务器","slug":"技术向/Java/源辰技术储备/文件上传至服务器","date":"2019-11-25T16:00:00.000Z","updated":"2022-05-11T01:50:22.316Z","comments":true,"path":"技术向/Java/源辰技术储备/文件上传至服务器/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%87%B3%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"","text":"文件上传至服务器 前端： 1234567&lt;!-- method提交方式 enctype编码格式 --&gt;&lt;form action=&quot;tmp_doupload.jsp&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; multiple&gt; &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;&lt;/form&gt; 后端： 123456789101112131415161718192021222324252627282930313233// 创建文件上传对象 SmartUpload su = new SmartUpload(); // 初始化，传入页面上下文对象 su.initialize(getServletConfig(), request, response); // 设置上传的配置信息 // 限定文件名后缀 su.setAllowedFilesList(&quot;jpg,png,gif,bmp&quot;); // 限定大小 su.setMaxFileSize(1024 * 1024 * 10); // 执行上传 try &#123; su.upload(); &#125; catch (SmartUploadException e) &#123; // TODO 自动生成的 catch 块 e.printStackTrace(); &#125; //判断是否有上传文件 String webPath = null; if(su.getFiles().getSize()&gt;0) &#123; Files files = su.getFiles(); String filename = files.getFile(0).getFileName(); // 使用application（应用上下文对象） web路径 转换成 磁盘路径 // getServletContext（） === application String diskPath = getServletContext().getRealPath(&quot;/bookimg/upload&quot;); try &#123; files.getFile(0).saveAs(diskPath + &quot;/&quot; + filename); &#125; catch (SmartUploadException e) &#123; // TODO 自动生成的 catch 块 e.printStackTrace(); &#125; webPath = &quot;bookimg/upload/&quot; + filename; &#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"JS获取URL链接中的参数","slug":"技术向/Java/源辰技术储备/JS获取URL链接中的参数","date":"2019-11-23T16:00:00.000Z","updated":"2022-05-11T01:57:13.322Z","comments":true,"path":"技术向/Java/源辰技术储备/JS获取URL链接中的参数/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/JS%E8%8E%B7%E5%8F%96URL%E9%93%BE%E6%8E%A5%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0/","excerpt":"","text":"JS获取URL链接中的参数 123456789101112function getQueryVariable(variable) &#123; var query = window.location.search.substring(1); var vars = query.split(&quot;&amp;&quot;); for (var i=0;i&lt;vars.length;i++) &#123; var pair = vars[i].split(&quot;=&quot;); if(pair[0] == variable)&#123;return pair[1];&#125; &#125; return(false);&#125;getQueryVariable(&quot;id&quot;)；","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"获取数据库中的datetime数据","slug":"技术向/Java/源辰技术储备/获取数据库中的datetime数据","date":"2019-11-23T16:00:00.000Z","updated":"2022-05-11T01:47:48.084Z","comments":true,"path":"技术向/Java/源辰技术储备/获取数据库中的datetime数据/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84datetime%E6%95%B0%E6%8D%AE/","excerpt":"","text":"获取数据库中的datetime数据 123import java.sql.Timestamp;Timestamp date = (Timestamp) row.get(&quot;fdate&quot;); 获取精确时间 包含年月日时分秒","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"前后端分离经典案例","slug":"技术向/Java/源辰技术储备/前后端分离经典案例","date":"2019-11-22T16:00:00.000Z","updated":"2022-05-11T01:48:33.682Z","comments":true,"path":"技术向/Java/源辰技术储备/前后端分离经典案例/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/","excerpt":"","text":"前后端分离经典案例 描述：前端通过Ajax传递参数给后端，后端处理后通过json传递给前端 前端代码：lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;css/index.css&quot; /&gt;&lt;script src=&quot;js/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/main.js&quot;&gt;&lt;/script&gt;&lt;title&gt;Document&lt;/title&gt;&lt;!-- 开发者：Hooyantsing 本页面应用了大面积的Ajax，实现了前后端分离。--&gt;&lt;script&gt; function page(p)&#123; var pa = $(p).attr(&#x27;page&#x27;); query(pa); &#125; function query(pa)&#123; $(&#x27;#point&#x27;).html(&quot;&quot;); $(&#x27;#page&#x27;).html(&quot;&quot;); var page = pa==null ? &quot;1&quot; : pa; var select1 = $(&#x27;#selectA&#x27;).children().text(); var select2 = $(&#x27;#selectB&#x27;).children().text(); var select3 = $(&#x27;#selectC&#x27;).children().text(); var select4 = $(&#x27;#selectD&#x27;).children().text(); $.ajax(&#123; type : &quot;GET&quot;, url : &quot;list.s&quot;, data : &#123; &#x27;op&#x27; : &#x27;content&#x27;, &#x27;page&#x27; : page, &#x27;select1&#x27; : select1, &#x27;select2&#x27; : select2, &#x27;select3&#x27; : select3, &#x27;select4&#x27; : select4 &#125;, dataType : &quot;json&quot;, success : function(data) &#123; for(var i=0;i&lt;data.data.length;i++)&#123; $(&#x27;#point&#x27;).append( &quot;&lt;dl id=&#x27;&quot;+i+&quot;&#x27;&gt;&quot; + &quot;&lt;dt&gt;&quot; + &quot;&lt;a href=&#x27;detail.jsp&#x27;&gt;&lt;img src=&#x27;&quot;+data.data[i].bimage+&quot;&#x27; alt=&#x27;&#x27; /&gt;&lt;/a&gt;&quot; + &quot;&lt;/dt&gt;&quot; + &quot;&lt;dd&gt;&quot; + &quot;&lt;p&gt;&quot; + &quot;&lt;a href=&#x27;detail.jsp&#x27;&gt;&quot;+data.data[i].bname+&quot;&lt;/a&gt;&quot; + &quot;&lt;/p&gt;&quot; + &quot;&lt;p&gt;数量：99&lt;/p&gt;&quot; + &quot;&lt;p&gt;&quot; + &quot;&lt;s&gt;价格：￥&quot;+data.data[i].bmarket_price+&quot;&lt;/s&gt; ￥&quot;+data.data[i].bshop_price+&quot; &quot; + &quot;&lt;/p&gt;&quot; + &quot;&lt;/dd&gt;&quot; + &quot;&lt;/dl&gt;&quot; ); &#125; var lastPage = Math.floor(data.total % data.rows == 0 ? (data.total/data.rows) : (data.total/data.rows + 1)); var previousPage = data.page &gt; 1 ? data.page - 1 : 1; var nextPage = data.page &lt; lastPage ? data.page + 1 : lastPage; var leftPage = data.page - 2 &lt; 2 ? 1 : data.page - 2; var rightPage = data.page + 2 &gt; lastPage ? lastPage : data.page + 2; $(&#x27;#page&#x27;).append( &quot;&lt;a page=&#x27;1&#x27; href=&#x27;javascript:void(0)&#x27; onclick=&#x27;page(this)&#x27;&gt;首页&lt;/a&gt;&quot; + &quot;&lt;a page=&#x27;&quot;+previousPage+&quot;&#x27; href=&#x27;javascript:void(0)&#x27; onclick=&#x27;page(this)&#x27;&gt;上一页&lt;/a&gt;&quot; ); for (var i = leftPage; i &lt;= rightPage; i++) &#123; if (data.page == i)&#123; $(&#x27;#page&#x27;).append( &quot;&lt;a page=&#x27;&quot;+i+&quot;&#x27; class=&#x27;bg-blue&#x27; href=&#x27;javascript:void(0)&#x27; onclick=&#x27;page(this)&#x27;&gt;&quot;+data.page+&quot;&lt;/a&gt;&quot; ); &#125; else &#123; $(&#x27;#page&#x27;).append( &quot;&lt;a page=&#x27;&quot;+i+&quot;&#x27; href=&#x27;javascript:void(0)&#x27; onclick=&#x27;page(this)&#x27;&gt;&quot;+i+&quot;&lt;/a&gt;&quot; ); &#125; &#125; $(&#x27;#page&#x27;).append( &quot;&lt;a page=&#x27;&quot;+(nextPage==0 ? 1 : nextPage)+&quot;&#x27; href=&#x27;javascript:void(0)&#x27; onclick=&#x27;page(this)&#x27;&gt;下一页&lt;/a&gt;&quot; + &quot;&lt;a page=&#x27;&quot;+(lastPage==0 ? 1 : lastPage)+&quot;&#x27; href=&#x27;javascript:void(0)&#x27; onclick=&#x27;page(this)&#x27;&gt;尾页&lt;/a&gt;&quot; ); &#125; &#125;); &#125; $(document).ready(query());&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;msgPage&quot; &gt;&lt;/div&gt; &lt;div class=&quot;top&quot; id=&quot;item4&quot;&gt; &lt;div class=&quot;container clearfix&quot;&gt; &lt;ul class=&quot;clearfix fr&quot;&gt; &lt;li&gt;&lt;a href=&quot;join.jsp#tologin&quot;&gt;登录&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;join.jsp#toregister&quot;&gt;注册&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;member.jsp&quot; style=&quot;border: none&quot;&gt;个人中心&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;header&quot;&gt; &lt;div class=&quot;container clearfix&quot;&gt; &lt;div class=&quot;logo fl&quot;&gt; &lt;a href=&quot;index.jsp&quot;&gt;&lt;img src=&quot;images/logo4.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;seacher fl&quot;&gt; &lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;小伙伴，你想找什么?&quot; /&gt;&lt;input type=&quot;submit&quot; value=&quot;搜 索&quot; /&gt; &lt;/form&gt; &lt;p&gt; 热门搜索：&lt;a href=&quot;#&quot;&gt;自行车&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;笔记本&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;散热器&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;考研资料&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;摩托车&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;手机&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;轮滑鞋&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;显示器&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;显示器&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;显示器&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;显示器&lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;mm fr clearfix&quot;&gt; &lt;a href=&quot;list.jsp&quot;&gt;我要买&lt;/a&gt; &lt;a href=&quot;publish.jsp&quot;&gt;我要卖&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;list-main&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;bread&quot; style=&quot;margin-bottom: 0;&quot;&gt; 当前位置： &lt;a href=&quot;index.jsp&quot;&gt;首页&lt;/a&gt; &gt; &lt;a href=&quot;list.jsp&quot;&gt;列表&lt;/a&gt; &lt;/div&gt; &lt;ul class=&quot;select&quot; onclick=&quot;query()&quot;&gt; &lt;li class=&quot;select-list&quot;&gt; &lt;dl id=&quot;select1&quot; &gt; &lt;dt&gt;学校：&lt;/dt&gt; &lt;dd class=&quot;select-all selected&quot;&gt; &lt;a href=&quot;#&quot;&gt;全部&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;深圳大学&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;深圳技师学院&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;深圳广播电视大学&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;深圳香港中文大学&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;深圳市华强职业技术学校&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;深圳大学医学院&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;深圳华中科技大学研究院&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;深圳南方科技大学&lt;/a&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/li&gt; &lt;li class=&quot;select-list&quot;&gt; &lt;dl id=&quot;select2&quot;&gt; &lt;dt&gt;学院：&lt;/dt&gt; &lt;dd class=&quot;select-all selected&quot;&gt; &lt;a href=&quot;#&quot;&gt;全部&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;传播学院&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;文学院&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;外国语学院&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;软件学院&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;音乐学院&lt;/a&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/li&gt; &lt;li class=&quot;select-list&quot;&gt; &lt;dl id=&quot;select3&quot;&gt; &lt;dt&gt;专业：&lt;/dt&gt; &lt;dd class=&quot;select-all selected&quot;&gt; &lt;a href=&quot;#&quot;&gt;全部&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;教育技术学&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;传播学&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;广告学&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;不知道了&lt;/a&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/li&gt; &lt;li class=&quot;select-list&quot;&gt; &lt;dl id=&quot;select4&quot;&gt; &lt;dt&gt;年级：&lt;/dt&gt; &lt;dd class=&quot;select-all selected&quot;&gt; &lt;a href=&quot;#&quot;&gt;全部&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;大一&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;大二&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;大三&lt;/a&gt; &lt;/dd&gt; &lt;dd&gt; &lt;a href=&quot;#&quot;&gt;大四&lt;/a&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/li&gt; &lt;li class=&quot;select-result&quot;&gt; &lt;dl id=&quot;result&quot;&gt; &lt;dt&gt;已选条件：&lt;/dt&gt; &lt;dd class=&quot;select-no&quot;&gt;暂时没有选择过滤条件&lt;/dd&gt; &lt;/dl&gt; &lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;tabs book clearfix&quot;&gt; &lt;div id=&quot;point&quot;&gt; &lt;/div&gt; &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt; &lt;div class=&quot;page clearfix&quot; id=&quot;page&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;foot&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;zhinan&quot;&gt; &lt;ul class=&quot;clearfix&quot;&gt; &lt;li class=&quot;item-li&quot;&gt;关于我们 &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;help.jsp&quot;&gt;自我介绍&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;help.jsp&quot;&gt;联系我们&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;help.jsp&quot;&gt;网站公告&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=&quot;item-li&quot;&gt;新手指南 &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;help.jsp&quot;&gt;如何买书&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;help.jsp&quot;&gt;如何卖书&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;help.jsp&quot;&gt;修改密码&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=&quot;item-li&quot;&gt;配送方式 &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;help.jsp&quot;&gt;配送范围&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;help.jsp&quot;&gt;配送时间&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=&quot;item-li&quot;&gt;售后服务 &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;help.jsp&quot;&gt;退款申请&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;help.jsp&quot;&gt;退换货处理&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;help.jsp&quot;&gt;退换货政策&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;line&quot;&gt;&lt;/div&gt; &lt;div class=&quot;bottom&quot;&gt; &lt;p&gt; 友情链接：&lt;a href=&quot;#&quot;&gt;安工在线&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;#&quot;&gt;万林强-前端在线简历&lt;/a&gt; &lt;/p&gt; &lt;p&gt;本站所有信息均为用户自由发布，本站不对信息的真实性负任何责任，交易时请注意识别信息的真假如有网站内容侵害了您的权益请联系我们删除，举报电话：15068718875&lt;/p&gt; &lt;p&gt;技术支持：万林强 &amp;nbsp;&amp;nbsp;商务QQ:584845663 &amp;nbsp;&amp;nbsp;邮箱：584845663@qq.com&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 后端代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162package ebn.servlet;import java.io.IOException;import java.util.ArrayList;import java.util.List;import javax.mail.MessagingException;import javax.mail.internet.AddressException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import com.google.gson.Gson;import ebn.util.DBHelper;import ebn.util.DBHelper.Page;@WebServlet(&quot;/list.s&quot;)public class ListServlet extends BaseServlet &#123; private static final long serialVersionUID = 1L; private static final int ROWS = 14; public void content(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, AddressException, MessagingException &#123; response.setContentType(&quot;text/html; charset=GBK&quot;); String select1 = request.getParameter(&quot;select1&quot;).trim(); String select2 = request.getParameter(&quot;select2&quot;).trim(); String select3 = request.getParameter(&quot;select3&quot;).trim(); String select4 = request.getParameter(&quot;select4&quot;).trim(); String page = request.getParameter(&quot;page&quot;).trim(); StringBuilder sql = new StringBuilder(&quot;select * from books where 1=1 &quot;); List&lt;String&gt; parameter = new ArrayList&lt;String&gt;(); int pageNum = &quot;&quot;.equals(page) ? 1 : Integer.parseInt(page); if(pageNum&lt;=0) &#123; return; &#125; if(!(&quot;&quot;.equals(select1))) &#123; sql.append(&quot; and bschool = ? &quot;); parameter.add(select1); &#125; if(!(&quot;&quot;.equals(select2))) &#123; sql.append(&quot; and bcollege = ? &quot;); parameter.add(select2); &#125; if(!(&quot;&quot;.equals(select3))) &#123; sql.append(&quot; and bajor = ? &quot;); parameter.add(select3); &#125; if(!(&quot;&quot;.equals(select4))) &#123; sql.append(&quot; and bgrade = ? &quot;); parameter.add(select4); &#125; Page box = DBHelper.selectPageForMysql(sql.toString(), pageNum, ROWS, parameter.toArray()); Gson gson = new Gson(); String json = gson.toJson(box); response.getWriter().print(json); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"如何获取点击目标的jQuery对象","slug":"技术向/Java/源辰技术储备/如何获取点击目标的jQuery对象","date":"2019-11-22T16:00:00.000Z","updated":"2022-05-11T01:48:47.832Z","comments":true,"path":"技术向/Java/源辰技术储备/如何获取点击目标的jQuery对象/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E7%82%B9%E5%87%BB%E7%9B%AE%E6%A0%87%E7%9A%84jQuery%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"如何获取点击目标的jQuery对象 JS 123function page(p)&#123; alert($(p).attr(&#x27;page&#x27;));&#125; HTML 1&lt;a page=&quot;1&quot; href=&#x27;javascript:void(0)&#x27; onclick=&#x27;page(this)&#x27;&gt;1&lt;/a&gt; 注意：要获取目标对象，首先要将该标签的DOM对象传入JavaScript函数中！","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"获取标签中的属性","slug":"技术向/Java/源辰技术储备/获取标签中的属性","date":"2019-11-22T16:00:00.000Z","updated":"2022-05-11T01:47:30.216Z","comments":true,"path":"技术向/Java/源辰技术储备/获取标签中的属性/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E8%8E%B7%E5%8F%96%E6%A0%87%E7%AD%BE%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7/","excerpt":"","text":"获取标签中的属性","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"验证码","slug":"技术向/Java/源辰技术储备/验证码","date":"2019-11-19T16:00:00.000Z","updated":"2022-05-11T01:50:36.978Z","comments":true,"path":"技术向/Java/源辰技术储备/验证码/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E9%AA%8C%E8%AF%81%E7%A0%81/","excerpt":"","text":"验证码 前端： 1&lt;img src=&quot;vcode.jsp&quot; style=&quot;height:50px;margin-left: 30px&quot; onclick=&quot;src=&#x27;vcode.jsp?&#x27;+ new Date()&quot;&gt; 后端： 1234567891011121314151617181920212223242526272829303132package com.yc.demo.servlet;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;@WebServlet(&quot;/login.s&quot;)public class LoginServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // 获取验证码 String sVcode = (String) request.getSession().getAttribute(&quot;vcode&quot;); String rVcode = request.getParameter(&quot;vcode&quot;); if(sVcode.equalsIgnoreCase(rVcode))&#123; //验证成功 &#125; else &#123; //验证失败 &#125; &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub doGet(request, response); &#125;&#125; vcode vcode.zip","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"Java-mail_发送邮件的方法","slug":"技术向/Java/源辰技术储备/Java-mail_发送邮件的方法","date":"2019-11-18T16:00:00.000Z","updated":"2022-05-11T01:55:30.533Z","comments":true,"path":"技术向/Java/源辰技术储备/Java-mail_发送邮件的方法/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/Java-mail_%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/","excerpt":"","text":"Java.mail 发送邮件的方法 教程来源：https://www.cnblogs.com/xmqa/p/8458300.html QQ邮件 1234567891011121314151617181920212223242526272829303132333435363738394041import java.util.Properties;import javax.mail.Message;import javax.mail.MessagingException;import javax.mail.Session;import javax.mail.Transport;import javax.mail.internet.AddressException;import javax.mail.internet.InternetAddress;import javax.mail.internet.MimeMessage;public class SendQQMailUtil &#123; public static void main(String[] args) throws AddressException,MessagingException &#123; Properties properties = new Properties(); properties.put(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);// 连接协议 properties.put(&quot;mail.smtp.host&quot;, &quot;smtp.qq.com&quot;);// 主机名 properties.put(&quot;mail.smtp.port&quot;, 465);// 端口号 properties.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;); properties.put(&quot;mail.smtp.ssl.enable&quot;, &quot;true&quot;);// 设置是否使用ssl安全连接 ---一般都使用 properties.put(&quot;mail.debug&quot;, &quot;true&quot;);// 设置是否显示debug信息 true 会在控制台显示相关信息 // 得到回话对象 Session session = Session.getInstance(properties); // 获取邮件对象 Message message = new MimeMessage(session); // 设置发件人邮箱地址 message.setFrom(new InternetAddress(&quot;xxx@qq.com&quot;)); // 设置收件人邮箱地址 message.setRecipients(Message.RecipientType.TO, new InternetAddress[]&#123;new InternetAddress(&quot;xxx@qq.com&quot;),new InternetAddress(&quot;xxx@qq.com&quot;),new InternetAddress(&quot;xxx@qq.com&quot;)&#125;); //message.setRecipient(Message.RecipientType.TO, new InternetAddress(&quot;xxx@qq.com&quot;));//一个收件人 // 设置邮件标题 message.setSubject(&quot;xmqtest&quot;); // 设置邮件内容 message.setText(&quot;邮件内容邮件内容邮件内容xmqtest&quot;); // 得到邮差对象 Transport transport = session.getTransport(); // 连接自己的邮箱账户 transport.connect(&quot;xxx@qq.com&quot;, &quot;xxxxxxxxxxxxx&quot;);// 密码为QQ邮箱开通的stmp服务后得到的客户端授权码 // 发送邮件 transport.sendMessage(message, message.getAllRecipients()); transport.close(); &#125;&#125; 163邮箱 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788import java.io.IOException;import java.util.*;import javax.mail.*;import javax.mail.internet.*;import javax.activation.*;public class SendMailUtil &#123; static String HOST = &quot;&quot;; // smtp服务器 static String FROM = &quot;&quot;; // 发件人地址 static String TO = &quot;&quot;; // 收件人地址 static String AFFIX = &quot;&quot;; // 附件地址 static String AFFIXNAME = &quot;&quot;; // 附件名称 static String USER = &quot;&quot;; // 用户名 static String PWD = &quot;&quot;; // 163的授权码 static String SUBJECT = &quot;&quot;; // 邮件标题 static String[] TOS = null; static &#123; try &#123; Properties props = new Properties(); props.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;config.properties&quot;));//从自定义配置文件获取相关参数 HOST=props.getProperty(&quot;host&quot;); FROM=props.getProperty(&quot;from&quot;); TO=props.getProperty(&quot;to&quot;); TOS=TO.split(&quot;,&quot;); AFFIX=props.getProperty(&quot;affix&quot;); AFFIXNAME=props.getProperty(&quot;affixName&quot;); USER=props.getProperty(&quot;user&quot;); PWD=props.getProperty(&quot;pwd&quot;); SUBJECT=props.getProperty(&quot;subject&quot;); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; /** * 发送邮件 * @param host * @param user * @param pwd */ public static void send(String context) &#123; Properties props = new Properties(); props.put(&quot;mail.smtp.host&quot;, HOST);//设置发送邮件的邮件服务器的属性（这里使用网易的smtp服务器） props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;); //需要经过授权，也就是有户名和密码的校验，这样才能通过验证（一定要有这一条） Session session = Session.getDefaultInstance(props);//用props对象构建一个session session.setDebug(true); MimeMessage message = new MimeMessage(session);//用session为参数定义消息对象 try &#123; message.setFrom(new InternetAddress(FROM));// 加载发件人地址 InternetAddress[] sendTo = new InternetAddress[TOS.length]; // 加载收件人地址 for (int i = 0; i &lt; TOS.length; i++) &#123; sendTo[i] = new InternetAddress(TOS[i]); &#125; message.addRecipients(Message.RecipientType.TO,sendTo); message.addRecipients(MimeMessage.RecipientType.CC, InternetAddress.parse(FROM));//设置在发送给收信人之前给自己（发送方）抄送一份，不然会被当成垃圾邮件，报554错 message.setSubject(SUBJECT);//加载标题 Multipart multipart = new MimeMultipart();//向multipart对象中添加邮件的各个部分内容，包括文本内容和附件 BodyPart contentPart = new MimeBodyPart();//设置邮件的文本内容 contentPart.setText(context); multipart.addBodyPart(contentPart); if(!AFFIX.isEmpty())&#123;//添加附件 BodyPart messageBodyPart = new MimeBodyPart(); DataSource source = new FileDataSource(AFFIX); messageBodyPart.setDataHandler(new DataHandler(source));//添加附件的内容 sun.misc.BASE64Encoder enc = new sun.misc.BASE64Encoder();//添加附件的标题 messageBodyPart.setFileName(&quot;=?GBK?B?&quot;+ enc.encode(AFFIXNAME.getBytes()) + &quot;?=&quot;); multipart.addBodyPart(messageBodyPart); &#125; message.setContent(multipart);//将multipart对象放到message中 message.saveChanges(); //保存邮件 Transport transport = session.getTransport(&quot;smtp&quot;);//发送邮件 transport.connect(HOST, USER, PWD);//连接服务器的邮箱 transport.sendMessage(message, message.getAllRecipients());//把邮件发送出去 transport.close();//关闭连接 &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; // public static void main(String[] args) &#123;// send(&quot;内容&quot;);// &#125; &#125; 相关JAR包 javamail-1-4-5.zip","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"SQL语句","slug":"技术向/Java/源辰技术储备/SQL语句","date":"2019-11-17T16:00:00.000Z","updated":"2022-05-11T01:58:55.139Z","comments":true,"path":"技术向/Java/源辰技术储备/SQL语句/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/SQL%E8%AF%AD%E5%8F%A5/","excerpt":"","text":"SQL语句 Oracle表 create table |表名|( cid number(4) primary key, cname varchar2(100), ); MySQL表 createtable |表名|( cidint, cnamevarchar(100), ); 增 insert into |表名|values(value1,value2,value…); 删 delete from |表名| where |条件|; 改 update |表名| set |字段名1|&#x3D;|改后值|where |条件|; 查 select * from |表名1| left&#x2F;right join |表名2| on |表名1|.|字段名| &#x3D; |表名2|.|字段名| where |条件| group by |字段名| order by |字段名| ASC&#x2F;DESC 自增序列 create sequence s_|表名| start with |起始序号|increment by |每次递增值|; 主键约束 alter table |表名| add constraint pk_|表名|_|字段名|primary key(|字段名|); 外键约束 alter table |本表名| add constraint fk_|本表名|_|本字段|foreign key(|本字段|) references |外表名|(|外字段|); 唯一约束 alter table |表名| add constraint uq_|表名|_|字段名|unique(|字段名|); 非空约束 alter table |表名| modify |字段名| not null; 检查约束 单选 alter table |表名|o add constraint ck_|表名|_|字段名|check(|字段名| in(‘value1’,’value2’)); 检查约束 范围 alter table |表名| add constraint ck_|表名|_|字段名|check(|字段名| between valueand VALUE); 删除约束 alter table |表名|drop constraint |约束名|; 删除表 drop table |表名|","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"Cookie","slug":"技术向/Java/源辰技术储备/Cookie","date":"2019-11-16T16:00:00.000Z","updated":"2022-05-11T01:52:57.970Z","comments":true,"path":"技术向/Java/源辰技术储备/Cookie/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/Cookie/","excerpt":"","text":"Cookie 前端代码（jsp&#x2F;html）： 123456789101112131415&lt;% //从请求对象中获取 浏览器 发送回服务器的 cookie 数据 Cookie[] cookies = request.getCookies(); Cookie loindeUserCookie = null; if(cookies!=null)&#123; for(Cookie cookie:cookies)&#123; if(&quot;loginedUser&quot;.equals(cookie.getName()))&#123; loindeUserCookie = cookie; break; &#125; &#125; &#125;%&gt;账户：&lt;input name=&quot;username&quot; value=&quot;&lt;%=loindeUserCookie == null ? &quot;&quot; : loindeUserCookie.getValue() %&gt;&quot;&gt; 后端代码（jsp）： 1234567String username = request.getParameter(&quot;username&quot;);//创建一个Cookie对象，发给浏览器保存下来Cookie cookie = new Cookie(&quot;loginedUser&quot;,username); //在本地保存，使用cookie//设置cookie有效期，单位 秒cookie.setMaxAge(10);//将cookie添加到响应对象中response.addCookie(cookie); 后端代码（servlet）： 导入Cookie包 12import javax.servlet.http.Cookie;+以上jsp后端代码+","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"Map_转化_EL表达式","slug":"技术向/Java/源辰技术储备/Map_转化_EL表达式","date":"2019-11-16T16:00:00.000Z","updated":"2022-05-11T01:57:58.543Z","comments":true,"path":"技术向/Java/源辰技术储备/Map_转化_EL表达式/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/Map_%E8%BD%AC%E5%8C%96_EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"Map 转化 EL表达式 jsp 页面上下文 1pageContext.setAttribute(&quot;EL&quot;, MAP); Map格式 EL格式 1234Map格式&lt;%=MAP.get(&quot;id&quot;) %&gt;EL格式$&#123;EL.id &#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"Web-xml_配置文件","slug":"技术向/Java/源辰技术储备/Web-xml_配置文件","date":"2019-11-16T16:00:00.000Z","updated":"2022-05-11T01:59:22.695Z","comments":true,"path":"技术向/Java/源辰技术储备/Web-xml_配置文件/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/Web-xml_%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","excerpt":"","text":"Web.xml 配置文件 路径：Webcontent &#x2F; WEB-INF 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;3.1&quot;&gt;&lt;!-- 默认服务器首页 --&gt; &lt;display-name&gt;191026_Servlet&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt;&lt;!-- JNDI 连接池 --&gt; &lt;resource-ref&gt; &lt;description&gt;大麦数据库连接&lt;/description&gt; &lt;res-ref-name&gt;mysql/damai&lt;/res-ref-name&gt; &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt; &lt;res-auth&gt;Container&lt;/res-auth&gt; &lt;/resource-ref&gt;&lt;!-- 在web文件中设置servlet文件地址 --&gt; &lt;servlet&gt; &lt;servlet-name&gt;hello world servlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.yc.damai.servlet.HelloServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;hello world servlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/hello.s&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;!-- 在web文件中设置servlet文件增加参数 --&gt; &lt;servlet&gt; &lt;servlet-name&gt;登录的servlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.yc.damai.servlet.LoginServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;begin-time&lt;/param-name&gt; &lt;param-value&gt;8&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;end-time&lt;/param-name&gt; &lt;param-value&gt;24&lt;/param-value&gt; &lt;/init-param&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;登录的servlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/LoginServlet.s&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;!-- 过滤器 --&gt; &lt;filter&gt; &lt;filter-name&gt;权限访问控制过滤器&lt;/filter-name&gt; &lt;filter-class&gt;com.yc.damai.servlet.LoginFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;权限访问控制过滤器&lt;/filter-name&gt; &lt;url-pattern&gt;/cart.s&lt;/url-pattern&gt; &lt;url-pattern&gt;/cart.jsp&lt;/url-pattern&gt; &lt;url-pattern&gt;/olist.jsp&lt;/url-pattern&gt; &lt;/filter-mapping&gt;&lt;/web-app&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"jQuery_AJAX_模板_AJAX_回调数据方法","slug":"技术向/Java/源辰技术储备/jQuery_AJAX_模板_AJAX_回调数据方法","date":"2019-11-16T16:00:00.000Z","updated":"2022-05-11T01:56:50.377Z","comments":true,"path":"技术向/Java/源辰技术储备/jQuery_AJAX_模板_AJAX_回调数据方法/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/jQuery_AJAX_%E6%A8%A1%E6%9D%BF_AJAX_%E5%9B%9E%E8%B0%83%E6%95%B0%E6%8D%AE%E6%96%B9%E6%B3%95/","excerpt":"","text":"jQuery AJAX 模板 以下为JavaScript代码 模板： 12345678910111213141516171819202122&lt;script type=&quot;text/javascript&quot;&gt; $(function() &#123; $(&#x27;#submit&#x27;).click( function() &#123; var |id| = document.getElementById(&quot;|id|&quot;).value; $.ajax(&#123; type : &quot;GET&quot;, url : &quot;join.s&quot;, data : &#123; &#x27;op&#x27; : &#x27;reg&#x27;, &#x27;|id|&#x27; : |id| &#125;, dataType : &quot;json&quot;, success : function(data) &#123; alert(data.msg); $(&quot;#&quot;).text(data.msg); $(&quot;#&quot;).value(data.msg); &#125; &#125;); &#125;); &#125;);&lt;/script&gt; 解析： 1234567891011121314151617181920212223242526272829&lt;script type=&quot;text/javascript&quot;&gt; $(function() &#123; //点击监听事件 $(&#x27;#submit&#x27;).click( //点击后做什么 function() &#123; //获取标签id 中的value值 （通常在于&lt;input&gt;标签中） var |id| = document.getElementById(&quot;|id|&quot;).value; //type (发送请求的类型) : GET/POST , //url (后端地址) ： //date (json格式参数) : &#123; key : value , key : value &#125; //dataType : json //success : function(data) &#123; //后台成功执行后返回数据 &#125; $.ajax(&#123; type : &quot;GET&quot;, url : &quot;join.s&quot;, data : &#123; &#x27;op&#x27; : &#x27;reg&#x27;, &#x27;|id|&#x27; : |id| &#125;, dataType : &quot;json&quot;, success : function(data) &#123; alert(data.msg); //$(&quot;#dlg&quot;).text(data.msg); &#125; &#125;); &#125;); &#125;);&lt;/script&gt; 老师的方法： 123456789101112131415161718192021222324252627282930313233&lt;%@page import=&quot;com.yc.lottery.util.DBUtil&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;测试页面&lt;/title&gt;&lt;!-- 引入jqeury --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;function add()&#123; // jquery 封装好的 ajax 方法 以json对象作为参数对象 // 构建参数 方式1 var param = &#123;&#125;; param.a = 100; param.b = 200; // 构建参数 方式2 var param = &#123; a:100, b:200&#125;; // json 格式 $.post(&quot;add.s&quot;,param,function(data)&#123; // 接受到服务器响应后的操作 alert(data); &#125;)&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;button onclick=&quot;add()&quot;&gt;add&lt;/button&gt;&lt;/body&gt; ** ** AJAX 回调数据方法 123456//TODO:将状态传回前端response.setContentType(&quot;application/json;charset=UTF-8&quot;);//构建json格式String json = &quot; &#123;\\&quot;msg\\&quot;:\\&quot;&quot; + result + &quot;\\&quot;&#125; &quot;;PrintWriter out = response.getWriter();out.println(json); 使用gson包构建json格式数据 其中Result是JavaBean的实体类 1234Result result = Result.success(&quot;注册成功&quot;);Gson gson = new Gson();String json = gson.toJson(result);response.getWriter().print(json);","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"反射_BaseServlet","slug":"技术向/Java/源辰技术储备/反射_BaseServlet","date":"2019-11-16T16:00:00.000Z","updated":"2022-05-11T01:46:21.343Z","comments":true,"path":"技术向/Java/源辰技术储备/反射_BaseServlet/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E5%8F%8D%E5%B0%84_BaseServlet/","excerpt":"","text":"反射 BaseServlet 12345678910111213141516171819202122232425262728293031package com.yc.damai.servlet;import java.io.IOException;import java.lang.reflect.Method;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/*** 自定义的Servlet基类*/public abstract class BaseServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // 通过op参数决定调用的方法 String op = request.getParameter(&quot;op&quot;); // 根据 op 来执行 子类 的 业务方法 ， java 反射：动态执行java方法 // 获取类对象 Class&lt;?&gt; cls = this.getClass(); try &#123; // Method java 方法对象 Method m = cls.getMethod(op, HttpServletRequest.class, HttpServletResponse.class); // 通过 java 的反射机制， 动态执行方法 m.invoke(this, request, response); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request, response); &#125;&#125; url : |address|.s?op&#x3D;|function| &amp; +","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"实现将本地文件上传至服务器，自动地将文件中的数据导入数据库","slug":"技术向/Java/源辰技术储备/实现将本地文件上传至服务器，自动地将文件中的数据导入数据库","date":"2019-11-16T16:00:00.000Z","updated":"2022-05-11T01:49:06.733Z","comments":true,"path":"技术向/Java/源辰技术储备/实现将本地文件上传至服务器，自动地将文件中的数据导入数据库/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E5%AE%9E%E7%8E%B0%E5%B0%86%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%87%B3%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%9C%B0%E5%B0%86%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/","excerpt":"","text":"实现将本地文件上传至服务器，自动地将文件中的数据导入数据库 2019.11.05 项目案例：双色球（DoubleBall） DoubleBall.zip 思想：首先通过upload将文件上传至服务器，服务器自动的通过io读取该文件，读到的数据放入一个临时字符串中。再对这个长字符串进行分割，后数组元素对应表列存入数据库。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125&lt;%@page import=&quot;task.biz.LotteryBiz&quot;%&gt;&lt;%@page import=&quot;task.bean.Lottery&quot;%&gt;&lt;%@page import=&quot;java.io.FileInputStream&quot;%&gt;&lt;%@page import=&quot;java.io.File&quot;%&gt;&lt;%@page import=&quot;java.io.InputStreamReader&quot;%&gt;&lt;%@page import=&quot;java.io.BufferedReader&quot;%&gt;&lt;%@page import=&quot;java.util.Date&quot;%&gt;&lt;%@page import=&quot;java.text.SimpleDateFormat&quot;%&gt;&lt;%@page import=&quot;java.util.List&quot;%&gt;&lt;%@page import=&quot;java.util.ArrayList&quot;%&gt;&lt;%@page import=&quot;com.jspsmart.upload.Files&quot;%&gt;&lt;%@page import=&quot;com.jspsmart.upload.SmartUpload&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;% //创建文件上传对象 SmartUpload su = new SmartUpload(); //初始化，传入页面上下文对象 su.initialize(pageContext); //设置上传配置信息 //限定文件名后缀 su.setAllowedFilesList(&quot;txt&quot;); //限定大小 su.setMaxFileSize(1024 * 1024 * 10); //上传准备就绪 su.upload(); Files files = su.getFiles(); List&lt;String&gt; fileList = new ArrayList&lt;String&gt;(); String filename = null; //文件名 String diskPath = null; //目录绝对路径 String realName = null; //文件绝对路径 for (int i = 0; i &lt; files.getCount(); i++) &#123; //防止上传的文件名相同，将文件名修改为唯一 //获取系统当前时间 SimpleDateFormat df = new SimpleDateFormat(&quot;yyyyMMddHHmmssSSS&quot;); Date date = new Date(); filename = df.format(date); //使用application 将相对路径转换成绝对路径 diskPath = application.getRealPath(&quot;/upload&quot;); realName = diskPath + &quot;/&quot; + filename; files.getFile(i).saveAs(realName); fileList.add(realName); &#125; String result = &quot;&quot;; //读取txt文件的数据并保存到该字符串中 File file = null; BufferedReader br = null; InputStreamReader reader = null; String s = null; //Reader每次读取一行的容器 List&lt;String[]&gt; listS = new ArrayList&lt;String[]&gt;(); //每一个元素将是已经被分割好的一期双色球数据 String[] params = null; //每一个元素将是数据库中对应的一列 String[] sql = null; //每一个元素将是一期双色球数据 for (String f : fileList) &#123; try &#123; //f是上传文件的绝对路径 file = new File(f); reader = new InputStreamReader(new FileInputStream(file), &quot;utf-8&quot;); br = new BufferedReader(reader); while ((s = br.readLine()) != null) &#123; result = result + s; &#125; //从文件中读取数据并存入数据库中 //通过&quot;/&quot;分割每一期数据 sql = result.split(&quot;/&quot;); if (sql.length != 0) &#123; for (String number : sql) &#123; //通过&quot;:&quot;分割数据库中对应的每一列 params = number.split(&quot;:&quot;); listS.add(params); &#125; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; //储存完后将result置为空 result = &quot;&quot;; br.close(); reader.close(); &#125; &#125; //listS中存储所有文件的所有数据 String msg = null; //提示信息 Lottery lottery = null; List&lt;Lottery&gt; list = new ArrayList&lt;Lottery&gt;(); //遍历集合将数据从数组中取出存入Lottery实体对象中，并存入集合中 for (String[] string : listS) &#123; //如果数组长度不等于12 则数据有误，丢弃 if (string.length == 12) &#123; lottery = new Lottery(); lottery.setOpendate(string[0]); lottery.setNum(string[1]); lottery.setRedone(string[2]); lottery.setRedtwo(string[3]); lottery.setRedthree(string[4]); lottery.setRedfour(string[5]); lottery.setRedfive(string[6]); lottery.setRedsix(string[7]); lottery.setBlue(string[8]); lottery.setSale(string[9]); lottery.setFirstprize(string[10]); lottery.setSecondeprize(string[11]); &#125; list.add(lottery); &#125; //遍历集合将数据存入数据库 LotteryBiz biz = null; long num = 0; if (list.size() != 0) &#123; for (int i = 0; i &lt; list.size(); i++) &#123; biz = new LotteryBiz(); //返回的是有多少条数据发生了更改 num = biz.add(list.get(i)); if (num &lt; 0) &#123; msg = &quot;文件上传失败！&quot;; pageContext.setAttribute(&quot;msg&quot;, msg); return; &#125; &#125; msg = &quot;文件上传成功！&quot;; pageContext.setAttribute(&quot;msg&quot;, msg); &#125;%&gt;&lt;b&gt;$&#123;msg&#125;&lt;/b&gt;&lt;input type=&quot;button&quot; value=&quot;返回&quot; onclick=&quot;window.location.href = &#x27;index.jsp&#x27;&quot; /&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"工具网站","slug":"技术向/Java/源辰技术储备/工具网站","date":"2019-11-16T16:00:00.000Z","updated":"2022-05-11T01:47:07.678Z","comments":true,"path":"技术向/Java/源辰技术储备/工具网站/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99/","excerpt":"","text":"工具网站 廖彦老师GitHub仓库：https://github.com/llsok/ycdemo jQuery菜鸟教程：https://www.runoob.com/jquery/jquery-tutorial.html EasyUI中文官网：http://www.jeasyui.net/","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"数据文件批量导入数据库SQL语句构造","slug":"技术向/Java/源辰技术储备/数据文件批量导入数据库SQL语句构造","date":"2019-11-15T16:00:00.000Z","updated":"2022-05-11T01:50:01.689Z","comments":true,"path":"技术向/Java/源辰技术储备/数据文件批量导入数据库SQL语句构造/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93SQL%E8%AF%AD%E5%8F%A5%E6%9E%84%E9%80%A0/","excerpt":"","text":"数据文件批量导入数据库SQL语句构造","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第78次课程-第86次课程_S2_ExchangeBookNet","slug":"技术向/Java/源辰课程记录/第78次课程-第86次课程_S2_ExchangeBookNet","date":"2019-11-07T16:00:00.000Z","updated":"2022-05-11T01:26:09.584Z","comments":true,"path":"技术向/Java/源辰课程记录/第78次课程-第86次课程_S2_ExchangeBookNet/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC78%E6%AC%A1%E8%AF%BE%E7%A8%8B-%E7%AC%AC86%E6%AC%A1%E8%AF%BE%E7%A8%8B_S2_ExchangeBookNet/","excerpt":"","text":"源辰74班 第78次课程 - 第86次课程 2019.11.08 - 2019.12.01 课程 第78次课程** JavaEE_T01L01_项目案例[廖彦]** **第79次课程 **JavaEE_T02L02_项目案例[廖彦] **第80次课程 **JavaEE_T03L03_项目案例[廖彦] **第81次课程 **JavaEE_T04L04_项目案例[廖彦] **第82次课程 **JavaEE_T05L05_项目案例[廖彦] **第83次课程 **JavaEE_T06L06_项目案例[廖彦] **第84次课程 **JavaEE_T07L07_中期评审[廖彦] **第85次课程 **JavaEE_T08L08_项目案例[廖彦] **第86次课程 **JavaEE_T09L09_项目总结会[廖彦] 内容 S2项目 ExchangeBookNet 项目组成员：付绍斌 雷一鸣 胡燕卿 yishuwang.zip yishuwang.sql","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"jQuery_和_EasyUI_引入","slug":"技术向/Java/源辰技术储备/jQuery_和_EasyUI_引入","date":"2019-11-06T16:00:00.000Z","updated":"2022-05-11T01:56:13.565Z","comments":true,"path":"技术向/Java/源辰技术储备/jQuery_和_EasyUI_引入/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/jQuery_%E5%92%8C_EasyUI_%E5%BC%95%E5%85%A5/","excerpt":"","text":"jQuery 和 EasyUI 引入 jQuery 12&lt;script src=&quot;js/jquery-1.11.2.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/jquery.cookie.js&quot;&gt;&lt;/script&gt; EasyUI 1234567891011&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&lt;%=application.getContextPath()%&gt;/js/easyui/themes/default/easyui.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&lt;%=application.getContextPath()%&gt;/js/easyui/themes/icon.css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%=application.getContextPath()%&gt;/js/easyui/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%=application.getContextPath()%&gt;/js/easyui/jquery.easyui.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%=application.getContextPath()%&gt;/js/easyui/locale/easyui-lang-zh_CN.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第77次课程_REDIS基础","slug":"技术向/Java/源辰课程记录/第77次课程_REDIS基础","date":"2019-11-05T16:00:00.000Z","updated":"2022-05-11T01:25:53.394Z","comments":true,"path":"技术向/Java/源辰课程记录/第77次课程_REDIS基础/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC77%E6%AC%A1%E8%AF%BE%E7%A8%8B_REDIS%E5%9F%BA%E7%A1%80/","excerpt":"","text":"源辰76班 第77次课程 2019.11.06 内容 REDIS基础[廖彦] 1.客户端和服务端 ** ** 2.案例源码： RedisBiz.java 1234567891011121314151617package com.yc.damai.biz;import redis.clients.jedis.Jedis;public class RedisBiz &#123; public static void main(String[] args) &#123; //创建redis连接 Jedis jedis = new Jedis(&quot;127.0.0.1&quot;,6379); try&#123; //键 值 jedis.set(&quot;book3&quot;, &quot;redis&quot;); //list 键 值... jedis.lpush(&quot;books&quot;, &quot;test&quot;, &quot;java&quot;, &quot;c++&quot;); &#125; finally &#123; //关闭redis连接 jedis.close(); &#125; &#125;&#125; 3.Redis命令行 %!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;)","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第76次课程-J2EE_项目案例","slug":"技术向/Java/源辰课程记录/第76次课程-J2EE_项目案例","date":"2019-11-02T16:00:00.000Z","updated":"2022-05-11T01:25:39.386Z","comments":true,"path":"技术向/Java/源辰课程记录/第76次课程-J2EE_项目案例/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC76%E6%AC%A1%E8%AF%BE%E7%A8%8B-J2EE_%E9%A1%B9%E7%9B%AE%E6%A1%88%E4%BE%8B/","excerpt":"","text":"源辰76班 第76次课程 2019.11.03 内容 J2EE_项目案例[廖彦] 1.格式化 1234567891011&lt;script&gt; function fmtHot(value,row,index)&#123; return value == 0 ? &quot;非热卖&quot; : &quot;热卖&quot;; &#125; function fmtImage(value,row,index)&#123; return &quot;&lt;img src=&#x27;../&quot; + value +&quot;&#x27; height=&#x27;40px&#x27;&gt;&quot;; &#125;&lt;/script&gt;&lt;th data-options=&quot;field:&#x27;image&#x27;,width:100,formatter:fmtImage&quot;&gt;图片&lt;/th&gt;&lt;th data-options=&quot;field:&#x27;is_hot&#x27;,width:100,formatter:fmtHot&quot;&gt;热卖标志&lt;/th&gt; 2.代码仓库 product.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;商品管理&lt;/title&gt; &lt;!-- 相对路径 --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../js/easyui/themes/default/easyui.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../js/easyui/themes/icon.css&quot;&gt; &lt;!-- 绝对路径 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/191026_Servlet/js/easyui/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/191026_Servlet/js/easyui/jquery.easyui.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 国际化js文件 --&gt; &lt;!-- 改进绝对路径：工程名可以任意变化 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%=application.getContextPath() %&gt;/js/easyui/locale/easyui-lang-zh_CN.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt;function edit()&#123; // 获取表格当前选中的行 row 就是 Product 实体对象 ===》 json 对象 var row = $(&quot;#dg&quot;).datagrid(&quot;getSelected&quot;); if(row == null)&#123; $.messager.alert(&#x27;系统提示&#x27;,&#x27;请选择要编辑的服装&#x27;,&#x27;error&#x27;); return; &#125; $(&#x27;#dlg&#x27;).dialog(&#x27;open&#x27;); // 清空表单中的值 $(&quot;#editForm&quot;).form(&#x27;clear&#x27;); // 补丁 $(&quot;#op&quot;).val(&quot;save&quot;); $(&quot;#productImage&quot;).val(row.image); // 将改行数据填写到表单控件中 $(&quot;#editForm&quot;).form(&#x27;load&#x27;,row); &#125;function add()&#123; // 获取表格当前选中的行 row 就是 Product 实体对象 ===》 json 对象 $(&#x27;#dlg&#x27;).dialog(&#x27;open&#x27;); // 清空表单中的值 $(&quot;#editForm&quot;).form(&#x27;clear&#x27;); // 补丁 $(&quot;#op&quot;).val(&quot;save&quot;); $(&quot;#productImage&quot;).val(&quot;&quot;);&#125;function save()&#123; $(&#x27;#editForm&#x27;).form(&#x27;submit&#x27;, &#123; // get 请求会删除 url 地址里面的请求参数 url: &quot;../product.s&quot;, success: function(json)&#123; eval(&quot;var result = &quot; + json); if(result.code == 1)&#123; // 冒泡提示信息 $.messager.show(&#123; title:&#x27;系统提示&#x27;, msg:result.msg, timeout:3000, showType:&#x27;slide&#x27; &#125;); $(&#x27;#dlg&#x27;).dialog(&#x27;close&#x27;); // 表格重新加载数据（查询） $(&quot;#dg&quot;).datagrid(&quot;reload&quot;); &#125; else &#123; $.messager.alert(&#x27;系统提示&#x27;,result.msg,&#x27;error&#x27;); &#125; &#125; &#125;); &#125;function selectCsid(category)&#123; $(&#x27;#csid&#x27;).combobox(&#x27;reload&#x27;,&#x27;../categorysecond.s?op=queryByCid&amp;cid=&#x27; + category.cid );&#125;function fmtHot(value,row,index)&#123; return value == 0 ? &quot;非热卖&quot; : &quot;热卖&quot;;&#125;function fmtImage(value,row,index)&#123; return &quot;&lt;img src=&#x27;../&quot; + value +&quot;&#x27; height=&#x27;40px&#x27;&gt;&quot;;&#125;//easyui 的表单提交不能上传文件function save()&#123; // 创建表单对象（实现文件上传） 传入 html 表单元素 var formData = new FormData($(&#x27;#editForm&#x27;)[0]); $.ajax(&#123; url:&#x27;../product.s?op=save&#x27;, type:&#x27;post&#x27;, data: formData, contentType: false, processData: false, success:function(result)&#123; //eval(&quot;var result = &quot; + json); if(result.code == 1)&#123; // 冒泡提示信息 $.messager.show(&#123; title:&#x27;系统提示&#x27;, msg:result.msg, timeout:3000, showType:&#x27;slide&#x27; &#125;); $(&#x27;#dlg&#x27;).dialog(&#x27;close&#x27;); // 表格重新加载数据（查询） $(&quot;#dg&quot;).datagrid(&quot;reload&quot;); &#125; else &#123; $.messager.alert(&#x27;系统提示&#x27;,result.msg,&#x27;error&#x27;); &#125; &#125; &#125;)&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;table id=&quot;dg&quot; class=&quot;easyui-datagrid&quot; title=&quot;DataGrid Complex Toolbar&quot; data-options=&quot; fit:true, rownumbers:true, singleSelect:true, url:&#x27;../product.s?op=query&#x27;, method:&#x27;get&#x27;, toolbar:&#x27;#tb&#x27;&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th data-options=&quot;field:&#x27;pid&#x27;,width:80&quot;&gt;ID&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;pname&#x27;,width:100&quot;&gt;名称&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;shop_price&#x27;,width:100&quot;&gt;商场价&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;image&#x27;,width:100,formatter:fmtImage&quot;&gt;图片&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;pdate&#x27;,width:100&quot;&gt;日期&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;is_hot&#x27;,width:100,formatter:fmtHot&quot;&gt;热卖标志&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;/table&gt;&lt;div id=&quot;tb&quot; style=&quot;padding:5px;height:auto&quot;&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-add&quot; plain=&quot;true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-edit&quot; plain=&quot;true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-save&quot; plain=&quot;true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-cut&quot; plain=&quot;true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-remove&quot; plain=&quot;true&quot;&gt;&lt;/a&gt; &lt;/div&gt; &lt;div&gt; Date From: &lt;input class=&quot;easyui-datebox&quot; style=&quot;width:80px&quot;&gt; To: &lt;input class=&quot;easyui-datebox&quot; style=&quot;width:80px&quot;&gt; Language: &lt;select class=&quot;easyui-combobox&quot; panelHeight=&quot;auto&quot; style=&quot;width:100px&quot;&gt; &lt;option value=&quot;java&quot;&gt;Java&lt;/option&gt; &lt;option value=&quot;c&quot;&gt;C&lt;/option&gt; &lt;option value=&quot;basic&quot;&gt;Basic&lt;/option&gt; &lt;option value=&quot;perl&quot;&gt;Perl&lt;/option&gt; &lt;option value=&quot;python&quot;&gt;Python&lt;/option&gt; &lt;/select&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-search&quot;&gt;Search&lt;/a&gt; &lt;a href=&quot;javascript:void(0)&quot; class=&quot;easyui-linkbutton&quot; onclick=&quot;edit()&quot;&gt;编辑&lt;/a&gt; &lt;a href=&quot;javascript:void(0)&quot; class=&quot;easyui-linkbutton&quot; onclick=&quot;add()&quot;&gt;新增&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&lt;!-- 对话框：商品信息编辑 --&gt;&lt;div id=&quot;dlg&quot; class=&quot;easyui-dialog&quot; title=&quot;Basic Dialog&quot; data-options=&quot; iconCls:&#x27;icon-save&#x27;, closed:true, buttons: [&#123; text:&#x27;保存&#x27;, iconCls:&#x27;icon-ok&#x27;, handler:function()&#123; save(); &#125; &#125;,&#123; text:&#x27;放弃&#x27;, iconCls:&#x27;icon-cancel&#x27;, handler:function()&#123; $(&#x27;#dlg&#x27;).dialog(&#x27;close&#x27;); &#125; &#125;] &quot; style=&quot;width:400px;height:400px;padding:10px&quot;&gt; &lt;form action=&quot;????&quot; id=&quot;editForm&quot;&gt; &lt;input id=&quot;op&quot; name=&quot;op&quot; value=&quot;save&quot; type=&quot;hidden&quot;&gt; &lt;input id=&quot;productImage&quot; name=&quot;image&quot; type=&quot;hidden&quot;&gt; &lt;input class=&quot;easyui-textbox&quot; name=&quot;pid&quot; style=&quot;width:300px&quot; data-options=&quot;label:&#x27;商品ID：&#x27;&quot;&gt; &lt;input class=&quot;easyui-textbox&quot; name=&quot;pname&quot; style=&quot;width:300px&quot; data-options=&quot;label:&#x27;名称：&#x27;&quot;&gt; &lt;input class=&quot;easyui-textbox&quot; name=&quot;shop_price&quot; style=&quot;width:300px&quot; type=&quot;number&quot; data-options=&quot;label:&#x27;商城价：&#x27;&quot;&gt; &lt;input class=&quot;easyui-radiobutton&quot; name=&quot;is_hot&quot; value=&quot;1&quot; label=&quot;热卖：&quot;&gt; &lt;input class=&quot;easyui-radiobutton&quot; name=&quot;is_hot&quot; value=&quot;0&quot; label=&quot;非热卖：&quot;&gt; &lt;!-- 下拉框 --&gt; &lt;!-- data-options label:&#x27;显示在框前字符串&#x27;, url:&#x27;从远程加载列表数据的 URL&#x27;, valueField:&#x27;绑定到该组合框（ComboBox）的 value 上的基础数据的名称&#x27;, onSelect:&#x27;当用户选择一个列表项时触发&#x27; --&gt; &lt;input class=&quot;easyui-combobox&quot; name=&quot;cid&quot; style=&quot;width:300px&quot; data-options=&quot;label:&#x27;主类别：&#x27;, url:&#x27;../category.s?op=queryAll&#x27;, textField:&#x27;cname&#x27;, valueField:&#x27;cid&#x27;, onSelect:selectCsid&quot;&gt; &lt;input id=&quot;csid&quot; class=&quot;easyui-combobox&quot; name=&quot;csid&quot; style=&quot;width:300px&quot; data-options=&quot;label:&#x27;子类别：&#x27;, url:&#x27;../categorysecond.s?op=queryByCid&#x27;, textField:&#x27;csname&#x27;, valueField:&#x27;csid&#x27; &quot;&gt; &lt;input class=&quot;easyui-textbox&quot; name=&quot;pdesc&quot; style=&quot;width:300px&quot; type=&quot;number&quot; data-options=&quot;label:&#x27;描述：&#x27;,multiline:true&quot;&gt; &lt;input class=&quot;easyui-filebox&quot; style=&quot;width:300px&quot; name=&quot;imageFile&quot; data-options=&quot;label:&#x27;上传图片：&#x27;&quot;&gt; &lt;/form&gt;&lt;/div&gt;&lt;!-- 11.01 作业：实现商品的增删改查操作 1、实现商品信息的修改，保存至数据库 2、实现商品信息的新增，添加至数据库 3、实现商品删除 4、请使用 ajax 方式进行以上操作 5、成功完成之后，请刷新表格（重新查询，请查api）--&gt;&lt;/body&gt;&lt;/html&gt; ProductServlet.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104package com.yc.damai.servlet;import java.io.IOException;import java.io.PrintWriter;import java.lang.reflect.InvocationTargetException;import java.util.Enumeration;import java.util.HashMap;import java.util.List;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.beanutils.BeanUtils;import com.google.gson.Gson;import com.jspsmart.upload.Files;import com.jspsmart.upload.SmartUpload;import com.jspsmart.upload.SmartUploadException;import com.yc.damai.bean.Product;import com.yc.damai.bean.Result;import com.yc.damai.biz.BizException;import com.yc.damai.biz.ProductBiz;@WebServlet(&quot;/product.s&quot;)public class ProductServlet extends BaseServlet &#123; private static final long serialVersionUID = 1L; private ProductBiz biz = new ProductBiz(); public void query(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; response.setContentType(&quot;text/html; charset=utf-8&quot;); List&lt;Product&gt; list = biz.query(); // 引出out.print PrintWriter out = response.getWriter(); Gson gson = new Gson(); // 动态数组转成json格式 out.print(gson.toJson(list)); &#125; public void save(HttpServletRequest request, HttpServletResponse response) throws IOException, IllegalAccessException, InvocationTargetException, SmartUploadException, ServletException &#123; // 创建文件上传对象 SmartUpload su = new SmartUpload(); // 初始化，传入页面上下文对象 su.initialize(getServletConfig(), request, response); // 设置上传的配置信息 // 限定文件名后缀 su.setAllowedFilesList(&quot;jpg,png,gif,bmp&quot;); // 限定大小 su.setMaxFileSize(1024 * 1024 * 10); // 执行上传 su.upload(); //判断是否有上传文件 String webPath = null; if(su.getFiles().getSize()&gt;0) &#123; Files files = su.getFiles(); String filename = files.getFile(0).getFileName(); // 使用application（应用上下文对象） web路径 转换成 磁盘路径 // getServletContext（） === application String diskPath = getServletContext().getRealPath(&quot;/products/upload&quot;); files.getFile(0).saveAs(diskPath + &quot;/&quot; + filename); webPath = &quot;products/upload/&quot; + filename; &#125; Product p = new Product(); // smartupload 对请求对象进行了封装 HashMap&lt;String, String&gt; paramMap = new HashMap&lt;&gt;(); @SuppressWarnings(&quot;unchecked&quot;) Enumeration&lt;String&gt; es = su.getRequest().getParameterNames(); while (es.hasMoreElements()) &#123; String paramName = es.nextElement(); String paramValue = su.getRequest().getParameter(paramName); /** * smartupload 会对表单数据使用gbk格式编码，当前工程是utf-8编码，要手动转 * 不过，即使是手动转了也还是会出现少量乱码，是 gbk 与 utf-8 两个字符集的兼容性问题，小问题忽略 * 另外，smartupload 提供的 setCharset 方法（设置字符集方法）执行会直接报错，应该是bug */ paramMap.put(paramName, new String(paramValue.getBytes(&quot;gbk&quot;),&quot;utf-8&quot;)); &#125; BeanUtils.populate(p, paramMap); if(webPath!=null) &#123; p.setImage(webPath); &#125; Result result; try &#123; biz.save(p); result = Result.success(&quot;保存商品成功！&quot;); &#125; catch (BizException e) &#123; e.printStackTrace(); result = Result.success(e.getMessage()); &#125; Gson gson = new Gson(); String json = gson.toJson(result); // 返回json格式数据 response.setContentType(&quot;application/json;charset=UTF-8&quot;); response.getWriter().append(json); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第75次课程_EASYUI_2","slug":"技术向/Java/源辰课程记录/第75次课程_EASYUI_2","date":"2019-11-01T16:00:00.000Z","updated":"2022-05-11T01:25:28.014Z","comments":true,"path":"技术向/Java/源辰课程记录/第75次课程_EASYUI_2/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC75%E6%AC%A1%E8%AF%BE%E7%A8%8B_EASYUI_2/","excerpt":"","text":"源辰76班 第75次课程 2019.11.02 内容 EASYUI_2[廖彦] 1.编辑、新增功能实现 product.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;商品管理&lt;/title&gt; &lt;!-- 相对路径 --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../js/easyui/themes/default/easyui.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../js/easyui/themes/icon.css&quot;&gt; &lt;!-- 绝对路径 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/191026_Servlet/js/easyui/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/191026_Servlet/js/easyui/jquery.easyui.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 国际化js文件 --&gt; &lt;!-- 改进绝对路径：工程名可以任意变化 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%=application.getContextPath() %&gt;/js/easyui/locale/easyui-lang-zh_CN.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt;function edit()&#123; // 获取表格当前选中的行 row 就是 Product 实体对象 ===》 json 对象 var row = $(&quot;#dg&quot;).datagrid(&quot;getSelected&quot;); if(row == null)&#123; $.messager.alert(&#x27;系统提示&#x27;,&#x27;请选择要编辑的服装&#x27;,&#x27;error&#x27;); return; &#125; $(&#x27;#dlg&#x27;).dialog(&#x27;open&#x27;); // 将改行数据填写到表单控件中 $(&quot;#editForm&quot;).form(&#x27;load&#x27;,row);&#125;function add()&#123; // 获取表格当前选中的行 row 就是 Product 实体对象 ===》 json 对象 $(&#x27;#dlg&#x27;).dialog(&#x27;open&#x27;); // 将改行数据填写到表单控件中 $(&quot;#editForm&quot;).form(&#x27;clear&#x27;); // 补丁 $(&quot;#op&quot;).val(&quot;save&quot;);&#125;function save()&#123; $(&#x27;#editForm&#x27;).form(&#x27;submit&#x27;, &#123; // get 请求会删除 url 地址里面的请求参数 url: &quot;../product.s&quot;, success: function(json)&#123; eval(&quot;var result = &quot; + json); if(result.code == 1)&#123; // 冒泡提示信息 $.messager.show(&#123; title:&#x27;系统提示&#x27;, msg:result.msg, timeout:3000, showType:&#x27;slide&#x27; &#125;); $(&#x27;#dlg&#x27;).dialog(&#x27;close&#x27;); // 表格重新加载数据（查询） $(&quot;#dg&quot;).datagrid(&quot;reload&quot;); &#125; else &#123; $.messager.alert(&#x27;系统提示&#x27;,result.msg,&#x27;error&#x27;); &#125; &#125; &#125;); &#125;function selectCsid(category)&#123; $(&#x27;#csid&#x27;).combobox(&#x27;reload&#x27;,&#x27;../categorysecond.s?op=queryByCid&amp;cid=&#x27; + category.cid );&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;table id=&quot;dg&quot; class=&quot;easyui-datagrid&quot; title=&quot;DataGrid Complex Toolbar&quot; data-options=&quot; fit:true, rownumbers:true, singleSelect:true, url:&#x27;../product.s?op=query&#x27;, method:&#x27;get&#x27;, toolbar:&#x27;#tb&#x27;&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th data-options=&quot;field:&#x27;pid&#x27;,width:80&quot;&gt;ID&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;pname&#x27;,width:100&quot;&gt;名称&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;shop_price&#x27;,width:100&quot;&gt;商场价&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;image&#x27;,width:100&quot;&gt;图片&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;pdate&#x27;,width:100&quot;&gt;日期&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;is_hot&#x27;,width:100&quot;&gt;热卖标志&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;/table&gt;&lt;div id=&quot;tb&quot; style=&quot;padding:5px;height:auto&quot;&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-add&quot; plain=&quot;true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-edit&quot; plain=&quot;true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-save&quot; plain=&quot;true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-cut&quot; plain=&quot;true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-remove&quot; plain=&quot;true&quot;&gt;&lt;/a&gt; &lt;/div&gt; &lt;div&gt; Date From: &lt;input class=&quot;easyui-datebox&quot; style=&quot;width:80px&quot;&gt; To: &lt;input class=&quot;easyui-datebox&quot; style=&quot;width:80px&quot;&gt; Language: &lt;select class=&quot;easyui-combobox&quot; panelHeight=&quot;auto&quot; style=&quot;width:100px&quot;&gt; &lt;option value=&quot;java&quot;&gt;Java&lt;/option&gt; &lt;option value=&quot;c&quot;&gt;C&lt;/option&gt; &lt;option value=&quot;basic&quot;&gt;Basic&lt;/option&gt; &lt;option value=&quot;perl&quot;&gt;Perl&lt;/option&gt; &lt;option value=&quot;python&quot;&gt;Python&lt;/option&gt; &lt;/select&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-search&quot;&gt;Search&lt;/a&gt; &lt;a href=&quot;javascript:void(0)&quot; class=&quot;easyui-linkbutton&quot; onclick=&quot;edit()&quot;&gt;编辑&lt;/a&gt; &lt;a href=&quot;javascript:void(0)&quot; class=&quot;easyui-linkbutton&quot; onclick=&quot;add()&quot;&gt;新增&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&lt;!-- 对话框：商品信息编辑 --&gt;&lt;div id=&quot;dlg&quot; class=&quot;easyui-dialog&quot; title=&quot;Basic Dialog&quot; data-options=&quot; iconCls:&#x27;icon-save&#x27;, closed:true, buttons: [&#123; text:&#x27;保存&#x27;, iconCls:&#x27;icon-ok&#x27;, handler:function()&#123; save(); &#125; &#125;,&#123; text:&#x27;放弃&#x27;, iconCls:&#x27;icon-cancel&#x27;, handler:function()&#123; $(&#x27;#dlg&#x27;).dialog(&#x27;close&#x27;); &#125; &#125;] &quot; style=&quot;width:400px;height:400px;padding:10px&quot;&gt; &lt;form action=&quot;????&quot; id=&quot;editForm&quot;&gt; &lt;input id=&quot;op&quot; name=&quot;op&quot; value=&quot;save&quot; type=&quot;hidden&quot;&gt; &lt;input class=&quot;easyui-textbox&quot; name=&quot;pid&quot; style=&quot;width:300px&quot; data-options=&quot;label:&#x27;商品ID：&#x27;&quot;&gt; &lt;input class=&quot;easyui-textbox&quot; name=&quot;pname&quot; style=&quot;width:300px&quot; data-options=&quot;label:&#x27;名称：&#x27;&quot;&gt; &lt;input class=&quot;easyui-textbox&quot; name=&quot;shop_price&quot; style=&quot;width:300px&quot; type=&quot;number&quot; data-options=&quot;label:&#x27;商城价：&#x27;&quot;&gt; &lt;input class=&quot;easyui-radiobutton&quot; name=&quot;is_hot&quot; value=&quot;1&quot; label=&quot;热卖：&quot;&gt; &lt;input class=&quot;easyui-radiobutton&quot; name=&quot;is_hot&quot; value=&quot;0&quot; label=&quot;非热卖：&quot;&gt; &lt;!-- 下拉框 --&gt; &lt;!-- data-options label:&#x27;显示在框前字符串&#x27;, url:&#x27;从远程加载列表数据的 URL&#x27;, valueField:&#x27;绑定到该组合框（ComboBox）的 value 上的基础数据的名称&#x27;, onSelect:&#x27;当用户选择一个列表项时触发&#x27; --&gt; &lt;input class=&quot;easyui-combobox&quot; name=&quot;cid&quot; style=&quot;width:300px&quot; data-options=&quot;label:&#x27;主类别：&#x27;, url:&#x27;../category.s?op=queryAll&#x27;, textField:&#x27;cname&#x27;, valueField:&#x27;cid&#x27;, onSelect:selectCsid&quot;&gt; &lt;input id=&quot;csid&quot; class=&quot;easyui-combobox&quot; name=&quot;csid&quot; style=&quot;width:300px&quot; data-options=&quot;label:&#x27;子类别：&#x27;, url:&#x27;../categorysecond.s?op=queryByCid&#x27;, textField:&#x27;csname&#x27;, valueField:&#x27;csid&#x27; &quot;&gt; &lt;input class=&quot;easyui-textbox&quot; name=&quot;pdesc&quot; style=&quot;width:300px&quot; type=&quot;number&quot; data-options=&quot;label:&#x27;描述：&#x27;,multiline:true&quot;&gt; &lt;/form&gt;&lt;/div&gt;&lt;!-- 11.01 作业：实现商品的增删改查操作 1、实现商品信息的修改，保存至数据库 2、实现商品信息的新增，添加至数据库 3、实现商品删除 4、请使用 ajax 方式进行以上操作 5、成功完成之后，请刷新表格（重新查询，请查api）--&gt;&lt;/body&gt;&lt;/html&gt; Category.java 1234567891011121314151617package com.yc.damai.bean;public class Category &#123; private Integer cid; private String cname; public Integer getCid() &#123; return cid; &#125; public void setCid(Integer cid) &#123; this.cid = cid; &#125; public String getCname() &#123; return cname; &#125; public void setCname(String cname) &#123; this.cname = cname; &#125;&#125; Categorysecond.java 123456789101112131415161718192021222324package com.yc.damai.bean;public class Categorysecond &#123; private Integer cid; private Integer csid; private String csname; public Integer getCid() &#123; return cid; &#125; public void setCid(Integer cid) &#123; this.cid = cid; &#125; public Integer getCsid() &#123; return csid; &#125; public void setCsid(Integer csid) &#123; this.csid = csid; &#125; public String getCsname() &#123; return csname; &#125; public void setCsname(String csname) &#123; this.csname = csname; &#125;&#125; CategoryBiz.java 12345678910111213141516package com.yc.damai.biz;import java.util.List;import com.yc.damai.bean.Category;import com.yc.damai.dao.CategoryDao;public class CategoryBiz &#123; private CategoryDao dao = new CategoryDao(); public List&lt;Category&gt; queryAll()&#123; return dao.selectAll(); &#125;&#125; CategorysecondBiz.java 12345678910111213141516package com.yc.damai.biz;import java.util.List;import com.yc.damai.bean.Categorysecond;import com.yc.damai.dao.CategorysecondDao;public class CategorysecondBiz &#123; private CategorysecondDao dao = new CategorysecondDao(); public List&lt;Categorysecond&gt; queryByCid(String cid)&#123; return dao.selectByCid(cid); &#125;&#125; CategoryDao.java 1234567891011121314151617package com.yc.damai.dao;import java.util.List;import java.util.Map;import com.yc.damai.bean.Category;import com.yc.damai.util.DBHelper;public class CategoryDao &#123; public List&lt;Category&gt; selectAll() &#123; String sql = &quot;select * from category&quot;; List&lt;Map&lt;String,Object&gt;&gt; list = DBHelper.selectList(sql); return DBHelper.populate(list, Category.class); &#125;&#125; CategorysecondDao.java 1234567891011121314151617package com.yc.damai.dao;import java.util.List;import java.util.Map;import com.yc.damai.bean.Categorysecond;import com.yc.damai.util.DBHelper;public class CategorysecondDao &#123; public List&lt;Categorysecond&gt; selectByCid(String cid) &#123; String sql = &quot;select * from categorysecond where cid = ?&quot;; List&lt;Map&lt;String,Object&gt;&gt; list = DBHelper.selectList(sql,cid); return DBHelper.populate(list, Categorysecond.class); &#125;&#125; CategoryServlet.java 12345678910111213141516171819202122232425262728package com.yc.damai.servlet;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import com.google.gson.Gson;import com.yc.damai.biz.CategoryBiz;@WebServlet(&quot;/category.s&quot;)public class CategoryServlet extends BaseServlet &#123; private static final long serialVersionUID = 1L; private CategoryBiz biz = new CategoryBiz(); // 查询 127.0.0.1/demo-damai-76/orders.s?op=olist public void queryAll(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; Gson gson = new Gson(); String json = gson.toJson(biz.queryAll()); // 返回json格式数据 response.setContentType(&quot;application/json;charset=UTF-8&quot;); response.getWriter().append(json); &#125;&#125; CategorysecondServlet.java 1234567891011121314151617181920212223242526272829package com.yc.damai.servlet;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import com.google.gson.Gson;import com.yc.damai.biz.CategorysecondBiz;@WebServlet(&quot;/categorysecond.s&quot;)public class CategorysecondServlet extends BaseServlet &#123; private static final long serialVersionUID = 1L; private CategorysecondBiz biz = new CategorysecondBiz(); // 查询 127.0.0.1/demo-damai-76/orders.s?op=olist public void queryByCid(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; String cid = request.getParameter(&quot;cid&quot;); Gson gson = new Gson(); String json = gson.toJson(biz.queryByCid(cid)); // 返回json格式数据 response.setContentType(&quot;application/json;charset=UTF-8&quot;); response.getWriter().append(json); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第74次课程_EASYUI_1","slug":"技术向/Java/源辰课程记录/第74次课程_EASYUI_1","date":"2019-10-31T16:00:00.000Z","updated":"2022-05-11T01:25:17.047Z","comments":true,"path":"技术向/Java/源辰课程记录/第74次课程_EASYUI_1/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC74%E6%AC%A1%E8%AF%BE%E7%A8%8B_EASYUI_1/","excerpt":"","text":"源辰76班 第74次课程 2019.11.01 内容 EASYUI_1[廖彦] 1.esayUI配置环境 esayUI官方网站： http://www.jeasyui.net/ 需将以下文件放入工程文件的WebContent目录中du 不同的网页控件模板可以在此网站上找到源码，将其粘贴到自己的项目文件中。 2.easyUI应用 大麦(damai)电商项目后台管理 product.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;商品管理&lt;/title&gt; &lt;!-- 相对路径 --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../js/easyui/themes/default/easyui.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../js/easyui/themes/icon.css&quot;&gt; &lt;!-- 绝对路径 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/191026_Servlet/js/easyui/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/191026_Servlet/js/easyui/jquery.easyui.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 国际化js文件 --&gt; &lt;!-- 改进绝对路径：工程名可以任意变化 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%=application.getContextPath() %&gt;/js/easyui/locale/easyui-lang-zh_CN.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; function edit()&#123; //web版 选中某一行 //获取表格当前选中的行 row 就是 Product 实体对象 --&gt; json对象 var row = $(&quot;#dg&quot;).datagrid(&quot;getSelected&quot;); if(row==null)&#123; $.messager.alert(&#x27;系统提示&#x27;,&#x27;请选择要编辑的服装&#x27;,&#x27;error&#x27;); return; &#125; //打开对话框 $(&#x27;#dlg&#x27;).dialog(&#x27;open&#x27;); //将行数据填写到表单控件中 $(&quot;#editForm&quot;).form(&#x27;load&#x27;,row); &#125; function add()&#123; $(&#x27;#dlg&#x27;).dialog(&#x27;open&#x27;); //清除表单控件里的数据 $(&quot;#editForm&quot;).form(&#x27;clear&#x27;); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- fit:true 表格全屏显示 --&gt; &lt;table class=&quot;easyui-datagrid&quot; title=&quot;DataGrid Complex Toolbar&quot; id=&quot;dg&quot; data-options=&quot; fit:true, rownumbers:true, singleSelect:true, url:&#x27;&lt;%=application.getContextPath() %&gt;/product.s?op=query&#x27;, method:&#x27;get&#x27;, toolbar:&#x27;#tb&#x27;&quot;&gt; &lt;!-- Ajax局部刷新技术 --&gt; &lt;thead&gt; &lt;tr&gt; &lt;!-- 对应json字符串中的各个变量名 --&gt; &lt;th data-options=&quot;field:&#x27;pid&#x27;,width:80&quot;&gt;pid&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;pname&#x27;,width:100&quot;&gt;pname&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;market_price&#x27;,width:80,align:&#x27;right&#x27;&quot;&gt;market_price&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;shop_price&#x27;,width:80,align:&#x27;right&#x27;&quot;&gt;shop_price&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;image&#x27;,width:240&quot;&gt;image&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;pdesc&#x27;,width:360,align:&#x27;center&#x27;&quot;&gt;pdesc&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;is_hot&#x27;,width:100&quot;&gt;is_hot&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;pdate&#x27;,width:100&quot;&gt;pdate&lt;/th&gt; &lt;th data-options=&quot;field:&#x27;csid&#x27;,width:100&quot;&gt;csid&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;/table&gt; &lt;div id=&quot;tb&quot; style=&quot;padding:5px;height:auto&quot;&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-add&quot; plain=&quot;true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-edit&quot; plain=&quot;true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-save&quot; plain=&quot;true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-cut&quot; plain=&quot;true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-remove&quot; plain=&quot;true&quot;&gt;&lt;/a&gt; &lt;/div&gt; &lt;div&gt; Date From: &lt;input class=&quot;easyui-datebox&quot; style=&quot;width:80px&quot;&gt; To: &lt;input class=&quot;easyui-datebox&quot; style=&quot;width:80px&quot;&gt; Language: &lt;select class=&quot;easyui-combobox&quot; panelHeight=&quot;auto&quot; style=&quot;width:100px&quot;&gt; &lt;option value=&quot;java&quot;&gt;Java&lt;/option&gt; &lt;option value=&quot;c&quot;&gt;C&lt;/option&gt; &lt;option value=&quot;basic&quot;&gt;Basic&lt;/option&gt; &lt;option value=&quot;perl&quot;&gt;Perl&lt;/option&gt; &lt;option value=&quot;python&quot;&gt;Python&lt;/option&gt; &lt;/select&gt; &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-search&quot;&gt;Search&lt;/a&gt; &lt;a href=&quot;javascript:void(0)&quot; class=&quot;easyui-linkbutton&quot; onclick=&quot;edit()&quot;&gt;编辑&lt;/a&gt; &lt;a href=&quot;javascript:void(0)&quot; class=&quot;easyui-linkbutton&quot; onclick=&quot;add()&quot;&gt;新增&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- closed:true 刷新后对话框不会自动弹出来 --&gt; &lt;div id=&quot;dlg&quot; class=&quot;easyui-dialog&quot; title=&quot;Basic Dialog&quot; data-options=&quot;iconCls:&#x27;icon-save&#x27;, closed:true&quot; style=&quot;width:400px;height:400px;padding:10px&quot;&gt; &lt;form action=&quot;&quot; id=&quot;editForm&quot;&gt; &lt;input class=&quot;easyui-textbox&quot; name=&quot;pid&quot; style=&quot;width:300px&quot; data-options=&quot;label:&#x27;商品ID:&#x27;&quot;&gt; &lt;input class=&quot;easyui-textbox&quot; name=&quot;pname&quot; style=&quot;width:300px&quot; data-options=&quot;label:&#x27;名称:&#x27;&quot;&gt; &lt;input class=&quot;easyui-textbox&quot; name=&quot;shop_price&quot; style=&quot;width:300px&quot; data-options=&quot;label:&#x27;商场价:&#x27;&quot;&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 根据MVC模式编写后台服务 product.java product的实体类（容器） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package com.yc.damai.bean;import java.sql.Timestamp;public class Product &#123; private Integer pid; private String pname; private Integer market_price; private Integer shop_price; private String image; private String pdesc; private String is_hot; private Timestamp pdate; private Integer csid; public Integer getPid() &#123; return pid; &#125; public void setPid(Integer pid) &#123; this.pid = pid; &#125; public String getPname() &#123; return pname; &#125; public void setPname(String pname) &#123; this.pname = pname; &#125; public Integer getMarket_price() &#123; return market_price; &#125; public void setMarket_price(Integer market_price) &#123; this.market_price = market_price; &#125; public Integer getShop_price() &#123; return shop_price; &#125; public void setShop_price(Integer shop_price) &#123; this.shop_price = shop_price; &#125; public String getImage() &#123; return image; &#125; public void setImage(String image) &#123; this.image = image; &#125; public String getPdesc() &#123; return pdesc; &#125; public void setPdesc(String pdesc) &#123; this.pdesc = pdesc; &#125; public String getIs_hot() &#123; return is_hot; &#125; public void setIs_hot(String is_hot) &#123; this.is_hot = is_hot; &#125; public Timestamp getPdate() &#123; return pdate; &#125; public void setPdate(Timestamp pdate) &#123; this.pdate = pdate; &#125; public Integer getCsid() &#123; return csid; &#125; public void setCsid(Integer csid) &#123; this.csid = csid; &#125;&#125; ProductServlet.java 服务主体 12345678910111213141516171819202122232425262728293031package com.yc.damai.servlet;import java.io.IOException;import java.io.PrintWriter;import java.util.List;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import com.google.gson.Gson;import com.yc.damai.bean.Product;import com.yc.damai.biz.ProductBiz;@WebServlet(&quot;/product.s&quot;)public class ProductServlet extends BaseServlet &#123; private static final long serialVersionUID = 1L; private ProductBiz biz = new ProductBiz(); public void query(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; response.setContentType(&quot;text/html; charset=utf-8&quot;); List&lt;Product&gt; list = biz.query(); //引出out.print PrintWriter out = response.getWriter(); Gson gson = new Gson(); //动态数组转成json格式 out.print(gson.toJson(list)); &#125;&#125; ProductBiz.java 逻辑判断类 （无逻辑） 123456789101112131415package com.yc.damai.biz;import java.util.List;import com.yc.damai.bean.Product;import com.yc.damai.dao.ProductDao;public class ProductBiz &#123; private ProductDao dao = new ProductDao(); public List&lt;Product&gt; query() &#123; return dao.selectAll(); &#125;&#125; ProductDao.java 操控数据库 12345678910111213141516package com.yc.damai.dao;import java.util.List;import java.util.Map;import com.yc.damai.bean.Product;import com.yc.damai.util.DBHelper;public class ProductDao &#123; public List&lt;Product&gt; selectAll() &#123; String sql = &quot;select * from product&quot;; List&lt;Map&lt;String,Object&gt;&gt; list = DBHelper.selectList(sql); return DBHelper.populate(list,Product.class); &#125;&#125; DBHelper.java 对现行的DBHelper进行了功能扩展 加入了新方法populate，用于”Map对象”转化为”实体对象”。 1234567891011121314public static &lt;T&gt; List&lt;T&gt; populate(List&lt;Map&lt;String, Object&gt;&gt; list, Class&lt;T&gt; cls) &#123; List&lt;T&gt; retList = new ArrayList&lt;T&gt;(); for(Map&lt;String, Object&gt; row : list) &#123; try &#123; T p = cls.newInstance(); BeanUtils.populate(p, row); retList.add(p); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; return retList;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第73次课程_监听器与过滤器","slug":"技术向/Java/源辰课程记录/第73次课程_监听器与过滤器","date":"2019-10-29T16:00:00.000Z","updated":"2022-05-11T01:24:58.452Z","comments":true,"path":"技术向/Java/源辰课程记录/第73次课程_监听器与过滤器/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC73%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E7%9B%91%E5%90%AC%E5%99%A8%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8/","excerpt":"","text":"源辰76班 第73次课程 2019.10.30 内容 监听器与过滤器[廖彦] 1.过滤器 LoginFilter.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.yc.damai.servlet;import java.io.IOException;import javax.servlet.Filter;import javax.servlet.FilterChain;import javax.servlet.FilterConfig;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.annotation.WebFilter;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;/*** 过滤器也是服务器组件* 配置同servlet一样有两种：* web.xml* 注解：@WebFilter(&quot;/loginFilter&quot;)*/public class LoginFilter implements Filter &#123; /** * 销毁方法 */ public void destroy() &#123; &#125; /** * 过滤器逻辑规则 * FilterChain chain 过滤器链对象 */ public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123; // place your code here HttpServletRequest httpRequest = (HttpServletRequest) request; HttpSession session = httpRequest.getSession(); if(session.getAttribute(&quot;loginedUser&quot;) == null)&#123; request.setAttribute(&quot;msg&quot;, &quot;请先登录系统！&quot;); request.getRequestDispatcher(&quot;login.jsp&quot;).forward(request, response); return; &#125; // pass the request along the filter chain chain.doFilter(request, response); &#125; /** * 初始化方法 */ public void init(FilterConfig fConfig) throws ServletException &#123; &#125;&#125; 配置方法： 注释： 1@WebFilter(&quot;/LoginFilter&quot;) WEB-INF&#x2F;web.xml 1234567891011&lt;!-- 过滤器配置 --&gt;&lt;filter&gt; &lt;filter-name&gt;权限访问控制过滤器&lt;/filter-name&gt; &lt;filter-class&gt;com.yc.damai.servlet.LoginFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;权限访问控制过滤器&lt;/filter-name&gt; &lt;!-- 配置该过滤器要拦截请求地址(资源路径) --&gt; &lt;url-pattern&gt;/cart.jsp&lt;/url-pattern&gt; &lt;url-pattern&gt;/olist.jsp&lt;/url-pattern&gt;&lt;/filter-mapping&gt; 2.监听器 OnLineListener.java 12345678910111213141516171819202122232425262728293031323334353637383940414243package com.yc.damai.servlet;import java.util.HashSet;import javax.servlet.ServletContext;import javax.servlet.annotation.WebListener;import javax.servlet.http.HttpSessionAttributeListener;import javax.servlet.http.HttpSessionBindingEvent;/*** 用户在线监听器* 监听器没有资源路径*/@WebListenerpublic class OnLineListener implements HttpSessionAttributeListener &#123; private HashSet&lt;Object&gt; userSet = new HashSet&lt;&gt;(); /** * 新增属性触发的事件方法 */ public void attributeAdded(HttpSessionBindingEvent e) &#123; //每一次登陆，保存登录的用户对象到一个集合中 if(&quot;loginedUser&quot;.equals(e.getName())) &#123; userSet.add(e.getValue()); //获取应用上下文对象 也就是jsp的application ServletContext application = e.getSession().getServletContext(); if(application.getAttribute(&quot;onlineUserSet&quot;) == null) &#123; application.setAttribute(&quot;onlineUserSet&quot;, userSet); &#125; &#125; &#125; /** * 移除属性触发的事件方法 */ public void attributeRemoved(HttpSessionBindingEvent e) &#123; if(&quot;loginedUser&quot;.equals(e.getName())) &#123; userSet.remove(e.getValue()); &#125; &#125; /** * 修改属性触发的事件方法 */ public void attributeReplaced(HttpSessionBindingEvent e) &#123; // TODO Auto-generated method stub &#125;&#125; **3.**案例 [对现有大麦（damai）电商项目代码进行改造，根据MVC模式开发”我的订单”(olist)页面] Header.jsp 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091&lt;%@page import=&quot;java.util.*&quot;%&gt;&lt;%@page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;div class=&quot;container header&quot;&gt; &lt;div class=&quot;span5&quot;&gt; &lt;div class=&quot;logo&quot;&gt; &lt;a href=&quot;index.jsp&quot;&gt; &lt;img src=&quot;image/r___________renleipic_01/logo.png&quot; alt=&quot;依依不舍&quot;/&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span9&quot;&gt;&lt;div class=&quot;headerAd&quot;&gt; &lt;img src=&quot;image/header.jpg&quot; width=&quot;320&quot; height=&quot;50&quot; alt=&quot;正品保障&quot; title=&quot;正品保障&quot;/&gt;&lt;/div&gt; &lt;/div&gt;&lt;div class=&quot;span10 last&quot;&gt; &lt;div class=&quot;topNav clearfix&quot;&gt; &lt;ul&gt; &lt;li id=&quot;headerLogin&quot; class=&quot;headerLogin&quot; style=&quot;display: list-item;&quot;&gt; 当前在线人数：$&#123;onlineUserSet==null ? 0 : onlineUserSet.size()&#125;个 &lt;/li&gt; &lt;li id=&quot;headerLogin&quot; class=&quot;headerLogin&quot; style=&quot;display: list-item;&quot;&gt; &lt;%if(session.getAttribute(&quot;loginedUser&quot;)==null)&#123;%&gt; &lt;a href=&quot;login.jsp&quot;&gt;登录&lt;/a&gt;| &lt;%&#125; else &#123; %&gt; &lt;%-- JSP 注释 ：使用 EL 表达式 输出 session 中的 loginedUser 的 username --%&gt; $&#123;loginedUser.username&#125;| &lt;%&#125; %&gt; &lt;/li&gt; &lt;li id=&quot;headerLogin&quot; class=&quot;headerLogin&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;orders.s?op=olist&quot;&gt;我的订单&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerRegister&quot; class=&quot;headerRegister&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;logout.s&quot;&gt;退出&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerUsername&quot; class=&quot;headerUsername&quot;&gt; $&#123;loginedUser.username&#125; &lt;/li&gt; &lt;li id=&quot;headerLogout&quot; class=&quot;headerLogout&quot;&gt; &lt;a&gt;[退出]&lt;/a&gt;| &lt;/li&gt; &lt;li&gt; &lt;a&gt;会员中心&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;购物指南&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;关于我们&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;cart&quot;&gt; &lt;a href=&quot;cart.jsp&quot;&gt;购物车&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;phone&quot;&gt; 客服热线: &lt;strong&gt;96008/53277764&lt;/strong&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;mainNav&quot;&gt; &lt;li&gt; &lt;a href=&quot;index.jsp&quot;&gt;首页&lt;/a&gt; | &lt;/li&gt; &lt;% String cSql = &quot;select * from category&quot;; List&lt;Map&lt;String,Object&gt;&gt; clist = DBHelper.selectList(cSql); pageContext.setAttribute(&quot;clist&quot;, clist); for(Map&lt;String,Object&gt; row : clist) &#123; %&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?cid=&lt;%=row.get(&quot;cid&quot;)%&gt;&quot;&gt;&lt;%=row.get(&quot;cname&quot;)%&gt;&lt;/a&gt;|&lt;/li&gt; &lt;%&#125;%&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt; OrdersServlet.java 12345678910111213141516171819202122232425262728293031323334353637383940package com.yc.damai.servlet;import java.io.IOException;import java.lang.reflect.InvocationTargetException;import java.util.List;import java.util.Map;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.beanutils.BeanUtils;import com.google.gson.Gson;import com.yc.damai.bean.Result;import com.yc.damai.bean.Orders;import com.yc.damai.biz.BizException;import com.yc.damai.biz.OrdersBiz;import com.yc.damai.util.DBHelper;@WebServlet(&quot;/orders.s&quot;)public class OrdersServlet extends BaseServlet &#123; private static final long serialVersionUID = 1L; private OrdersBiz biz = new OrdersBiz(); // 查询 127.0.0.1/191026_Servlet/orders.s?op=olist public void olist(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; System.out.println(request.getSession().getId()); @SuppressWarnings(&quot;unchecked&quot;) Map&lt;String,Object&gt; user = (Map&lt;String, Object&gt;) request.getSession().getAttribute(&quot;loginedUser&quot;); // 有风险 Integer uid = (Integer) user.get(&quot;uid&quot;); List&lt;Orders&gt; list = biz.queryByUid(uid.longValue()); request.setAttribute(&quot;olist&quot;, list); request.getRequestDispatcher(&quot;olist.jsp&quot;).forward(request, response); &#125;&#125; OrdersBiz.java 123456789101112131415package com.yc.damai.biz;import java.util.List;import com.yc.damai.bean.Orders;import com.yc.damai.dao.OrdersDao;public class OrdersBiz &#123; private OrdersDao dao = new OrdersDao(); public List&lt;Orders&gt; queryByUid(Long uid)&#123; return dao.selectByUid(uid); &#125;&#125; OrdersDao.java 123456789101112131415161718192021222324252627282930313233package com.yc.damai.dao;import java.lang.reflect.InvocationTargetException;import java.util.ArrayList;import java.util.List;import java.util.Map;import org.apache.commons.beanutils.BeanUtils;import com.yc.damai.bean.Orders;import com.yc.damai.bean.User;import com.yc.damai.util.DBHelper;public class OrdersDao &#123; public List&lt;Orders&gt; selectByUid(Long uid) &#123; String sql = &quot;select * from orders where uid=?&quot;; List&lt;Map&lt;String,Object&gt;&gt; list = DBHelper.selectList(sql, uid); List&lt;Orders&gt; ret = new ArrayList&lt;&gt;(); for(Map&lt;String,Object&gt; row : list)&#123; Orders o = new Orders(); try &#123; BeanUtils.populate(o, row); &#125; catch (IllegalAccessException | InvocationTargetException e) &#123; throw new RuntimeException(e); &#125; ret.add(o); &#125; return ret; &#125;&#125; olist.jsp 此版本老师所写，由于引入新的jstl标签语言，产生了未知错误。olist_Fixbug.jsp使用了基本的JSP，对此进行了改正。 使用了”jstl标签语言“。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt; &lt;!-- 导入jstl 核心标签库 alt + / 代码提示 --&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;&lt;title&gt;大麦商城&lt;/title&gt;&lt;link href=&quot;css/common.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link href=&quot;css/cart.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;%@ include file=&quot;/common/Header.jsp&quot; %&gt;&lt;div class=&quot;container cart&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;step step1&quot;&gt; &lt;ul&gt; &lt;li class=&quot;current&quot;&gt;&lt;/li&gt; &lt;li &gt;订单列表&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;table&gt; &lt;tbody&gt; &lt;!-- items 使用 el 表达式传入 var 循环遍历 --&gt; &lt;c:forEach items=&quot;$&#123;olist&#125;&quot; var=&quot;o&quot;&gt; &lt;tr&gt; &lt;th colspan=&quot;5&quot;&gt; 订单号:$&#123;o.oid &#125; 金额:&lt;font color=&quot;red&quot;&gt;$&#123;o.total&#125; &lt;/font&gt; 状态 : &lt;a href=&quot;pay.jsp?oid=64&quot;&gt;&lt;font color=&quot;red&quot;&gt;付款&lt;/font&gt;&lt;/a&gt; &lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;图片&lt;/th&gt; &lt;th&gt;商品&lt;/th&gt; &lt;th&gt;价格&lt;/th&gt; &lt;th&gt;数量&lt;/th&gt; &lt;th&gt;小计&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td width=&quot;60&quot;&gt; &lt;img src=&quot;products/1/cs10001.jpg&quot;/&gt; &lt;/td&gt; &lt;td&gt; &lt;a target=&quot;_blank&quot;&gt;韩版连帽加厚毛衣女外套&lt;/a&gt; &lt;/td&gt; &lt;td&gt; 228.0 &lt;/td&gt; &lt;td class=&quot;quantity&quot; width=&quot;60&quot;&gt; 1 &lt;/td&gt; &lt;td width=&quot;140&quot;&gt; &lt;span class=&quot;subtotal&quot;&gt;￥228.0&lt;/span&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;%@ include file=&quot;/common/Footer.jsp&quot; %&gt;&lt;/body&gt;&lt;/html&gt; olist_Fixbug.jsp 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;%@page import=&quot;com.yc.damai.bean.Orders&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt; &lt;!-- 导入jstl 核心标签库 alt + / 代码提示 --&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;&lt;title&gt;大麦商城&lt;/title&gt;&lt;link href=&quot;css/common.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link href=&quot;css/cart.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;%@ include file=&quot;/common/Header.jsp&quot; %&gt;&lt;div class=&quot;container cart&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;step step1&quot;&gt; &lt;ul&gt; &lt;li class=&quot;current&quot;&gt;&lt;/li&gt; &lt;li &gt;订单列表&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;table&gt; &lt;tbody&gt; &lt;!-- items 使用 el 表达式传入 var 循环遍历 --&gt; &lt;% List&lt;Orders&gt; list = (List&lt;Orders&gt;)request.getAttribute(&quot;olist&quot;); for(Orders o : list) &#123; %&gt; &lt;tr&gt; &lt;th colspan=&quot;5&quot;&gt; 订单号:&lt;%=o.getOid() %&gt; 金额:&lt;font color=&quot;red&quot;&gt;&lt;%=o.getTotal() %&gt; &lt;/font&gt; 状态 : &lt;a href=&quot;pay.jsp?oid=64&quot;&gt;&lt;font color=&quot;red&quot;&gt;付款&lt;/font&gt;&lt;/a&gt; &lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;图片&lt;/th&gt; &lt;th&gt;商品&lt;/th&gt; &lt;th&gt;价格&lt;/th&gt; &lt;th&gt;数量&lt;/th&gt; &lt;th&gt;小计&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td width=&quot;60&quot;&gt; &lt;img src=&quot;products/1/cs10001.jpg&quot;/&gt; &lt;/td&gt; &lt;td&gt; &lt;a target=&quot;_blank&quot;&gt;韩版连帽加厚毛衣女外套&lt;/a&gt; &lt;/td&gt; &lt;td&gt; 228.0 &lt;/td&gt; &lt;td class=&quot;quantity&quot; width=&quot;60&quot;&gt; 1 &lt;/td&gt; &lt;td width=&quot;140&quot;&gt; &lt;span class=&quot;subtotal&quot;&gt;￥228.0&lt;/span&gt; &lt;/td&gt; &lt;/tr&gt; &lt;%&#125; %&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;%@ include file=&quot;/common/Footer.jsp&quot; %&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第72次课程_MVC模式[廖彦]","slug":"技术向/Java/源辰课程记录/第72次课程_MVC模式[廖彦]","date":"2019-10-26T16:00:00.000Z","updated":"2022-05-11T01:24:43.614Z","comments":true,"path":"技术向/Java/源辰课程记录/第72次课程_MVC模式[廖彦]/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC72%E6%AC%A1%E8%AF%BE%E7%A8%8B_MVC%E6%A8%A1%E5%BC%8F[%E5%BB%96%E5%BD%A6]/","excerpt":"","text":"源辰76班 第72次课程 2019.10.27 内容 MVC模式[廖彦] 1.MVC模式特征 ** ** 创建四个包 bean ：对象，容器类 biz : 逻辑判断的代码 dao : 操作数据库的代码 servlet：业务服务 2.案例 [对现有大麦（damai）电商项目代码进行改造，使其按照MVC模式进行开发] 项目结构图： reg.jsp 大麦（damai）电商项目的注册页面。 代码改造（紫色标记）：将Ajax技术的URL链接到servlet上。lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;大麦商城&lt;/title&gt;&lt;link href=&quot;css/common.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;&lt;link href=&quot;css/register.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.8.3.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; function checkForm()&#123; // 校验用户名: // 校验密码: // 校验确认密码 //校验邮箱 return false; &#125; var xmlhttp; // ajax 验证用户名是否存在 try &#123; xmlhttp = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;); &#125; catch (e) &#123; try &#123; xmlhttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); &#125; catch (e) &#123; try &#123; xmlhttp = new XMLHttpRequest(); &#125; catch (e) &#123; &#125; &#125; &#125; //校验用户名是否存在 function checkUserName()&#123; // 获取用户填写的用户名 var name = document.getElementById(&quot;username&quot;).value; name = name.replace(/\\s/gi,&quot;&quot;); if(name == &#x27;&#x27;)&#123; alert(&quot;请填写用户名！&quot;); return; &#125; if(xmlhttp!=null)&#123; // 定义请求地址 var url =&quot;doCheckUsername.jsp?username=&quot;+name; // 以 POST 方式 开启连接 // POST 请求 更安全（编码） 提交的数据大小没有限制 xmlhttp.open(&quot;POST&quot;,url,true); // 设置回调函数 // 当收到服务器的响应时，会触发该函数（回调函数） // 每次的状态改变都会调用该方法 xmlhttp.onreadystatechange=function()&#123; if(xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200)&#123; // 替换空格 var msg = xmlhttp.responseText.replace(/\\s/gi,&quot;&quot;); // 使用 span 展示错误信息， 替代 alert(msg); 提升用户体验 // 允许注册使用绿色字体， 否则红色字体 var color = msg == &#x27;该用户名可以注册！&#x27; ? &#x27;green&#x27; : &#x27;red&#x27;; // 输入框的后面一个元素是用于展示信息的 span 元素 $(&quot;#username&quot;).next().text(msg).css(&quot;color&quot;, color); &#125; &#125;; // 发送请求 xmlhttp.send(null); &#125;else&#123; alert(&quot;不能创建XMLHttpRequest对象实例&quot;) &#125; &#125; function changeImg()&#123; // 更新验证码 &#125; function reg()&#123; var username = document.getElementById(&quot;username&quot;).value; var password = document.getElementById(&quot;password&quot;).value; var repassword = document.getElementById(&quot;repassword&quot;).value; var email = document.getElementById(&quot;email&quot;).value; var phone = document.getElementById(&quot;phone&quot;).value; var name = $(&quot;#name&quot;).val(); // 使用 jquery 选择器搞定！！！ var sex = $(&quot;input[name=&#x27;sex&#x27;]:checked&quot;).val(); // checked选择器写法记错了，已修改 if(xmlhttp!=null)&#123; // 定义请求地址 var url = &quot;user.s?op=reg&amp;username=&quot;+username + &quot;&amp;password=&quot; + password + &quot;&amp;repassword=&quot; + repassword + &quot;&amp;email=&quot; + email + &quot;&amp;phone=&quot; + phone + &quot;&amp;sex=&quot; + sex; // 以 POST 方式 开启连接 // POST 请求 更安全（编码） 提交的数据大小没有限制 xmlhttp.open(&quot;POST&quot;,url,true); // 设置回调函数 // 当收到服务器的响应时，会触发该函数（回调函数） // 每次的状态改变都会调用该方法 xmlhttp.onreadystatechange=function()&#123; if(xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200)&#123; var json = xmlhttp.responseText.replace(/\\s/gi,&quot;&quot;); eval(&quot;var result = &quot; + json); console.info(result); if(result.code==1)&#123; alert(result.msg); //成功 js跳转 location.href = &quot;login.jsp&quot;; &#125; else &#123; alert(result.msg); &#125; &#125; &#125;; // 发送请求 xmlhttp.send(null); &#125;else&#123; alert(&quot;不能创建XMLHttpRequest对象实例&quot;) &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container header&quot;&gt; &lt;div class=&quot;span5&quot;&gt; &lt;div class=&quot;logo&quot;&gt; &lt;a href=&quot;index.jsp&quot;&gt; &lt;img src=&quot;image/r___________renleipic_01/logo.png&quot; alt=&quot;依依不舍&quot;/&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span9&quot;&gt;&lt;div class=&quot;headerAd&quot;&gt; &lt;img src=&quot;image/header.jpg&quot; width=&quot;320&quot; height=&quot;50&quot; alt=&quot;正品保障&quot; title=&quot;正品保障&quot;/&gt;&lt;/div&gt; &lt;/div&gt;&lt;div class=&quot;span10 last&quot;&gt; &lt;div class=&quot;topNav clearfix&quot;&gt; &lt;ul&gt; &lt;li id=&quot;headerLogin&quot; class=&quot;headerLogin&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;login.jsp&quot;&gt;登录&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerRegister&quot; class=&quot;headerRegister&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;reg.jsp&quot;&gt;注册&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerUsername&quot; class=&quot;headerUsername&quot;&gt;&lt;/li&gt; &lt;li id=&quot;headerLogout&quot; class=&quot;headerLogout&quot;&gt; &lt;a href=&quot;LogoutServlet&quot;&gt;[退出]&lt;/a&gt;| &lt;/li&gt; &lt;li&gt; &lt;a&gt;会员中心&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;购物指南&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;关于我们&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;cart&quot;&gt; &lt;a href=&quot;cart.jsp&quot;&gt;购物车&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;phone&quot;&gt; 客服热线: &lt;strong&gt;96008/53277764&lt;/strong&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;mainNav&quot;&gt; &lt;li&gt; &lt;a href=&quot;index.jsp&quot;&gt;首页&lt;/a&gt; | &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?1&amp;pageIndex=1&quot;&gt; 女装男装&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?2&amp;pageIndex=1&quot;&gt; 鞋靴箱包&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?3&amp;pageIndex=1&quot;&gt; 运动户外&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?4&amp;pageIndex=1&quot;&gt; 珠宝配饰&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?5&amp;pageIndex=1&quot;&gt; 手机数码&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?6&amp;pageIndex=1&quot;&gt; 家电办公&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?7&amp;pageIndex=1&quot;&gt; 护肤彩妆&lt;/a&gt; |&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;container register&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;wrap&quot;&gt; &lt;div class=&quot;main clearfix&quot;&gt; &lt;div class=&quot;title&quot;&gt; &lt;strong&gt;会员注册&lt;/strong&gt;USER REGISTER &lt;/div&gt; &lt;form id=&quot;registerForm&quot; action=&quot;reg.jsp&quot; method=&quot;post&quot; novalidate=&quot;novalidate&quot; onsubmit=&quot;reg(); return false;&quot;&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;用户名:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; class=&quot;text&quot; maxlength=&quot;20&quot; onblur=&quot;checkUserName()&quot; /&gt; &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;密&amp;nbsp;&amp;nbsp;码:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; class=&quot;text&quot; maxlength=&quot;20&quot; autocomplete=&quot;off&quot; /&gt;&lt;span&gt; &lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;确认密码:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;password&quot; id=&quot;repassword&quot; name=&quot;repassword&quot; class=&quot;text&quot; maxlength=&quot;20&quot; autocomplete=&quot;off&quot; /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;E-mail:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;email&quot; name=&quot;email&quot; class=&quot;text&quot; maxlength=&quot;200&quot; /&gt;&lt;span&gt; &lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;电话:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;phone&quot; name=&quot;phone&quot; class=&quot;text&quot; maxlength=&quot;200&quot; onkeyup=&quot;value=value.replace(/[^\\d]/g,&#x27;&#x27;)&quot; onafterpaste=&quot;value=value.replace(/\\D/g,&#x27;&#x27;)&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;姓名:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot; class=&quot;text&quot; maxlength=&quot;200&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;性别:&lt;/th&gt; &lt;td&gt;&lt;span class=&quot;fieldSet&quot;&gt; &lt;label&gt; &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot;&gt;男 &lt;/label&gt; &lt;label&gt; &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot;&gt;女 &lt;/label&gt; &lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;!-- &lt;tr&gt; &lt;th&gt;地址:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;address&quot; class=&quot;text&quot; maxlength=&quot;200&quot;&gt; &lt;/td&gt; &lt;/tr&gt; --&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;验证码:&lt;/th&gt; &lt;td&gt;&lt;span class=&quot;fieldSet&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;captcha&quot; name=&quot;captcha&quot; class=&quot;text captcha&quot; maxlength=&quot;4&quot; autocomplete=&quot;off&quot;&gt;&lt;img id=&quot;captchaImage&quot; class=&quot;captchaImage&quot; src=&quot;images/vcode.jpg&quot; title=&quot;点击更换验证码&quot; onclick=&quot;changeImg()&quot;&gt; &lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&amp;nbsp;&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;submit&quot; class=&quot;submit&quot; value=&quot;同意以下协议并注册&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&amp;nbsp;&lt;/th&gt; &lt;td&gt;注册协议&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&amp;nbsp;&lt;/th&gt; &lt;td&gt; &lt;div id=&quot;agreement&quot; class=&quot;agreement&quot; style=&quot;height: 200px;&quot;&gt; &lt;p&gt;尊敬的用户欢迎您注册成为本网站会员。请用户仔细阅读以下全部内容。如用户不同意本服务条款任意内容，请不要注册或使用本网站服务。如用户通过本网站注册程序，即表示用户与本网站已达成协议，自愿接受本服务条款的所有内容。此后，用户不得以未阅读本服务条款内容作任何形式的抗辩。&lt;/p&gt; &lt;p&gt; 一、本站服务条款的确认和接纳本网站涉及的各项服务的所有权和运作权归本网站所有。本网站所提供的服务必须按照其发布的服务条款和操作规则严格执行。本服务条款的效力范围及于本网站的一切产品和服务，用户在享受本网站的任何服务时，应当受本服务条款的约束。 &lt;/p&gt; &lt;p&gt; 二、服务简介本网站运用自己的操作系统通过国际互联网络为用户提供各项服务。用户必须: 1. 提供设备，如个人电脑、手机或其他上网设备。 2. 个人上网和支付与此服务有关的费用。 &lt;/p&gt; &lt;p&gt; 三、用户在不得在本网站上发布下列违法信息1. 反对宪法所确定的基本原则的； 2. 危害国家安全，泄露国家秘密，颠覆国家政权，破坏国家统一的； 3. 损害国家荣誉和利益的； 4. 煽动民族仇恨、民族歧视，破坏民族团结的； 5. 破坏国家宗教政策，宣扬邪教和封建迷信的； 6. 散布谣言，扰乱社会秩序，破坏社会稳定的； 7. 散布淫秽、色情、赌博、暴力、凶杀、恐怖或者教唆犯罪的； 8. 侮辱或者诽谤他人，侵害他人合法权益的； 9. 含有法律、行政法规禁止的其他内容的。 &lt;/p&gt; &lt;p&gt; 四、有关个人资料用户同意: 1. 提供及时、详尽及准确的个人资料。 2. 同意接收来自本网站的信息。 3. 不断更新注册资料，符合及时、详尽准确的要求。所有原始键入的资料将引用为注册资料。 4. 本网站不公开用户的姓名、地址、电子邮箱和笔名。除以下情况外: a) 用户授权本站透露这些信息。 b) 相应的法律及程序要求本站提供用户的个人资料。 &lt;/p&gt; &lt;p&gt; 五、服务条款的修改本网站有权在必要时修改服务条款，一旦条款及服务内容产生变动，本网站将会在重要页面上提示修改内容。如果不同意所改动的内容，用户可以主动取消获得的本网站信息服务。如果用户继续享用本网站信息服务，则视为接受服务条款的变动。 &lt;/p&gt; &lt;p&gt; 六、用户隐私制度尊重用户个人隐私是本网站的一项基本政策。所以，本网站一定不会在未经合法用户授权时公开、编辑或透露其注册资料及保存在本网站中的非公开内容，除非有法律许可要求或本网站在诚信的基础上认为透露这些信息在以下四种情况是必要的: 1. 遵守有关法律规定，遵从本网站合法服务程序。 2. 保持维护本网站的商标所有权。 3. 在紧急情况下竭力维护用户个人和社会大众的隐私安全。 4. 符合其他相关的要求。 &lt;/p&gt; &lt;p&gt; 七、用户的帐号、密码和安全性用户一旦注册成功，将获得一个密码和用户名。用户需谨慎合理的保存、使用用户名和密码。如果你不保管好自己的帐号和密码安全，将负全部责任。另外，每个用户都要对其帐户中的所有活动和事件负全责。你可随时根据指示改变你的密码。用户若发现任何非法使用用户帐号或存在安全漏洞的情况，请立即通告本网站。 八、 拒绝提供担保 用户明确同意信息服务的使用由用户个人承担风险。本网站不担保服务不会受中断，对服务的及时性，安全性，出错发生都不作担保，但会在能力范围内，避免出错。 &lt;/p&gt; &lt;p&gt; 九、有限责任如因不可抗力或其它本站无法控制的原因使本站销售系统崩溃或无法正常使用导致网上交易无法完成或丢失有关的信息、记录等本站会尽可能合理地协助处理善后事宜，并努力使客户免受经济损失，同时会尽量避免这种损害的发生。 &lt;/p&gt; &lt;p&gt; 十、用户信息的储存和限制本站有判定用户的行为是否符合国家法律法规规定及本站服务条款权利，如果用户违背本网站服务条款的规定，本网站有权中断对其提供服务的权利。 &lt;/p&gt; &lt;p&gt; 十一、用户管理用户单独承担发布内容的责任。用户对服务的使用是根据所有适用于本站的国家法律、地方法律和国际法律标准的。用户必须遵循: 1. 使用网络服务不作非法用途。 2. 不干扰或混乱网络服务。 3. 遵守所有使用网络服务的网络协议、规定、程序和惯例。 用户须承诺不传输任何非法的、骚扰性的、中伤他人的、辱骂性的、恐性的、伤害性的、庸俗的，淫秽等信息资料。另外，用户也不能传输何教唆他人构成犯罪行为的资料；不能传输助长国内不利条件和涉及国家安全的资料；不能传输任何不符合当地法规、国家法律和国际法律的资料。未经许可而非法进入其它电脑系统是禁止的。 若用户的行为不符合以上提到的服务条款，本站将作出独立判断立即取消用户服务帐号。用户需对自己在网上的行为承担法律责任。用户若在本站上散布和传播反动、色情或其它违反国家法律的信息，本站的系统记录有可能作为用户违反法律的证据。 &lt;/p&gt; &lt;p&gt; 十二、通告所有发给用户的通告都可通过重要页面的公告或电子邮件或常规的信件传送。服务条款的修改、服务变更、或其它重要事件的通告都会以此形式进行。 &lt;/p&gt; &lt;p&gt; 十三、信息内容的所有权本网站定义的信息内容包括: 文字、软件、声音、相片、录象、图表；在广告中全部内容；本网站为用户提供的其它信息。所有这些内容受版权、商标、标签和其它财产所有权法律的保护。所以，用户只能在本网站和广告商授权下才能使用这些内容，而不能擅自复制、再造这些内容、或创造与内容有关的派生产品。本站所有的文章版权归原文作者和本站共同所有，任何人需要转载本站的文章，必须征得原文作者或本站授权。 &lt;/p&gt; &lt;p&gt; 十四、法律本协议的订立、执行和解释及争议的解决均应适用中华人民共和国的法律。用户和本网站一致同意服从本网站所在地有管辖权的法院管辖。如发生本网站服务条款与中华人民共和国法律相抵触时，则这些条款将完全按法律规定重新解释，而其它条款则依旧保持对用户的约束力。 &lt;/p&gt; &lt;/div&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;div class=&quot;login&quot;&gt; &lt;div class=&quot;ad&quot;&gt; &lt;dl&gt; &lt;dt&gt;注册即享受&lt;/dt&gt; &lt;dd&gt;正品保障、正规发票&lt;/dd&gt; &lt;dd&gt;货到付款、会员服务&lt;/dd&gt; &lt;dd&gt;自由退换、售后上门&lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;dl&gt; &lt;dt&gt;已经拥有账号了？&lt;/dt&gt; &lt;dd&gt; 立即登录即可体验在线购物！ &lt;a href=&quot;login.jsp&quot;&gt;立即登录&lt;/a&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;container footer&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;footerAd&quot;&gt; &lt;img src=&quot;image/footer.jpg&quot; width=&quot;950&quot; height=&quot;52&quot; alt=&quot;我们的优势&quot; title=&quot;我们的优势&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;bottomNav&quot;&gt; &lt;li&gt;&lt;a&gt;关于我们&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;联系我们&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;招贤纳士&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;法律声明&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;友情链接&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a target=&quot;_blank&quot;&gt;支付方式&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a target=&quot;_blank&quot;&gt;配送方式&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;服务声明&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;广告声明&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;copyright&quot;&gt;Copyright © 2005-2013 Mango商城 版权所有&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;_my97DP&quot; style=&quot;position: absolute; top: -1970px; left: -1970px;&quot;&gt; &lt;iframe style=&quot;width: 190px; height: 191px;&quot; src=&quot;./会员注册 - Powered By Mango Team_files/My97DatePicker.htm&quot; frameborder=&quot;0&quot; border=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; BaseServlet.java 自定义的Servlet基类 利用反射机制，调用子类方法 12345678910111213141516171819202122232425262728293031323334353637package com.yc.damai.servlet;import java.io.IOException;import java.lang.reflect.Method;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/*** 自定义的Servlet基类*/public abstract class BaseServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // 通过op参数决定调用的方法 String op = request.getParameter(&quot;op&quot;); // 根据 op 来执行 子类 的 业务方法 ， java 反射：动态执行java方法 // 获取类对象 Class&lt;?&gt; cls = this.getClass(); try &#123; // Method java 方法对象 Method m = cls.getMethod(op, HttpServletRequest.class, HttpServletResponse.class); // 通过 java 的反射机制， 动态执行方法 m.invoke(this, request, response); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request, response); &#125;&#125; UserServlet.java 业务处理 servlet逻辑关系：本UserServlet 继承 BaseServlet（包含doGet和doPost方法）再继承 HttpServlet %!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;) %!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;) %!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677package com.yc.damai.servlet;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.beanutils.BeanUtils;import com.google.gson.Gson;import com.yc.damai.bean.Result;import com.yc.damai.bean.User;import com.yc.damai.biz.BizException;import com.yc.damai.biz.UserBiz;/** user.s?op=reg 注册* user.s?op=login 登录* user.s?op=query 查询* user.s?op=remove 移除*/@WebServlet(&quot;/user.s&quot;)public class UserServlet extends BaseServlet &#123; private static final long serialVersionUID = 1L; /** * 全局域可以放 逻辑判断类。 * 请谨慎放置，否则可能造成线程不安全。 */ private UserBiz biz = new UserBiz(); /** * 子类的业务方法必须是 public 访问域 */ // 查询 public void query(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; &#125; // 登录 public void login(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; &#125; //注册 public void reg(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setContentType(&quot;text/html; charset=UTF-8&quot;); //数据装载 User user = new User(); try &#123; //需要导入 commons-beanutils 和 commons-logging JAR包 //将超链接里的参数一股脑的放入user对象中，通过参数名和对象中的变量名匹对。 BeanUtils.populate(user, request.getParameterMap()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; Result result; try &#123; biz.reg(user, request.getParameter(&quot;repassword&quot;)); result = Result.success(&quot;注册成功！&quot;); &#125; catch (BizException e) &#123; result = Result.success(e.getMessage()); e.printStackTrace(); &#125; //需要导入 gson JAR包 //将 result 转成 json 字符串 Gson gson = new Gson(); String json = gson.toJson(result); response.getWriter().print(json); &#125;&#125; User.java 专门用于存放用户信息的对象，封装。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475package com.yc.damai.bean;public class User &#123; private Long uid; private String username; private String password; private String name; private String email; private String phone; private String sex; private Integer state; private String code; private String addr; public Long getUid() &#123; return uid; &#125; public void setUid(Long uid) &#123; this.uid = uid; &#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getEmail() &#123; return email; &#125; public void setEmail(String email) &#123; this.email = email; &#125; public String getPhone() &#123; return phone; &#125; public void setPhone(String phone) &#123; this.phone = phone; &#125; public String getSex() &#123; return sex; &#125; public void setSex(String sex) &#123; this.sex = sex; &#125; public Integer getState() &#123; return state; &#125; public void setState(Integer state) &#123; this.state = state; &#125; public String getCode() &#123; return code; &#125; public void setCode(String code) &#123; this.code = code; &#125; public String getAddr() &#123; return addr; &#125; public void setAddr(String addr) &#123; this.addr = addr; &#125; &#125; Result.java 专门用于存放信息的对象，封装。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.yc.damai.bean;/** 用于封装ajax 请求返回数据类*/public class Result &#123; //返回消息 private String msg; //返回结果码 0失败 1成功 private int code; //返回数据 private Object data; /* * 默认成功的结果对象 */ public static Result success(String msg) &#123; Result result = new Result(); result.code = 1; result.msg = msg; return result; &#125; /* * 默认失败的结果对象 */ public static Result failure(String msg) &#123; //由于使用的是静态方法，因此可以在方法内new新对象，制作出不同的Result实例对象。 Result result = new Result(); result.code = 0; result.msg = msg; return result; &#125; public String getMsg() &#123; return msg; &#125; public void setMsg(String msg) &#123; this.msg = msg; &#125; public int getCode() &#123; return code; &#125; public void setCode(int code) &#123; this.code = code; &#125; public Object getData() &#123; return data; &#125; public void setData(Object data) &#123; this.data = data; &#125;&#125; UserBiz.java 注册新用户时，逻辑判断是否符合规则。 正常结束：调用UserDao.java，将用户信息写入数据库。 异常结束：当不符合规则，抛出异常，由UserServlet.java接收。 123456789101112131415161718192021222324252627package com.yc.damai.biz;import com.yc.damai.bean.User;import com.yc.damai.dao.UserDao;public class UserBiz &#123; private UserDao dao = new UserDao(); /* * 注册用户 * 逻辑判断 */ public void reg(User user,String repassword) throws BizException &#123; if(user.getUsername()==null || user.getUsername().trim().isEmpty()) &#123; throw new BizException(&quot;请输入用户名！&quot;); &#125; if(user.getPassword()==null || user.getPassword().trim().isEmpty()) &#123; throw new BizException(&quot;请输入用户名！&quot;); &#125; if(user.getPassword().equals(&quot;repassword&quot;)) &#123; throw new BizException(&quot;两次输入密码不一致！&quot;); &#125; //邮箱、电话、密码程度... dao.insert(user); &#125;&#125; UserDao.java 将用户信息写入数据库。 123456789101112131415161718package com.yc.damai.dao;import com.yc.damai.bean.User;import com.yc.damai.util.DBHelper;public class UserDao &#123; public void insert(User user) &#123; String sql = &quot;insert into user &quot;+ &quot;values(null,?,?,?,?,?,?,null,null,null)&quot;; DBHelper.update(sql,user.getUsername(), user.getPassword(), user.getName(), user.getEmail(), user.getPhone(), user.getSex()); &#125;&#125; BizException.java 异常类 实际上是重写了Exception（父类）的所有构造方法。 1234567891011121314151617181920212223package com.yc.damai.biz;public class BizException extends Exception&#123; public BizException() &#123; super(); // TODO 自动生成的构造函数存根 &#125; public BizException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) &#123; super(message, cause, enableSuppression, writableStackTrace); // TODO 自动生成的构造函数存根 &#125; public BizException(String message, Throwable cause) &#123; super(message, cause); // TODO 自动生成的构造函数存根 &#125; public BizException(String message) &#123; super(message); // TODO 自动生成的构造函数存根 &#125; public BizException(Throwable cause) &#123; super(cause); // TODO 自动生成的构造函数存根 &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第71次课程_Servlet基础","slug":"技术向/Java/源辰课程记录/第71次课程_Servlet基础","date":"2019-10-25T16:00:00.000Z","updated":"2022-05-11T01:24:04.615Z","comments":true,"path":"技术向/Java/源辰课程记录/第71次课程_Servlet基础/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC71%E6%AC%A1%E8%AF%BE%E7%A8%8B_Servlet%E5%9F%BA%E7%A1%80/","excerpt":"","text":"源辰76班 第71次课程 2019.10.26 内容 Servlet基础[廖彦] 1.创建servlet文件 标准servlet模板 123456789101112131415161718192021222324package com.yc.damai.servlet;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;//servlet文件地址路径@WebServlet(&quot;/Demo.s&quot;)public class Demo extends HttpServlet &#123; private static final long serialVersionUID = 1L; //服务器应对Get请求 protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; //=== more code === &#125; //服务器应对Post请求 protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request, response); &#125;&#125; 2.两种配置方式 旧： 通过web.xml配置 在web.xml中加入如下代码 12345678&lt;servlet&gt; &lt;servlet-name&gt;hello world servlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.yc.damai.servlet.HelloServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;hello world servlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/hello.s&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 新： 直接在servlet文件中配置 12@WebServlet(&quot;/Demo.s&quot;)public class ... 3.将后端jsp执行的代码放入servlet 例如：dologin.jsp -&gt; dologin.s dologin.jsp 1234567891011121314151617181920&lt;%@ page import=&quot;java.util.*&quot;%&gt;&lt;%@ page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;% // 设置请求对象的字符集编码，可以兼容中文参数，避免乱码问题 request.setCharacterEncoding(&quot;utf-8&quot;); // 接收 用户名 和 密码 String username = request.getParameter(&quot;username&quot;); String password = request.getParameter(&quot;password&quot;); String sql = &quot;select * from user where username=? and password=?&quot;; Map&lt;String, Object&gt; user = DBHelper.selectOne(sql, username, password); if (user != null) &#123; session.setAttribute(&quot;loginedUser&quot;, user); response.sendRedirect(&quot;index.jsp&quot;); &#125; else &#123; request.setAttribute(&quot;msg&quot;, &quot;用户名或密码错误！&quot;); request.getRequestDispatcher(&quot;login.jsp&quot;).forward(request, response); &#125;%&gt; dologin.s 12345678910111213141516171819202122232425262728293031323334353637package com.yc.damai.servlet;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;//servlet文件地址路径@WebServlet(&quot;/dologin.s&quot;)public class Demo extends HttpServlet &#123; private static final long serialVersionUID = 1L; //服务器应对Get请求 protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // 设置请求对象的字符集编码，可以兼容中文参数，避免乱码问题 request.setCharacterEncoding(&quot;utf-8&quot;); // 接收 用户名 和 密码 String username = request.getParameter(&quot;username&quot;); String password = request.getParameter(&quot;password&quot;); String sql = &quot;select * from user where username=? and password=?&quot;; Map&lt;String, Object&gt; user = DBHelper.selectOne(sql, username, password); if (user != null) &#123; session.setAttribute(&quot;loginedUser&quot;, user); response.sendRedirect(&quot;index.jsp&quot;); &#125; else &#123; request.setAttribute(&quot;msg&quot;, &quot;用户名或密码错误！&quot;); request.getRequestDispatcher(&quot;login.jsp&quot;).forward(request, response); &#125; &#125; //服务器应对Post请求 protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request, response); &#125;&#125; 4.案例 为大麦（damai）项目的登录页面（login.jsp）加入分时限制登陆的功能。 web.xml 提前设置好参数，servlet可以通过(路径).etInitParameter(“参数名”)方法直接获取。 加入如下代码： 12345678910111213141516&lt;servlet&gt; &lt;servlet-name&gt;登录的servlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.yc.damai.servlet.LoginServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;begin-time&lt;/param-name&gt; &lt;param-value&gt;8&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;end-time&lt;/param-name&gt; &lt;param-value&gt;22&lt;/param-value&gt; &lt;/init-param&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;登录的servlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/LoginServlet.s&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; LoginServlet.s 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586package com.yc.damai.servlet;import java.io.IOException;import java.util.Map;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import com.yc.damai.util.DBHelper;/*** Servlet 的参数配置*** Servlet 提供的 getInitParameter() 获取配置参数方法** 用户只能在 8 ~ 22 点之间登录系统 企业项目 12306** 设置一个时间 参数，限制用户的登录*** The servlets named [登录的servlet] and* [com.yc.damai.servlet.LoginServlet] are both mapped to* the url-pattern [/dologin.s] which is not permitted** 1、以注解方式定义的Servlet 名字默认为类路径* 2、注解配置单的 Servlet 和 web.xml配置的Servlet 可以共存* 3、所有的servlet 的路径必须 全局唯一**/// @WebServlet(&quot;/dologin1.s&quot;) // 替换成 web.xml配置public class LoginServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; String beginTimeParam = this.getInitParameter(&quot;begin-time&quot;); String endTimeParam = this.getInitParameter(&quot;end-time&quot;); int beginTime = Integer.parseInt(beginTimeParam); int endTime = Integer.parseInt(endTimeParam); // 获取当前时间 小时 java.util.Calendar c = java.util.Calendar.getInstance(); int hour = c.get(java.util.Calendar.HOUR_OF_DAY); if(hour &lt; beginTime || hour &gt; endTime)&#123; request.setAttribute(&quot;msg&quot;, &quot;没上班！&quot;); request.getRequestDispatcher(&quot;login.jsp&quot;).forward(request, response); return; &#125; // 设置请求对象的字符集编码，可以兼容中文参数，避免乱码问题 request.setCharacterEncoding(&quot;utf-8&quot;); // 接收 用户名 和 密码 String username = request.getParameter(&quot;username&quot;); String password = request.getParameter(&quot;password&quot;); String sql = &quot;select * from user where username=? and password=?&quot;; Map&lt;String, Object&gt; user = DBHelper.selectOne(sql, username, password); if (user != null) &#123; HttpSession session = request.getSession(); session.setAttribute(&quot;loginedUser&quot;, user); response.sendRedirect(&quot;index.jsp&quot;); &#125; else &#123; request.setAttribute(&quot;msg&quot;, &quot;用户名或密码错误！&quot;); request.getRequestDispatcher(&quot;login.jsp&quot;).forward(request, response); &#125; &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // 绝大多数请求下， get 请求和 post 执行的业务逻辑是一致的 doGet(request, response); // 必须有 //doXXX 方法中的 super。。。 必须删除 // 父类 的 doPost 只有一行代码 throw new ServletException（405，&quot;HTTP method POST is not supported by this URL&quot;）; //super.doPost(request, response); &#125;&#125; servlet实现登出功能 原理：销毁会话对象(invalidate方法) LogoutServlet.s 123456789101112131415161718192021222324package com.yc.damai.servlet;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;@WebServlet(&quot;/logout.s&quot;)public class LogoutServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // 销毁会话对象 request.getSession().invalidate(); // 跳转主页 response.sendRedirect(&quot;index.jsp&quot;); &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request, response); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第70次课程（资源）_Damai_code-zip","slug":"技术向/Java/源辰课程记录/第70次课程（资源）_Damai_code-zip","date":"2019-10-24T16:00:00.000Z","updated":"2022-05-11T01:23:50.263Z","comments":true,"path":"技术向/Java/源辰课程记录/第70次课程（资源）_Damai_code-zip/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC70%E6%AC%A1%E8%AF%BE%E7%A8%8B%EF%BC%88%E8%B5%84%E6%BA%90%EF%BC%89_Damai_code-zip/","excerpt":"","text":"第70次课程 附属于”第70次课程”。 Damai_code Damai_code.zip","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第70次课程","slug":"技术向/Java/源辰课程记录/第70次课程","date":"2019-10-24T16:00:00.000Z","updated":"2022-05-11T01:23:33.145Z","comments":true,"path":"技术向/Java/源辰课程记录/第70次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC70%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰76班 第70次课程 2019.10.25 内容 JSP项目案例二[廖彦] 关系 分析 &lt;公用模块&gt; &#x2F;common Header.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;%@page import=&quot;java.util.*&quot;%&gt;&lt;%@page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;div class=&quot;container header&quot;&gt; &lt;div class=&quot;span5&quot;&gt; &lt;div class=&quot;logo&quot;&gt; &lt;a href=&quot;index.jsp&quot;&gt; &lt;img src=&quot;image/r___________renleipic_01/logo.png&quot; alt=&quot;依依不舍&quot;/&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span9&quot;&gt;&lt;div class=&quot;headerAd&quot;&gt; &lt;img src=&quot;image/header.jpg&quot; width=&quot;320&quot; height=&quot;50&quot; alt=&quot;正品保障&quot; title=&quot;正品保障&quot;/&gt;&lt;/div&gt; &lt;/div&gt;&lt;div class=&quot;span10 last&quot;&gt; &lt;div class=&quot;topNav clearfix&quot;&gt; &lt;ul&gt; &lt;li id=&quot;headerLogin&quot; class=&quot;headerLogin&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;login.jsp&quot;&gt;登录&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerRegister&quot; class=&quot;headerRegister&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;reg.jsp&quot;&gt;注册&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerUsername&quot; class=&quot;headerUsername&quot;&gt;&lt;/li&gt; &lt;li id=&quot;headerLogout&quot; class=&quot;headerLogout&quot;&gt; &lt;a&gt;[退出]&lt;/a&gt;| &lt;/li&gt; &lt;li&gt; &lt;a&gt;会员中心&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;购物指南&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;关于我们&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;cart&quot;&gt; &lt;a href=&quot;cart.jsp&quot;&gt;购物车&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;phone&quot;&gt; 客服热线: &lt;strong&gt;96008/53277764&lt;/strong&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;mainNav&quot;&gt; &lt;li&gt; &lt;a href=&quot;index.jsp&quot;&gt;首页&lt;/a&gt; | &lt;/li&gt; &lt;% String cSql = &quot;select * from category&quot;; List&lt;Map&lt;String,Object&gt;&gt; clist = DBHelper.selectList(cSql); pageContext.setAttribute(&quot;clist&quot;, clist); for(Map&lt;String,Object&gt; row : clist) &#123; %&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?cid=&lt;%=row.get(&quot;cid&quot;)%&gt;&quot;&gt;&lt;%=row.get(&quot;cname&quot;)%&gt;&lt;/a&gt;|&lt;/li&gt; &lt;%&#125;%&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt; CsList.jsp 12345678910111213141516171819202122232425262728&lt;%@page import=&quot;java.util.*&quot;%&gt;&lt;%@page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;div class=&quot;span6&quot;&gt; &lt;div class=&quot;hotProductCategory&quot;&gt; &lt;% String csSql = &quot;select * from categorysecond&quot;; List&lt;Map&lt;String,Object&gt;&gt; cslist = DBHelper.selectList(csSql); List&lt;Map&lt;String,Object&gt;&gt; clistCopy = (List&lt;Map&lt;String,Object&gt;&gt;)pageContext.getAttribute(&quot;clist&quot;); // clist 在上面查询过了 for(Map&lt;String,Object&gt; c : clistCopy) &#123; %&gt; &lt;dl&gt; &lt;dt&gt; &lt;a href=&quot;clist.jsp?cid=&lt;%=c.get(&quot;cid&quot;) %&gt;&quot;&gt;&lt;%=c.get(&quot;cname&quot;) %&gt;&lt;/a&gt; &lt;/dt&gt; &lt;%for(Map&lt;String,Object&gt; cs : cslist)&#123;%&gt; &lt;%if(cs.get(&quot;cid&quot;).equals(c.get(&quot;cid&quot;)))&#123;%&gt; &lt;dd&gt; &lt;a href=&quot;clist.jsp?csid=&lt;%=cs.get(&quot;csid&quot;) %&gt;&quot;&gt;&lt;%=cs.get(&quot;csname&quot;) %&gt;&lt;/a&gt; &lt;/dd&gt; &lt;%&#125; %&gt; &lt;%&#125; %&gt; &lt;/dl&gt; &lt;%&#125; %&gt; &lt;/div&gt;&lt;/div&gt; Footer.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;div class=&quot;container footer&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;footerAd&quot;&gt; &lt;img src=&quot;image/footer.jpg&quot; width=&quot;950&quot; height=&quot;52&quot; alt=&quot;我们的优势&quot; title=&quot;我们的优势&quot;/&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;bottomNav&quot;&gt; &lt;li&gt; &lt;a &gt;关于我们&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;联系我们&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a &gt;诚聘英才&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a &gt;法律声明&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;友情链接&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;支付方式&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;配送方式&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a &gt;SHOP++官网&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a &gt;SHOP++论坛&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;copyright&quot;&gt;Copyright © 2005-2013 Mango商城 版权所有&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; &lt;独立模块&gt; reg.jsp 注册新用户lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;大麦商城&lt;/title&gt;&lt;link href=&quot;css/common.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;&lt;link href=&quot;css/register.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.8.3.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; function checkForm()&#123; // 校验用户名: // 校验密码: // 校验确认密码 //校验邮箱 return false; &#125; var xmlhttp; // ajax 验证用户名是否存在 try &#123; xmlhttp = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;); &#125; catch (e) &#123; try &#123; xmlhttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); &#125; catch (e) &#123; try &#123; xmlhttp = new XMLHttpRequest(); &#125; catch (e) &#123; &#125; &#125; &#125; //校验用户名是否存在 function checkUserName()&#123; // 获取用户填写的用户名 var name = document.getElementById(&quot;username&quot;).value; name = name.replace(/\\s/gi,&quot;&quot;); if(name == &#x27;&#x27;)&#123; alert(&quot;请填写用户名！&quot;); return; &#125; if(xmlhttp!=null)&#123; // 定义请求地址 var url =&quot;doCheckUsername.jsp?username=&quot;+name; // 以 POST 方式 开启连接 // POST 请求 更安全（编码） 提交的数据大小没有限制 xmlhttp.open(&quot;POST&quot;,url,true); // 设置回调函数 // 当收到服务器的响应时，会触发该函数（回调函数） // 每次的状态改变都会调用该方法 xmlhttp.onreadystatechange=function()&#123; if(xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200)&#123; // 替换空格 var msg = xmlhttp.responseText.replace(/\\s/gi,&quot;&quot;); // 使用 span 展示错误信息， 替代 alert(msg); 提升用户体验 // 允许注册使用绿色字体， 否则红色字体 var color = msg == &#x27;该用户名可以注册！&#x27; ? &#x27;green&#x27; : &#x27;red&#x27;; // 输入框的后面一个元素是用于展示信息的 span 元素 $(&quot;#username&quot;).next().text(msg).css(&quot;color&quot;, color); &#125; &#125;; // 发送请求 xmlhttp.send(null); &#125;else&#123; alert(&quot;不能创建XMLHttpRequest对象实例&quot;) &#125; &#125; function changeImg()&#123; // 更新验证码 &#125; function reg()&#123; var username = document.getElementById(&quot;username&quot;).value; var password = document.getElementById(&quot;password&quot;).value; var repassword = document.getElementById(&quot;repassword&quot;).value; var email = document.getElementById(&quot;email&quot;).value; var phone = document.getElementById(&quot;phone&quot;).value; var name = $(&quot;#name&quot;).val(); // 使用 jquery 选择器搞定！！！ var sex = $(&quot;input[name=&#x27;sex&#x27;]:checked&quot;).val(); // checked选择器写法记错了，已修改 if(xmlhttp!=null)&#123; // 定义请求地址 var url =&quot;doReg.jsp?username=&quot;+username + &quot;&amp;password=&quot; + password + &quot;&amp;repassword=&quot; + repassword + &quot;&amp;email=&quot; + email + &quot;&amp;phone=&quot; + phone + &quot;&amp;sex=&quot; + sex; // 以 POST 方式 开启连接 // POST 请求 更安全（编码） 提交的数据大小没有限制 xmlhttp.open(&quot;POST&quot;,url,true); // 设置回调函数 // 当收到服务器的响应时，会触发该函数（回调函数） // 每次的状态改变都会调用该方法 xmlhttp.onreadystatechange=function()&#123; if(xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200)&#123; var json = xmlhttp.responseText.replace(/\\s/gi,&quot;&quot;); eval(&quot;var user = &quot; + json); console.info(user); alert(user.msg); // msg 时扩展的 属性 &#125; &#125;; // 发送请求 xmlhttp.send(null); &#125;else&#123; alert(&quot;不能创建XMLHttpRequest对象实例&quot;) &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container header&quot;&gt; &lt;div class=&quot;span5&quot;&gt; &lt;div class=&quot;logo&quot;&gt; &lt;a href=&quot;index.jsp&quot;&gt; &lt;img src=&quot;image/r___________renleipic_01/logo.png&quot; alt=&quot;依依不舍&quot;/&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span9&quot;&gt;&lt;div class=&quot;headerAd&quot;&gt; &lt;img src=&quot;image/header.jpg&quot; width=&quot;320&quot; height=&quot;50&quot; alt=&quot;正品保障&quot; title=&quot;正品保障&quot;/&gt;&lt;/div&gt; &lt;/div&gt;&lt;div class=&quot;span10 last&quot;&gt; &lt;div class=&quot;topNav clearfix&quot;&gt; &lt;ul&gt; &lt;li id=&quot;headerLogin&quot; class=&quot;headerLogin&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;login.jsp&quot;&gt;登录&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerRegister&quot; class=&quot;headerRegister&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;reg.jsp&quot;&gt;注册&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerUsername&quot; class=&quot;headerUsername&quot;&gt;&lt;/li&gt; &lt;li id=&quot;headerLogout&quot; class=&quot;headerLogout&quot;&gt; &lt;a&gt;[退出]&lt;/a&gt;| &lt;/li&gt; &lt;li&gt; &lt;a&gt;会员中心&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;购物指南&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;关于我们&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;cart&quot;&gt; &lt;a href=&quot;cart.jsp&quot;&gt;购物车&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;phone&quot;&gt; 客服热线: &lt;strong&gt;96008/53277764&lt;/strong&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;mainNav&quot;&gt; &lt;li&gt; &lt;a href=&quot;index.jsp&quot;&gt;首页&lt;/a&gt; | &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?1&amp;pageIndex=1&quot;&gt; 女装男装&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?2&amp;pageIndex=1&quot;&gt; 鞋靴箱包&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?3&amp;pageIndex=1&quot;&gt; 运动户外&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?4&amp;pageIndex=1&quot;&gt; 珠宝配饰&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?5&amp;pageIndex=1&quot;&gt; 手机数码&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?6&amp;pageIndex=1&quot;&gt; 家电办公&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?7&amp;pageIndex=1&quot;&gt; 护肤彩妆&lt;/a&gt; |&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;container register&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;wrap&quot;&gt; &lt;div class=&quot;main clearfix&quot;&gt; &lt;div class=&quot;title&quot;&gt; &lt;strong&gt;会员注册&lt;/strong&gt;USER REGISTER &lt;/div&gt; &lt;form id=&quot;registerForm&quot; action=&quot;reg.jsp&quot; method=&quot;post&quot; novalidate=&quot;novalidate&quot; onsubmit=&quot;reg(); return false;&quot;&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;用户名:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; class=&quot;text&quot; maxlength=&quot;20&quot; onblur=&quot;checkUserName()&quot; /&gt; &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;密&amp;nbsp;&amp;nbsp;码:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; class=&quot;text&quot; maxlength=&quot;20&quot; autocomplete=&quot;off&quot; /&gt;&lt;span&gt; &lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;确认密码:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;password&quot; id=&quot;repassword&quot; name=&quot;repassword&quot; class=&quot;text&quot; maxlength=&quot;20&quot; autocomplete=&quot;off&quot; /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;E-mail:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;email&quot; name=&quot;email&quot; class=&quot;text&quot; maxlength=&quot;200&quot; /&gt;&lt;span&gt; &lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;电话:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;phone&quot; name=&quot;phone&quot; class=&quot;text&quot; maxlength=&quot;200&quot; onkeyup=&quot;value=value.replace(/[^\\d]/g,&#x27;&#x27;)&quot; onafterpaste=&quot;value=value.replace(/\\D/g,&#x27;&#x27;)&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;姓名:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot; class=&quot;text&quot; maxlength=&quot;200&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;性别:&lt;/th&gt; &lt;td&gt;&lt;span class=&quot;fieldSet&quot;&gt; &lt;label&gt; &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot;&gt;男 &lt;/label&gt; &lt;label&gt; &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot;&gt;女 &lt;/label&gt; &lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;!-- &lt;tr&gt; &lt;th&gt;地址:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;address&quot; class=&quot;text&quot; maxlength=&quot;200&quot;&gt; &lt;/td&gt; &lt;/tr&gt; --&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;验证码:&lt;/th&gt; &lt;td&gt;&lt;span class=&quot;fieldSet&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;captcha&quot; name=&quot;captcha&quot; class=&quot;text captcha&quot; maxlength=&quot;4&quot; autocomplete=&quot;off&quot;&gt;&lt;img id=&quot;captchaImage&quot; class=&quot;captchaImage&quot; src=&quot;images/vcode.jpg&quot; title=&quot;点击更换验证码&quot; onclick=&quot;changeImg()&quot;&gt; &lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&amp;nbsp;&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;submit&quot; class=&quot;submit&quot; value=&quot;同意以下协议并注册&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&amp;nbsp;&lt;/th&gt; &lt;td&gt;注册协议&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&amp;nbsp;&lt;/th&gt; &lt;td&gt; &lt;div id=&quot;agreement&quot; class=&quot;agreement&quot; style=&quot;height: 200px;&quot;&gt; &lt;p&gt;尊敬的用户欢迎您注册成为本网站会员。请用户仔细阅读以下全部内容。如用户不同意本服务条款任意内容，请不要注册或使用本网站服务。如用户通过本网站注册程序，即表示用户与本网站已达成协议，自愿接受本服务条款的所有内容。此后，用户不得以未阅读本服务条款内容作任何形式的抗辩。&lt;/p&gt; &lt;p&gt; 一、本站服务条款的确认和接纳本网站涉及的各项服务的所有权和运作权归本网站所有。本网站所提供的服务必须按照其发布的服务条款和操作规则严格执行。本服务条款的效力范围及于本网站的一切产品和服务，用户在享受本网站的任何服务时，应当受本服务条款的约束。 &lt;/p&gt; &lt;p&gt; 二、服务简介本网站运用自己的操作系统通过国际互联网络为用户提供各项服务。用户必须: 1. 提供设备，如个人电脑、手机或其他上网设备。 2. 个人上网和支付与此服务有关的费用。 &lt;/p&gt; &lt;p&gt; 三、用户在不得在本网站上发布下列违法信息1. 反对宪法所确定的基本原则的； 2. 危害国家安全，泄露国家秘密，颠覆国家政权，破坏国家统一的； 3. 损害国家荣誉和利益的； 4. 煽动民族仇恨、民族歧视，破坏民族团结的； 5. 破坏国家宗教政策，宣扬邪教和封建迷信的； 6. 散布谣言，扰乱社会秩序，破坏社会稳定的； 7. 散布淫秽、色情、赌博、暴力、凶杀、恐怖或者教唆犯罪的； 8. 侮辱或者诽谤他人，侵害他人合法权益的； 9. 含有法律、行政法规禁止的其他内容的。 &lt;/p&gt; &lt;p&gt; 四、有关个人资料用户同意: 1. 提供及时、详尽及准确的个人资料。 2. 同意接收来自本网站的信息。 3. 不断更新注册资料，符合及时、详尽准确的要求。所有原始键入的资料将引用为注册资料。 4. 本网站不公开用户的姓名、地址、电子邮箱和笔名。除以下情况外: a) 用户授权本站透露这些信息。 b) 相应的法律及程序要求本站提供用户的个人资料。 &lt;/p&gt; &lt;p&gt; 五、服务条款的修改本网站有权在必要时修改服务条款，一旦条款及服务内容产生变动，本网站将会在重要页面上提示修改内容。如果不同意所改动的内容，用户可以主动取消获得的本网站信息服务。如果用户继续享用本网站信息服务，则视为接受服务条款的变动。 &lt;/p&gt; &lt;p&gt; 六、用户隐私制度尊重用户个人隐私是本网站的一项基本政策。所以，本网站一定不会在未经合法用户授权时公开、编辑或透露其注册资料及保存在本网站中的非公开内容，除非有法律许可要求或本网站在诚信的基础上认为透露这些信息在以下四种情况是必要的: 1. 遵守有关法律规定，遵从本网站合法服务程序。 2. 保持维护本网站的商标所有权。 3. 在紧急情况下竭力维护用户个人和社会大众的隐私安全。 4. 符合其他相关的要求。 &lt;/p&gt; &lt;p&gt; 七、用户的帐号、密码和安全性用户一旦注册成功，将获得一个密码和用户名。用户需谨慎合理的保存、使用用户名和密码。如果你不保管好自己的帐号和密码安全，将负全部责任。另外，每个用户都要对其帐户中的所有活动和事件负全责。你可随时根据指示改变你的密码。用户若发现任何非法使用用户帐号或存在安全漏洞的情况，请立即通告本网站。 八、 拒绝提供担保 用户明确同意信息服务的使用由用户个人承担风险。本网站不担保服务不会受中断，对服务的及时性，安全性，出错发生都不作担保，但会在能力范围内，避免出错。 &lt;/p&gt; &lt;p&gt; 九、有限责任如因不可抗力或其它本站无法控制的原因使本站销售系统崩溃或无法正常使用导致网上交易无法完成或丢失有关的信息、记录等本站会尽可能合理地协助处理善后事宜，并努力使客户免受经济损失，同时会尽量避免这种损害的发生。 &lt;/p&gt; &lt;p&gt; 十、用户信息的储存和限制本站有判定用户的行为是否符合国家法律法规规定及本站服务条款权利，如果用户违背本网站服务条款的规定，本网站有权中断对其提供服务的权利。 &lt;/p&gt; &lt;p&gt; 十一、用户管理用户单独承担发布内容的责任。用户对服务的使用是根据所有适用于本站的国家法律、地方法律和国际法律标准的。用户必须遵循: 1. 使用网络服务不作非法用途。 2. 不干扰或混乱网络服务。 3. 遵守所有使用网络服务的网络协议、规定、程序和惯例。 用户须承诺不传输任何非法的、骚扰性的、中伤他人的、辱骂性的、恐性的、伤害性的、庸俗的，淫秽等信息资料。另外，用户也不能传输何教唆他人构成犯罪行为的资料；不能传输助长国内不利条件和涉及国家安全的资料；不能传输任何不符合当地法规、国家法律和国际法律的资料。未经许可而非法进入其它电脑系统是禁止的。 若用户的行为不符合以上提到的服务条款，本站将作出独立判断立即取消用户服务帐号。用户需对自己在网上的行为承担法律责任。用户若在本站上散布和传播反动、色情或其它违反国家法律的信息，本站的系统记录有可能作为用户违反法律的证据。 &lt;/p&gt; &lt;p&gt; 十二、通告所有发给用户的通告都可通过重要页面的公告或电子邮件或常规的信件传送。服务条款的修改、服务变更、或其它重要事件的通告都会以此形式进行。 &lt;/p&gt; &lt;p&gt; 十三、信息内容的所有权本网站定义的信息内容包括: 文字、软件、声音、相片、录象、图表；在广告中全部内容；本网站为用户提供的其它信息。所有这些内容受版权、商标、标签和其它财产所有权法律的保护。所以，用户只能在本网站和广告商授权下才能使用这些内容，而不能擅自复制、再造这些内容、或创造与内容有关的派生产品。本站所有的文章版权归原文作者和本站共同所有，任何人需要转载本站的文章，必须征得原文作者或本站授权。 &lt;/p&gt; &lt;p&gt; 十四、法律本协议的订立、执行和解释及争议的解决均应适用中华人民共和国的法律。用户和本网站一致同意服从本网站所在地有管辖权的法院管辖。如发生本网站服务条款与中华人民共和国法律相抵触时，则这些条款将完全按法律规定重新解释，而其它条款则依旧保持对用户的约束力。 &lt;/p&gt; &lt;/div&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;div class=&quot;login&quot;&gt; &lt;div class=&quot;ad&quot;&gt; &lt;dl&gt; &lt;dt&gt;注册即享受&lt;/dt&gt; &lt;dd&gt;正品保障、正规发票&lt;/dd&gt; &lt;dd&gt;货到付款、会员服务&lt;/dd&gt; &lt;dd&gt;自由退换、售后上门&lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;dl&gt; &lt;dt&gt;已经拥有账号了？&lt;/dt&gt; &lt;dd&gt; 立即登录即可体验在线购物！ &lt;a href=&quot;login.jsp&quot;&gt;立即登录&lt;/a&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;container footer&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;footerAd&quot;&gt; &lt;img src=&quot;image/footer.jpg&quot; width=&quot;950&quot; height=&quot;52&quot; alt=&quot;我们的优势&quot; title=&quot;我们的优势&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;bottomNav&quot;&gt; &lt;li&gt;&lt;a&gt;关于我们&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;联系我们&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;招贤纳士&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;法律声明&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;友情链接&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a target=&quot;_blank&quot;&gt;支付方式&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a target=&quot;_blank&quot;&gt;配送方式&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;服务声明&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;广告声明&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;copyright&quot;&gt;Copyright © 2005-2013 Mango商城 版权所有&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;_my97DP&quot; style=&quot;position: absolute; top: -1970px; left: -1970px;&quot;&gt; &lt;iframe style=&quot;width: 190px; height: 191px;&quot; src=&quot;./会员注册 - Powered By Mango Team_files/My97DatePicker.htm&quot; frameborder=&quot;0&quot; border=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; doCheckUsername.jsp 验证用户名是否可用（去重） 1234567891011121314&lt;%@page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;% String username = request.getParameter(&quot;username&quot;); String sql = &quot;select count(*) from user where username = ?&quot;; Object value = DBHelper.selectValue(sql, username); int count = Integer.parseInt(&quot;&quot;+value); if(count&gt;0)&#123; out.print(&quot;该用户已经被注册&quot;); &#125;else&#123; out.print(&quot;该用户可以注册&quot;); &#125;%&gt; doReg.jsp 新用户写入数据库的用户表(user) 1234567891011121314151617181920212223242526272829303132&lt;%@page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;% String username = request.getParameter(&quot;username&quot;); String password = request.getParameter(&quot;password&quot;); String repassword = request.getParameter(&quot;repassword&quot;); String email = request.getParameter(&quot;email&quot;); String phone = request.getParameter(&quot;phone&quot;); String name = request.getParameter(&quot;name&quot;); String sex = request.getParameter(&quot;sex&quot;); String sql = &quot;insert into user &quot;+ &quot;values(null,?,?,?,?,?,?,null,null,null)&quot;; try&#123; DBHelper.update(sql,username,password,name,email,phone,sex); // json 格式字符串 // 定义json 返回字符串, 用于返回复杂的数据 String json = &quot;&#123;name:&#x27;&quot;+name +&quot;&#x27;, username:&#x27;&quot;+username +&quot;&#x27;, password:&#x27;&quot;+password +&quot;&#x27;, email:&#x27;&quot;+email +&quot;&#x27;, phone:&#x27;&quot;+phone +&quot;&#x27;, sex:&#x27;&quot;+sex +&quot;&#x27;, msg:&#x27;注册成功！&#x27;&#125;&quot;; // 扩张一个结果描述信息 out.print(json); &#125; catch (Exception e)&#123; String json = &quot;&#123;msg:&#x27;注册失败！&#x27;&#125;&quot;; // 扩张一个结果描述信息 out.print(json); &#125;%&gt; login.jsplt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;大麦商城&lt;/title&gt;&lt;link href=&quot;css/common.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link href=&quot;css/login.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;script type=&quot;text/javascript&quot;&gt; function checkImg()&#123; // 更新验证码 &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container header&quot;&gt; &lt;div class=&quot;span5&quot;&gt; &lt;div class=&quot;logo&quot;&gt; &lt;a href=&quot;index.jsp&quot;&gt; &lt;img src=&quot;image/r___________renleipic_01/logo.png&quot; alt=&quot;依依不舍&quot;/&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span9&quot;&gt;&lt;div class=&quot;headerAd&quot;&gt; &lt;img src=&quot;image/header.jpg&quot; width=&quot;320&quot; height=&quot;50&quot; alt=&quot;正品保障&quot; title=&quot;正品保障&quot;/&gt;&lt;/div&gt; &lt;/div&gt;&lt;div class=&quot;span10 last&quot;&gt; &lt;div class=&quot;topNav clearfix&quot;&gt; &lt;ul&gt; &lt;li id=&quot;headerLogin&quot; class=&quot;headerLogin&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;login.jsp&quot;&gt;登录&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerRegister&quot; class=&quot;headerRegister&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;reg.jsp&quot;&gt;注册&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerUsername&quot; class=&quot;headerUsername&quot;&gt;&lt;/li&gt; &lt;li id=&quot;headerLogout&quot; class=&quot;headerLogout&quot;&gt; &lt;a&gt;[退出]&lt;/a&gt;| &lt;/li&gt; &lt;li&gt; &lt;a&gt;会员中心&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;购物指南&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;关于我们&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;cart&quot;&gt; &lt;a href=&quot;cart.jsp&quot;&gt;购物车&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;phone&quot;&gt; 客服热线: &lt;strong&gt;96008/53277764&lt;/strong&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;mainNav&quot;&gt; &lt;li&gt; &lt;a href=&quot;index.jsp&quot;&gt;首页&lt;/a&gt; | &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?1&amp;pageIndex=1&quot;&gt; 女装男装&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?2&amp;pageIndex=1&quot;&gt; 鞋靴箱包&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?3&amp;pageIndex=1&quot;&gt; 运动户外&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?4&amp;pageIndex=1&quot;&gt; 珠宝配饰&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?5&amp;pageIndex=1&quot;&gt; 手机数码&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?6&amp;pageIndex=1&quot;&gt; 家电办公&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?7&amp;pageIndex=1&quot;&gt; 护肤彩妆&lt;/a&gt; |&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;container login&quot;&gt; &lt;div class=&quot;span12&quot;&gt;&lt;div class=&quot;ad&quot;&gt; &lt;img src=&quot;image/login.jpg&quot; width=&quot;500&quot; height=&quot;330&quot; alt=&quot;会员登录&quot; title=&quot;会员登录&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span12 last&quot;&gt; &lt;div class=&quot;wrap&quot;&gt; &lt;div class=&quot;main&quot;&gt; &lt;div class=&quot;title&quot;&gt; &lt;strong&gt;会员登录&lt;/strong&gt;USER LOGIN &lt;/div&gt; &lt;div class=&quot;title&quot; style=&quot;text-align: center;&quot;&gt; &lt;!-- 权限控制：密码错误/请先登录 --&gt; &lt;%if(request.getAttribute(&quot;msg&quot;)!=null)&#123; %&gt; &lt;font color=&quot;red&quot;&gt;&lt;%=request.getAttribute(&quot;msg&quot;)%&gt;&lt;/font&gt; &lt;%&#125;%&gt; &lt;/div&gt; &lt;!-- 提交表单至后台(dologin.jsp)处理数据 --&gt; &lt;form id=&quot;loginForm&quot; action=&quot;dologin.jsp&quot; method=&quot;post&quot; novalidate=&quot;novalidate&quot;&gt; &lt;table&gt; &lt;tbody&gt;&lt;tr&gt; &lt;th&gt; 用户名: &lt;/th&gt; &lt;td&gt; &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; class=&quot;text&quot; maxlength=&quot;20&quot;/&gt;&lt;span&gt;&lt;/span&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt; 密&amp;nbsp;&amp;nbsp;码: &lt;/th&gt; &lt;td&gt; &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; class=&quot;text&quot; maxlength=&quot;20&quot; autocomplete=&quot;off&quot;/&gt;&lt;span&gt;&lt;/span&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt; 验证码: &lt;/th&gt; &lt;td&gt; &lt;span class=&quot;fieldSet&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;captcha&quot; name=&quot;captcha&quot; class=&quot;text captcha&quot; maxlength=&quot;4&quot; autocomplete=&quot;off&quot;&gt;&lt;img id=&quot;captchaImage&quot; class=&quot;captchaImage&quot; src=&quot;images/vcode.jpg&quot; title=&quot;点击更换验证码&quot; onclick=&quot;checkImg()&quot;&gt; &lt;/span&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&amp;nbsp; &lt;/th&gt; &lt;td&gt; &lt;label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;isRememberUsername&quot; name=&quot;isRememberUsername&quot; value=&quot;true&quot;&gt;记住用户名 &lt;/label&gt; &lt;label&gt; &amp;nbsp;&amp;nbsp;&lt;a &gt;找回密码&lt;/a&gt; &lt;/label&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&amp;nbsp; &lt;/th&gt; &lt;td&gt; &lt;input type=&quot;submit&quot; class=&quot;submit&quot; value=&quot;登 录&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;register&quot;&gt; &lt;th&gt;&amp;nbsp; &lt;/th&gt; &lt;td&gt; &lt;dl&gt; &lt;dt&gt;还没有注册账号？&lt;/dt&gt; &lt;dd&gt; 立即注册即可体验在线购物！ &lt;a href=&quot;reg.jsp&quot;&gt;立即注册&lt;/a&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class=&quot;container footer&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;footerAd&quot;&gt;&lt;img src=&quot;image/footer.jpg&quot; width=&quot;950&quot; height=&quot;52&quot; alt=&quot;我们的优势&quot; title=&quot;我们的优势&quot; /&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;bottomNav&quot;&gt; &lt;li&gt; &lt;a &gt;关于我们&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;联系我们&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;招贤纳士&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;法律声明&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;友情链接&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;支付方式&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;配送方式&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;服务声明&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;广告声明&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;copyright&quot;&gt;Copyright © 2005-2013 Mango商城 版权所有&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; dologin.jsp 前端传送过来的表单，与数据库的数据匹配 要点： 1.跳转页面 12345678910111213141516171819202122&lt;%@ page import=&quot;java.util.*&quot;%&gt;&lt;%@ page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;% // 设置请求对象的字符集编码，可以兼容中文参数，避免乱码问题 request.setCharacterEncoding(&quot;utf-8&quot;); // 接收 用户名 和 密码 String username = request.getParameter(&quot;username&quot;); String password = request.getParameter(&quot;password&quot;); String sql = &quot;select * from user where username=? and password=?&quot;; Map&lt;String, Object&gt; user = DBHelper.selectOne(sql, username, password); if (user != null) &#123; session.setAttribute(&quot;loginedUser&quot;, user); //匹配成功，跳转至主页(index.jsp) response.sendRedirect(&quot;index.jsp&quot;); &#125; else &#123; request.setAttribute(&quot;msg&quot;, &quot;用户名或密码错误！&quot;); //匹配失败，跳转至登录页(login.jsp)重新登陆 request.getRequestDispatcher(&quot;login.jsp&quot;).forward(request, response); &#125;%&gt; index.jsp 要点： 1.MySQL数据库分页 2.动态生成页面元素 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336&lt;%@page import=&quot;java.util.*&quot;%&gt;&lt;%@page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@page import=&quot;com.sun.corba.se.spi.ior.iiop.RequestPartitioningComponent&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;&lt;title&gt;大麦商城&lt;/title&gt;&lt;link href=&quot;css/slider.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link href=&quot;css/common.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link href=&quot;css/index.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container header&quot;&gt; &lt;div class=&quot;span5&quot;&gt; &lt;div class=&quot;logo&quot;&gt; &lt;a href=&quot;index.jsp&quot;&gt; &lt;img src=&quot;image/r___________renleipic_01/logo.png&quot; alt=&quot;依依不舍&quot;/&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span9&quot;&gt;&lt;div class=&quot;headerAd&quot;&gt; &lt;img src=&quot;image/header.jpg&quot; width=&quot;320&quot; height=&quot;50&quot; alt=&quot;正品保障&quot; title=&quot;正品保障&quot;/&gt;&lt;/div&gt; &lt;/div&gt;&lt;div class=&quot;span10 last&quot;&gt; &lt;div class=&quot;topNav clearfix&quot;&gt; &lt;ul&gt; &lt;li id=&quot;headerLogin&quot; class=&quot;headerLogin&quot; style=&quot;display: list-item;&quot;&gt; Song| &lt;/li&gt; &lt;li id=&quot;headerLogin&quot; class=&quot;headerLogin&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;olist.jsp&quot;&gt;我的订单&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerRegister&quot; class=&quot;headerRegister&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;index.jsp&quot;&gt;退出&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerUsername&quot; class=&quot;headerUsername&quot;&gt;&lt;/li&gt; &lt;li id=&quot;headerLogout&quot; class=&quot;headerLogout&quot;&gt; &lt;a&gt;[退出]&lt;/a&gt;| &lt;/li&gt; &lt;li&gt; &lt;a&gt;会员中心&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;购物指南&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;关于我们&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;cart&quot;&gt; &lt;a href=&quot;cart.jsp&quot;&gt;购物车&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;phone&quot;&gt; 客服热线: &lt;strong&gt;96008/53277764&lt;/strong&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;mainNav&quot;&gt; &lt;li&gt; &lt;a href=&quot;index.jsp&quot;&gt;首页&lt;/a&gt; | &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?1&amp;pageIndex=1&quot;&gt; 女装男装&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?2&amp;pageIndex=1&quot;&gt; 鞋靴箱包&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?3&amp;pageIndex=1&quot;&gt; 运动户外&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?4&amp;pageIndex=1&quot;&gt; 珠宝配饰&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?5&amp;pageIndex=1&quot;&gt; 手机数码&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?6&amp;pageIndex=1&quot;&gt; 家电办公&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?7&amp;pageIndex=1&quot;&gt; 护肤彩妆&lt;/a&gt; |&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;container index&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div id=&quot;hotProduct&quot; class=&quot;hotProduct clearfix&quot;&gt; &lt;div class=&quot;title&quot;&gt; &lt;strong&gt;热门商品&lt;/strong&gt; &lt;!-- &lt;a target=&quot;_blank&quot;&gt;&lt;/a&gt; --&gt; &lt;/div&gt; &lt;ul class=&quot;tab&quot;&gt; &lt;li class=&quot;current&quot;&gt; &lt;a href=&quot;./蔬菜分类.htm?tagIds=1&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;tabContent&quot; style=&quot;display: block;&quot;&gt; &lt;% String paramNumber = request.getParameter(&quot;pageNumber&quot;); String paramRows = request.getParameter(&quot;pageRows&quot;); //第几页 int pageNumber = paramNumber == null ? 1 : Integer.parseInt(paramNumber); //每页行数 int pageRows = paramRows == null ? 10 : Integer.parseInt(paramRows); //第几页开始查询 int beginRow = (pageNumber - 1) * 10; String sql = &quot;select count(*) from product where is_hot = 1&quot;; // Object value = DBHelper.selectValue(sql); int totalRows = Integer.parseInt(&quot;&quot;+value); int totalPage = totalRows / pageRows; totalPage += totalRows % pageRows == 0 ? 0 : 1; sql = &quot;select * from product where is_hot=1 limit ?,?&quot;; List&lt;Map&lt;String,Object&gt;&gt; list = DBHelper.selectList(sql, beginRow,pageRows); for(Map&lt;String,Object&gt; m : list)&#123; %&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot; href=&quot;detail.jsp?1&quot;&gt;&lt;img src=&quot;&lt;%=m.get(&quot;image&quot;) %&gt;&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;%&#125; %&gt; &lt;/ul&gt; &lt;a href=&quot;index.jsp?pageNumber=1&quot;&gt;首页&lt;/a&gt; &lt;a href=&quot;index.jsp?pageNumber=&lt;%=pageNumber&lt;=1 ? 1 : pageNumber-1 %&gt;&quot;&gt;上一页&lt;/a&gt; &lt;a href=&quot;index.jsp?pageNumber=&lt;%=pageNumber&gt;=totalPage ? totalPage : pageNumber+1 %&gt;&quot;&gt;下一页&lt;/a&gt; &lt;a href=&quot;index.jsp?pageNumber=&lt;%=totalPage%&gt;&quot;&gt;尾页&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div id=&quot;newProduct&quot; class=&quot;newProduct clearfix&quot;&gt; &lt;div class=&quot;title&quot;&gt; &lt;strong&gt;最新商品&lt;/strong&gt; &lt;a target=&quot;_blank&quot;&gt;&lt;/a&gt; &lt;/div&gt; &lt;ul class=&quot;tab&quot;&gt; &lt;li class=&quot;current&quot;&gt; &lt;a href=&quot;./蔬菜分类.htm?tagIds=2&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;tabContent&quot; style=&quot;display: block;&quot;&gt; &lt;li&gt; &lt;a href=&quot;detail.jsp?72&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs10011.jpg&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.jsp?57&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs60006.png&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.jsp?4&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs10004.jpg&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.jsp?45&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs50004.png&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.jsp?51&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs50010.png&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.jsp?68&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs70007.png&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.jsp?60&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs60009.png&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.jsp?30&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs30010.png&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.jsp?6&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs10006.jpg&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.jsp?2&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs10002.jpg&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;friendLink&quot;&gt; &lt;dl&gt; &lt;dd&gt;新手指南&lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;支付方式&lt;/a&gt; | &lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;配送方式&lt;/a&gt; | &lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;售后服务&lt;/a&gt; | &lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;购物帮助&lt;/a&gt; | &lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;蔬菜卡&lt;/a&gt; | &lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;礼品卡&lt;/a&gt; | &lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;银联卡&lt;/a&gt; | &lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;亿家卡&lt;/a&gt; | &lt;/dd&gt; &lt;dd class=&quot;more&quot;&gt; &lt;a &gt;更多&lt;/a&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class=&quot;container footer&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;footerAd&quot;&gt; &lt;img src=&quot;image/footer.jpg&quot; width=&quot;950&quot; height=&quot;52&quot; alt=&quot;我们的优势&quot; title=&quot;我们的优势&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;bottomNav&quot;&gt; &lt;li&gt; &lt;a&gt;关于我们&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;联系我们&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;招贤纳士&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;法律声明&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;友情链接&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;支付方式&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;配送方式&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;服务声明&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;广告声明&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;copyright&quot;&gt;Copyright © 2005-2013 大麦商城 版权所有&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; clist.jsp 多参数选择页面(cid,csid,page） 要点： 1.多参数选择，若两参数选择其一(cid&#x2F;csid)，可用三元表达式。 2.使用DBHelper工具类调用MySQL分页方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110&lt;%@page import=&quot;java.util.*&quot;%&gt;&lt;%@page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;&lt;title&gt;大麦商城&lt;/title&gt;&lt;link href=&quot;css/common.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link href=&quot;css/product.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;%@ include file=&quot;/common/Header.jsp&quot; %&gt;&lt;div class=&quot;container productList&quot;&gt; &lt;%-- 左边的子类 --%&gt; &lt;%@ include file=&quot;/common/CsList.jsp&quot; %&gt; &lt;div class=&quot;span18 last&quot;&gt; &lt;form id=&quot;productForm&quot; action=&quot;image/蔬菜 - Powered By Mango Team.htm&quot; method=&quot;get&quot;&gt; &lt;input type=&quot;hidden&quot; id=&quot;brandId&quot; name=&quot;brandId&quot; value=&quot;&quot;/&gt; &lt;input type=&quot;hidden&quot; id=&quot;promotionId&quot; name=&quot;promotionId&quot; value=&quot;&quot;/&gt; &lt;input type=&quot;hidden&quot; id=&quot;orderType&quot; name=&quot;orderType&quot; value=&quot;&quot;/&gt; &lt;input type=&quot;hidden&quot; id=&quot;pageNumber&quot; name=&quot;pageNumber&quot; value=&quot;1&quot;/&gt; &lt;input type=&quot;hidden&quot; id=&quot;pageSize&quot; name=&quot;pageSize&quot; value=&quot;20&quot;/&gt; &lt;div id=&quot;result&quot; class=&quot;result table clearfix&quot;&gt; &lt;ul&gt; &lt;% String sql = &quot;select a.* from product a join categorysecond b &quot; + &quot; on a.csid = b.csid&quot; + &quot; where 1=1&quot;; String cid = request.getParameter(&quot;cid&quot;); String csid = request.getParameter(&quot;csid&quot;); // 第几页 String pageParam = request.getParameter(&quot;page&quot;); int iPage = pageParam == null ? 1 : Integer.parseInt(pageParam); // 每页行数 int rows = 12; String queryId; if(csid!=null)&#123; sql += &quot; and b.csid=?&quot;; queryId = csid; &#125; else &#123; sql += &quot; and b.cid=?&quot;; queryId = cid; &#125; //使用DBHelper工具类中的MySQL分页查询方法 DBHelper.Page pPage = DBHelper.selectPageForMysql(sql,iPage,rows, queryId); //生成右侧商品目录 for(Map&lt;String,Object&gt; p : pPage.getData())&#123; %&gt; &lt;li&gt; &lt;!-- 点击右侧商品进入详情页面(detail.jsp) --&gt; &lt;a href=&quot;detail.jsp?pid=&lt;%=p.get(&quot;pid&quot;)%&gt;&quot;&gt; &lt;img src=&quot;&lt;%=p.get(&quot;image&quot;) %&gt;&quot; width=&quot;170&quot; height=&quot;170&quot; style=&quot;display: inline-block;&quot;/&gt; &lt;span style=&#x27;color:green&#x27;&gt; &lt;%=p.get(&quot;pname&quot;) %&gt; &lt;/span&gt; &lt;span class=&quot;price&quot;&gt; 商城价： ￥&lt;%=p.get(&quot;shop_price&quot;) %&gt;/份 &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;%&#125;%&gt; &lt;/ul&gt; &lt;/div&gt; &lt;!-- 分页 --&gt; &lt;div class=&quot;pagination&quot;&gt; 第&lt;%=pPage.getPage() %&gt;/&lt;%=pPage.getLastPage()%&gt; &lt;% String condition = csid != null ? &quot;csid=&quot; + csid : (&quot;cid=&quot; + cid);%&gt; &lt;a class=&quot;firstPage&quot; href=&quot;clist.jsp?&lt;%=condition %&gt;&amp;page=1&quot;&gt;&amp;nbsp;&lt;/a&gt; &lt;a class=&quot;previousPage&quot; href=&quot;clist.jsp?&lt;%=condition %&gt;&amp;page=&lt;%=pPage.getPreviousPage()%&gt;&quot;&gt;&amp;nbsp;&lt;/a&gt; &lt;%for(int i=1; i&lt;=pPage.getLastPage() ; i++)&#123; %&gt; &lt;%if(pPage.getPage()==i)&#123; %&gt; &lt;!-- 当前页特殊的样式 --&gt; &lt;span class=&quot;currentPage&quot;&gt;&lt;%=i%&gt;&lt;/span&gt; &lt;%&#125; else &#123; %&gt; &lt;a href=&quot;clist.jsp?&lt;%=condition %&gt;&amp;page=&lt;%=i%&gt;&quot;&gt;&lt;%=i%&gt;&lt;/a&gt; &lt;%&#125; %&gt; &lt;%&#125; %&gt; &lt;a class=&quot;nextPage&quot; href=&quot;clist.jsp?&lt;%=condition %&gt;&amp;page=&lt;%=pPage.getNextPage()%&gt;&quot;&gt;&amp;nbsp;&lt;/a&gt; &lt;a class=&quot;lastPage&quot; href=&quot;clist.jsp?&lt;%=condition %&gt;&amp;page=&lt;%=pPage.getLastPage()%&gt;&quot;&gt;&amp;nbsp;&lt;/a&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;jsp:include page=&quot;/common/Footer.jsp&quot;&gt;&lt;/jsp:include&gt;&lt;/body&gt;&lt;/html&gt; detail.jsp 单商品详情页面 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111&lt;%@page import=&quot;java.util.*&quot;%&gt;&lt;%@page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;&lt;link href=&quot;css/common.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link href=&quot;css/product.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/common.js&quot;&gt;&lt;/script&gt;&lt;title&gt;大麦商城&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;%@ include file=&quot;/common/Header.jsp&quot; %&gt;&lt;%String pid = request.getParameter(&quot;pid&quot;);String sql = &quot;select * from product where pid=?&quot;;Map&lt;String,Object&gt; product = DBHelper.selectOne(sql, pid);//将 商品 map 添加到页面上下文中， 就是用 EL 表达式输出值pageContext.setAttribute(&quot;p&quot;, product);%&gt;&lt;div class=&quot;container productContent&quot;&gt; &lt;%-- 左边的子类 --%&gt; &lt;%@ include file=&quot;/common/CsList.jsp&quot; %&gt; &lt;div class=&quot;span18 last&quot;&gt; &lt;div class=&quot;productImage&quot;&gt; &lt;a title=&quot;&quot; style=&quot;outline-style: none; text-decoration: none;&quot; id=&quot;zoom&quot; href=&quot;http://image/r___________renleipic_01/bigPic1ea8f1c9-8b8e-4262-8ca9-690912434692.jpg&quot; rel=&quot;gallery&quot;&gt; &lt;div class=&quot;zoomPad&quot;&gt;&lt;img style=&quot;opacity: 1;&quot; title=&quot;&quot; class=&quot;medium&quot; src=&quot;$&#123;p.image&#125;&quot;&gt;&lt;div style=&quot;display: block; top: 0px; left: 162px; width: 0px; height: 0px; position: absolute; border-width: 1px;&quot; class=&quot;zoomPup&quot;&gt;&lt;/div&gt;&lt;div style=&quot;position: absolute; z-index: 5001; left: 312px; top: 0px; display: block;&quot; class=&quot;zoomWindow&quot;&gt;&lt;div style=&quot;width: 368px;&quot; class=&quot;zoomWrapper&quot;&gt;&lt;div style=&quot;width: 100%; position: absolute; display: none;&quot; class=&quot;zoomWrapperTitle&quot;&gt;&lt;/div&gt;&lt;div style=&quot;width: 0%; height: 0px;&quot; class=&quot;zoomWrapperImage&quot;&gt;&lt;img src=&quot;%E5%B0%9A%E9%83%BD%E6%AF%94%E6%8B%89%E5%A5%B3%E8%A3%852013%E5%A4%8F%E8%A3%85%E6%96%B0%E6%AC%BE%E8%95%BE%E4%B8%9D%E8%BF%9E%E8%A1%A3%E8%A3%99%20%E9%9F%A9%E7%89%88%E4%BF%AE%E8%BA%AB%E9%9B%AA%E7%BA%BA%E6%89%93%E5%BA%95%E8%A3%99%E5%AD%90%20%E6%98%A5%E6%AC%BE%20-%20Powered%20By%20Mango%20Team_files/6d53c211-2325-41ed-8696-d8fbceb1c199-large.jpg&quot; style=&quot;position: absolute; border: 0px none; display: block; left: -432px; top: 0px;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;visibility: hidden; top: 129.5px; left: 106px; position: absolute;&quot; class=&quot;zoomPreload&quot;&gt;Loading zoom&lt;/div&gt;&lt;/div&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;name&quot;&gt;$&#123;p.pname&#125;&lt;/div&gt; &lt;div class=&quot;sn&quot;&gt; &lt;div&gt;编号：$&#123;p.pid&#125;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;info&quot;&gt; &lt;dl&gt; &lt;dt&gt;商城价:&lt;/dt&gt; &lt;dd&gt; &lt;strong&gt;￥：$&#123;p.shop_price&#125;元/份&lt;/strong&gt; 参 考 价： &lt;del&gt;￥$&#123;p.market_price&#125;元/份&lt;/del&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;dl&gt; &lt;dt&gt;促销:&lt;/dt&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot; title=&quot;限时抢购 (2014-07-30 ~ 2015-01-01)&quot;&gt;限时抢购&lt;/a&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;dl&gt; &lt;dt&gt; &lt;/dt&gt; &lt;dd&gt; &lt;span&gt; &lt;/span&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;div class=&quot;action&quot;&gt; &lt;form action=&quot;doAddCart.jsp&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;pid&quot; value=&quot;$&#123;p.pid &#125;&quot;/&gt; &lt;dl class=&quot;quantity&quot;&gt; &lt;dt&gt;购买数量:&lt;/dt&gt; &lt;dd&gt; &lt;input id=&quot;quantity&quot; name=&quot;count&quot; value=&quot;1&quot; maxlength=&quot;4&quot; onpaste=&quot;return false;&quot; type=&quot;text&quot;&gt; &lt;div&gt; &lt;span id=&quot;increase&quot; class=&quot;increase&quot;&gt;&amp;nbsp;&lt;/span&gt; &lt;span id=&quot;decrease&quot; class=&quot;decrease&quot;&gt;&amp;nbsp;&lt;/span&gt; &lt;/div&gt; &lt;/dd&gt; &lt;dd&gt; 件 &lt;/dd&gt; &lt;/dl&gt; &lt;div class=&quot;buy&quot;&gt; &lt;input id=&quot;addCart&quot; class=&quot;addCart&quot; value=&quot;加入购物车&quot; type=&quot;submit&quot;&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;div id=&quot;bar&quot; class=&quot;bar&quot;&gt; &lt;ul&gt; &lt;li id=&quot;introductionTab&quot;&gt; &lt;a href=&quot;#introduction&quot;&gt;商品介绍&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div id=&quot;introduction&quot; name=&quot;introduction&quot; class=&quot;introduction&quot;&gt; &lt;div class=&quot;title&quot;&gt; &lt;strong&gt;商品介绍&lt;/strong&gt; &lt;/div&gt; &lt;div&gt; $&#123;p.pdesc&#125; &lt;br /&gt;&lt;br /&gt; &lt;img src=&quot;$&#123;p.image&#125;&quot; align=&quot;middle&quot;/&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;jsp:include page=&quot;/common/Footer.jsp&quot;&gt;&lt;/jsp:include&gt;&lt;/body&gt;&lt;/html&gt; doAddCart.jsp 商品添加到购物车 12345678910111213141516171819&lt;%@page import=&quot;java.util.Map&quot;%&gt;&lt;%@page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;% Map&lt;String,Object&gt; user = (Map&lt;String,Object&gt;)session.getAttribute(&quot;loginedUser&quot;); String pid = request.getParameter(&quot;pid&quot;); String count = request.getParameter(&quot;count&quot;); String sql = &quot;update cartitem set count=count+? where uid=? and pid=?&quot;; // 判断是否更新到 指定用的商品 int num = DBHelper.update(sql,count, user.get(&quot;uid&quot;), pid); if(num == 0 )&#123; sql = &quot;insert into cartitem values(null,?,?,?)&quot;; DBHelper.update(sql, user.get(&quot;uid&quot;), pid, count); &#125; response.sendRedirect(&quot;cart.jsp&quot;);%&gt; cart.jsp 购物车 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;&lt;title&gt;大麦商城&lt;/title&gt;&lt;link href=&quot;css/common.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;&lt;link href=&quot;css/cart.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/common.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;% if(session.getAttribute(&quot;loginedUser&quot;) == null)&#123; request.setAttribute(&quot;msg&quot;, &quot;请先登录系统！&quot;); request.getRequestDispatcher(&quot;login.jsp&quot;).forward(request, response); return; &#125;%&gt;&lt;body&gt;&lt;%@ include file=&quot;/common/Header.jsp&quot; %&gt; &lt;div class=&quot;container cart&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;step step1&quot;&gt; 购物车列表 &lt;/div&gt; &lt;table&gt; &lt;tbody&gt;&lt;tr&gt; &lt;th&gt;图片&lt;/th&gt; &lt;th&gt;商品&lt;/th&gt; &lt;th&gt;价格&lt;/th&gt; &lt;th&gt;数量&lt;/th&gt; &lt;th&gt;小计&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;% String sql = &quot;select b.*,a.ciid,a.count from cartitem a&quot; + &quot; join product b on a.pid=b.pid where uid = ?&quot;; Map&lt;String,Object&gt; user = (Map&lt;String,Object&gt;)session.getAttribute(&quot;loginedUser&quot;); List&lt;Map&lt;String,Object&gt;&gt; list = DBHelper.selectList(sql,user.get(&quot;uid&quot;)); for(Map&lt;String,Object&gt; cartitem : list)&#123; pageContext.setAttribute(&quot;c&quot;, cartitem); %&gt; &lt;tr&gt; &lt;td width=&quot;60&quot;&gt; &lt;img src=&quot;$&#123;c.image &#125;&quot;&gt; &lt;/td&gt; &lt;td&gt; &lt;a target=&quot;_blank&quot;&gt;$&#123;c.pname &#125;&lt;/a&gt; &lt;/td&gt; &lt;td&gt; ￥$&#123;c.shop_price &#125; &lt;/td&gt; &lt;td class=&quot;quantity&quot; width=&quot;60&quot;&gt; $&#123;c.count &#125; &lt;/td&gt; &lt;td width=&quot;140&quot;&gt; &lt;span class=&quot;subtotal&quot;&gt;￥$&#123;c.shop_price * c.count &#125;&lt;/span&gt; &lt;/td&gt; &lt;td&gt; &lt;a href=&quot;cart.jsp?pid=1&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;%&#125; %&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;dl id=&quot;giftItems&quot; class=&quot;hidden&quot; style=&quot;display: none;&quot;&gt; &lt;/dl&gt; &lt;div class=&quot;total&quot;&gt; &lt;em id=&quot;promotion&quot;&gt;&lt;/em&gt; &lt;em&gt; 登录后确认是否享有优惠 &lt;/em&gt; 赠送积分: &lt;em id=&quot;effectivePoint&quot;&gt;11017.0&lt;/em&gt; 商品金额: &lt;strong id=&quot;effectivePrice&quot;&gt;11017.0&lt;/strong&gt; &lt;/div&gt; &lt;div class=&quot;bottom&quot;&gt; &lt;a href=&quot;cart.jsp&quot; id=&quot;clear&quot; class=&quot;clear&quot;&gt;清空购物车&lt;/a&gt; &lt;a href=&quot;pay.jsp&quot; id=&quot;submit&quot; class=&quot;submit&quot;&gt;提交订单&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;jsp:include page=&quot;/common/Footer.jsp&quot;&gt;&lt;/jsp:include&gt;&lt;/body&gt;&lt;/html&gt; pay.jsp 订单支付页面 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;&lt;title&gt;大麦商城&lt;/title&gt;&lt;link href=&quot;css/common.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link href=&quot;css/cart.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;%@ include file=&quot;/common/Header.jsp&quot; %&gt;&lt;div class=&quot;container cart&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;step step1&quot;&gt; &lt;ul&gt; &lt;li class=&quot;current&quot;&gt;&lt;/li&gt; &lt;li &gt;生成订单成功&lt;/li&gt; &lt;li &gt;订单号:73&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt;图片&lt;/th&gt; &lt;th&gt;商品&lt;/th&gt; &lt;th&gt;价格&lt;/th&gt; &lt;th&gt;数量&lt;/th&gt; &lt;th&gt;小计&lt;/th&gt; &lt;/tr&gt; &lt;% String sql = &quot;select b.*,a.ciid,a.count from cartitem a &quot; + &quot; join product b on a.pid=b.pid where uid=?&quot;; Map&lt;String,Object&gt; user = (Map&lt;String,Object&gt;)session.getAttribute(&quot;loginedUser&quot;); List&lt;Map&lt;String,Object&gt;&gt; list = DBHelper.selectList(sql, user.get(&quot;uid&quot;)); for(Map&lt;String,Object&gt; cartitem : list)&#123; pageContext.setAttribute(&quot;c&quot;, cartitem); %&gt; &lt;tr&gt; &lt;td width=&quot;60&quot;&gt; &lt;img src=&quot;$&#123;c.image&#125;&quot;/&gt; &lt;/td&gt; &lt;td&gt; &lt;a target=&quot;_blank&quot;&gt;$&#123;c.pname &#125;&lt;/a&gt; &lt;/td&gt; &lt;td&gt; $&#123;c.shop_price &#125; &lt;/td&gt; &lt;td class=&quot;quantity&quot; width=&quot;60&quot;&gt; $&#123;c.count &#125; &lt;/td&gt; &lt;td width=&quot;140&quot;&gt; &lt;span class=&quot;subtotal&quot;&gt;￥$&#123;c.shop_price * c.count&#125;&lt;/span&gt; &lt;/td&gt; &lt;/tr&gt; &lt;%&#125; %&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;dl id=&quot;giftItems&quot; class=&quot;hidden&quot; style=&quot;display: none;&quot;&gt; &lt;/dl&gt; &lt;div class=&quot;total&quot;&gt; &lt;em id=&quot;promotion&quot;&gt;&lt;/em&gt; 商品金额: &lt;strong id=&quot;effectivePrice&quot;&gt;￥????????????元&lt;/strong&gt; &lt;/div&gt; &lt;form id=&quot;orderForm&quot; action=&quot;doAddOrder.jsp&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;order.oid&quot; value=&quot;73&quot;/&gt; &lt;div class=&quot;span24&quot;&gt; &lt;p&gt; 收货地址：&lt;input name=&quot;order.addr&quot; type=&quot;text&quot; value=&quot;&quot; style=&quot;width:350px&quot; /&gt; &lt;br /&gt; 收货人&amp;nbsp;&amp;nbsp;&amp;nbsp;：&lt;input name=&quot;order.name&quot; type=&quot;text&quot; value=&quot;&quot; style=&quot;width:150px&quot; /&gt; &lt;br /&gt; 联系方式：&lt;input name=&quot;order.phone&quot; type=&quot;text&quot; value=&quot;&quot; style=&quot;width:150px&quot; /&gt; &lt;/p&gt; &lt;hr /&gt; &lt;p&gt; 选择银行：&lt;br/&gt; &lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;ICBC-NET-B2C&quot; checked=&quot;checked&quot;/&gt;工商银行 &lt;img src=&quot;bank_img/icbc.bmp&quot; align=&quot;middle&quot;/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;BOC-NET-B2C&quot;/&gt;中国银行 &lt;img src=&quot;bank_img/bc.bmp&quot; align=&quot;middle&quot;/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;ABC-NET-B2C&quot;/&gt;农业银行 &lt;img src=&quot;bank_img/abc.bmp&quot; align=&quot;middle&quot;/&gt; &lt;br/&gt; &lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;BOCO-NET-B2C&quot;/&gt;交通银行 &lt;img src=&quot;bank_img/bcc.bmp&quot; align=&quot;middle&quot;/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;PINGANBANK-NET&quot;/&gt;平安银行 &lt;img src=&quot;bank_img/pingan.bmp&quot; align=&quot;middle&quot;/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;CCB-NET-B2C&quot;/&gt;建设银行 &lt;img src=&quot;bank_img/ccb.bmp&quot; align=&quot;middle&quot;/&gt; &lt;br/&gt; &lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;CEB-NET-B2C&quot;/&gt;光大银行 &lt;img src=&quot;bank_img/guangda.bmp&quot; align=&quot;middle&quot;/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input type=&quot;radio&quot; name=&quot;pd_FrpId&quot; value=&quot;CMBCHINA-NET-B2C&quot;/&gt;招商银行 &lt;img src=&quot;bank_img/cmb.bmp&quot; align=&quot;middle&quot;/&gt; &lt;/p&gt; &lt;hr /&gt; &lt;p style=&quot;text-align:right&quot;&gt; //通过a标签激发js语句 &lt;a href=&quot;javascript:document.getElementById(&#x27;orderForm&#x27;).submit();&quot;&gt; &lt;img src=&quot;images/finalbutton.gif&quot; width=&quot;204&quot; height=&quot;51&quot; border=&quot;0&quot; /&gt; &lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt;&lt;jsp:include page=&quot;/common/Footer.jsp&quot;&gt;&lt;/jsp:include&gt;&lt;/body&gt;&lt;/html&gt; doAddOrder.jsp 提交订单，将购物车数据写入数据库的订单表（orders） 123456789101112131415161718192021222324252627282930313233343536&lt;%@page import=&quot;java.util.List&quot;%&gt;&lt;%@page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@page import=&quot;java.util.Map&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;% Map&lt;String,Object&gt; user = (Map&lt;String,Object&gt;)session.getAttribute(&quot;loginedUser&quot;); Integer uid = (Integer)user.get(&quot;uid&quot;); String addr = request.getParameter(&quot;order.addr&quot;); String phone = request.getParameter(&quot;order.phone&quot;); String name = request.getParameter(&quot;order.name&quot;); // total 字段 暂时设置为 null String sql = &quot;insert into orders values(null, null, now(), 1, ?, ?, ? , ?)&quot;; DBHelper.update(sql, addr, phone, uid, name); // 获取刚才添加的订单编号 String oid = &quot;&quot; + DBHelper.selectValue(&quot;select max(oid) from orders&quot;); sql = &quot;select a.*,b.shop_price from cartitem a join product b on a.pid=b.pid where uid=?&quot;; List&lt;Map&lt;String,Object&gt;&gt; list = DBHelper.selectList(sql, uid); // 写入订单明细 for(Map&lt;String,Object&gt; cartitem : list)&#123; sql = &quot;insert into orderitem values (null, ?, ? * ?, ?, ?)&quot;; DBHelper.update(sql, cartitem.get(&quot;count&quot;), cartitem.get(&quot;count&quot;), cartitem.get(&quot;shop_price&quot;), cartitem.get(&quot;pid&quot;), oid); &#125; // 清空购物车！！！！ request.getRequestDispatcher(&quot;msg.jsp&quot;).forward(request, response);%&gt; msg.jps 网购结束 12345678910111213141516171819202122232425262728293031323334353637&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE HTML&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;大麦商城&lt;/title&gt; &lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt; &lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt; &lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt; &lt;link href=&quot;css/style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt; &lt;/head&gt; &lt;body&gt;&lt;div id=&quot;divcontent&quot;&gt;&lt;table width=&quot;850px&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt; &lt;tr&gt; &lt;td style=&quot;padding:30px; text-align:center&quot;&gt;&lt;table width=&quot;60%&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; style=&quot;margin-top:70px&quot;&gt; &lt;tr&gt; &lt;td style=&quot;width:98&quot;&gt;&lt;img src=&quot;images/IconTexto_WebDev_009.jpg&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;&lt;/td&gt; &lt;td style=&quot;padding-top:30px&quot;&gt;&lt;font style=&quot;font-weight:bold; color:#FF0000&quot;&gt; &lt;ul class=&quot;actionMessage&quot;&gt; &lt;li&gt;&lt;span&gt;信息提示页面，请在此处展示信息给用户查看&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/font&gt;&lt;br /&gt; &lt;br /&gt; &lt;a href=&quot;index.jsp&quot;&gt;首页&lt;/a&gt; &lt;a href=&quot;reg.jsp&quot;&gt;注册&lt;/a&gt; &lt;a href=&quot;login.jsp&quot;&gt;登录&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;h1&gt;&amp;nbsp;&lt;/h1&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第69次课程","slug":"技术向/Java/源辰课程记录/第69次课程","date":"2019-10-23T16:00:00.000Z","updated":"2022-05-11T06:37:36.328Z","comments":true,"path":"技术向/Java/源辰课程记录/第69次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC69%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰76班 第69次课程 2019.10.24 内容 JSP项目案例[廖彦] 0.DBHelper文件 DBHpelper.java &lt;Damai-Hooy常规版&gt; 注：需要连接池的支持（第67次课程-连接池的创建与使用）。 %!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148package com.yc.damai.util;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.SQLException;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import javax.naming.Context;import javax.naming.InitialContext;import javax.sql.DataSource;public class DBHelper &#123; public static Connection getConnection() throws SQLException &#123; try &#123; //创建上下文对象 Context ctx = new InitialContext(); //引入服务规则：java:comp/env/ + 服务名称 DataSource ds = (DataSource) ctx.lookup(&quot;java:comp/env/mysql/damai&quot;); //从连接池中取出一个连接返回 return ds.getConnection(); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; //增删改 public static int update(String sql,Object...paramArray) &#123; Connection conn = null; try &#123; conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql); for(int i=0;i&lt;paramArray.length;i++) &#123; ps.setObject(i+1, paramArray[i]); &#125; return ps.executeUpdate(); &#125; catch(Exception e)&#123; throw new RuntimeException(e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; //查 public static List&lt;Map&lt;String,Object&gt;&gt; selectList(String sql,Object...paramArray) &#123; Connection conn = null; try &#123; conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql); for(int i=0;i&lt;paramArray.length;i++) &#123; ps.setObject(i+1, paramArray[i]); &#125; ResultSet rs = ps.executeQuery(); ResultSetMetaData rsmd = rs.getMetaData(); List&lt;Map&lt;String,Object&gt;&gt; ret = new ArrayList&lt;&gt;(); while(rs.next()) &#123; Map&lt;String,Object&gt; row = new LinkedHashMap&lt;&gt;(); for(int i=1;i&lt;=rsmd.getColumnCount();i++) &#123; String columnName = rsmd.getColumnName(i); Object columnValue = rs.getObject(i); row.put(columnName, columnValue); &#125; ret.add(row); &#125; return ret; &#125; catch(Exception e)&#123; throw new RuntimeException(e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; //查询一条记录 public static Map&lt;String,Object&gt; queryOne (String sql,Object...paramArray)&#123; Connection conn = null; try &#123; conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql); for(int i=0;i&lt;paramArray.length;i++) &#123; ps.setObject(i+1, paramArray[i]); &#125; ResultSet rs = ps.executeQuery(); ResultSetMetaData rsmd = rs.getMetaData(); if(rs.next()) &#123; Map&lt;String,Object&gt; row = new LinkedHashMap&lt;&gt;(); for(int i=1;i&lt;=rsmd.getColumnCount();i++) &#123; String columnName = rsmd.getColumnName(i); Object columnValue = rs.getObject(i); row.put(columnName, columnValue); &#125; return row; &#125; return null; &#125; catch(Exception e)&#123; throw new RuntimeException(e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; //分页 public static List&lt;Map&lt;String,Object&gt;&gt; queryPage ( String sql,int page,int rows,Object...paramArray)&#123; int startrow = (page - 1) * rows; int endrow = page * rows; sql = &quot;select t.*\\n&quot; + &quot; from ( select t.*,rownum rn from ( &quot;+sql+&quot;) t where rownum &lt;= ?) t\\n&quot; + &quot; where t.rn &gt; ?&quot;; Object[] newParamArray = new Object[paramArray.length + 2]; System.arraycopy(paramArray, 0, newParamArray, 0, paramArray.length); newParamArray[newParamArray.length - 2] = endrow; newParamArray[newParamArray.length - 1] = startrow; return selectList(sql,newParamArray); &#125; //使用聚合函数查询 public static Object selectValue(String sql,Object...paramArray) &#123; Map&lt;String,Object&gt; row = queryOne(sql,paramArray); if(row==null) &#123; return null; &#125;else &#123; for(Map.Entry&lt;String, Object&gt; e:row.entrySet()) &#123; return e.getValue(); &#125; &#125; return null; &#125;&#125; DBHelper.java &lt;Damai-廖老师版&gt; &lt;Damai项目标准版&gt; 相较于Hooy版本加入了Oracle和MySQL数据库分页查询 DBHelper.javapackage com.yc.damai.util;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.Reader;import java.io.StringReader;import java.io.UnsupportedEncodingException;import java.net.URLDecoder;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.SQLException;import java.sql.Statement;import java.util.ArrayList;import java.util.Arrays;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.Properties;import javax.naming.Context;import javax.naming.InitialContext;import javax.naming.NamingException;import javax.sql.DataSource;public class DBHelper &#123;private static String url;private static String user;private static String[] password;/*static &#123;InputStream in = DBHelper.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;);try &#123;*//*** 璇诲彇閰嶇疆鏂囦欢* Properties key : value*//*Properties p = new Properties();p.load(in);init( p.getProperty(&quot;driver&quot;),p.getProperty(&quot;url&quot;),p.getProperty(&quot;user&quot;),p.getProperty(&quot;password&quot;));&#125; catch (Exception e) &#123;throw new RuntimeException(&quot;鏁版嵁搴撻┍鍔ㄥ姞杞藉け璐ワ紒&quot;, e);&#125; finally &#123;try &#123;in.close();&#125; catch (IOException e) &#123;e.printStackTrace();&#125;&#125;&#125;*//*** 鍒涘缓杩炴帴** @return* @throws NamingException* @throws SQLException*/public static Connection getConnection() &#123;// 创建JNDI 上下文对象try&#123;Context ctx = new InitialContext();DataSource ds = (DataSource) ctx.lookup(&quot;java:comp/env/mysql/damai&quot;);return ds.getConnection();&#125; catch (Exception e )&#123;throw new RuntimeException(e);&#125;/*for (int i = 0; i &lt; password.length; i++) &#123;String p = password[i];try &#123;Connection conn = DriverManager.getConnection(url, user, p);if(i&gt;0) &#123;String tmp = password[i];password[i] = password[0];password[0] = tmp;&#125;return conn;&#125; catch (SQLException e) &#123;continue;&#125;&#125;throw new RuntimeException(String.format(&quot;鑾峰彇鏁版嵁搴撹繛鎺ュけ璐ワ紒杩炴帴URL锛�%s\\t鐢ㄦ埛鍚嶏細%s\\t瀵嗙爜锛�%s&quot;,DBHelper.url, DBHelper.user, Arrays.toString(DBHelper.password)));*/&#125;public static void init(String url) &#123;init(null, url, null, null);&#125;public static void init(String url, String user, String password) &#123;init(null, url, user, password);&#125;public static void init(String driver, String url, String user, String password) &#123;if( driver != null ) &#123;try &#123;Class.forName(driver);&#125; catch (ClassNotFoundException e) &#123;throw new RuntimeException(&quot;鏁版嵁搴撻┍鍔ㄥ姞杞藉け璐ワ紒&quot;, e);&#125;&#125;DBHelper.url = url == null ? DBHelper.url : url;DBHelper.user = user == null ? DBHelper.user : user;DBHelper.password = password == null ? DBHelper.password : password.split(&quot;;&quot;);&#125;public static void executeByReader(Reader reader) &#123;String endl = System.getProperty(&quot;line.separator&quot;);Connection conn = null;BufferedReader br = null;StringBuilder sql = new StringBuilder();try &#123;br = new BufferedReader(reader);String line;conn = getConnection();Statement stat = conn.createStatement();while ((line = br.readLine())!=null) &#123;//line = new String(line.getBytes(&quot;gbk&quot;), &quot;utf-8&quot;);sql.append(line).append(endl);if(line.endsWith(&quot;;&quot;)) &#123;System.out.println(&quot;SQL:&quot; + sql);stat.execute(sql.toString());sql.delete(0, sql.length());&#125;&#125;&#125; catch (IOException e) &#123;throw new RuntimeException(&quot;鏁版嵁搴撹鍙ヨ鍙栧け璐�!&quot;, e);&#125; catch (SQLException e) &#123;throw new RuntimeException(&quot;鏁版嵁搴撴搷浣滃け璐�!&quot;, e);&#125; finally &#123;//Utils.close(reader, br, conn);&#125;&#125;public static void executeByText(String sqltext) &#123;executeByReader(new StringReader(sqltext));&#125;public static void executeByFile(String sqlfile) &#123;executeByFile(new File(sqlfile));&#125;public static void executeByFile(File sqlfile) &#123;try &#123;FileInputStream fis = new FileInputStream(sqlfile);InputStreamReader isr = new InputStreamReader(fis, &quot;utf-8&quot;);executeByReader(isr);&#125; catch (FileNotFoundException e) &#123;throw new RuntimeException(&quot;鏁版嵁搴撹剼鏈枃浠朵笉瀛樺湪!&quot;, e);&#125; catch (UnsupportedEncodingException e) &#123;throw new RuntimeException(&quot;鏁版嵁搴撹剼鏈枃浠剁紪鐮佹牸寮忛敊璇�!&quot;, e);&#125;&#125;/*** 鎵ц澧炲垹鏀筍QL** @param sql* @param param* @return*/public static int update(String sql, Object... param) &#123;Connection conn = null;try &#123;// 鑾峰彇杩炴帴conn = getConnection();PreparedStatement ps = conn.prepareStatement(sql);System.out.println(sql);for (int i = 1; i &lt;= param.length; i++) &#123;System.out.println(&quot;鍙傛暟&quot;+i+&quot; : &quot; + param[i-1]);ps.setObject(i, param[i - 1]);&#125;return ps.executeUpdate();&#125; catch (SQLException e) &#123;// 寮傚父杞瀷throw new RuntimeException(&quot;SQL鎵ц閿欒锟�?&quot;, e);&#125; finally &#123;// 鎵撳嵃鍏抽棴寮傚父try &#123;conn.close();&#125; catch (SQLException e) &#123;e.printStackTrace();&#125;&#125;&#125;/*** 鍙煡璇竴鏉¤褰曠殑鏌ヨ 0~1 琛岋紝 濡傛灉鏌ュ嚭澶氭潯璁板綍锛屽垯鎶涘嚭杩愯鏈熷紓甯革紝鎻愮ず鐢ㄦ埛缁撴灉鏁板ぇ锟�?1** @param sql* @param param* @return*/public static Map&lt;String, Object&gt; selectOne(String sql, Object... param) &#123;Connection conn = null;try &#123;// 鑾峰彇杩炴帴conn = getConnection();PreparedStatement ps = conn.prepareStatement(sql);System.out.println(sql);for (int i = 1; i &lt;= param.length; i++) &#123;System.out.println(&quot;鍙傛暟&quot;+i+&quot; : &quot; + param[i-1]);ps.setObject(i, param[i - 1]);&#125;ResultSet rs = ps.executeQuery();/*** 鑾峰彇缁撴灉闆嗗厓鏁版嵁瀵硅薄 meta*/ResultSetMetaData rsmd = rs.getMetaData();if (rs.next()) &#123;Map&lt;String, Object&gt; row = new LinkedHashMap&lt;String, Object&gt;();for (int i = 1; i &lt; rsmd.getColumnCount() + 1; i++) &#123;// 鑾峰彇鍒楀悕String ColumnName = rsmd.getColumnName(i);// 鑾峰彇鍒楀悕row.put(ColumnName, rs.getObject(ColumnName));&#125;if(rs.next())&#123;throw new RuntimeException(&quot;缁撴灉鏁板ぇ锟�?1!&quot;);&#125; else &#123;return row;&#125;&#125; else &#123;return null;&#125;&#125; catch (SQLException e) &#123;// 寮傚父杞瀷throw new RuntimeException(&quot;SQL鎵ц閿欒锟�?&quot;, e);&#125; finally &#123;// 鎵撳嵃鍏抽棴寮傚父try &#123;conn.close();&#125; catch (SQLException e) &#123;e.printStackTrace();&#125;&#125;&#125;/*** 鏌ヨ澶氭潯璁板綍 0~N 锟�?** @param sql* @param param* @return*/public static List&lt;Map&lt;String, Object&gt;&gt; selectList(String sql, Object... param) &#123;Connection conn = null;try &#123;// 鑾峰彇杩炴帴conn = getConnection();PreparedStatement ps = conn.prepareStatement(sql);System.out.println(sql);for (int i = 1; i &lt;= param.length; i++) &#123;System.out.println(&quot;鍙傛暟&quot;+i+&quot; : &quot; + param[i-1]);ps.setObject(i, param[i - 1]);&#125;ResultSet rs = ps.executeQuery();List&lt;Map&lt;String, Object&gt;&gt; ret = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();/*** 鑾峰彇缁撴灉闆嗗厓鏁版嵁瀵硅薄 meta*/ResultSetMetaData rsmd = rs.getMetaData();while (rs.next()) &#123;Map&lt;String, Object&gt; row = new LinkedHashMap&lt;String, Object&gt;();for (int i = 1; i &lt; rsmd.getColumnCount() + 1; i++) &#123;// 鑾峰彇鍒楀悕String ColumnName = rsmd.getColumnName(i);// 鑾峰彇鍒楀悕row.put(ColumnName, rs.getObject(ColumnName));&#125;ret.add(row);&#125;return ret;&#125; catch (SQLException e) &#123;// 寮傚父杞瀷throw new RuntimeException(&quot;SQL鎵ц閿欒锟�?&quot;, e);&#125; finally &#123;// 鎵撳嵃鍏抽棴寮傚父try &#123;conn.close();&#125; catch (SQLException e) &#123;e.printStackTrace();&#125;&#125;&#125;/*** 鏌ヨ鎸囧畾sql璇彞 , 杩斿洖鍗曚釜锟�?, 榛樿杩斿洖绗竴琛岃褰曠殑绗竴涓瓧娈碉拷??* 濡傛灉鏈煡璇㈠埌缁撴灉杩斿洖null* 搴旂敤鍦烘櫙: select count(*) from * emp;** @param sql* @param params 鍙傛暟鍒楄〃* @return*/public static Object selectValue(String sql, Object... param) &#123;Connection conn = null;try &#123;// 鑾峰彇杩炴帴conn = getConnection();PreparedStatement ps = conn.prepareStatement(sql);System.out.println(sql);for (int i = 1; i &lt;= param.length; i++) &#123;System.out.println(&quot;鍙傛暟&quot;+i+&quot; : &quot; + param[i-1]);ps.setObject(i, param[i - 1]);&#125;ResultSet rs = ps.executeQuery();if (rs.next()) &#123;//杩斿洖绗竴琛岃褰曠殑绗竴涓瓧娈碉拷??, OK 浜嗗氨杩欎箞锟�?鍗曠矖鏆达紒锛侊紒return rs.getObject(1);&#125; else &#123;return null;&#125;&#125; catch (SQLException e) &#123;// 寮傚父杞瀷throw new RuntimeException(&quot;SQL鎵ц閿欒锟�?&quot;, e);&#125; finally &#123;// 鎵撳嵃鍏抽棴寮傚父try &#123;conn.close();&#125; catch (SQLException e) &#123;e.printStackTrace();&#125;&#125;&#125;/*** ============浠ヤ笅鏄珮绾ч儴锟�? ( 閫夊仛 ) ============* 鍒嗛〉鏌ヨ鎸囧畾sql璇彞, 杩斿洖鐨勬暟鎹皝瑁呭湪Page瀵硅薄锟�?* 鏂规硶璋冪敤绀轰緥 :* selectPage(&quot;select * from emp where empno &gt; ?&quot; , 2 , 5, 1000)* @param sql* @param page 鏌ヨ鐨勯〉锟�?* @param rows 姣忛〉鐨勮锟�?* @param params 鍙傛暟鍒楄〃* @return*/public static Page selectPageForOracle(String sql, int page, int rows, Object... params) &#123;String totalSql = &quot;select count(*) from (&quot;+sql+&quot;)&quot;;Object totalObj = selectValue(totalSql, params);long total = Long.parseLong(totalObj.toString());int startRow = (page - 1 ) * rows;int endRow= page * rows + 1;String pageSql = &quot; select * from &quot;+ &quot;(select a.*,rownum rn from (&quot;+sql+&quot;) a where rownum &lt; &quot;+endRow+&quot;) a&quot;+ &quot; where a.rn &gt; &quot; + startRow;List&lt;Map&lt;String,Object&gt;&gt; data = selectList(pageSql,params);return new Page(total, page, rows, data);&#125;public static Page selectPageForMysql(String sql, int page, int rows, Object... params) &#123;String totalSql = &quot;select count(*) from (&quot;+sql+&quot;) a&quot;;Object totalObj = selectValue(totalSql, params);long total = Long.parseLong(totalObj.toString());int startRow = (page - 1 ) * rows;String pageSql = &quot;select * from (&quot;+sql+&quot;) a limit &quot; + startRow + &quot;, &quot; + rows;List&lt;Map&lt;String,Object&gt;&gt; data = selectList(pageSql,params);return new Page(total, page, rows, data);&#125;/*** 鍒嗛〉鏌ヨ缁撴灉灏佽绫伙紙鍏辨湁鐨勯潤鎬佺殑鍐呴儴绫伙級*/public static class Page &#123;// 褰撳墠椤垫暟锟�?private List&lt;Map&lt;String,Object&gt;&gt; data;// 鎬昏锟�?private long total;private int page;private int rows;public Page(long total, int page, int rows, List&lt;Map&lt;String,Object&gt;&gt; data) &#123;this.data = data;this.page = page;this.rows = rows;this.total = total;&#125;public List&lt;Map&lt;String,Object&gt;&gt; getData() &#123;return data;&#125;public long getTotal() &#123;return total;&#125;public int getPage()&#123;return page;&#125;public int getFirstPage()&#123;return 1;&#125;public int getPreviousPage()&#123;return page &gt; 1 ? page - 1 : 1;&#125;public int getNextPage()&#123;int lastpage = getLastPage();return page &lt; lastpage ? page + 1 : lastpage;&#125;public int getLastPage()&#123;long lastPage = total / rows;return (int) (total % rows == 0 ? lastPage : (lastPage + 1));&#125;&#125;/*** 鍒ゆ柇鍙傛暟 param 鏄惁涓虹┖ , 涓嶄负绌哄垯杩斿洖鏉′欢 condition, 骞朵笖锟�? param 鍔犲埌 params 锟�?* 濡傛灉涓虹┖, 鍒欐斁鍥炵┖瀛楃锟�? ( &quot;&quot; ), 鐢ㄤ簬鎷兼帴sql* 璇ユ柟娉曞彲鑳戒細琚锟�? dao 绫讳腑浣跨敤 , 鍥犳锟�?鍚庤鏀惧埌 DBHelper 涓幓,鎴愪负锟�?涓伐鍏锋柟锟�?* @param param 鍙傛暟锟�?* @param params 鍙傛暟闆嗗悎* @param condition 鏉′欢sql* @return*/public static String buildCondition(Object param, ArrayList&lt;Object&gt; params, String condition) &#123;if(param!=null) &#123;if(param instanceof String) &#123;String sparam = (String) param;sparam = sparam.trim();if(sparam.isEmpty()) &#123;return &quot;&quot;;&#125; else &#123;param = sparam;&#125;&#125;params.add(param);return condition;&#125; else &#123;return &quot;&quot;;&#125;&#125;public static void main(String[] args) throws UnsupportedEncodingException &#123;String sqlfile = DBHelper.class.getResource(&quot;鏁版嵁搴撹剼鏈�.sql&quot;).getPath();sqlfile = URLDecoder.decode(sqlfile, System.getProperty(&quot;file.encoding&quot;));DBHelper.init(&quot;jdbc:mysql://127.0.0.1/test&quot;);DBHelper.executeByFile(sqlfile);&#125;&#125; 1.”include”JSP命令和”include”JSP动作标签 ** ** Header.jsp 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;%@page import=&quot;java.util.*&quot;%&gt;&lt;%@page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;div class=&quot;container header&quot;&gt; &lt;div class=&quot;span5&quot;&gt; &lt;div class=&quot;logo&quot;&gt; &lt;a href=&quot;index.jsp&quot;&gt; &lt;img src=&quot;image/r___________renleipic_01/logo.png&quot; alt=&quot;依依不舍&quot;/&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span9&quot;&gt;&lt;div class=&quot;headerAd&quot;&gt; &lt;img src=&quot;image/header.jpg&quot; width=&quot;320&quot; height=&quot;50&quot; alt=&quot;正品保障&quot; title=&quot;正品保障&quot;/&gt;&lt;/div&gt; &lt;/div&gt;&lt;div class=&quot;span10 last&quot;&gt; &lt;div class=&quot;topNav clearfix&quot;&gt; &lt;ul&gt; &lt;li id=&quot;headerLogin&quot; class=&quot;headerLogin&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;login.jsp&quot;&gt;登录&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerRegister&quot; class=&quot;headerRegister&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;reg.jsp&quot;&gt;注册&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerUsername&quot; class=&quot;headerUsername&quot;&gt;&lt;/li&gt; &lt;li id=&quot;headerLogout&quot; class=&quot;headerLogout&quot;&gt; &lt;a&gt;[退出]&lt;/a&gt;| &lt;/li&gt; &lt;li&gt; &lt;a&gt;会员中心&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;购物指南&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;关于我们&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;cart&quot;&gt; &lt;a href=&quot;cart.jsp&quot;&gt;购物车&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;phone&quot;&gt; 客服热线: &lt;strong&gt;96008/53277764&lt;/strong&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;mainNav&quot;&gt; &lt;li&gt; &lt;a href=&quot;index.jsp&quot;&gt;首页&lt;/a&gt; | &lt;/li&gt; &lt;% String cSql = &quot;select * from category&quot;; List&lt;Map&lt;String,Object&gt;&gt; clist = DBHelper.selectList(cSql); for(Map&lt;String,Object&gt; row : clist) &#123; %&gt; &lt;li&gt;&lt;a href=&quot;clist.jsp?cid=&lt;%=row.get(&quot;cid&quot;)%&gt;&quot;&gt;&lt;%=row.get(&quot;cname&quot;)%&gt;&lt;/a&gt;|&lt;/li&gt; &lt;%&#125;%&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt; Footer.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;div class=&quot;container footer&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;footerAd&quot;&gt; &lt;img src=&quot;image/footer.jpg&quot; width=&quot;950&quot; height=&quot;52&quot; alt=&quot;我们的优势&quot; title=&quot;我们的优势&quot;/&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;bottomNav&quot;&gt; &lt;li&gt; &lt;a &gt;关于我们&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;联系我们&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a &gt;诚聘英才&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a &gt;法律声明&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;友情链接&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;支付方式&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;配送方式&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a &gt;SHOP++官网&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a &gt;SHOP++论坛&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;copyright&quot;&gt;Copyright © 2005-2013 Mango商城 版权所有&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 2.分类查询 clist.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131&lt;%@page import=&quot;java.util.*&quot;%&gt;&lt;%@page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;&lt;title&gt;大麦商城&lt;/title&gt;&lt;link href=&quot;css/common.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link href=&quot;css/product.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 引入子页面 include 命令 --&gt;&lt;%@include file=&quot;/common/Header.jsp&quot; %&gt;&lt;div class=&quot;container productList&quot;&gt; &lt;div class=&quot;span6&quot;&gt; &lt;div class=&quot;hotProductCategory&quot;&gt; &lt;% String csSql = &quot;select * from categorysecond&quot;; List&lt;Map&lt;String,Object&gt;&gt; cslist = DBHelper.selectList(csSql); // clist 在上面查询过了 for(Map&lt;String,Object&gt; c : clist) &#123; %&gt; &lt;dl&gt; &lt;dt&gt; &lt;a href=&quot;clist.jsp?cid=&lt;%=c.get(&quot;cid&quot;) %&gt;&quot;&gt;&lt;%=c.get(&quot;cname&quot;) %&gt;&lt;/a&gt; &lt;/dt&gt; &lt;%for(Map&lt;String,Object&gt; cs : cslist)&#123;%&gt; &lt;%if(cs.get(&quot;cid&quot;).equals(c.get(&quot;cid&quot;)))&#123;%&gt; &lt;dd&gt; &lt;a href=&quot;clist.jsp?csid=&lt;%=cs.get(&quot;csid&quot;) %&gt;&quot;&gt;&lt;%=cs.get(&quot;csname&quot;) %&gt;&lt;/a&gt; &lt;/dd&gt; &lt;%&#125; %&gt; &lt;%&#125; %&gt; &lt;/dl&gt; &lt;%&#125; %&gt; &lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;span18 last&quot;&gt; &lt;form id=&quot;productForm&quot; action=&quot;image/蔬菜 - Powered By Mango Team.htm&quot; method=&quot;get&quot;&gt; &lt;input type=&quot;hidden&quot; id=&quot;brandId&quot; name=&quot;brandId&quot; value=&quot;&quot;/&gt; &lt;input type=&quot;hidden&quot; id=&quot;promotionId&quot; name=&quot;promotionId&quot; value=&quot;&quot;/&gt; &lt;input type=&quot;hidden&quot; id=&quot;orderType&quot; name=&quot;orderType&quot; value=&quot;&quot;/&gt; &lt;input type=&quot;hidden&quot; id=&quot;pageNumber&quot; name=&quot;pageNumber&quot; value=&quot;1&quot;/&gt; &lt;input type=&quot;hidden&quot; id=&quot;pageSize&quot; name=&quot;pageSize&quot; value=&quot;20&quot;/&gt; &lt;div id=&quot;result&quot; class=&quot;result table clearfix&quot;&gt; &lt;ul&gt; &lt;% String sql = &quot;select * from product a join categorysecond b&quot; + &quot; on a.csid = b.csid&quot; + &quot; where 1=1&quot;; String cid = request.getParameter(&quot;cid&quot;); String csid = request.getParameter(&quot;csid&quot;); String queryId; if(csid!=null)&#123; sql += &quot; and b.csid = ?&quot;; queryId = csid; &#125; else &#123; sql += &quot; and b.cid = ?&quot;; queryId = cid; &#125; List&lt;Map&lt;String,Object&gt;&gt; plist = DBHelper.selectList(sql,queryId); for(Map&lt;String,Object&gt; p : plist)&#123; %&gt; &lt;li&gt; &lt;a href=&quot;detail.jsp?1&quot;&gt; &lt;img src=&quot;&lt;%=p.get(&quot;image&quot;) %&gt;&quot; width=&quot;170&quot; height=&quot;170&quot; style=&quot;display: inline-block;&quot;/&gt; &lt;span style=&#x27;color:green&#x27;&gt; &lt;%=p.get(&quot;pname&quot;) %&gt; &lt;/span&gt; &lt;span class=&quot;price&quot;&gt; 商城价： ￥&lt;%=p.get(&quot;shop_price&quot;) %&gt;/份 &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;%&#125; %&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;pagination&quot;&gt; 第1/6 &lt;span class=&quot;currentPage&quot;&gt;1&lt;/span&gt; &lt;a href=&quot;clist.jsp?1&amp;pageIndex=2&quot;&gt;2&lt;/a&gt; &lt;a href=&quot;clist.jsp?1&amp;pageIndex=3&quot;&gt;3&lt;/a&gt; &lt;a href=&quot;clist.jsp?1&amp;pageIndex=4&quot;&gt;4&lt;/a&gt; &lt;a href=&quot;clist.jsp?1&amp;pageIndex=5&quot;&gt;5&lt;/a&gt; &lt;a href=&quot;clist.jsp?1&amp;pageIndex=6&quot;&gt;6&lt;/a&gt; &lt;a class=&quot;nextPage&quot; href=&quot;clist.jsp?1&amp;pageIndex=2&quot;&gt;&amp;nbsp;&lt;/a&gt; &lt;a class=&quot;lastPage&quot; href=&quot;clist.jsp?1&amp;pageIndex=6&quot;&gt;&amp;nbsp;&lt;/a&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt;&lt;!-- 引入子页面 include JSP动作标签 --&gt;&lt;jsp:include page=&quot;/common/Footer.jsp&quot;/&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第68次课程_Ajax","slug":"技术向/Java/源辰课程记录/第68次课程_Ajax","date":"2019-10-21T16:00:00.000Z","updated":"2022-05-11T01:23:01.992Z","comments":true,"path":"技术向/Java/源辰课程记录/第68次课程_Ajax/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC68%E6%AC%A1%E8%AF%BE%E7%A8%8B_Ajax/","excerpt":"","text":"源辰76班 第68次课程 2019.10.22 内容 Ajax[廖彦] reg.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;大麦商城&lt;/title&gt;&lt;link href=&quot;css/common.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;&lt;link href=&quot;css/register.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.8.3.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; function checkForm()&#123; // 校验用户名: // 校验密码: // 校验确认密码 //校验邮箱 return false; &#125; var xmlhttp; // ajax 验证用户名是否存在 try &#123; xmlhttp = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;); &#125; catch (e) &#123; try &#123; xmlhttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); &#125; catch (e) &#123; try &#123; xmlhttp = new XMLHttpRequest(); &#125; catch (e) &#123; &#125; &#125; &#125; //校验用户名是否存在 function checkUserName()&#123; // 获取用户填写的用户名 var name = document.getElementById(&quot;username&quot;).value; name = name.replace(/\\s/gi,&quot;&quot;); if(name == &#x27;&#x27;)&#123; alert(&quot;请填写用户名！&quot;); return; &#125; if(xmlhttp!=null)&#123; // 定义请求地址 var url =&quot;doCheckUsername.jsp?username=&quot;+name; // 以 POST 方式 开启连接 // POST 请求 更安全（编码） 提交的数据大小没有限制 xmlhttp.open(&quot;POST&quot;,url,true); // 设置回调函数 // 当收到服务器的响应时，会触发该函数（回调函数） // 每次的状态改变都会调用该方法 xmlhttp.onreadystatechange=function()&#123; if(xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200)&#123; // 替换空格 var msg = xmlhttp.responseText.replace(/\\s/gi,&quot;&quot;); // 使用 span 展示错误信息， 替代 alert(msg); 提升用户体验 // 允许注册使用绿色字体， 否则红色字体 var color = msg == &#x27;该用户名可以注册！&#x27; ? &#x27;green&#x27; : &#x27;red&#x27;; // 输入框的后面一个元素是用于展示信息的 span 元素 $(&quot;#username&quot;).next().text(msg).css(&quot;color&quot;, color); &#125; &#125;; // 发送请求 xmlhttp.send(null); &#125;else&#123; alert(&quot;不能创建XMLHttpRequest对象实例&quot;) &#125; &#125; function changeImg()&#123; // 更新验证码 &#125; function reg()&#123; var username = document.getElementById(&quot;username&quot;).value; var password = document.getElementById(&quot;password&quot;).value; var repassword = document.getElementById(&quot;repassword&quot;).value; var email = document.getElementById(&quot;email&quot;).value; var phone = document.getElementById(&quot;phone&quot;).value; var name = $(&quot;#name&quot;).val(); // 使用 jquery 选择器搞定！！！ var sex = $(&quot;input[name=&#x27;sex&#x27;]:checked&quot;).val(); // checked选择器写法记错了，已修改 if(xmlhttp!=null)&#123; // 定义请求地址 var url =&quot;doReg.jsp?username=&quot;+username + &quot;&amp;password=&quot; + password + &quot;&amp;repassword=&quot; + repassword + &quot;&amp;email=&quot; + email + &quot;&amp;phone=&quot; + phone + &quot;&amp;sex=&quot; + sex; // 以 POST 方式 开启连接 // POST 请求 更安全（编码） 提交的数据大小没有限制 xmlhttp.open(&quot;POST&quot;,url,true); // 设置回调函数 // 当收到服务器的响应时，会触发该函数（回调函数） // 每次的状态改变都会调用该方法 xmlhttp.onreadystatechange=function()&#123; if(xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200)&#123; var json = xmlhttp.responseText.replace(/\\s/gi,&quot;&quot;); eval(&quot;var user = &quot; + json); console.info(user); alert(user.msg); // msg 时扩展的 属性 &#125; &#125;; // 发送请求 xmlhttp.send(null); &#125;else&#123; alert(&quot;不能创建XMLHttpRequest对象实例&quot;) &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container header&quot;&gt; &lt;div class=&quot;span5&quot;&gt; &lt;div class=&quot;logo&quot;&gt; &lt;a href=&quot;index.html&quot;&gt; &lt;img src=&quot;image/r___________renleipic_01/logo.png&quot; alt=&quot;依依不舍&quot;/&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span9&quot;&gt;&lt;div class=&quot;headerAd&quot;&gt; &lt;img src=&quot;image/header.jpg&quot; width=&quot;320&quot; height=&quot;50&quot; alt=&quot;正品保障&quot; title=&quot;正品保障&quot;/&gt;&lt;/div&gt; &lt;/div&gt;&lt;div class=&quot;span10 last&quot;&gt; &lt;div class=&quot;topNav clearfix&quot;&gt; &lt;ul&gt; &lt;li id=&quot;headerLogin&quot; class=&quot;headerLogin&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;login.html&quot;&gt;登录&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerRegister&quot; class=&quot;headerRegister&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;reg.html&quot;&gt;注册&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerUsername&quot; class=&quot;headerUsername&quot;&gt;&lt;/li&gt; &lt;li id=&quot;headerLogout&quot; class=&quot;headerLogout&quot;&gt; &lt;a&gt;[退出]&lt;/a&gt;| &lt;/li&gt; &lt;li&gt; &lt;a&gt;会员中心&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;购物指南&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;关于我们&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;cart&quot;&gt; &lt;a href=&quot;cart.html&quot;&gt;购物车&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;phone&quot;&gt; 客服热线: &lt;strong&gt;96008/53277764&lt;/strong&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;mainNav&quot;&gt; &lt;li&gt; &lt;a href=&quot;index.html&quot;&gt;首页&lt;/a&gt; | &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.html?1&amp;pageIndex=1&quot;&gt; 女装男装&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.html?2&amp;pageIndex=1&quot;&gt; 鞋靴箱包&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.html?3&amp;pageIndex=1&quot;&gt; 运动户外&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.html?4&amp;pageIndex=1&quot;&gt; 珠宝配饰&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.html?5&amp;pageIndex=1&quot;&gt; 手机数码&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.html?6&amp;pageIndex=1&quot;&gt; 家电办公&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.html?7&amp;pageIndex=1&quot;&gt; 护肤彩妆&lt;/a&gt; |&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;container register&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;wrap&quot;&gt; &lt;div class=&quot;main clearfix&quot;&gt; &lt;div class=&quot;title&quot;&gt; &lt;strong&gt;会员注册&lt;/strong&gt;USER REGISTER &lt;/div&gt; &lt;form id=&quot;registerForm&quot; action=&quot;reg.html&quot; method=&quot;post&quot; novalidate=&quot;novalidate&quot; onsubmit=&quot;reg(); return false;&quot;&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;用户名:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; class=&quot;text&quot; maxlength=&quot;20&quot; onblur=&quot;checkUserName()&quot; /&gt;&lt;span id=&quot;span1&quot;&gt; &lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;密&amp;nbsp;&amp;nbsp;码:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; class=&quot;text&quot; maxlength=&quot;20&quot; autocomplete=&quot;off&quot; /&gt;&lt;span&gt; &lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;确认密码:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;password&quot; id=&quot;repassword&quot; name=&quot;repassword&quot; class=&quot;text&quot; maxlength=&quot;20&quot; autocomplete=&quot;off&quot; /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;E-mail:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;email&quot; name=&quot;email&quot; class=&quot;text&quot; maxlength=&quot;200&quot; /&gt;&lt;span&gt; &lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;电话:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;phone&quot; name=&quot;phone&quot; class=&quot;text&quot; maxlength=&quot;200&quot; onkeyup=&quot;value=value.replace(/[^\\d]/g,&#x27;&#x27;)&quot; onafterpaste=&quot;value=value.replace(/\\D/g,&#x27;&#x27;)&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;姓名:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot; class=&quot;text&quot; maxlength=&quot;200&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;性别:&lt;/th&gt; &lt;td&gt;&lt;span class=&quot;fieldSet&quot;&gt; &lt;label&gt; &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot;&gt;男 &lt;/label&gt; &lt;label&gt; &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot;&gt;女 &lt;/label&gt; &lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;!-- &lt;tr&gt; &lt;th&gt;地址:&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;address&quot; class=&quot;text&quot; maxlength=&quot;200&quot;&gt; &lt;/td&gt; &lt;/tr&gt; --&gt; &lt;tr&gt; &lt;th&gt;&lt;span class=&quot;requiredField&quot;&gt;*&lt;/span&gt;验证码:&lt;/th&gt; &lt;td&gt;&lt;span class=&quot;fieldSet&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;captcha&quot; name=&quot;captcha&quot; class=&quot;text captcha&quot; maxlength=&quot;4&quot; autocomplete=&quot;off&quot;&gt;&lt;img id=&quot;captchaImage&quot; class=&quot;captchaImage&quot; src=&quot;images/vcode.jpg&quot; title=&quot;点击更换验证码&quot; onclick=&quot;changeImg()&quot;&gt; &lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&amp;nbsp;&lt;/th&gt; &lt;td&gt;&lt;input type=&quot;submit&quot; class=&quot;submit&quot; value=&quot;同意以下协议并注册&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&amp;nbsp;&lt;/th&gt; &lt;td&gt;注册协议&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&amp;nbsp;&lt;/th&gt; &lt;td&gt; &lt;div id=&quot;agreement&quot; class=&quot;agreement&quot; style=&quot;height: 200px;&quot;&gt; &lt;p&gt;尊敬的用户欢迎您注册成为本网站会员。请用户仔细阅读以下全部内容。如用户不同意本服务条款任意内容，请不要注册或使用本网站服务。如用户通过本网站注册程序，即表示用户与本网站已达成协议，自愿接受本服务条款的所有内容。此后，用户不得以未阅读本服务条款内容作任何形式的抗辩。&lt;/p&gt; &lt;p&gt; 一、本站服务条款的确认和接纳本网站涉及的各项服务的所有权和运作权归本网站所有。本网站所提供的服务必须按照其发布的服务条款和操作规则严格执行。本服务条款的效力范围及于本网站的一切产品和服务，用户在享受本网站的任何服务时，应当受本服务条款的约束。 &lt;/p&gt; &lt;p&gt; 二、服务简介本网站运用自己的操作系统通过国际互联网络为用户提供各项服务。用户必须: 1. 提供设备，如个人电脑、手机或其他上网设备。 2. 个人上网和支付与此服务有关的费用。 &lt;/p&gt; &lt;p&gt; 三、用户在不得在本网站上发布下列违法信息1. 反对宪法所确定的基本原则的； 2. 危害国家安全，泄露国家秘密，颠覆国家政权，破坏国家统一的； 3. 损害国家荣誉和利益的； 4. 煽动民族仇恨、民族歧视，破坏民族团结的； 5. 破坏国家宗教政策，宣扬邪教和封建迷信的； 6. 散布谣言，扰乱社会秩序，破坏社会稳定的； 7. 散布淫秽、色情、赌博、暴力、凶杀、恐怖或者教唆犯罪的； 8. 侮辱或者诽谤他人，侵害他人合法权益的； 9. 含有法律、行政法规禁止的其他内容的。 &lt;/p&gt; &lt;p&gt; 四、有关个人资料用户同意: 1. 提供及时、详尽及准确的个人资料。 2. 同意接收来自本网站的信息。 3. 不断更新注册资料，符合及时、详尽准确的要求。所有原始键入的资料将引用为注册资料。 4. 本网站不公开用户的姓名、地址、电子邮箱和笔名。除以下情况外: a) 用户授权本站透露这些信息。 b) 相应的法律及程序要求本站提供用户的个人资料。 &lt;/p&gt; &lt;p&gt; 五、服务条款的修改本网站有权在必要时修改服务条款，一旦条款及服务内容产生变动，本网站将会在重要页面上提示修改内容。如果不同意所改动的内容，用户可以主动取消获得的本网站信息服务。如果用户继续享用本网站信息服务，则视为接受服务条款的变动。 &lt;/p&gt; &lt;p&gt; 六、用户隐私制度尊重用户个人隐私是本网站的一项基本政策。所以，本网站一定不会在未经合法用户授权时公开、编辑或透露其注册资料及保存在本网站中的非公开内容，除非有法律许可要求或本网站在诚信的基础上认为透露这些信息在以下四种情况是必要的: 1. 遵守有关法律规定，遵从本网站合法服务程序。 2. 保持维护本网站的商标所有权。 3. 在紧急情况下竭力维护用户个人和社会大众的隐私安全。 4. 符合其他相关的要求。 &lt;/p&gt; &lt;p&gt; 七、用户的帐号、密码和安全性用户一旦注册成功，将获得一个密码和用户名。用户需谨慎合理的保存、使用用户名和密码。如果你不保管好自己的帐号和密码安全，将负全部责任。另外，每个用户都要对其帐户中的所有活动和事件负全责。你可随时根据指示改变你的密码。用户若发现任何非法使用用户帐号或存在安全漏洞的情况，请立即通告本网站。 八、 拒绝提供担保 用户明确同意信息服务的使用由用户个人承担风险。本网站不担保服务不会受中断，对服务的及时性，安全性，出错发生都不作担保，但会在能力范围内，避免出错。 &lt;/p&gt; &lt;p&gt; 九、有限责任如因不可抗力或其它本站无法控制的原因使本站销售系统崩溃或无法正常使用导致网上交易无法完成或丢失有关的信息、记录等本站会尽可能合理地协助处理善后事宜，并努力使客户免受经济损失，同时会尽量避免这种损害的发生。 &lt;/p&gt; &lt;p&gt; 十、用户信息的储存和限制本站有判定用户的行为是否符合国家法律法规规定及本站服务条款权利，如果用户违背本网站服务条款的规定，本网站有权中断对其提供服务的权利。 &lt;/p&gt; &lt;p&gt; 十一、用户管理用户单独承担发布内容的责任。用户对服务的使用是根据所有适用于本站的国家法律、地方法律和国际法律标准的。用户必须遵循: 1. 使用网络服务不作非法用途。 2. 不干扰或混乱网络服务。 3. 遵守所有使用网络服务的网络协议、规定、程序和惯例。 用户须承诺不传输任何非法的、骚扰性的、中伤他人的、辱骂性的、恐性的、伤害性的、庸俗的，淫秽等信息资料。另外，用户也不能传输何教唆他人构成犯罪行为的资料；不能传输助长国内不利条件和涉及国家安全的资料；不能传输任何不符合当地法规、国家法律和国际法律的资料。未经许可而非法进入其它电脑系统是禁止的。 若用户的行为不符合以上提到的服务条款，本站将作出独立判断立即取消用户服务帐号。用户需对自己在网上的行为承担法律责任。用户若在本站上散布和传播反动、色情或其它违反国家法律的信息，本站的系统记录有可能作为用户违反法律的证据。 &lt;/p&gt; &lt;p&gt; 十二、通告所有发给用户的通告都可通过重要页面的公告或电子邮件或常规的信件传送。服务条款的修改、服务变更、或其它重要事件的通告都会以此形式进行。 &lt;/p&gt; &lt;p&gt; 十三、信息内容的所有权本网站定义的信息内容包括: 文字、软件、声音、相片、录象、图表；在广告中全部内容；本网站为用户提供的其它信息。所有这些内容受版权、商标、标签和其它财产所有权法律的保护。所以，用户只能在本网站和广告商授权下才能使用这些内容，而不能擅自复制、再造这些内容、或创造与内容有关的派生产品。本站所有的文章版权归原文作者和本站共同所有，任何人需要转载本站的文章，必须征得原文作者或本站授权。 &lt;/p&gt; &lt;p&gt; 十四、法律本协议的订立、执行和解释及争议的解决均应适用中华人民共和国的法律。用户和本网站一致同意服从本网站所在地有管辖权的法院管辖。如发生本网站服务条款与中华人民共和国法律相抵触时，则这些条款将完全按法律规定重新解释，而其它条款则依旧保持对用户的约束力。 &lt;/p&gt; &lt;/div&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;div class=&quot;login&quot;&gt; &lt;div class=&quot;ad&quot;&gt; &lt;dl&gt; &lt;dt&gt;注册即享受&lt;/dt&gt; &lt;dd&gt;正品保障、正规发票&lt;/dd&gt; &lt;dd&gt;货到付款、会员服务&lt;/dd&gt; &lt;dd&gt;自由退换、售后上门&lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;dl&gt; &lt;dt&gt;已经拥有账号了？&lt;/dt&gt; &lt;dd&gt; 立即登录即可体验在线购物！ &lt;a href=&quot;login.html&quot;&gt;立即登录&lt;/a&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;container footer&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;footerAd&quot;&gt; &lt;img src=&quot;image/footer.jpg&quot; width=&quot;950&quot; height=&quot;52&quot; alt=&quot;我们的优势&quot; title=&quot;我们的优势&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;bottomNav&quot;&gt; &lt;li&gt;&lt;a&gt;关于我们&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;联系我们&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;招贤纳士&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;法律声明&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;友情链接&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a target=&quot;_blank&quot;&gt;支付方式&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a target=&quot;_blank&quot;&gt;配送方式&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;服务声明&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a&gt;广告声明&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;copyright&quot;&gt;Copyright © 2005-2013 Mango商城 版权所有&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;_my97DP&quot; style=&quot;position: absolute; top: -1970px; left: -1970px;&quot;&gt; &lt;iframe style=&quot;width: 190px; height: 191px;&quot; src=&quot;./会员注册 - Powered By Mango Team_files/My97DatePicker.htm&quot; frameborder=&quot;0&quot; border=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; doCheckUsername.jsp 1234567891011121314&lt;%@page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;% String username = request.getParameter(&quot;username&quot;); String sql = &quot;select count(*) from user where username = ?&quot;; Object value = DBHelper.selectValue(sql, username); int count = Integer.parseInt(&quot;&quot;+value); if(count&gt;0)&#123; out.print(&quot;该用户已经被注册&quot;); &#125;else&#123; out.print(&quot;该用户可以注册&quot;); &#125;%&gt; doReg.jsp 1234567891011121314151617181920212223242526272829303132&lt;%@page import=&quot;com.yc.damai.util.DBHelper&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;% String username = request.getParameter(&quot;username&quot;); String password = request.getParameter(&quot;password&quot;); String repassword = request.getParameter(&quot;repassword&quot;); String email = request.getParameter(&quot;email&quot;); String phone = request.getParameter(&quot;phone&quot;); String name = request.getParameter(&quot;name&quot;); String sex = request.getParameter(&quot;sex&quot;); String sql = &quot;insert into user &quot;+ &quot;values(null,?,?,?,?,?,?,null,null,null)&quot;; try&#123; DBHelper.update(sql,username,password,name,email,phone,sex); // json 格式字符串 // 定义json 返回字符串, 用于返回复杂的数据 String json = &quot;&#123;name:&#x27;&quot;+name +&quot;&#x27;, username:&#x27;&quot;+username +&quot;&#x27;, password:&#x27;&quot;+password +&quot;&#x27;, email:&#x27;&quot;+email +&quot;&#x27;, phone:&#x27;&quot;+phone +&quot;&#x27;, sex:&#x27;&quot;+sex +&quot;&#x27;, msg:&#x27;注册成功！&#x27;&#125;&quot;; // 扩张一个结果描述信息 out.print(json); &#125; catch (Exception e)&#123; String json = &quot;&#123;msg:&#x27;注册失败！&#x27;&#125;&quot;; // 扩张一个结果描述信息 out.print(json); &#125;%&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第67次课程_jndi_验证码_分页与文件上传等组件技术","slug":"技术向/Java/源辰课程记录/第67次课程_jndi_验证码_分页与文件上传等组件技术","date":"2019-10-19T16:00:00.000Z","updated":"2022-05-11T06:44:21.893Z","comments":true,"path":"技术向/Java/源辰课程记录/第67次课程_jndi_验证码_分页与文件上传等组件技术/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC67%E6%AC%A1%E8%AF%BE%E7%A8%8B_jndi_%E9%AA%8C%E8%AF%81%E7%A0%81_%E5%88%86%E9%A1%B5%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%AD%89%E7%BB%84%E4%BB%B6%E6%8A%80%E6%9C%AF/","excerpt":"","text":"源辰76班 第67次课程 2019.10.20 内容 jndi_验证码_分页与文件上传等组件技术[廖彦] 1.连接池的创建与使用 ** ** context.xml META-INF服务器配置目录 配置连接池参数 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;Context&gt;&lt;!-- *连接池 auth:容器 固定值 driverClassName:驱动地址 maxIdle:空闲连接 maxTotal:最多创建连接 maxWaitMillis:如果连接都被占用，等待时间。 &quot;-1&quot;:一直等待 单位毫秒 name:本服务名 后续需要此服务时 引用此名称A username:数据库用户名 password:数据库用户密码 url:数据库连接地址 --&gt; &lt;Resource auth=&quot;Container&quot; driverClassName=&quot;com.mysql.jdbc.Driver&quot; maxIdle=&quot;30&quot; maxTotal=&quot;50&quot; maxWaitMillis=&quot;-1&quot; name=&quot;mysql/damai&quot; username=&quot;root&quot; password=&quot;a&quot; type=&quot;javax.sql.DataSource&quot; url=&quot;jdbc:mysql://localhost:3306/demo-damai&quot; /&gt;&lt;/Context&gt; web.xml WEB-INF页面配置目录 页面配置文件 1&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;3.1&quot;&gt; &lt;display-name&gt;191016_demo-damai&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;!-- 引用JNDI服务 --&gt; &lt;resource-ref&gt; &lt;!-- 描述 --&gt; &lt;description&gt;大麦数据库连接&lt;/description&gt; &lt;!-- 引用的服务名 --&gt; &lt;res-ref-name&gt;mysql/damai&lt;/res-ref-name&gt; &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt; &lt;res-auth&gt;Container&lt;/res-auth&gt; &lt;/resource-ref&gt;&lt;/web-app&gt; DBHelper.java 工具类 根据连接池的特点已重构 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152package com.yc.damai.util;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.SQLException;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import javax.naming.Context;import javax.naming.InitialContext;import javax.sql.DataSource;public class DBhelper &#123; public static Connection getConnection() throws SQLException &#123; try &#123; //创建上下文对象 Context ctx = new InitialContext(); //引入服务规则：java:comp/env/ + 服务名称 DataSource ds = (DataSource) ctx.lookup(&quot;java:comp/env/mysql/damai&quot;); //从连接池中取出一个连接返回 return ds.getConnection(); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; //增删改 public static int update(String sql,Object...paramArray) &#123; Connection conn = null; try &#123; conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql); for(int i=0;i&lt;paramArray.length;i++) &#123; ps.setObject(i+1, paramArray[i]); &#125; return ps.executeUpdate(); &#125; catch(Exception e)&#123; throw new RuntimeException(e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; //查 public static List&lt;Map&lt;String,Object&gt;&gt; selectList(String sql,Object...paramArray) &#123; Connection conn = null; try &#123; conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql); for(int i=0;i&lt;paramArray.length;i++) &#123; ps.setObject(i+1, paramArray[i]); &#125; ResultSet rs = ps.executeQuery(); ResultSetMetaData rsmd = rs.getMetaData(); List&lt;Map&lt;String,Object&gt;&gt; ret = new ArrayList&lt;&gt;(); while(rs.next()) &#123; Map&lt;String,Object&gt; row = new LinkedHashMap&lt;&gt;(); for(int i=1;i&lt;rsmd.getColumnCount();i++) &#123; String columnName = rsmd.getColumnName(i); Object columnValue = rs.getObject(i); row.put(columnName, columnValue); &#125; ret.add(row); &#125; return ret; &#125; catch(Exception e)&#123; throw new RuntimeException(e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; //查询一条记录 public static Map&lt;String,Object&gt; queryOne (String sql,Object...paramArray)&#123; Connection conn = null; try &#123; conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql); for(int i=0;i&lt;paramArray.length;i++) &#123; ps.setObject(i+1, paramArray[i]); &#125; ResultSet rs = ps.executeQuery(); ResultSetMetaData rsmd = rs.getMetaData(); if(rs.next()) &#123; Map&lt;String,Object&gt; row = new LinkedHashMap&lt;&gt;(); for(int i=1;i&lt;=rsmd.getColumnCount();i++) &#123; String columnName = rsmd.getColumnName(i); Object columnValue = rs.getObject(i); row.put(columnName, columnValue); &#125; return row; &#125; return null; &#125; catch(Exception e)&#123; throw new RuntimeException(e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; //分页 MySQL中不适用 public static List&lt;Map&lt;String,Object&gt;&gt; queryPage ( String sql,int page,int rows,Object...paramArray)&#123; int startrow = (page - 1) * rows; int endrow = page * rows; sql = &quot;select t.*\\n&quot; + &quot; from ( select t.*,rownum rn from ( &quot;+sql+&quot;) t where rownum &lt;= ?) t\\n&quot; + &quot; where t.rn &gt; ?&quot;; Object[] newParamArray = new Object[paramArray.length + 2]; System.arraycopy(paramArray, 0, newParamArray, 0, paramArray.length); newParamArray[newParamArray.length - 2] = endrow; newParamArray[newParamArray.length - 1] = startrow; return selectList(sql,newParamArray); &#125; //使用聚合函数查询 public static Object selectValue(String sql,Object...paramArray) &#123; Map&lt;String,Object&gt; row = queryOne(sql,paramArray); if(row==null) &#123; return null; &#125;else &#123; for(Map.Entry&lt;String, Object&gt; e:row.entrySet()) &#123; return e.getValue(); &#125; &#125; return null; &#125;&#125; 2.MySQL分页 index.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336&lt;%@page import=&quot;java.util.*&quot;%&gt;&lt;%@page import=&quot;com.yc.damai.util.DBhelper&quot;%&gt;&lt;%@page import=&quot;com.sun.corba.se.spi.ior.iiop.RequestPartitioningComponent&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;&lt;title&gt;大麦商城&lt;/title&gt;&lt;link href=&quot;css/slider.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link href=&quot;css/common.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link href=&quot;css/index.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container header&quot;&gt; &lt;div class=&quot;span5&quot;&gt; &lt;div class=&quot;logo&quot;&gt; &lt;a href=&quot;index.html&quot;&gt; &lt;img src=&quot;image/r___________renleipic_01/logo.png&quot; alt=&quot;依依不舍&quot;/&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span9&quot;&gt;&lt;div class=&quot;headerAd&quot;&gt; &lt;img src=&quot;image/header.jpg&quot; width=&quot;320&quot; height=&quot;50&quot; alt=&quot;正品保障&quot; title=&quot;正品保障&quot;/&gt;&lt;/div&gt; &lt;/div&gt;&lt;div class=&quot;span10 last&quot;&gt; &lt;div class=&quot;topNav clearfix&quot;&gt; &lt;ul&gt; &lt;li id=&quot;headerLogin&quot; class=&quot;headerLogin&quot; style=&quot;display: list-item;&quot;&gt; Song| &lt;/li&gt; &lt;li id=&quot;headerLogin&quot; class=&quot;headerLogin&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;olist.html&quot;&gt;我的订单&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerRegister&quot; class=&quot;headerRegister&quot; style=&quot;display: list-item;&quot;&gt; &lt;a href=&quot;index.html&quot;&gt;退出&lt;/a&gt;| &lt;/li&gt; &lt;li id=&quot;headerUsername&quot; class=&quot;headerUsername&quot;&gt;&lt;/li&gt; &lt;li id=&quot;headerLogout&quot; class=&quot;headerLogout&quot;&gt; &lt;a&gt;[退出]&lt;/a&gt;| &lt;/li&gt; &lt;li&gt; &lt;a&gt;会员中心&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;购物指南&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;关于我们&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;cart&quot;&gt; &lt;a href=&quot;cart.html&quot;&gt;购物车&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;phone&quot;&gt; 客服热线: &lt;strong&gt;96008/53277764&lt;/strong&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;mainNav&quot;&gt; &lt;li&gt; &lt;a href=&quot;index.html&quot;&gt;首页&lt;/a&gt; | &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.html?1&amp;pageIndex=1&quot;&gt; 女装男装&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.html?2&amp;pageIndex=1&quot;&gt; 鞋靴箱包&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.html?3&amp;pageIndex=1&quot;&gt; 运动户外&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.html?4&amp;pageIndex=1&quot;&gt; 珠宝配饰&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.html?5&amp;pageIndex=1&quot;&gt; 手机数码&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.html?6&amp;pageIndex=1&quot;&gt; 家电办公&lt;/a&gt; |&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;clist.html?7&amp;pageIndex=1&quot;&gt; 护肤彩妆&lt;/a&gt; |&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;container index&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div id=&quot;hotProduct&quot; class=&quot;hotProduct clearfix&quot;&gt; &lt;div class=&quot;title&quot;&gt; &lt;strong&gt;热门商品&lt;/strong&gt; &lt;!-- &lt;a target=&quot;_blank&quot;&gt;&lt;/a&gt; --&gt; &lt;/div&gt; &lt;ul class=&quot;tab&quot;&gt; &lt;li class=&quot;current&quot;&gt; &lt;a href=&quot;./蔬菜分类.htm?tagIds=1&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;tabContent&quot; style=&quot;display: block;&quot;&gt; &lt;% String paramNumber = request.getParameter(&quot;pageNumber&quot;); String paramRows = request.getParameter(&quot;pageRows&quot;); //第几页 int pageNumber = paramNumber == null ? 1 : Integer.parseInt(paramNumber); //每页行数 int pageRows = paramRows == null ? 10 : Integer.parseInt(paramRows); //第几页开始查询 int beginRow = (pageNumber - 1) * 10; String sql = &quot;select count(*) from product where is_hot = 1&quot;; // Object value = DBhelper.selectValue(sql); int totalRows = Integer.parseInt(&quot;&quot;+value); int totalPage = totalRows / pageRows; totalPage += totalRows % pageRows == 0 ? 0 : 1; sql = &quot;select * from product where is_hot=1 limit ?,?&quot;; List&lt;Map&lt;String,Object&gt;&gt; list = DBhelper.selectList(sql, beginRow,pageRows); for(Map&lt;String,Object&gt; m : list)&#123; %&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot; href=&quot;detail.html?1&quot;&gt;&lt;img src=&quot;&lt;%=m.get(&quot;image&quot;) %&gt;&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;%&#125; %&gt; &lt;/ul&gt; &lt;a href=&quot;index.jsp?pageNumber=1&quot;&gt;首页&lt;/a&gt; &lt;a href=&quot;index.jsp?pageNumber=&lt;%=pageNumber&lt;=1 ? 1 : pageNumber-1 %&gt;&quot;&gt;上一页&lt;/a&gt; &lt;a href=&quot;index.jsp?pageNumber=&lt;%=pageNumber&gt;=totalPage ? totalPage : pageNumber+1 %&gt;&quot;&gt;下一页&lt;/a&gt; &lt;a href=&quot;index.jsp?pageNumber=&lt;%=totalPage%&gt;&quot;&gt;尾页&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div id=&quot;newProduct&quot; class=&quot;newProduct clearfix&quot;&gt; &lt;div class=&quot;title&quot;&gt; &lt;strong&gt;最新商品&lt;/strong&gt; &lt;a target=&quot;_blank&quot;&gt;&lt;/a&gt; &lt;/div&gt; &lt;ul class=&quot;tab&quot;&gt; &lt;li class=&quot;current&quot;&gt; &lt;a href=&quot;./蔬菜分类.htm?tagIds=2&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;tabContent&quot; style=&quot;display: block;&quot;&gt; &lt;li&gt; &lt;a href=&quot;detail.html?72&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs10011.jpg&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.html?57&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs60006.png&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.html?4&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs10004.jpg&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.html?45&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs50004.png&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.html?51&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs50010.png&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.html?68&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs70007.png&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.html?60&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs60009.png&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.html?30&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs30010.png&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.html?6&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs10006.jpg&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;detail.html?2&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;products/1/cs10002.jpg&quot; style=&quot;display: block;&quot;&gt;&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;friendLink&quot;&gt; &lt;dl&gt; &lt;dd&gt;新手指南&lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;支付方式&lt;/a&gt; | &lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;配送方式&lt;/a&gt; | &lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;售后服务&lt;/a&gt; | &lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;购物帮助&lt;/a&gt; | &lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;蔬菜卡&lt;/a&gt; | &lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;礼品卡&lt;/a&gt; | &lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;银联卡&lt;/a&gt; | &lt;/dd&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot;&gt;亿家卡&lt;/a&gt; | &lt;/dd&gt; &lt;dd class=&quot;more&quot;&gt; &lt;a &gt;更多&lt;/a&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class=&quot;container footer&quot;&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;footerAd&quot;&gt; &lt;img src=&quot;image/footer.jpg&quot; width=&quot;950&quot; height=&quot;52&quot; alt=&quot;我们的优势&quot; title=&quot;我们的优势&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;ul class=&quot;bottomNav&quot;&gt; &lt;li&gt; &lt;a&gt;关于我们&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;联系我们&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;招贤纳士&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;法律声明&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;友情链接&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;支付方式&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a target=&quot;_blank&quot;&gt;配送方式&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;服务声明&lt;/a&gt; | &lt;/li&gt; &lt;li&gt; &lt;a&gt;广告声明&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;span24&quot;&gt; &lt;div class=&quot;copyright&quot;&gt;Copyright © 2005-2013 大麦商城 版权所有&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 3.上传文件 提示：首先在”WebContent”目录下创建”upload”目录（文件夹）。 tmp_upload.jsp 上传文件页面 上传文件的表单（form），不是普通的文本表单 123456789101112131415161718&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;文件上传&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- method提交方式 enctype编码格式 --&gt;&lt;form action=&quot;tmp_doupload.jsp&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; multiple&gt; //multiple 可同时选中多个文件并上传 &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; tmp_doupload.jsp 上传文件后台 需要导入jsmartcom_zh_CN jar包 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;%@page import=&quot;java.util.ArrayList&quot;%&gt;&lt;%@page import=&quot;com.jspsmart.upload.Files&quot;%&gt;&lt;%@page import=&quot;com.jspsmart.upload.SmartUpload&quot;%&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;% //创建文件上传对象 SmartUpload su = new SmartUpload(); //初始化 传入页面上下文对象 su.initialize(pageContext); //设置上传的配置信息 //限定文件名后缀 su.setAllowedFilesList(&quot;jpg,png,gif,bmp&quot;); //限定大小 su.setMaxFileSize(1024 * 1024 * 10); //执行上传 su.upload(); Files files = su.getFiles(); ArrayList&lt;String&gt; fileList = new ArrayList&lt;String&gt;(); for(int i=0;i&lt;files.getCount();i++)&#123; String filename = files.getFile(i).getFileName(); System.out.println(filename); //使用application(应用上下文) web路径 转换成 磁盘路径 //例：/upload ==&gt; d:/dev/tomcat/webapps/damai/upload String diskPath = application.getRealPath(&quot;/upload&quot;); System.out.println(diskPath); files.getFile(i).saveAs(diskPath+&quot;/&quot;+filename); //将上传的文件的web路径添加到 fileList.add(&quot;upload/&quot; + filename); &#125;%&gt;文件上传成功&lt;%for(String filepath:fileList) &#123;%&gt; &lt;img alt=&quot;&quot; src=&quot;&lt;%=filepath %&gt;&quot; width=&quot;200px&quot;&gt;&lt;%&#125; %&gt;&lt;/body&gt;&lt;/html&gt; 工具jar包： %!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;)","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第66次课程_访问状态管理","slug":"技术向/Java/源辰课程记录/第66次课程_访问状态管理","date":"2019-10-17T16:00:00.000Z","updated":"2022-05-11T06:30:58.262Z","comments":true,"path":"技术向/Java/源辰课程记录/第66次课程_访问状态管理/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC66%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E8%AE%BF%E9%97%AE%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/","excerpt":"","text":"源辰76班 第66次课程 2019.10.18 内容 访问状态管理[廖彦] Cookie与Session的不同及使用方法 ||Cookie|Session| |数据存放位置|客户机|服务器| |存取方式 |Cookie中只能保管ASCII字符串，假如需求存取Unicode字符或者二进制数据，需求先进行编码。Cookie中也不能直接存取Java对象。若要存储略微复杂的信息，运用Cookie是比拟艰难的。 |Session中能够存取任何类型的数据，包括而不限于String、Integer、List、Map等。Session中也能够直接保管Java Bean乃至任何Java类，对象等，运用起来十分便当。能够把Session看做是一个Java容器类。 ||隐私策略 |假如选用Cookie，比较好的方法是，敏感的信息如账号密码等尽量不要写到Cookie中。最好是像Google、Baidu那样将Cookie信息加密，提交到服务器后再进行解密，保证Cookie中的信息只要本人能读得懂。Cookie存储在客户端阅读器中，对客户端是可见的，客户端的一些程序可能会窥探、复制以至修正Cookie中的内容。|假如选择Session就省事多了，反正是放在服务器上，Session里任何隐私都能够有效的保护。Session存储在服务器上，对客户端是透明的，不存在敏感信息泄露的风险。 ||有效期 |使用过Google的人都晓得，假如登录过Google，则Google的登录信息长期有效。用户不用每次访问都重新登录，Google会持久地记载该用户的登录信息。要到达这种效果，运用Cookie会是比较好的选择。只需要设置Cookie的过期时间属性为一个很大很大的数字。 |由于Session依赖于名为JSESSIONID的Cookie，而Cookie JSESSIONID的过期时间默许为–1，只需关闭了阅读器该Session就会失效，因而Session不能完成信息永世有效的效果。运用URL地址重写也不能完成。而且假如设置Session的超时时间过长，服务器累计的Session就会越多，越容易招致内存溢出。||服务器压力 |Cookie保管在客户端，不占用服务器资源。假如并发阅读的用户十分多，Cookie是很好的选择。关于Google、Baidu、Sina来说，Cookie或许是唯一的选择。 |Session是保管在服务器端的，每个用户都会产生一个Session。假如并发访问的用户十分多，会产生十分多的Session，耗费大量的内存。因而像Google、Baidu、Sina这样并发访问量极高的网站，是不太可能运用Session来追踪客户会话的。 ||跨域支持 |Cookie支持跨域名访问，例如将domain属性设置为“.biaodianfu.com”，则以“.biaodianfu.com”为后缀的一切域名均能够访问该Cookie。跨域名Cookie如今被普遍用在网络中，例如Google、Baidu、Sina等。 |Session则不会支持跨域名访问。Session仅在他所在的域名内有效。 | login.jsp 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;登录系统&lt;/h1&gt;&lt;% //从请求对象中获取 浏览器 发送回服务器的 cookie 数据 Cookie[] cookies = request.getCookies(); Cookie loindeUserCookie = null; if(cookies!=null)&#123; for(Cookie cookie:cookies)&#123; if(&quot;loginedUser&quot;.equals(cookie.getName()))&#123; loindeUserCookie = cookie; break; &#125; &#125; &#125;%&gt;URL:127.0.0.1/191013_Tomcat/1018/login.jsp&lt;br&gt;会话ID:&lt;%=session.getId() %&gt;&lt;form action=&quot;dologin.jsp&quot;&gt; &lt;%if(request.getAttribute(&quot;msg&quot;)!=null)&#123; %&gt; &lt;font color=&quot;red&quot;&gt; &lt;%=request.getAttribute(&quot;msg&quot;) %&gt; &lt;/font&gt;&lt;br&gt; &lt;%&#125; %&gt; 账户：&lt;input name=&quot;username&quot; value=&quot;&lt;%=loindeUserCookie == null ? &quot;&quot; : loindeUserCookie.getValue() %&gt;&quot;&gt;&lt;br&gt; 密码：&lt;input name=&quot;password&quot;&gt;&lt;br&gt; 有效期： &lt;select name=&quot;maxAge&quot;&gt; &lt;option value=&quot;0&quot;&gt;忘了我吧&lt;/option&gt; &lt;option value=&quot;60&quot;&gt;一分钟&lt;/option&gt; &lt;option value=&quot;86400&quot;&gt;一天&lt;/option&gt; &lt;option value=&quot;604800&quot;&gt;一周&lt;/option&gt; &lt;option value=&quot;2592000&quot;&gt;一月&lt;/option&gt; &lt;option value=&quot;9999999&quot;&gt;永远&lt;/option&gt; &lt;/select&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;&lt;br&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; dologin.jsp 12345678910111213141516171819202122232425262728293031&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;% String username = request.getParameter(&quot;username&quot;); String password = request.getParameter(&quot;password&quot;); int maxAge = Integer.parseInt(request.getParameter(&quot;maxAge&quot;)); if(&quot;yc&quot;.equals(username) &amp;&amp; &quot;123&quot;.equals(password))&#123; //创建一个Cookie对象，发给浏览器保存下来 Cookie cookie = new Cookie(&quot;loginedUser&quot;,username); //在本地保存，使用cookie //设置cookie有效期，单位 秒 cookie.setMaxAge(maxAge); //将cookie添加到响应对象中 response.addCookie(cookie); //登录成功后，使用会话对象保存登录状态 session.setAttribute(&quot;loginedUser&quot;, username); //在服务器保存，使用session response.sendRedirect(&quot;home.jsp&quot;); &#125;else&#123; request.setAttribute(&quot;msg&quot;, &quot;用户名或密码错误！&quot;); request.getRequestDispatcher(&quot;login.jsp&quot;).forward(request, response); &#125;%&gt;&lt;/body&gt;&lt;/html&gt; home.jsp 权限控制 1&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello&lt;/h1&gt;&lt;% //访问权限控制 if(session.getAttribute(&quot;loginedUser&quot;)==null)&#123; request.setAttribute(&quot;msg&quot;, &quot;请先登录系统&quot;); request.getRequestDispatcher(&quot;login.jsp&quot;).forward(request, response); return; &#125;%&gt;&lt;h2&gt;欢迎：&lt;%=session.getAttribute(&quot;loginedUser&quot;) %&gt; &lt;a href=&quot;dologout.jsp&quot;&gt;退出&lt;/a&gt;&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt; dologinout.jsp 登出、退出登录 123456789101112131415161718192021&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;% //账户登出功能 //实现退出 方法一 session.removeAttribute(&quot;loginedUser&quot;); //实现退出 方法二：直接将当前会话对象失效(失效有两种：1.手动失效 2.自动失效(30min)) session.invalidate(); //跳转至登录页面 response.sendRedirect(&quot;login.jsp&quot;);%&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第65次课程_重定向和转发","slug":"技术向/Java/源辰课程记录/第65次课程_重定向和转发","date":"2019-10-15T16:00:00.000Z","updated":"2022-05-11T06:33:04.413Z","comments":true,"path":"技术向/Java/源辰课程记录/第65次课程_重定向和转发/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC65%E6%AC%A1%E8%AF%BE%E7%A8%8B_%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E8%BD%AC%E5%8F%91/","excerpt":"","text":"源辰76班 第65次课程 2019.10.16 内容 重定向和转发[廖彦] 1.请求转发（request）和响应重定向（response） ||请求转发（request） |响应重定向（response） ||地址栏 |不变 |变化 ||转发方式 |服务器内部跳转 |服务器外部跳转 ||效率 |高（C&#x2F;S交互两次） |低（C&#x2F;S交互四次） ||跳转的资源（其他页面）|只能跳转至本服务器内其他资源|可以跳转至外部服务器其他资源||传递数据 |使用请求对象 |使用会话对象 | 页面跳转 请求转发： &#x2F;&#x2F;获取转发器 RequestDispatcher rd &#x3D; request.getRequestDispatcher(“url“); &#x2F;&#x2F;执行转发 rd.forward(request, response); 响应重定向： response.sendRedirect(“url“); A.jsp 首页 | pageEncoding&#x3D;”utf-8”%&gt; &lt;!**DOCTYPE** html PUBLIC “-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN” “http://www.w3.org/TR/html4/loose.dtd“&gt; &lt;**html**&gt; &lt;**head**&gt; &lt;**meta** http-equiv&#x3D;_”Content-Type”_ content&#x3D;_”text&#x2F;html; charset&#x3D;utf-8”_&gt; &lt;**title**&gt;Insert title here&lt;&#x2F;**title**&gt; &lt;&#x2F;**head**&gt; &lt;**body**&gt; &lt;**p**&gt;127.0.0.1&#x2F;191013_Tomcat&#x2F;1016&#x2F;A.jsp&lt;&#x2F;**p**&gt; &lt;**h1**&gt;A.jsp&lt;&#x2F;**h1**&gt; &lt;**a** href&#x3D;_”D.jsp?type&#x3D;1”_&gt;”请求转发”方式跳转页面&lt;&#x2F;**a**&gt;&lt;**br**&gt; &lt;**a** href&#x3D;_”D.jsp?type&#x3D;2”_&gt;”响应重定向”方式跳转页面&lt;&#x2F;**a**&gt;&lt;**br**&gt; &lt;**a** href&#x3D;_”D.jsp?type&#x3D;3”_&gt;”请求转发”跳转到外部百度&lt;&#x2F;**a**&gt;&lt;**br**&gt; &lt;**a** href&#x3D;_”D.jsp?type&#x3D;4”_&gt;”响应重定向”跳转到外部百度&lt;&#x2F;**a**&gt;&lt;**br**&gt; &lt;**a** href&#x3D;_”D.jsp?type&#x3D;0”_&gt;不跳转页面&lt;&#x2F;**a**&gt;&lt;**br**&gt; &lt;&#x2F;**body**&gt; &lt;&#x2F;**html**&gt;&lt;%@| D.jsp 跳转中转页面 | pageEncoding&#x3D;”utf-8”%&gt; &lt;!**DOCTYPE** html PUBLIC “-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN” “http://www.w3.org/TR/html4/loose.dtd“&gt; &lt;**html**&gt; &lt;**head**&gt; &lt;**meta** http-equiv&#x3D;_”Content-Type”_ content&#x3D;_”text&#x2F;html; charset&#x3D;utf-8”_&gt; &lt;**title**&gt;Insert title here&lt;&#x2F;**title**&gt; &lt;&#x2F;**head**&gt; &lt;**body**&gt; &lt;% String type &#x3D; request.getParameter(“type”); if(“1”.equals(type)){ &#x2F;* 请求转发，仅在服务器内部转发，不能转发服务器以外的页面 *&#x2F; &#x2F;&#x2F;获取转发器 RequestDispatcher rd &#x3D; request.getRequestDispatcher(“B.jsp”); &#x2F;&#x2F;执行转发 rd.forward(request, response); }else if(“2”.equals(type)){ &#x2F;* 响应重定向，可以转发服务器以外的页面 *&#x2F; response.sendRedirect(“C.jsp”); }else if(“3”.equals(type)){ request.getRequestDispatcher(“http://www.baidu.com“).forward(request, response); }else if(“4”.equals(type)){ response.sendRedirect(“http://www.baidu.com“); }else { &#x2F;&#x2F;不转发 } %&gt; &lt;**h1**&gt;D.jsp&lt;&#x2F;**h1**&gt; &lt;&#x2F;**body**&gt; &lt;&#x2F;**html**&gt;&lt;%@| B.jsp 通过”请求转发”跳转到的页面 | pageEncoding&#x3D;”utf-8”%&gt; &lt;!**DOCTYPE** html PUBLIC “-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN” “http://www.w3.org/TR/html4/loose.dtd“&gt; &lt;**html**&gt; &lt;**head**&gt; &lt;**meta** http-equiv&#x3D;_”Content-Type”_ content&#x3D;_”text&#x2F;html; charset&#x3D;utf-8”_&gt; &lt;**title**&gt;Insert title here&lt;&#x2F;**title**&gt; &lt;&#x2F;**head**&gt; &lt;**body**&gt; &lt;**h1**&gt;B.jsp&lt;&#x2F;**h1**&gt; &lt;&#x2F;**body**&gt; &lt;&#x2F;**html**&gt;&lt;%@| C.jsp 通过”响应重定向”跳转到的页面 | pageEncoding&#x3D;”utf-8”%&gt; &lt;!**DOCTYPE** html PUBLIC “-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN” “http://www.w3.org/TR/html4/loose.dtd“&gt; &lt;**html**&gt; &lt;**head**&gt; &lt;**meta** http-equiv&#x3D;_”Content-Type”_ content&#x3D;_”text&#x2F;html; charset&#x3D;utf-8”_&gt; &lt;**title**&gt;Insert title here&lt;&#x2F;**title**&gt; &lt;&#x2F;**head**&gt; &lt;**body**&gt; &lt;**h1**&gt;C.jsp&lt;&#x2F;**h1**&gt; &lt;&#x2F;**body**&gt; &lt;&#x2F;**html**&gt;&lt;%@| 2.数据传递 数据传递 请求转发 存入消息 request.setAttribute(“消息名”,参数名); 12345例如：request.setAttribute(&quot;mgs&quot;,&quot;张三&quot;);String name = &quot;张三&quot;request.setAttribute(&quot;mgs&quot;,name); 取出消息 request.getAttribute(“消息名”); 响应重定向 存入消息 session.setAttribute(“消息名”, 参数名); 取出消息 response.getAttribute(“消息名”); login.jsp 首页 通过form表单，提交表单（将表单数据拼接到域名后面，再跳转：域名? * ） | pageEncoding&#x3D;”utf-8”%&gt; &lt;!**DOCTYPE** html PUBLIC “-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN” “http://www.w3.org/TR/html4/loose.dtd“&gt; &lt;**html**&gt; &lt;**head**&gt; &lt;**meta** http-equiv&#x3D;_”Content-Type”_ content&#x3D;_”text&#x2F;html; charset&#x3D;utf-8”_&gt; &lt;**title**&gt;Insert title here&lt;&#x2F;**title**&gt; &lt;&#x2F;**head**&gt; &lt;**body**&gt; &lt;**h1**&gt;登录系统&lt;&#x2F;**h1**&gt; &lt;**form** action&#x3D;_”dologin.jsp”_&gt; &lt;%**if**(request.getAttribute(“msg”)!&#x3D;**null**){ %&gt; &lt;**font** color&#x3D;_”red”_&gt; &lt;%&#x3D;request.getAttribute(“msg”) %&gt; &lt;&#x2F;**font**&gt;&lt;**br**&gt; &lt;%} %&gt; 账户：&lt;**input** name&#x3D;_”username”_&gt;&lt;**br**&gt; 密码：&lt;**input** name&#x3D;_”password”_&gt;&lt;**br**&gt; &lt;**input** type&#x3D;_”submit”_ value&#x3D;_”登录”_&gt;&lt;**br**&gt; &lt;&#x2F;**form**&gt; &lt;&#x2F;**body**&gt; &lt;&#x2F;**html**&gt;&lt;%@| dologin.jsp 跳转中转页面 | pageEncoding&#x3D;”utf-8”%&gt; &lt;!**DOCTYPE** html PUBLIC “-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN” “http://www.w3.org/TR/html4/loose.dtd“&gt; &lt;**html**&gt; &lt;**head**&gt; &lt;**meta** http-equiv&#x3D;_”Content-Type”_ content&#x3D;_”text&#x2F;html; charset&#x3D;utf-8”_&gt; &lt;**title**&gt;Insert title here&lt;&#x2F;**title**&gt; &lt;&#x2F;**head**&gt; &lt;**body**&gt; &lt;% String username &#x3D; request.getParameter(“username”); String password &#x3D; request.getParameter(“password”); if(“yc”.equals(username) &amp;&amp; “123”.equals(password)){ &#x2F;&#x2F;登陆成功 &#x2F;* 如果使用响应重定向跳转网页，推送对象时用会话对象的方法 *&#x2F; &#x2F;&#x2F;使用会话对象推送数据 session.setAttribute(“loginedUser”, username); &#x2F;&#x2F;使用响应重定向跳转页面 response.sendRedirect(“main.jsp”); }else{ &#x2F;&#x2F;登录失败 &#x2F;* 如果使用请求转发跳转网页，推送对象时用请求对象的方法 *&#x2F; &#x2F;&#x2F;使用请求对象推送数据 request.setAttribute(“msg”, “请填写正确的用户名和密码”); &#x2F;&#x2F;使用请求对象跳转页面 request.getRequestDispatcher(“login.jsp”).forward(request, response); } %&gt; &lt;&#x2F;**body**&gt; &lt;&#x2F;**html**&gt;&lt;%@| main.jsp 如果登录成功，则跳转至主页面 | pageEncoding&#x3D;”utf-8”%&gt; &lt;!**DOCTYPE** html PUBLIC “-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN” “http://www.w3.org/TR/html4/loose.dtd“&gt; &lt;**html**&gt; &lt;**head**&gt; &lt;**meta** http-equiv&#x3D;_”Content-Type”_ content&#x3D;_”text&#x2F;html; charset&#x3D;utf-8”_&gt; &lt;**title**&gt;Insert title here&lt;&#x2F;**title**&gt; &lt;&#x2F;**head**&gt; &lt;**body**&gt; &lt;**h1**&gt;Hello&lt;%&#x3D;session.getAttribute(“loginedUser”) %&gt;&lt;&#x2F;**h1**&gt; &lt;&#x2F;**body**&gt; &lt;&#x2F;**html**&gt;&lt;%@|","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第64次课程","slug":"技术向/Java/源辰课程记录/第64次课程","date":"2019-10-13T16:00:00.000Z","updated":"2022-05-11T01:22:05.730Z","comments":true,"path":"技术向/Java/源辰课程记录/第64次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC64%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰76班 第64次课程 10.14.2019 内容 JSP动态交互技术[廖彦] 1.要点 JSP语法元素 JSP脚本：一段java代码 JSP表达式：java表达式，必须有返回结果 JSP内置对象： 1.请求对象 request（用于接收浏览器的信息） 2.响应对象 response （用于输出信息给浏览器） 3.会话对象 session （交互） 4.应用上下文对象 application （工程的环境） 5.页面上下文对象 pageContext （页面的环境） 6.页面输出流 out （JSP脚本输出内容） 7.配置对象 config （跟Servlet有关） 8.页面对象 page （最没用的） 9.异常对象 exception （需要将页面设置为错误页面才可以调用方法） JSP指令： 1.page指令：用于设置页面属性 errorPage &#x3D; “url” （用于设定如果jsp页面出现异常，将会跳转到url目标页面） isErrorPage &#x3D; “true” (用户用于设置当前页面是错误页面，可使用exception对象及方法) 2.include指令：用于将子页面导入到当前页面 3.taglib指令 2.JSP脚本和JSP表达式的区别 01.jsp |&lt;%@**page** import&#x3D;”java.util.Date”%&gt; &lt;%@ page language&#x3D;”java” contentType&#x3D;”text&#x2F;html; charset&#x3D;utf-8” pageEncoding&#x3D;”utf-8”%&gt; &lt;!**DOCTYPE** html PUBLIC “-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN” “http://www.w3.org/TR/html4/loose.dtd“&gt; &lt;**html**&gt; &lt;**head**&gt; &lt;**meta** http-equiv&#x3D;_”Content-Type”_ content&#x3D;_”text&#x2F;html; charset&#x3D;utf-8”_&gt; &lt;**title**&gt;Insert title here&lt;&#x2F;**title**&gt; &lt;&#x2F;**head**&gt; &lt;**body**&gt; &lt;% int i &#x3D; 100; Date date &#x3D; new Date(); %&gt; 当前日期：&lt;%&#x3D;date %&gt;&lt;**br**&gt; 当前日期：&lt;%&#x3D;**new** SimpleDateFormat(“yyyy年MM月dd日 HH:mm:ss”).format(date) %&gt;&lt;**br**&gt; &lt;&#x2F;**body**&gt; &lt;&#x2F;**html**&gt;&lt;%@| 3.request对象、exception对象和page指令、include指令 hello.jsp 主页面 request对象的应用 page指令：errorPage &#x3D; “url” include指令 |&lt;%@**page** import&#x3D;”java.util.Date”%&gt; &lt;%@**page** import&#x3D;”java.util.Calendar”%&gt; &lt;%@ page language&#x3D;”java” contentType&#x3D;”text&#x2F;html; charset&#x3D;utf-8” pageEncoding&#x3D;”utf-8” errorPage&#x3D;”error.jsp”%&gt; &lt;!**DOCTYPE** html PUBLIC “-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN” “http://www.w3.org/TR/html4/loose.dtd“&gt; &lt;**html**&gt; &lt;**head**&gt; &lt;**meta** http-equiv&#x3D;_”Content-Type”_ content&#x3D;_”text&#x2F;html; charset&#x3D;utf-8”_&gt; &lt;**title**&gt;Insert title here&lt;&#x2F;**title**&gt; &lt;&#x2F;**head**&gt; &lt;**body**&gt; &lt;**p**&gt;127.0.0.1&#x2F;191013_Tomcat&#x2F;1014&#x2F;hello.jsp?name&#x3D;张三&amp;sex&#x3D;男&amp;age&#x3D;16&lt;&#x2F;**p**&gt; &lt;**p**&gt;URL地址格式：http://127.0.0.1:80/工程名&#x2F;资源路径(目录+文件名)?参数名&#x3D;变量值 &amp;多参隔开&lt;&#x2F;**p**&gt; &lt;% &#x2F;&#x2F;request 请求对象 &#x2F;&#x2F;URL内的参数整体放入request对象中，可以使用getParameter方法传入参数名获取其中的对应的参数值。 String name &#x3D; request.getParameter(“name”); int age &#x3D; Integer.parseInt(request.getParameter(“age”)); Calendar c &#x3D; Calendar.getInstance(); c.add(Calendar.YEAR, -age); Date date &#x3D; c.getTime(); %&gt; 姓名：&lt;%&#x3D;name %&gt;&lt;**br**&gt; 性别：&lt;%&#x3D;request.getParameter(“sex”) %&gt;&lt;**br**&gt; 年龄：&lt;%&#x3D;age %&gt;&lt;**br**&gt; 出生年份：&lt;%&#x3D;**new** SimpleDateFormat(“yyyy年”).format(date) %&gt;&lt;**br**&gt; &lt;%**if**(age&lt;&#x3D;14){ %&gt; &lt;**img** src&#x3D;_”xjj.jpg”_ height&#x3D;_”200px”_&gt; &lt;%}**else**{ %&gt; &lt;**img** src&#x3D;_”xjj_freedom.jpg”_ height&#x3D;_”200px”_&gt; &lt;%} %&gt; &lt;**h1**&gt;海盗旗&lt;&#x2F;**h1**&gt; &lt;%**for**(**int** i&#x3D;0;i&lt;5;i++){ %&gt; &lt;%**for**(**int** j&#x3D;0;j&lt;&#x3D;i;j++){ %&gt; &lt;%&#x3D;”*” %&gt; &lt;%} %&gt; &lt;%&#x3D;”“ %&gt; &lt;%} %&gt; &lt;%@**include** file&#x3D;”sub.jsp” %&gt; &lt;&#x2F;**body**&gt; &lt;&#x2F;**html**&gt;&lt;%@| sub.jsp 子页面 注意：子页面将默认生成的标签删除，以免拼接到主页面时出现标签重复异常 | pageEncoding&#x3D;”utf-8”%&gt; &lt;!**DOCTYPE** html PUBLIC “-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN” “http://www.w3.org/TR/html4/loose.dtd“&gt; &lt;**p**&gt;这是一个子页面&lt;&#x2F;**p**&gt;&lt;%@| error.jsp 错误页面 page指令：isErrorPage&#x3D;”true” 注意：当参数为true时，JSP对象exception才可以调用方法 | pageEncoding&#x3D;”utf-8” isErrorPage&#x3D;”true”%&gt; &lt;!**DOCTYPE** html PUBLIC “-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN” “http://www.w3.org/TR/html4/loose.dtd“&gt; &lt;**html**&gt; &lt;**head**&gt; &lt;**meta** http-equiv&#x3D;_”Content-Type”_ content&#x3D;_”text&#x2F;html; charset&#x3D;ISO-8859-1”_&gt; &lt;**title**&gt;Insert title here&lt;&#x2F;**title**&gt; &lt;&#x2F;**head**&gt; &lt;**body**&gt; &lt;**h1**&gt;这是一个错误页面&lt;&#x2F;**h1**&gt; 错误信息：&lt;%&#x3D;exception.getMessage() %&gt; &lt;&#x2F;**body**&gt; &lt;&#x2F;**html**&gt;&lt;%@|","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第63次课程","slug":"技术向/Java/源辰课程记录/第63次课程","date":"2019-10-12T16:00:00.000Z","updated":"2022-05-11T01:21:55.281Z","comments":true,"path":"技术向/Java/源辰课程记录/第63次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC63%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰76班 第63次课程 10.13.2019 内容 WEB入门[廖彦] 1.Tomcat服务器安装 1.启动和停止服务器 启动服务器 startup 停止服务器 shutdown 2.文件说明 bin:tomcat可执行文件 conf:配置文件 lib:jar包 logs:日志文件 temp:临时文件 webapps:web项目应用 work:（一言难尽） 2.[常见问题]Java环境变量配置说明 配置全局变量 变量：JAVA_HOME和JRE_HOME，值：java路径名 注：严禁路径后面存在分号(;) 3.Eclipse配置Tomcat 1.创建Tomcat服务器 2.添加项目放入服务器中运行 4.web工程与默认页 1.创建项目 2.创建时注意 3.文件目录说明 Java Resources:放置java源码文件 WebCountent:放置web源码文件(HTML,CSS,JS） 4.默认页 系统默认首页名：index.html 若修改： 5.修改服务器端口 目的：避免每次输入网址后的端口号(:8080) 1.双击 2.修改 6.MySQL服务器安装 conn.properties:配置文件 mysql-connector-java:java驱动文件 Navicat:图形化DBMS（类似于Oracle的plsqldev） Setup:mySQL安装包","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第62次课程","slug":"技术向/Java/源辰课程记录/第62次课程","date":"2019-10-09T16:00:00.000Z","updated":"2022-05-11T01:21:45.013Z","comments":true,"path":"技术向/Java/源辰课程记录/第62次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC62%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第62次课程 10.10.2019 内容 补课[廖彦] 1.五子棋（下） 知识要点： jQuery监听器 jQuery.cookie的使用：用于临时缓存数据 源码： 题目.html 注意：function check($chess){_} 方法相较于上次课”五子棋（上）“已被重构。 新增”保存”，”加载”相关监听事件及处理函数，基于cookie缓存数据。lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;jQuery五子棋&lt;/title&gt;&lt;link href=&quot;css/chess5.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;&lt;script src=&quot;js/jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/jquery.cookie.js&quot;&gt;&lt;/script&gt;&lt;script&gt; /* 监听器： 1.首先通过$(#/._)锁定HTML标签，创建jQuery对象 2.调用jQuery监听方法 如：.hover(function()&#123;如果触发后做什么&#125;) .click(function()&#123;如果触发后做什么&#125;) */ /* 本案例要点 项目根据不同样式(CSS)来确定棋子和棋盘 */ color = &quot;black&quot;; var offset = [[-1,0],[0,-1],[-1,-1],[1,-1]]; //jQuery 的加载函数 $(function()&#123; //$ 等价 jQuery $board = jQuery(&quot;.chessboard&quot;); //由于老师的失误，x y 值在图中表示相反 for(var x=0;x&lt;15;x++)&#123; for(var y=0;y&lt;15;y++)&#123; //创建div元素，并且封装成jQuery对象 var id = y + &quot;-&quot; + x; $div = $(&quot;&lt;div id=&#x27;&quot;+id+&quot;&#x27;&gt;&lt;/div&gt;&quot;); //标签内追加元素 $board.append($div); //光标跟随要监听事件(mouseenter光标移入 mouseout光标移出，此处使用悬停hover代替前面两种事件) $div.hover(function()&#123; $this = $(this); var id = $this.prop(&quot;id&quot;); var arrXy = id.split(&quot;-&quot;); var x = arrXy[0]; var y = arrXy[1]; if($this.hasClass(&quot;black&quot;))&#123; //如果是&quot;black-last&quot;样式，则toggleClass方法将&quot;black-last&quot;样式移走 $this.toggleClass(&quot;black-last&quot;); &#125;else if($this.hasClass(&quot;white&quot;))&#123; $this.toggleClass(&quot;white-last&quot;); &#125;else &#123; var cls; if(x==0 &amp;&amp; y==0)&#123; cls = &quot;hover-up-left&quot;; &#125;else if(x==14 &amp;&amp; y==14)&#123; cls = &quot;hover-down-right&quot;; &#125;else if(x==0 &amp;&amp; y==14)&#123; cls = &quot;hover-down-left&quot; &#125;else if(x==14 &amp;&amp; y==0)&#123; cls = &quot;hover-up-right&quot;; &#125;else if(x==0)&#123; cls = &quot;hover-left&quot;; &#125;else if(x==14)&#123; cls = &quot;hover-right&quot;; &#125;else if(y==0)&#123; cls = &quot;hover-up&quot;; &#125;else if(y==14)&#123; cls = &quot;hover-down&quot;; &#125;else&#123; cls = &quot;hover&quot;; &#125; //样式切换 $(this).toggleClass(cls); &#125; &#125;); $div.click(function()&#123; var $this = $(this); //判断当前是否下过棋子 //indexOf 判断子字符在前面字符串中是否出现过，出现过返回0 未出现返回-1 if($this.prop(&quot;class&quot;).indexOf(&quot;hover&quot;)==0)&#123; //清空样式类 $this.prop(&quot;class&quot;,&quot;&quot;); $this.addClass(color); $this.addClass(color+&quot;-last&quot;); //更改下次下棋子颜色 color = color == &quot;black&quot; ? &quot;white&quot; : &quot;black&quot;; check($this); &#125; &#125;); &#125; &#125; &#125;) function check($chess)&#123; /* var id = $chess.prop(&quot;id&quot;); var arrXy = id.split(&quot;-&quot;); var x = arrXy[0]; var y = arrXy[1]; //先判断横向 var chesses = [$chess]; //定义记录五子的数组 while(true)&#123; //当前棋子 var $curr = $(&quot;#&quot;+x+&quot;-&quot;+y); //下一个棋子 var $next = $(&quot;#&quot;+(--x)+&quot;-&quot;+y); if($next.hasClass(&quot;white&quot;) || $next.hasClass(&quot;black&quot;))&#123; if($curr.prop(&quot;class&quot;).indexOf($next.prop(&quot;class&quot;))==0)&#123; chesses.push($next); &#125;else&#123; break; &#125; &#125;else&#123; break; &#125; &#125; var x = arrXy[0]; var y = arrXy[1]; while(true)&#123; var $curr = $(&quot;#&quot;+x+&quot;-&quot;+y); var $next = $(&quot;#&quot;+(++x)+&quot;-&quot;+y); if($next.hasClass(&quot;white&quot;) || $next.hasClass(&quot;black&quot;))&#123; if($curr.prop(&quot;class&quot;).indexOf($next.prop(&quot;class&quot;))==0)&#123; chesses.push($next); &#125;else&#123; break; &#125; &#125;else&#123; break; &#125; &#125; */ var chesses; var id = $chess.prop(&quot;id&quot;); var xyarr = id.split(&quot;-&quot;); var chessColor = $chess.prop(&quot;class&quot;).substr(0,5); for(var i=0;i&lt;offset.length;i++)&#123; chesses = [$chess]; for(var o=0;o&lt;2;o++)&#123; var y = parseInt(xyarr[0]); var x = parseInt(xyarr[1]); var op = o == 0 ? 1 : -1 ; while(true)&#123; $this = $(&quot;#&quot;+y+&quot;-&quot;+x); x += op * offset[i][0]; y += op * offset[i][1]; $next = $(&quot;#&quot;+y+&quot;-&quot;+x); if($next.length==1 &amp;&amp; $next.prop(&quot;class&quot;).indexOf(chessColor)==0)&#123; chesses.push($next); &#125;else&#123; break; &#125; &#125; &#125; if(chesses.length&gt;=5)&#123; alert(&quot;五子连珠成立&quot;); &#125; &#125; return chesses; &#125; //第二个加载事件 $(function()&#123; var $p = $(&quot;.operating-panel p&quot;).eq(2); //找到 &quot;保存&quot; 按键，并将其创建为jQuery对象 var $save = $p.children().first(); //找到 &quot;加载&quot; 按键，并将其创建为jQuery对象 var $load = $p.children().last(); //如果&quot;保存&quot;被点击 $save.click(function()&#123; alert(&quot;save&quot;); var arrdata = []; //each方法 遍历每一个div元素，并且调用括号内的函数 $(&quot;.chessboard div&quot;).each(function()&#123; $this = $(this); //null &quot;&quot; define = false ; //black white = true; if($this.prop(&quot;class&quot;))&#123; var d = $this.prop(&quot;id&quot;) + &quot;_&quot; +$this.prop(&quot;class&quot;); arrdata.push(d); &#125; &#125;); var strdata = arrdata.join(&quot;;&quot;); //调用cookie方法，将变量strdata中的数据写入&quot;chess5.data&quot;中 $.cookie(&quot;chess5.data&quot;,strdata); &#125;); //如果&quot;加载&quot;被点击 $load.click(function()&#123; alert(&quot;load&quot;); //调用cookie方法，将&quot;chess5.data&quot;中的数据放入变量strdata中 var strdata = $.cookie(&quot;chess5.data&quot;); var arrdata = strdata.split(&quot;;&quot;); for(var i=0;i&lt;arrdata.length;i++)&#123; var idAndColor = arrdata[i].split(&quot;_&quot;); var id = idAndColor[0]; var color = idAndColor[1]; $(&quot;#&quot;+id).addClass(color); &#125; &#125;); &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;chessboard&quot;&gt;&lt;/div&gt; &lt;div class=&quot;operating-panel&quot;&gt; &lt;h2 style=&quot;margin: 30px auto&quot;&gt;黑用时：00 : 00&lt;/h2&gt; &lt;h2 style=&quot;margin: 30px auto&quot;&gt;白用时：00 : 00&lt;/h2&gt; &lt;p&gt; &lt;a id=&quot;black_btn&quot; class=&quot;selected&quot; href=&quot;#&quot;&gt;黑&amp;nbsp;&amp;nbsp;子&lt;/a&gt; &lt;a id=&quot;white_btn&quot; href=&quot;#&quot;&gt;白&amp;nbsp;&amp;nbsp;子&lt;/a&gt; &lt;/p&gt; &lt;p&gt; &lt;a id=&quot;first_move_btn&quot; class=&quot;selected&quot; href=&quot;#&quot;&gt;先&amp;nbsp;&amp;nbsp;手&lt;/a&gt; &lt;a id=&quot;second_move_btn&quot; href=&quot;#&quot;&gt;后&amp;nbsp;&amp;nbsp;手&lt;/a&gt; &lt;/p&gt; &lt;p&gt; &lt;a href=&quot;#&quot;&gt;保&amp;nbsp;&amp;nbsp;存&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;加&amp;nbsp;&amp;nbsp;载&lt;/a&gt; &lt;/p&gt; &lt;a id=&quot;replay_btn&quot; class=&quot;btn&quot; href=&quot;#&quot;&gt;开&amp;nbsp;&amp;nbsp;&amp;nbsp;始&lt;/a&gt; &lt;p id=&quot;result_info&quot;&gt;胜率：100%&lt;/p&gt; &lt;p id=&quot;result_tips&quot;&gt;&lt;/p&gt; &lt;/div&gt; &lt;div style=&quot;margin: 40px auto&quot;&gt; &lt;h2&gt;图片样例，代码完成之后，请隐藏当前DIV&lt;/h2&gt; &lt;img src=&quot;images/black.png&quot; /&gt; &lt;img src=&quot;images/white.png&quot; /&gt; &lt;img src=&quot;images/hover.png&quot; /&gt; &lt;img src=&quot;images/hover_up.png&quot; /&gt; &lt;img src=&quot;images/hover_down.png&quot; /&gt; &lt;img src=&quot;images/hover_up_left.png&quot; /&gt; &lt;img src=&quot;images/hover_up_right.png&quot; /&gt; &lt;img src=&quot;images/hover_left.png&quot; /&gt; &lt;img src=&quot;images/hover_right.png&quot; /&gt; &lt;img src=&quot;images/hover_down_left.png&quot; /&gt; &lt;img src=&quot;images/hover_down_right.png&quot; /&gt; &lt;img src=&quot;images/black_last.png&quot; /&gt; &lt;img src=&quot;images/white_last.png&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第61次课程","slug":"技术向/Java/源辰课程记录/第61次课程","date":"2019-10-07T16:00:00.000Z","updated":"2022-05-11T01:21:29.807Z","comments":true,"path":"技术向/Java/源辰课程记录/第61次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC61%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第61次课程 10.08.2019 内容 JS部分作业检查、复习及指导[廖彦] 1.五子棋（上） 仅完成了光标悬停棋盘变化，黑白棋子交替下棋，防止同位置重复下棋，横向五子连珠获取胜利。 知识要点： 在jQuery中： 1.$ 等价 jQuery -&gt; $() 等价 jQuery() 2.向标签内追加标签 1234567//参数如果为id选择器或class选择器，则获取html中的相关标签$divFather = $(&quot;#father&quot;);//参数如果为标签，则创建该标签放入jQuery对象中$divSon = $(&quot;&lt;div&gt;&lt;/div&gt;&quot;);//.append() 向标签内追加新标签$divFather.append($divSon); 3.获取标签中的属性值 1234567html&lt;div id=&quot;father&quot;&gt;&lt;/div&gt;js//当触发以上div的事件时$this = $(this);//.prop() 获取属性值var id = $this.prop(&quot;id&quot;); 4.判断当前获取的样式名是否和参数中的一致 123//当触发以上div的事件时$this = $(this);$this.hasClass(&quot;black&quot;); 5.光标跟随要监听事件(mouseenter光标移入，mouseout光标移出，hover悬停) 123456//$this对象中有两种样式：black black-last$this = $(this);if($this.hasClass(&quot;black&quot;))&#123;//如果是&quot;black-last&quot;样式，则toggleClass方法将&quot;black-last&quot;样式移走$this.toggleClass(&quot;black-last&quot;);&#125; 源码： 题目.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;title&gt;jQuery五子棋&lt;/title&gt;&lt;link href=&quot;css/chess5.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;&lt;script src=&quot;js/jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; color = &quot;black&quot;; //jQuery 的加载函数 $(function()&#123; //$ 等价 jQuery $board = jQuery(&quot;.chessboard&quot;); //由于老师的失误，x y 值在图中表示相反 for(var x=0;x&lt;15;x++)&#123; for(var y=0;y&lt;15;y++)&#123; //创建div元素，并且封装成jQuery对象 var id = y + &quot;-&quot; + x; $div = $(&quot;&lt;div id=&#x27;&quot;+id+&quot;&#x27;&gt;&lt;/div&gt;&quot;); //标签内追加元素 $board.append($div); //光标跟随要监听事件(mouseenter光标移入 mouseout光标移出，此处使用悬停hover代替前面两种事件) $div.hover(function()&#123; $this = $(this); var id = $this.prop(&quot;id&quot;); var arrXy = id.split(&quot;-&quot;); var x = arrXy[0]; var y = arrXy[1]; if($this.hasClass(&quot;black&quot;))&#123; //如果是&quot;black-last&quot;样式，则toggleClass方法将&quot;black-last&quot;样式移走 $this.toggleClass(&quot;black-last&quot;); &#125;else if($this.hasClass(&quot;white&quot;))&#123; $this.toggleClass(&quot;white-last&quot;); &#125;else &#123; var cls; if(x==0 &amp;&amp; y==0)&#123; cls = &quot;hover-up-left&quot;; &#125;else if(x==14 &amp;&amp; y==14)&#123; cls = &quot;hover-down-right&quot;; &#125;else if(x==0 &amp;&amp; y==14)&#123; cls = &quot;hover-down-left&quot; &#125;else if(x==14 &amp;&amp; y==0)&#123; cls = &quot;hover-up-right&quot;; &#125;else if(x==0)&#123; cls = &quot;hover-left&quot;; &#125;else if(x==14)&#123; cls = &quot;hover-right&quot;; &#125;else if(y==0)&#123; cls = &quot;hover-up&quot;; &#125;else if(y==14)&#123; cls = &quot;hover-down&quot;; &#125;else&#123; cls = &quot;hover&quot;; &#125; //样式切换 $(this).toggleClass(cls); &#125; &#125;); $div.click(function()&#123; var $this = $(this); //判断当前是否下过棋子 //indexOf 判断子字符在前面字符串中是否出现过，出现过返回0 未出现返回-1 if($this.prop(&quot;class&quot;).indexOf(&quot;hover&quot;)==0)&#123; //清空样式类 $this.prop(&quot;class&quot;,&quot;&quot;); $this.addClass(color); $this.addClass(color+&quot;-last&quot;); //更改下次下棋子颜色 color = color == &quot;black&quot; ? &quot;white&quot; : &quot;black&quot;; check($this); &#125; &#125;); &#125; &#125; &#125;) function check($chess)&#123; var id = $chess.prop(&quot;id&quot;); var arrXy = id.split(&quot;-&quot;); var x = arrXy[0]; var y = arrXy[1]; //先判断横向 var chesses = [$chess]; //定义记录五子的数组 while(true)&#123; //当前棋子 var $curr = $(&quot;#&quot;+x+&quot;-&quot;+y); //下一个棋子 var $next = $(&quot;#&quot;+(--x)+&quot;-&quot;+y); if($next.hasClass(&quot;white&quot;) || $next.hasClass(&quot;black&quot;))&#123; if($curr.prop(&quot;class&quot;).indexOf($next.prop(&quot;class&quot;))==0)&#123; chesses.push($next); &#125;else&#123; break; &#125; &#125;else&#123; break; &#125; &#125; var x = arrXy[0]; var y = arrXy[1]; while(true)&#123; var $curr = $(&quot;#&quot;+x+&quot;-&quot;+y); var $next = $(&quot;#&quot;+(++x)+&quot;-&quot;+y); if($next.hasClass(&quot;white&quot;) || $next.hasClass(&quot;black&quot;))&#123; if($curr.prop(&quot;class&quot;).indexOf($next.prop(&quot;class&quot;))==0)&#123; chesses.push($next); &#125;else&#123; break; &#125; &#125;else&#123; break; &#125; &#125; if(chesses.length&gt;=5)&#123; alert(&quot;五子连珠成立&quot;); &#125; &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;chessboard&quot;&gt;&lt;/div&gt; &lt;div class=&quot;operating-panel&quot;&gt; &lt;h2 style=&quot;margin: 30px auto&quot;&gt;黑用时：00 : 00&lt;/h2&gt; &lt;h2 style=&quot;margin: 30px auto&quot;&gt;白用时：00 : 00&lt;/h2&gt; &lt;p&gt; &lt;a id=&quot;black_btn&quot; class=&quot;selected&quot; href=&quot;#&quot;&gt;黑&amp;nbsp;&amp;nbsp;子&lt;/a&gt; &lt;a id=&quot;white_btn&quot; href=&quot;#&quot;&gt;白&amp;nbsp;&amp;nbsp;子&lt;/a&gt; &lt;/p&gt; &lt;p&gt; &lt;a id=&quot;first_move_btn&quot; class=&quot;selected&quot; href=&quot;#&quot;&gt;先&amp;nbsp;&amp;nbsp;手&lt;/a&gt; &lt;a id=&quot;second_move_btn&quot; href=&quot;#&quot;&gt;后&amp;nbsp;&amp;nbsp;手&lt;/a&gt; &lt;/p&gt; &lt;a id=&quot;replay_btn&quot; class=&quot;btn&quot; href=&quot;#&quot;&gt;开&amp;nbsp;&amp;nbsp;&amp;nbsp;始&lt;/a&gt; &lt;p id=&quot;result_info&quot;&gt;胜率：100%&lt;/p&gt; &lt;p id=&quot;result_tips&quot;&gt;&lt;/p&gt; &lt;/div&gt; &lt;div style=&quot;margin: 40px auto&quot;&gt; &lt;h2&gt;图片样例，代码完成之后，请隐藏当前DIV&lt;/h2&gt; &lt;img src=&quot;images/black.png&quot; /&gt; &lt;img src=&quot;images/white.png&quot; /&gt; &lt;img src=&quot;images/hover.png&quot; /&gt; &lt;img src=&quot;images/hover_up.png&quot; /&gt; &lt;img src=&quot;images/hover_down.png&quot; /&gt; &lt;img src=&quot;images/hover_up_left.png&quot; /&gt; &lt;img src=&quot;images/hover_up_right.png&quot; /&gt; &lt;img src=&quot;images/hover_left.png&quot; /&gt; &lt;img src=&quot;images/hover_right.png&quot; /&gt; &lt;img src=&quot;images/hover_down_left.png&quot; /&gt; &lt;img src=&quot;images/hover_down_right.png&quot; /&gt; &lt;img src=&quot;images/black_last.png&quot; /&gt; &lt;img src=&quot;images/white_last.png&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 模板相关文件，css和js %!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;)","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第60次课程","slug":"技术向/Java/源辰课程记录/第60次课程","date":"2019-09-27T16:00:00.000Z","updated":"2022-05-11T01:21:06.548Z","comments":true,"path":"技术向/Java/源辰课程记录/第60次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC60%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第60次课程 09.28.2019 内容 项目案例[廖彦] 说明：由于回家签署房屋购买合同（2019.09.26），因此未能参加本次课程。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第59次课程","slug":"技术向/Java/源辰课程记录/第59次课程","date":"2019-09-25T16:00:00.000Z","updated":"2022-05-11T01:20:50.838Z","comments":true,"path":"技术向/Java/源辰课程记录/第59次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC59%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第59次课程 09.26.2019 内容 JQUERY入门[廖彦] 说明：由于回家签署房屋购买合同（2019.09.26），因此未能参加本次课程。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第58次课程","slug":"技术向/Java/源辰课程记录/第58次课程","date":"2019-09-18T16:00:00.000Z","updated":"2022-05-11T01:20:36.716Z","comments":true,"path":"技术向/Java/源辰课程记录/第58次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC58%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第58次课程 09.19.2019 内容 正则表达式[廖彦] 1.下拉框联动、多选框联动 login.html 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;省市.js&quot;&gt;&lt;/script&gt;&lt;script&gt; function init()&#123; var cbxLikeArr = document.getElementsByName(&quot;like&quot;); for(var i=0;i&lt;cbxLikeArr.length;i++)&#123; cbxLikeArr[i].onclick = selectLike; &#125; &#125; function selectLike()&#123; var checkedCount = 0; var cbxLikeArr = document.getElementsByName(&quot;like&quot;); for(var i=0;i&lt;cbxLikeArr.length;i++)&#123; checkedCount += cbxLikeArr[i].checked ? 1 : 0; &#125; var cbxAll = document.getElementsByName(&quot;likeAll&quot;)[0]; cbxAll.checked = checkedCount == cbxLikeArr.length; &#125; function selectAll()&#123; var cbxAll = event.srcElement; var cbxLikeArr = document.getElementsByName(&quot;like&quot;); for(var i=0;i&lt;cbxLikeArr.length;i++)&#123; cbxLikeArr[i].checked = cbxAll.checked; &#125; &#125; function selectProvince()&#123; var sltProvince = event.srcElement; var sltCity = document.getElementById(&quot;sltCity&quot;); sltCity.innerHTML = &quot;&lt;option&gt;--请选择市--&lt;/option&gt;&quot;; if(sltProvince.selectedIndex &gt; 0)&#123; var cityArr = citys[sltProvince.selectedIndex - 1]; for(var i=0;i&lt;cityArr.length;i++)&#123; var option = new Option(cityArr[i],cityArr[i],false); sltCity.appendChild(option); &#125; &#125; &#125;&lt;/script&gt;&lt;/head&gt;&lt;body onload=&quot;init()&quot;&gt; &lt;form action=&quot;main.html&quot;&gt; 用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; 密码：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt; 学历： &lt;input type=&quot;radio&quot; name=&quot;edu&quot;&gt;大专 &lt;input type=&quot;radio&quot; name=&quot;edu&quot;&gt;本科 &lt;input type=&quot;radio&quot; name=&quot;edu&quot;&gt;研究生 爱好： &lt;input type=&quot;checkbox&quot; name=&quot;likeAll&quot; onclick=&quot;selectAll()&quot;&gt;全部 &lt;input type=&quot;checkbox&quot; name=&quot;like&quot; &gt;篮球 &lt;input type=&quot;checkbox&quot; name=&quot;like&quot; &gt;读书 &lt;input type=&quot;checkbox&quot; name=&quot;like&quot; &gt;手游 籍贯： &lt;select onchange = &quot;selectProvince()&quot;&gt; &lt;option&gt;--请选择省--&lt;/option&gt; &lt;script&gt; for(var i=0;i&lt;provinces.length;i++)&#123; document.write(&quot;&lt;option&gt;&quot;+provinces[i]+&quot;&lt;/option&gt;&quot;) &#125; &lt;/script&gt; &lt;/select&gt; &lt;select id=&quot;sltCity&quot;&gt; &lt;option&gt;--请选择市--&lt;/option&gt; &lt;/select&gt; &lt;input type=&quot;button&quot; value=&quot;普通按钮&quot;&gt; &lt;input type=&quot;reset&quot; value=&quot;重置按钮&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;提交按钮&quot;&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 2.正则表达式 ** ** 详解： re &#x3D; &#x2F;格式&#x2F;模式 格式： 模式： 使用方法： 1234567var str = &quot;a Bat cat,fAt baT faT&quot;; var reg = /bat/gi;//&lt;-简约写法 标准写法：var ret = new RegExp(&quot;bat&quot;,&quot;gi&quot;); while((a=reg.exec(str))!=null)&#123; alert(a);&#125; g：检索整条字符串 i：不区分大小写 1234567var str = &quot;a Bat cat,fAt baT faT&quot;; var reg = /[bc]at/gi; while((a=reg.exec(str))!=null)&#123; alert(a);&#125; []：可选集合，满足其中任意一个字符均可 1234567var str = &quot;a Bat cat,fAt baT faT&quot;; var reg = /[^bc]at/gi; while((a=reg.exec(str))!=null)&#123; alert(a);&#125; [^]：不可选集合，排除其中任意一个字符的其他字符均可 1234567var str = &quot;a Bat cat,fAt baT faT&quot;; var reg = /[a-c]at/gi; while((a=reg.exec(str))!=null)&#123; alert(a);&#125; [a-c]：范围，满足a到c其中任意一个字符均可 ^：行起始符 $：行截至符 用于规定字符串长度 案例： regExp.html 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;script type=&quot;text/javascript&quot;&gt; function validate()&#123; var txtPhone = document.getElementById(&quot;phone&quot;); var txtEmail = document.getElementById(&quot;email&quot;); if(txtPhone.value == &quot;&quot;)&#123; alert(&quot;请填写电话号码！&quot;); return false; &#125; if(txtEmail.value == &quot;&quot;)&#123; alert(&quot;请填写邮箱地址！&quot;); return false; &#125; var re = /^1\\d&#123;10&#125;$/; if(re.test(txtPhone.value) == false)&#123; alert(&quot;请填写正确的电话号码！&quot;); return false; &#125; re = /\\w+@\\w+\\.\\w+/; if(re.test(txtEmail.value) == false)&#123; alert(&quot;请填写正确的邮箱地址！&quot;); return false; &#125; return true; &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=&quot;main.html&quot; onsubmit=&quot;return validate()&quot;&gt; 电话：&lt;input name=&quot;phone&quot; id=&quot;phone&quot;&gt; 密码：&lt;input name=&quot;email&quot; id=&quot;email&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;提交按钮&quot;&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第57次课程","slug":"技术向/Java/源辰课程记录/第57次课程","date":"2019-09-11T16:00:00.000Z","updated":"2022-05-11T01:20:26.425Z","comments":true,"path":"技术向/Java/源辰课程记录/第57次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC57%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第57次课程 09.12.2019 内容 DOM技术[廖彦] 1.[案例]美女时钟 ** ** Time.htmllt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;style&gt;#girltime&#123; position:relative; display:inline-block; font-size:20px; color:white; font-family: 微软雅黑; /*left:-620px; top:-280px; transform:rotate(-90deg);*/&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 标题时间表 --&gt; &lt;div id=&quot;time&quot; style=&quot;text-align:center;&quot;&gt;&lt;/div&gt; &lt;!-- 下拉菜单 --&gt; &lt;div&gt; &lt;select onchange=&quot;yearChange()&quot; id=&quot;year&quot;&gt; &lt;option value=&quot;2019&quot;&gt;2019年&lt;/option&gt; &lt;option value=&quot;2018&quot;&gt;2018年&lt;/option&gt; &lt;option value=&quot;2017&quot;&gt;2017年&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div &gt; &lt;!-- 图片 --&gt; &lt;img id=&quot;girlImg&quot;/&gt;&lt;!-- src=&quot;girltime1.jpg&quot; --&gt; &lt;!-- 时间板 --&gt; &lt;label id=&quot;girltime&quot;&gt;&lt;/label&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; function Demo1()&#123; //创建日期 var date = new Date(); var txt = &quot;&quot;; //获取年 //.getYear() 获取从1900年开始至今已过年总计 //.getFullYear() 获取当前年份 txt += date.getFullYear() + &quot;年&quot;; //获取月 txt += date.getMonth() + &quot;月&quot;; //获取日 txt += date.getDate() + &quot;日&quot;; //获取星期 txt += &quot;星期&quot;+date.getDay() + &quot; &quot;; //获取小时 txt += date.getHours() + &quot;时&quot;; //获取分钟 txt += date.getMinutes() + &quot;分&quot;; //获取秒 txt += date.getSeconds() + &quot;秒&quot;; /* innerText 与 innerHTML 区别： 例如，遇到(HTML换行符)时， innerText直接将其打印出来&quot;&quot;; innerHTML则执行换行。 */ time.innerText = txt; /* 不推荐直接写id，存在不同浏览器兼容系问题，指向不明的风险。 应使用document将HTML文档读进内存，创建对象，通过此对象的方法获取子结点。 推荐写为：document.getElementById(&quot;time&quot;); */ &#125; function Demo2()&#123; /* 与Demo2区别在于，新增了每1秒自动刷新时间 通过setTimeout()方法实现。 */ var date = new Date(); var txt = &quot;&quot;; var weeks = [&quot;日&quot;,&quot;一&quot;,&quot;二&quot;,&quot;三&quot;,&quot;四&quot;,&quot;五&quot;,&quot;六&quot;]; txt += date.getFullYear() + &quot;年&quot;; txt += date.getMonth() + &quot;月&quot;; txt += date.getDate() + &quot;日&quot;; txt += &quot;星期&quot;+weeks[date.getDay()] + &quot; &quot;; txt += date.getHours() + &quot;时&quot;; txt += date.getMinutes() + &quot;分&quot;; txt += date.getSeconds() + &quot;秒&quot;; time.innerText = txt; //实现自动刷新 setTimeout(&quot;Demo1()&quot;,1000); &#125; function setGirlTime()&#123; var date = new Date(); var txt = &quot;&quot;; var weeks = [&quot;日&quot;,&quot;一&quot;,&quot;二&quot;,&quot;三&quot;,&quot;四&quot;,&quot;五&quot;,&quot;六&quot;]; txt += &quot;星期&quot;+weeks[date.getDay()] + &quot;&quot;; txt += date.getHours() + &quot;:&quot;; txt += date.getMinutes() + &quot;:&quot;; txt += date.getSeconds(); /* document对象及其方法的使用： */ var girltime = document.getElementById(&quot;girltime&quot;); girltime.innerHTML = txt; setTimeout(setGirlTime,1000); &#125; function yearChange()&#123; /* 通过js设置css参数 */ var yearSelect = document.getElementById(&quot;year&quot;); //获取下拉菜单所有选项，放入数组 var options = yearSelect.options; //通过获取下拉菜单的索引值，从数组中找到对应的选项 var selectOption = options[yearSelect.selectedIndex]; //获取HTML里的图片对象 var girlImg = document.getElementById(&quot;girlImg&quot;); //获取HTML里的时间板对象 var girltime = document.getElementById(&quot;girltime&quot;); //2019 if(yearSelect.selectedIndex==0)&#123; //设置图片对象的src路径 girlImg.src = &quot;girltime1.jpg&quot;; girltime.style.top = &quot;-280px&quot;; girltime.style.left = &quot;-620px&quot;; //设置旋转角度 girltime.style.transform = &quot;rotate(-6deg)&quot;; &#125; //2018 else if(yearSelect.selectedIndex==1)&#123; girlImg.src = &quot;girltime.png&quot;; girltime.style.top = &quot;-174px&quot;; girltime.style.left = &quot;-336px&quot;; girltime.style.transform = &quot;rotate(20deg)&quot;; &#125; //2017 else if(yearSelect.selectedIndex==2)&#123; girlImg.src = &quot;girltime.jpg&quot;; girltime.style.top = &quot;-430px&quot;; girltime.style.left = &quot;-400px&quot;; girltime.style.transform = &quot;rotate(36deg)&quot;; &#125; &#125; /*=================================================*/ /* 美女时钟的完整实现 */ //偏移量 var offsetTime; /* 不同年份设置不同的图片和时间板的位置 更改时间 */ function yearChange()&#123; /* 不同年份设置不同的图片和时间板的位置 通过js设置css参数 */ var yearSelect = document.getElementById(&quot;year&quot;); var options = yearSelect.options; var girlImg = document.getElementById(&quot;girlImg&quot;); var girltime = document.getElementById(&quot;girltime&quot;); if(yearSelect.selectedIndex==0)&#123; girlImg.src = &quot;girltime1.jpg&quot;; girltime.style.top = &quot;-280px&quot;; girltime.style.left = &quot;-620px&quot;; girltime.style.transform = &quot;rotate(-6deg)&quot;; &#125;else if(yearSelect.selectedIndex==1)&#123; girlImg.src = &quot;girltime.png&quot;; girltime.style.top = &quot;-174px&quot;; girltime.style.left = &quot;-336px&quot;; girltime.style.transform = &quot;rotate(20deg)&quot;; &#125;else if(yearSelect.selectedIndex==2)&#123; girlImg.src = &quot;girltime.jpg&quot;; girltime.style.top = &quot;-430px&quot;; girltime.style.left = &quot;-400px&quot;; girltime.style.transform = &quot;rotate(36deg)&quot;; &#125; /* 更改时间 */ var date = new Date(); //[1]获取现在时间戳 (毫秒) var nowTime = date.getTime(); var selectOption = options[yearSelect.selectedIndex]; //获取想要查询的年份 var intYear = parseInt(selectOption.value); //将获取到的年份设置到date里 date.setFullYear(intYear); //[2]获取修改后的时间戳 var changeTime = date.getTime(); //计算时间偏移量 offsetTime = changeTime - nowTime; &#125; function setGirlTime()&#123; var date = new Date(); if(offsetTime)&#123; var nowTime = date.getTime(); //重新计算时间戳 var curTime = nowTime + offsetTime; //重写设置到日期对象中 date.setTime(curTime); &#125; var txt = &quot;&quot;; var weeks = [&quot;日&quot;,&quot;一&quot;,&quot;二&quot;,&quot;三&quot;,&quot;四&quot;,&quot;五&quot;,&quot;六&quot;]; txt += &quot;星期&quot;+weeks[date.getDay()] + &quot;&quot;; txt += date.getHours() + &quot;:&quot;; txt += date.getMinutes() + &quot;:&quot;; txt += date.getSeconds(); var girltime = document.getElementById(&quot;girltime&quot;); girltime.innerHTML = txt; setTimeout(setGirlTime,1000); &#125; //控制台 Demo1(); yearChange(); setGirlTime(); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 2.[作业] ** ** TimeTask.html version:20190915 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;style&gt; body&#123; text-align:center; &#125; img&#123; margin-top:20px; &#125; #girltime&#123; position:relative; display:inline-block; font-size:20px; color:white; font-family: 微软雅黑; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;美女时钟 version:20190915&lt;/h3&gt; &lt;div&gt; &lt;select id=&quot;year&quot;&gt; &lt;option value=&quot;2019&quot;&gt;2019&lt;/option&gt; &lt;option value=&quot;2018&quot;&gt;2018&lt;/option&gt; &lt;option value=&quot;2017&quot;&gt;2017&lt;/option&gt; &lt;/select&gt; &lt;span&gt;年&lt;/span&gt; &lt;select id=&quot;month&quot; onchange=&quot;dayList()&quot;&gt; &lt;!-- monthList()自动生成 --&gt; &lt;/select&gt; &lt;span&gt;月&lt;/span&gt; &lt;select id=&quot;day&quot;&gt; &lt;!-- monthList()自动生成 --&gt; &lt;/select&gt; &lt;span&gt;日&lt;/span&gt; &lt;select id=&quot;hour&quot;&gt; &lt;!-- monthList()自动生成 --&gt; &lt;/select&gt; &lt;span&gt;时&lt;/span&gt; &lt;select id=&quot;minute&quot;&gt; &lt;!-- monthList()自动生成 --&gt; &lt;/select&gt; &lt;span&gt;分&lt;/span&gt; &lt;select id=&quot;second&quot;&gt; &lt;!-- monthList()自动生成 --&gt; &lt;/select&gt; &lt;span&gt;秒&lt;/span&gt; &lt;button onclick = &quot;yearChange()&quot;&gt;查询&lt;/button&gt; &lt;/div&gt; &lt;div &gt; &lt;img id=&quot;girlImg&quot;/&gt; &lt;label id=&quot;girltime&quot;&gt;&lt;/label&gt; &lt;/div&gt; &lt;script&gt; function monthList()&#123; var monthSelect = document.getElementById(&quot;month&quot;); var monthOptions = monthSelect.options; for(var i=1;i&lt;=12;i++)&#123; monthOptions.add(new Option(i,i)); &#125; &#125; function dayList()&#123; var monthSelect = document.getElementById(&quot;month&quot;); var monthoptions = monthSelect.options; var monthselectOption = monthoptions[monthSelect.selectedIndex]; var intMonth = parseInt(monthselectOption.value); var daySelect = document.getElementById(&quot;day&quot;); var dayOptions = daySelect.options; if(intMonth==2)&#123; for(var i=1;i&lt;=28;i++)&#123; dayOptions.add(new Option(i,i)); &#125; &#125;else if(intMonth==1||intMonth==3||intMonth==5||intMonth==7 ||intMonth==8||intMonth==10||intMonth==12)&#123; for(var i=1;i&lt;=31;i++)&#123; dayOptions.add(new Option(i,i)); &#125; &#125;else &#123; for(var i=1;i&lt;=30;i++)&#123; dayOptions.add(new Option(i,i)); &#125; &#125; &#125; function hourList()&#123; var hourSelect = document.getElementById(&quot;hour&quot;); var hourOptions = hourSelect.options; for(var i=1;i&lt;=24;i++)&#123; hourOptions.add(new Option(i,i)); &#125; &#125; function minuteList()&#123; var minuteSelect = document.getElementById(&quot;minute&quot;); var minuteOptions = minuteSelect.options; for(var i=1;i&lt;=60;i++)&#123; minuteOptions.add(new Option(i,i)); &#125; &#125; function secondList()&#123; var minuteSelect = document.getElementById(&quot;second&quot;); var minuteOptions = minuteSelect.options; for(var i=1;i&lt;=60;i++)&#123; minuteOptions.add(new Option(i,i)); &#125; &#125; var offsetTime; function yearChange()&#123; var yearSelect = document.getElementById(&quot;year&quot;); var options = yearSelect.options; var girlImg = document.getElementById(&quot;girlImg&quot;); var girltime = document.getElementById(&quot;girltime&quot;); if(yearSelect.selectedIndex==0)&#123; girlImg.src = &quot;girltime1.jpg&quot;; girltime.style.top = &quot;-280px&quot;; girltime.style.left = &quot;-620px&quot;; girltime.style.transform = &quot;rotate(-6deg)&quot;; &#125;else if(yearSelect.selectedIndex==1)&#123; girlImg.src = &quot;girltime.png&quot;; girltime.style.top = &quot;-174px&quot;; girltime.style.left = &quot;-336px&quot;; girltime.style.transform = &quot;rotate(20deg)&quot;; &#125;else if(yearSelect.selectedIndex==2)&#123; girlImg.src = &quot;girltime.jpg&quot;; girltime.style.top = &quot;-430px&quot;; girltime.style.left = &quot;-400px&quot;; girltime.style.transform = &quot;rotate(36deg)&quot;; &#125; //Year var selectOption = options[yearSelect.selectedIndex]; var intYear = parseInt(selectOption.value); //Month var monthSelect = document.getElementById(&quot;month&quot;); var monthoptions = monthSelect.options; var monthselectOption = monthoptions[monthSelect.selectedIndex]; var intMonth = parseInt(monthselectOption.value); //Day var daySelect = document.getElementById(&quot;day&quot;); var dayoptions = daySelect.options; var dayselectOption = dayoptions[daySelect.selectedIndex]; var intDay = parseInt(dayselectOption.value); //Hour var hourSelect = document.getElementById(&quot;hour&quot;); var houroptions = hourSelect.options; var hourselectOption = houroptions[hourSelect.selectedIndex]; var intHour = parseInt(hourselectOption.value); //Minute var minuteSelect = document.getElementById(&quot;minute&quot;); var minuteoptions = minuteSelect.options; var minuteselectOption = minuteoptions[minuteSelect.selectedIndex]; var intMinute = parseInt(minuteselectOption.value); //Second var secondSelect = document.getElementById(&quot;second&quot;); var secondoptions = secondSelect.options; var secondselectOption = secondoptions[secondSelect.selectedIndex]; var intSecond = parseInt(secondselectOption.value); var date = new Date(); var nowTime = date.getTime(); date.setFullYear(intYear); date.setMonth(intMonth-1); date.setDate(intDay); date.setHours(intHour); date.setMinutes(intMinute); date.setSeconds(intSecond); var changeTime = date.getTime(); offsetTime = changeTime - nowTime; &#125; function setGirlTime()&#123; var date = new Date(); if(offsetTime)&#123; var nowTime = date.getTime(); var curTime = nowTime + offsetTime; date.setTime(curTime); &#125; var txt = &quot;&quot;; var weeks = [&quot;日&quot;,&quot;一&quot;,&quot;二&quot;,&quot;三&quot;,&quot;四&quot;,&quot;五&quot;,&quot;六&quot;]; var doubleTime = [&quot;00&quot;,&quot;01&quot;,&quot;02&quot;,&quot;03&quot;,&quot;04&quot;,&quot;05&quot;,&quot;06&quot;,&quot;07&quot;,&quot;08&quot;,&quot;09&quot;]; txt += &quot;星期&quot;+weeks[date.getDay()] + &quot;&quot;; if(date.getHours()&lt;10)&#123; txt += doubleTime[date.getHours()] + &quot;:&quot;; &#125;else&#123; txt += date.getHours() + &quot;:&quot;; &#125; if(date.getMinutes()&lt;10)&#123; txt += doubleTime[date.getMinutes()] + &quot;:&quot;; &#125;else&#123; txt += date.getMinutes() + &quot;:&quot;; &#125; if(date.getSeconds()&lt;10)&#123; txt += doubleTime[date.getSeconds()]; &#125;else&#123; txt += date.getSeconds(); &#125; var girltime = document.getElementById(&quot;girltime&quot;); girltime.innerHTML = txt; setTimeout(setGirlTime,1000); &#125; //控制台 monthList(); hourList(); minuteList(); secondList(); setGirlTime(); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第56次课程","slug":"技术向/Java/源辰课程记录/第56次课程","date":"2019-09-09T16:00:00.000Z","updated":"2022-05-11T01:20:18.009Z","comments":true,"path":"技术向/Java/源辰课程记录/第56次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC56%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第56次课程 09.10.2019 内容 JS内置核心语言对象[廖彦] 1.创建对象 01.html 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 创建对象 console 控制台输出 --&gt; &lt;script&gt; //创建对象方式一 var o = new Object(); //动态添加属性 o.phone = &quot;13800001111&quot;; for(var s in o)&#123; //console 控制台 //console.log(); 在控制台以日志的方式输出对象内容 //for in 循环对象时，s表示 对象属性名 //o[s] 输出属性值，例如 o.name === [&quot;name&quot;] console.log(s + &quot;:&quot; + o[s]); &#125; console.log(&quot;================&quot;); o.name = &quot;张三&quot;; o.age = 12; o.sex = &quot;男&quot;; for(var s in o)&#123; console.log(s + &quot;:&quot; + o[s]); &#125; //创建对象方式二 var o1 = &#123;name:&quot;李四&quot;,age:12&#125; // == new Object() o1.idcard = &quot;430403xxxxxxx&quot;; //.log 和 .info 显示等级不同 console.info(o1); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 2.定时器 字体（加粗、加大字号、斜体） 02.html 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 定时器 --&gt; &lt;script&gt; function test()&#123;&#125; var s = &quot;张三；男；13；13800001111&quot;; var arr = s.split(&quot;；&quot;); var person = &#123;&#125;; person.name = arr[0]; person.sex = arr[1]; person.age = parseInt(arr[2]); person.phone = arr[3]; console.info(person); //setTimeout(&quot;test()&quot;,2000); //设置指定方法在X毫秒后执行 //setTnterval(&quot;test()&quot;,1000); //设置指定方法连续不断的以X毫秒间隔执行 &lt;/script&gt; &lt;div&gt; &lt;script type=&quot;text/javascript&quot;&gt; var txt1 = &quot;由于链接众多，错误之处在所难免&quot;; var txt2 = &quot;希望各位用户指正&quot;; var txt3 = &quot;由此带来的一切后果，本人概不负责&quot;; document.write(txt1.bold()); //加粗 document.write(txt2.big()); //加大字号 document.write(txt3.italics()); //斜体 &lt;/script&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 3.字符串截取 03.html 123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;dtxt&quot;&gt;&lt;/div&gt; &lt;script&gt; var txt = &quot;由于链接众多，错误之处在所难免，希望各位用户指正。由此带来的一切后果，本人概不负责。&quot;; var index = 0; function run()&#123; //substring截取字符 从第几个到第几个 不填写则到最后 var txt0 = txt.substring(0,index); //获取单个字符 var txt1 = txt.charAt(index); var txt2 = txt.substring(index+1); txt1 = txt1.bold().big().fontcolor(&quot;red&quot;);; txtAll = txt0 + txt1 + txt2; // 每一个id 都是一个dom对象 //innerHTML 将字符串添加到HTML字符串中 dtxt.innerHTML = txtAll; index++; if(index&gt;=txt.length)&#123; index = 0; &#125; //设置下次运行时间 setTimeout(&quot;run()&quot;,50); &#125; run(); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 4.[案例]跑马灯 1.数组创建的四种方式 2.字符数组.join 将字符数组 拼接成 字符串 3. 字符数组.shift() 弹出第一个位置的元素 字符数组.push(“a”) 追加一个元素，并放入最后的位置 PaoMaDeng.html 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;dtxt&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; var txt = &quot;由于链接众多，错误之处在所难免，希望各位用户指正。由此带来的一切后果，本人概不负责。&quot;; function runBase()&#123; var txt1 = txt.substr(0,1); var txt2 = txt.substring(1); txt = txt2 + txt1; dtxt.innerHTML = txt; setTimeout(&quot;runBase()&quot;,220); &#125; //将字符串转成 字符数组 var txtarr = []; for(var i=0;i&lt;txt.length;i++)&#123; txtarr.push(txt.charAt(i)); &#125; function runArr()&#123; var arr = new Array();//创建长度为0的数组 var arr = new Array(10); //创建长度为10的数组 var arr = []; //创建长度为0的数组 var arr = [1,2,3,4]; //创建指定内容数组 //js 数组没有越界 //arr[10] === undefined; //arr[10] = &quot;12&quot;; //设置数组元素 //.join 将字符数组 拼接成 字符串 //var arrstr = arr.join(&quot;:&quot;); //.shift() 弹出第一个位置的元素 //.push(&quot;a&quot;) 追加一个元素，并放入最后的位置 //思想：弹出第一个字符，放到数组最后，反复 var txt1 = txtarr.shift(); txtarr.push(txt1); txt = txtarr.join(&quot;&quot;); dtxt.innerHTML = txt; //设置下一次运行时间 setTimeout(&quot;runArr()&quot;,220); &#125; //普通跑马灯 runBase(); //数组实现跑马灯 runArr(); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第55次课程","slug":"技术向/Java/源辰课程记录/第55次课程","date":"2019-09-08T16:00:00.000Z","updated":"2022-05-11T01:20:01.575Z","comments":true,"path":"技术向/Java/源辰课程记录/第55次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC55%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第55次课程 09.09.2019 内容 JS基本语法[廖彦] 0.知识要点 alert(“字符串”); 将字符串以弹窗的形式显示 document.write(“&lt;&gt;字符串&lt;&#x2F;&gt;”)； 将生成HTML代码在页面上显示 1.JS内联、内部和外部 和CSS十分相似 01.html 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--内部--&gt; &lt;script type=&quot;text/javascript&quot;&gt; alert(&quot;hello world!&quot;); &lt;/script&gt; &lt;!--外部--&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;01.js&quot;&gt;&lt;/script&gt; &lt;!--内联--&gt; &lt;button onclick=&quot;alert(&#x27;你好衡阳&#x27;)&quot;&gt;按钮&lt;/button&gt; &lt;!--双引号内部使用单引号--&gt;&lt;/body&gt;&lt;/html&gt; 01.js 1alert(&quot;你好中国!&quot;); **2.**function 02.html 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot;&gt; function add( a,b )&#123; return a + b; &#125; sub = function( a,b )&#123; return a - b; &#125; //js 没有重载，后写的同名函数会覆盖之前的函数 function add( a,b,c )&#123; //arguments 用于存放传入函数的所有参数 var sum = 0; for(var i=0;i&lt;arguments.length;i++)&#123; sum += arguments[i]; &#125; return sum; &#125; //js 函数的参数可以任意输入 alert(add(1,2,3,4,5,6)); alert(sub(3,2)); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; **3.**全局变量&#x2F;局部变量 03.html 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- js 全局变量/局部变量 --&gt;&lt;script type=&quot;text/javascript&quot;&gt; //在script标签内定义变量是全局变量 var a = 100; function test()&#123; //在函数内定义变量是局部变量 var b = 200; alert(&quot;test():&quot;+a); alert(&quot;test():&quot;+b); &#125; test();&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; alert(&quot;after input:&quot;+a); alert(&quot;after input:&quot;+b);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 4.for-in 04.html 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot;&gt; var a = 100; var b = &quot;100&quot;; document.write((a==b) + &quot;&quot;); document.write((a===b) + &quot;&quot;); //定义数组 var arr = [11,22,33,44]; //for-in 类似java中 增强for for(var a in arr)&#123; document.write(arr[a] + &quot;&quot;); &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 5.[案例]海盗旗 05HaiDaoQi.html 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot;&gt; var level = 5; //打印海盗旗 for(var i=0;i&lt;level;i++)&#123; for(var j=0;j&lt;=i;j++)&#123; document.write(&quot;*&quot;); &#125; document.write(&quot;&quot;); &#125; //打印金字塔 for (var i = 1; i &lt;= level; i++) &#123; for (var j = 1; j &lt;= level - i; j++) &#123; //几种不同类型的空格 nbsp ensp emsp document.write(&quot;&amp;nbsp;&quot;); &#125; for (var k = 1; k &lt;= i * 2 - 1; k++) &#123; document.write(&quot;*&quot;); &#125; document.write(&quot;&quot;); &#125; //打印表情海盗旗 for(var i=0;i&lt;level;i++)&#123; for(var j=0;j&lt;=i;j++)&#123; //html标签 引入图片 document.write(&quot;&lt;img src=&#x27;img/timg.jpg&#x27; width=&#x27;50px&#x27;&quot;); &#125; document.write(&quot;&quot;); &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第54次课程","slug":"技术向/Java/源辰课程记录/第54次课程","date":"2019-09-04T16:00:00.000Z","updated":"2022-05-11T01:19:48.054Z","comments":true,"path":"技术向/Java/源辰课程记录/第54次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC54%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第54次课程 09.05.2019 内容 java解析XML[蒋斌] **1.SAX解析器 **作业讲解 SAX解析器 SAX一行一行读取 startElement：开始读取标记体&lt;标记&gt; endElement：结束读取标记体&lt;&#x2F;标记&gt; characters：读取标记体字符串 db.xml 12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!-- 连接数据库配置文件 --&gt;&lt;dbconfig&gt; &lt;db&gt; &lt;driver&gt;oracle.jdbc.driver.OracleDriver&lt;/driver&gt; &lt;url&gt;jdbc:oracle:thin:@localhost:1521:orcl&lt;/url&gt; &lt;username&gt;scott&lt;/username&gt; &lt;pass&gt;tiger&lt;/pass&gt; &lt;/db&gt;&lt;/dbconfig&gt; SAXRead.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384package task;import javax.xml.parsers.SAXParser;import javax.xml.parsers.SAXParserFactory;import org.xml.sax.Attributes;import org.xml.sax.SAXException;import org.xml.sax.XMLReader;import org.xml.sax.helpers.DefaultHandler;/*** SAX解析器* SAX一行一行读取* startElement：开始读取标记体&lt;标记&gt; endElement：结束读取标记体&lt;/标记&gt; characters：读取标记体字符串*/public class SAXRead extends DefaultHandler &#123; public static SAXRead sr; public SAXRead() &#123; //创建解析器工厂 SAXParserFactory factory = SAXParserFactory.newInstance(); try &#123; //通过解析器工厂创建解析器 SAXParser parser = factory.newSAXParser(); //通过解析器创建读取器 XMLReader xmlReader = parser.getXMLReader(); //注册事件处理器 xmlReader.setContentHandler(this); //设置xml文件路径 xmlReader.parse(SAXRead.class.getClassLoader().getResource(&quot;db.xml&quot;).getPath()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; public static void main(String[] args) &#123; SAXRead saxRead = new SAXRead(); DB opendb = saxRead.db; System.out.println(opendb); &#125; public static DB newInstance() &#123; if(sr==null) &#123; sr = new SAXRead(); &#125; return sr.db; &#125; public DB db; private String qName; //开始读取标记体&lt;标记&gt; @Override public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException &#123; this.qName = qName; if(&quot;db&quot;.equals(qName)) &#123; db = new DB(); &#125; &#125; //读取标记体字符串 @Override public void characters(char[] ch, int start, int length) throws SAXException &#123; if(&quot;driver&quot;.equals(qName)) &#123; db.setDriver(new String(ch,start,length)); &#125; if(&quot;url&quot;.equals(qName)) &#123; db.setUrl(new String(ch,start,length)); &#125; if(&quot;pass&quot;.equals(qName)) &#123; db.setPass(new String(ch,start,length)); &#125; if(&quot;username&quot;.equals(qName)) &#123; db.setUsername(new String(ch,start,length)); &#125; //若无qName = null，每次读取完&lt;标记&gt;后，再读取&lt;/标记&gt;将其覆盖，导致输出不正常 qName = null; &#125; //结束读取标记体&lt;/标记&gt; @Override public void endElement(String uri, String localName, String qName) throws SAXException &#123; // TODO 自动生成的方法存根 super.endElement(uri, localName, qName); &#125;&#125; DBHelper.java 12345678910111213141516171819202122232425262728293031package task;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;/**** @author Hooy* 读取XML配置文件后，用于连接数据库*/public class DBHelper &#123; static &#123; try &#123; Class.forName(SAXRead.newInstance().getDriver()); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; &#125; public static void main(String[] args) &#123; openConnection(); &#125; public static void openConnection() &#123; try &#123; Connection conn = DriverManager.getConnection(SAXRead.newInstance().getUrl(),SAXRead.newInstance().getUsername(),SAXRead.newInstance().getPass()); System.out.println(conn); &#125; catch (SQLException e) &#123; // TODO 自动生成的 catch 块 e.printStackTrace(); &#125; &#125;&#125; DB.java 12345678910111213141516171819202122232425262728293031323334353637383940package task;/**** @author Hooy* 封装读取到的XML配置文件信息*/public class DB &#123; private String driver; private String url; private String username; private String pass; public String getDriver() &#123; return driver; &#125; public void setDriver(String driver) &#123; this.driver = driver; &#125; public String getUrl() &#123; return url; &#125; public void setUrl(String url) &#123; this.url = url; &#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username; &#125; public String getPass() &#123; return pass; &#125; public void setPass(String pass) &#123; this.pass = pass; &#125; @Override public String toString() &#123; return &quot;DB [driver=&quot; + driver + &quot;, url=&quot; + url + &quot;, username=&quot; + username + &quot;, pass=&quot; + pass + &quot;]&quot;; &#125;&#125; 2.旧Dom解析器 W3C.DOM Document和Element区别： Document：对象是整个xml文档 Element：对象是通过**.getElementsByTagName(“标记名”)**已选择的结点 book.xml 12345678910111213&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;books&gt; &lt;book&gt; &lt;name&gt;西游记&lt;/name&gt; &lt;author&gt;吴承恩&lt;/author&gt; &lt;price&gt;100&lt;/price&gt; &lt;/book&gt; &lt;book&gt; &lt;name&gt;红楼梦&lt;/name&gt; &lt;author&gt;曹雪芹&lt;/author&gt; &lt;price&gt;200&lt;/price&gt; &lt;/book&gt;&lt;/books&gt; Dom.java 123456789101112131415161718192021222324252627282930313233343536373839404142package dom;import java.io.IOException;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import org.w3c.dom.Document;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xml.sax.SAXException;/**** @author Hooy* Dom解析器* 将整个xml文档信息读入内存当中，产生一个Document对象，再从这个对象中获取所需要的信息*/public class Dom &#123; public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException &#123; //创建解析器工厂 DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); //通过解析器工厂创建dom解析器 DocumentBuilder builder = factory.newDocumentBuilder(); //获取xml文件路径，生成Document对象 Document doc = builder.parse(&quot;book.xml&quot;); //阶梯编程 //.getElementsByTagName 按文档顺序返回包含在文档中且具有给定标记名称的所有 Element 的 NodeList NodeList nlist = doc.getElementsByTagName(&quot;name&quot;); //此处 [&lt;name&gt;西游记&lt;/name&gt;][&lt;name&gt;红楼梦&lt;/name&gt;] Node node = nlist.item(1); //此处 [&lt;name&gt;红楼梦&lt;/name&gt;] Node firstNode = node.getFirstChild(); //此处 [红楼梦] String nodeValue = firstNode.getNodeValue(); //此处 红楼梦 System.out.println(nodeValue); /* //链式编程 String value = doc.getElementsByTagName(&quot;name&quot;).item(1).getFirstChild().getNodeValue(); //System.out.println(value); */ &#125;&#125; SunDom.java 12345678910111213141516171819202122232425262728293031323334package dom;import java.io.IOException;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.NodeList;import org.xml.sax.SAXException;public class SunDom &#123; public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException &#123; DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); DocumentBuilder builder = factory.newDocumentBuilder(); Document doc = builder.parse(&quot;book.xml&quot;); NodeList nodeList = doc.getElementsByTagName(&quot;book&quot;); /*此处 [&lt;book&gt; &lt;name&gt;西游记&lt;/name&gt; &lt;author&gt;吴承恩&lt;/author&gt; &lt;price&gt;100&lt;/price&gt; &lt;/book&gt;] [&lt;book&gt; &lt;name&gt;红楼梦&lt;/name&gt; &lt;author&gt;曹雪芹&lt;/author&gt; &lt;price&gt;200&lt;/price&gt; &lt;/book&gt;] */ for(int i=0;i&lt;nodeList.getLength();i++) &#123; Element ele = (Element)nodeList.item(i); String value = ele.getElementsByTagName(&quot;author&quot;).item(0).getFirstChild().getNodeValue(); System.out.println(value); &#125; &#125;&#125; **3.主流Dom **org.dom4j 通过SAXReader读取XML文档，然后Document生成document对象 首先通过.getRootElement()找到第一个标记&lt;根标记&gt;,然后通过它迭代器，找出其子结点。 Dom4jDemo.java 12345678910111213141516171819202122232425262728293031323334package dom;import java.util.Iterator;import org.dom4j.Document;import org.dom4j.DocumentException;import org.dom4j.Element;import org.dom4j.io.SAXReader;public class Dom4jDemo &#123; public static void main(String[] args) &#123; SAXReader reader = new SAXReader(); try &#123; //通过SAXReader读取XML文档，然后Document生成document对象 Document document = reader.read(&quot;book.xml&quot;); //根标记 Element rootElement = document.getRootElement(); //获取迭代器——内含两个book标记 Iterator iterator = rootElement.elementIterator(); while(iterator.hasNext()) &#123; Element ele = (Element)iterator.next(); for(Iterator ii=ele.elementIterator();ii.hasNext();) &#123; //[name][author][price] Element cele = (Element)ii.next(); //.getName() 获取标记名 if(&quot;name&quot;.equals(cele.getName())) &#123; //.getText() 获取字符串 String text = cele.getText(); System.out.println(text); &#125; &#125; &#125; &#125; catch (DocumentException e) &#123; e.printStackTrace(); &#125; &#125;&#125; **4.**org.dom4j案例（天气预报XML） Method.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788package dom;import java.io.IOException;import java.io.InputStream;import java.net.MalformedURLException;import java.net.URL;import java.net.URLConnection;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import org.dom4j.Document;import org.dom4j.DocumentException;import org.dom4j.Element;import org.dom4j.io.SAXReader; public class Method &#123; private static String SERVICES_HOST = &quot;www.webxml.com.cn&quot;; //查询天气国家 private static String WEATHER_COUNTRY_URL =&quot;http://webservice.webxml.com.cn/WebServices/WeatherWS.asmx/getRegionCountry&quot;; //获得中国省份、直辖市、地区和与之对应的ID private static String WEATHER_PRVO_URL = &quot;http://ws.webxml.com.cn/WebServices/WeatherWS.asmx/getRegionProvince&quot;; //查询城市 private static String WEATHER_CITY_URL = &quot;http://ws.webxml.com.cn/WebServices/WeatherWS.asmx/getSupportCityString?theUserID=&amp;theRegionCode=&quot;; //天气查询地址 private static String WEATHER_QUERY_URL =&quot;http://ws.webxml.com.cn/WebServices/WeatherWS.asmx/getWeather?theUserID=&amp;theCityCode=&quot;; public static InputStream getsopInput(String url) &#123; InputStream inputStream = null; try &#123; URL uobj = new URL(url); URLConnection connection = uobj.openConnection(); connection.setRequestProperty(&quot;Host&quot;, SERVICES_HOST); connection.connect(); inputStream = connection.getInputStream(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; return inputStream; &#125; //查询所有的省份 public static List&lt;String&gt; getPRVO()&#123; List&lt;String&gt; list = new ArrayList&lt;String&gt;() ; SAXReader saxReader = new SAXReader(); InputStream input = getsopInput(WEATHER_PRVO_URL); try &#123; Document document = saxReader.read(input); Element rootElement = document.getRootElement(); Iterator iterator = rootElement.elementIterator(); while(iterator.hasNext()) &#123; Element ele = (Element)iterator.next(); list.add(ele.getText()); &#125; &#125; catch (DocumentException e) &#123; // TODO 自动生成的 catch 块 e.printStackTrace(); &#125; return list; &#125; //获取当前省份下的城市 private static List&lt;String&gt; getCity(int code) &#123; List&lt;String&gt; list = new ArrayList&lt;String&gt;(); InputStream input = getsopInput(WEATHER_CITY_URL+code); SAXReader saxReader = new SAXReader(); Document document; try &#123; document = saxReader.read(input); Element rootElement = document.getRootElement(); Iterator iterator = rootElement.elementIterator(); while(iterator.hasNext()) &#123; Element ele = (Element)iterator.next(); list.add(ele.getText()); System.out.println(ele.getText()); &#125; &#125; catch (DocumentException e) &#123; e.printStackTrace(); &#125; return list; &#125; public static void main(String[] args) &#123; new Method().getCity(31118); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第53次课程","slug":"技术向/Java/源辰课程记录/第53次课程","date":"2019-09-02T16:00:00.000Z","updated":"2022-05-11T01:19:33.538Z","comments":true,"path":"技术向/Java/源辰课程记录/第53次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC53%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第53次课程 09.03.2019 内容 XML简介及DTD[蒋斌] 1.初步了解 Demo.xml 12345678910111213&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&lt;students&gt; &lt;student&gt; &lt;name&gt;张三&lt;/name&gt; &lt;age&gt;18&lt;/age&gt; &lt;sex&gt;男&lt;/sex&gt; &lt;/student&gt; &lt;student&gt; &lt;name&gt;李四&lt;/name&gt; &lt;age&gt;18&lt;/age&gt; &lt;sex&gt;女&lt;/sex&gt; &lt;/student&gt;&lt;/students&gt; 2.内部约束 innerDtd.xml 12345678910111213&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!-- DTD内部约束 --&gt;&lt;!DOCTYPE students[&lt;!ELEMENT students (student)&gt;&lt;!ELEMENT student (name,age,sex)&gt;]&gt;&lt;students&gt; &lt;student&gt; &lt;name&gt;Hooy&lt;/name&gt; &lt;age&gt;21&lt;/age&gt; &lt;sex&gt;男&lt;/sex&gt; &lt;/student&gt;&lt;/students&gt; 3.外部约束 outDtd.xml 12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!-- DTD外部约束 --&gt;&lt;!DOCTYPE students SYSTEM &quot;outDtd.dtd&quot;&gt;&lt;students&gt; &lt;student&gt; &lt;name&gt;Hooy&lt;/name&gt; &lt;age&gt;21&lt;/age&gt; &lt;sex&gt;男&lt;/sex&gt; &lt;/student&gt;&lt;/students&gt; outDtd.dtd 123&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!ELEMENT students (student)&gt;&lt;!ELEMENT student (name,age,sex)&gt; 4.#PCDATA EMPTY ANY peom.xml 123456789101112131415&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!-- (#PCDATA) 标记内均为字符 EMPTY 标记内容为空 可直接将标记写为：&lt;标记名/&gt; ANY 允许标记内存在其他标记，如&lt;a&gt;&lt;/a&gt; --&gt;&lt;!DOCTYPE peom [&lt;!ELEMENT peom (author,title,content)&gt;&lt;!ELEMENT author (#PCDATA)&gt;&lt;!ELEMENT title EMPTY&gt;&lt;!ELEMENT content ANY&gt;]&gt;&lt;peom&gt;&lt;author&gt;作者###&lt;/author&gt;&lt;title/&gt;&lt;content&gt;内容&lt;/content&gt;&lt;/peom&gt; 5.+ * !ATTLIST #IMPLIED #REQUIRED CDATA family.xml 123456789101112131415&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!-- + 至少存在一个以上标记 * 至少存在零个以上标记 ENPTY 标记内容为空 !ATTLIST 标记属性 #IMPLIED 选填 #REQUIRED 必填 CDATA 字符串 --&gt;&lt;!DOCTYPE 家庭 [&lt;!ELEMENT 家庭 (人+,家电*)&gt;&lt;!ELEMENT 人 EMPTY&gt;&lt;!ATTLIST 人 婚姻状态 (single|married|divorced|widowed) #IMPLIED 性别 (男|女) #REQUIRED 名字 CDATA #REQUIRED&gt;]&gt; 6.ID唯一约束 #FIXED固定值 fixed.xml 1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!-- -组合约束- ID 唯一约束 文本 #FIXED 固定值 直接写参数，如&quot;1000000&quot; 默认值 运行XML文件时，即使没写此标记，也将直接展示出来--&gt;&lt;!DOCTYPE 家庭 [&lt;!ELEMENT 家庭 (人+)&gt;&lt;!ELEMENT 人 EMPTY&gt;&lt;!ATTLIST 人 身份证 ID #REQUIRED 姓名 CDATA #REQUIRED company CDATA #FIXED &quot;微软&quot; money CDATA &quot;1000000&quot;&gt;]&gt;&lt;家庭&gt; &lt;人 身份证=&quot;A110&quot; 姓名=&quot;张三&quot;/&gt; &lt;人 身份证=&quot;A111&quot; 姓名=&quot;李四&quot; company=&quot;微软&quot;/&gt;&lt;/家庭&gt; 7.配置文件 dbconfig.xml 12345678910111213141516171819202122232425&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!-- 连接数据库配置文件 --&gt;&lt;!DOCTYPE dbconfig [&lt;!ELEMENT dbconfig (db+)&gt;&lt;!ELEMENT db (dirver,url,user,password)&gt;&lt;!ELEMENT dirver (#PCDATA)&gt;&lt;!ELEMENT url (#PCDATA)&gt;&lt;!ELEMENT user (#PCDATA)&gt;&lt;!ELEMENT password (#PCDATA)&gt;&lt;!ATTLIST db type CDATA #REQUIRED&gt;]&gt;&lt;dbconfig&gt; &lt;db type=&quot;oracle&quot;&gt; &lt;dirver&gt;oracle.jdbc.driver.OracleDriver&lt;/dirver&gt; &lt;url&gt;jdbc:oracle:thin:@localhost:1521:orcl&lt;/url&gt; &lt;user&gt;scott&lt;/user&gt; &lt;password&gt;tiger&lt;/password&gt; &lt;/db&gt; &lt;db type=&quot;mysql&quot;&gt; &lt;dirver&gt;com.mysql.jdbc.Driver&lt;/dirver&gt; &lt;url&gt;jdbc:mysql://localhost:3306/mysql&lt;/url&gt; &lt;user&gt;root&lt;/user&gt; &lt;password&gt;a&lt;/password&gt; &lt;/db&gt;&lt;/dbconfig&gt; 8.XML解析(SAX方式) SAX.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import java.io.IOException;import javax.xml.parsers.ParserConfigurationException;import javax.xml.parsers.SAXParser;import javax.xml.parsers.SAXParserFactory;import org.xml.sax.Attributes;import org.xml.sax.SAXException;import org.xml.sax.XMLReader;import org.xml.sax.helpers.DefaultHandler;public class SAX extends DefaultHandler&#123; public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException &#123; /*获取解析器步骤*/ //1.创建解析器工厂 SAXParserFactory factory = SAXParserFactory.newInstance(); //2.通过工厂创建解析器 SAXParser saxparser = factory.newSAXParser(); //3.通过解析器创建读取器 XMLReader xmlReader = saxparser.getXMLReader(); //4.注册事件处理器(处理函数) xmlReader.setContentHandler(new SAX()); xmlReader.parse(SAX.class.getClassLoader().getResource(&quot;xml/dbconfig.xml&quot;).getPath()); &#125; @Override public void startDocument() throws SAXException &#123; System.out.println(&quot;文档开始&quot;); &#125; //判断 标记属性type值 @Override public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException &#123; System.out.println(qName+&quot;==&quot;+attributes.getValue(&quot;type&quot;)); &#125; //获取 标记中的值 @Override public void characters(char[] ch, int start, int length) throws SAXException &#123; String value = new String(ch,start,length); System.out.println(value); &#125; @Override public void endElement(String uri, String localName, String qName) throws SAXException &#123; System.out.println(qName); &#125; @Override public void endDocument() throws SAXException &#123; System.out.println(&quot;文档结束&quot;); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第51次课程","slug":"技术向/Java/源辰课程记录/第51次课程","date":"2019-07-31T16:00:00.000Z","updated":"2022-05-11T01:18:26.146Z","comments":true,"path":"技术向/Java/源辰课程记录/第51次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC51%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第51次课程 08.01.2019 内容 MIS系统二[廖彦] 1.五子棋（GUI版本） 效果图： 源码： Class WuziWin 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162package wuziqi;import org.eclipse.swt.SWT;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;public class WuziWin &#123; protected Shell shell; /** * Launch the application. * @param args */ public static void main(String[] args) &#123; try &#123; WuziWin window = new WuziWin(); window.open(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; /** * Open the window. */ public void open() &#123; Display display = Display.getDefault(); createContents(); shell.open(); shell.layout(); while (!shell.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; &#125; /** * Create contents of the window. */ protected void createContents() &#123; shell = new Shell(); shell.setSize(1080, 813); shell.setText(&quot;五子棋&quot;); shell.setLayout(null); QiPan qiPan = new QiPan(shell,SWT.NONE); qiPan.setBounds(0,0,764,757); Button button = new Button(shell,SWT.NONE); button.setBounds(837,112,161,34); button.setText(&quot;&quot;); Button button_1 = new Button(shell,SWT.NONE); button_1.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; System.exit(0); &#125; &#125;); button_1.setText(&quot;&quot;); button_1.setBounds(837,181,161,34); &#125;&#125; Class WuziGame 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273package wuziqi;import java.util.HashSet;import java.util.Set;public class WuziGame &#123; public final static String WHITE = &quot;O&quot;; public final static String BLACK = &quot;@&quot;; public final static String SPACE = &quot;+&quot;; //棋盘 private String[][] pan; //当前棋子颜色 private String currentColor = BLACK; private Set&lt;int[]&gt; winSet; //初始化棋盘 WuziGame(int size)&#123; pan = new String[size][size]; &#125; //获取当前棋盘上的棋子颜色 String getZi(int x,int y) &#123; return pan[x][y] == null ? SPACE : pan[x][y]; &#125; /** * 下子 * @throws WuziException */ String downZi(int x,int y) throws WuziException &#123; if(winSet != null) &#123; throw new WuziException(&quot;棋局已经结束！&quot;); &#125; if(pan[x][y] == null) &#123; pan[x][y] = currentColor; currentColor = currentColor == BLACK ? WHITE : BLACK; &#125; return getZi(x,y); &#125; //获取棋盘大小 int getSize() &#123; return pan.length; &#125; /** * 判断输赢 */ boolean panduan(String color,int x,int y) &#123; //定义4个方向的走向 x,y的变化值 int[][] a = &#123;&#123;-1,0,1,0&#125;,&#123;0,-1,0,1&#125;,&#123;-1,-1,1,1&#125;,&#123;-1,1,1,-1&#125;&#125;; //判断4个方向是是否有5子连珠 for(int i=0;i&lt;a.length;i++) &#123; Set&lt;int[]&gt; ziSet = new HashSet&lt;int[]&gt;(); for(int j=0;j&lt;3;j+=2) &#123; for(int x1=x,y1=y;x1&gt;=0&amp;&amp;y1&gt;=0&amp;&amp;x1&lt;getSize()&amp;&amp;y1&lt;getSize();x1+=a[i][j],y1+=a[i][j+1]) &#123; if(color.equals(getZi(x1,y1))) &#123; ziSet.add(new int[] &#123;x1,y1&#125;); &#125;else &#123; break; &#125; &#125; &#125; if(ziSet.size()&gt;5) &#123; winSet = new HashSet&lt;int[]&gt;(); winSet.addAll(ziSet); return true; &#125; &#125; return false; &#125; public Set&lt;int[]&gt; getWinSet()&#123; return winSet; &#125;&#125; Class WuziException 1234567891011package wuziqi;public class WuziException extends Exception &#123; public WuziException() &#123; super(); &#125; public WuziException(String message) &#123; super(message); &#125;&#125; Class QiPan 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182package wuziqi;import org.eclipse.swt.events.MouseTrackAdapter;import org.eclipse.swt.graphics.Font;import org.eclipse.swt.graphics.Image;import org.eclipse.swt.widgets.Composite;import org.eclipse.swt.widgets.Label;import org.eclipse.wb.swt.SWTResourceManager;import org.eclipse.swt.layout.GridLayout;import org.eclipse.jface.dialogs.MessageDialog;import org.eclipse.swt.SWT;import org.eclipse.swt.events.MouseEvent;import org.eclipse.swt.events.MouseAdapter;public class QiPan extends Composite&#123; final static Image PAN = SWTResourceManager.getImage(WuziWin.class,&quot;/pan.jpg&quot;); final static Image BAI = SWTResourceManager.getImage(WuziWin.class,&quot;/bai.jpg&quot;); final static Image HEI = SWTResourceManager.getImage(WuziWin.class,&quot;/hei.jpg&quot;); public QiPan(Composite parent, int style) &#123; super(parent, style); WuziGame wg = new WuziGame(16); GridLayout gridLayout = new GridLayout(wg.getSize(),true); gridLayout.verticalSpacing = 0; gridLayout.horizontalSpacing = 0; gridLayout.marginHeight = 10; gridLayout.marginWidth = 10 ; setLayout(gridLayout); MouseTrackAdapter mtl = new MouseTrackAdapter() &#123; @Override public void mouseEnter(MouseEvent e) &#123; //鼠标监听，当鼠标移入事件时 Label l = (Label) e.getSource(); if(&quot;+&quot;.equals(l.getText())) &#123; ((Label)e.getSource()).setText(&quot;[+]&quot;); &#125; &#125; @Override public void mouseExit(MouseEvent e) &#123; //鼠标监听，当鼠标移出事件时 Label l = (Label) e.getSource(); if(&quot;[+]&quot;.equals(l.getText())) &#123; ((Label)e.getSource()).setText(&quot;+&quot;); &#125; &#125; &#125;; Font f = new Font(getDisplay(),&quot;微软雅黑&quot;,16,SWT.NORMAL); Font f2 = new Font(getDisplay(),&quot;微软雅黑&quot;,16,SWT.BOLD); Label ls[][] = new Label[wg.getSize()][wg.getSize()]; for(int i =0 ;i&lt;wg.getSize();i++) &#123; for(int j=0;j&lt;wg.getSize();j++) &#123; final int x = i,y = j; Label l = new Label(this,SWT.NONE); ls[i][j] = l; l.setImage(PAN); l.setSize(20, 20); l.setFont(f); l.addMouseListener(new MouseAdapter() &#123; @Override public void mouseUp(MouseEvent e) &#123; Label l = (Label) e.getSource(); if(WuziGame.SPACE.equals(wg.getZi(x,y))) &#123; try &#123; String color = wg.downZi(x, y); l.setImage(&quot;O&quot;.equals(color) ? BAI : HEI); if (wg.panduan(color, x, y)) &#123; for (int[] xy : wg.getWinSet()) &#123; ls[xy[0]][xy[1]].setFont(f2); ls[xy[0]][xy[1]].setForeground(parent.getDisplay().getSystemColor(style)); &#125; MessageDialog.openConfirm(null, &quot;系统提示&quot;, color + &quot;方赢了&quot;); &#125; &#125; catch (Exception e2) &#123; MessageDialog.openConfirm(null, &quot;系统提示&quot;, e2.getMessage()); &#125; &#125; &#125; &#125;); l.addMouseTrackListener(mtl); &#125; &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第52次课程-S1_WebTimeMachina","slug":"技术向/Java/源辰课程记录/第52次课程-S1_WebTimeMachina","date":"2019-07-31T16:00:00.000Z","updated":"2022-05-11T01:19:00.351Z","comments":true,"path":"技术向/Java/源辰课程记录/第52次课程-S1_WebTimeMachina/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC52%E6%AC%A1%E8%AF%BE%E7%A8%8B-S1_WebTimeMachina/","excerpt":"","text":"源辰74班 第52次课程 08.01.2019-08.11.2019 内容 S1项目 WebTimeMachina 项目组成员：胡燕卿 容创伟 肖理达 邵子芸 项目效果图： ** ** ** ** ** ** ** ** ** ** 项目简介： 本项目核心为网页爬虫，获取目标网页数据并保存于本地。 项目源码： WTMwindowpackage org.wtm.demo;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Spinner;import org.eclipse.swt.widgets.Menu;import java.io.IOException;import java.sql.Date;import java.sql.SQLException;import java.sql.SQLSyntaxErrorException;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import org.eclipse.swt.SWT;import org.eclipse.swt.widgets.MenuItem;import org.eclipse.swt.widgets.MessageBox;import org.eclipse.swt.widgets.TabFolder;import org.eclipse.swt.widgets.TabItem;import org.eclipse.swt.widgets.Composite;import org.eclipse.swt.widgets.DateTime;import org.eclipse.swt.widgets.DirectoryDialog;import org.eclipse.swt.widgets.Table;import org.eclipse.swt.widgets.TableColumn;import org.eclipse.swt.widgets.TableItem;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.widgets.Combo;import org.eclipse.swt.events.MenuDetectEvent;import org.eclipse.swt.events.MenuDetectListener;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.events.ShellAdapter;import org.eclipse.swt.widgets.Label;import org.eclipse.wb.swt.SWTResourceManager;import org.eclipse.swt.widgets.Text;import org.eclipse.swt.widgets.Tray;import org.eclipse.swt.widgets.TrayItem;import org.eclipse.swt.events.ShellEvent;public class WTMwindow &#123; protected Shell shellwindow; private Table table; private Text settaskname; private Text settaskresultfile; private Text settaskurlstr; private Text SQLoption; private Text text_6; private Text timerhour; private Text timerminute; private Text text; private Text text_1;// 网站名输入框 肖理达 private Table table_1;// 爬取记录表 肖理达 private Text text_2;// URL输入框 肖理达 private Text text_3;// 任务编号记录框 肖理达 private DateTime dateTime;// 时间下限 肖理达 private DateTime dateTime_1;// 时间上限 肖理达 private Combo combo;// 爬取状态下拉框 肖理达 private Button button_12;// 时间下限勾选框 肖理达 private Button button_13;// 时间上限勾选框 肖理达 private Spinner spinner;// 页码显示器 private Label countrec;// 记录计数器 肖理达 private int recPage = 1; // 当前记录页数,默认第一页 肖理达 private int countRec;// 查询记录总数 肖理达 /** * Launch the application. * * @param args */ public static void main(String[] arg) &#123; try &#123; WTMwindow window = new WTMwindow(); window.open(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; /** * Open the window. */ Display display = Display.getDefault(); public void open() &#123; createContents(); // 居中显示 int x = (display.getBounds().width - shellwindow.getBounds().width) / 2; int y = (display.getBounds().height - shellwindow.getBounds().height) / 2; shellwindow.setLocation(x, y); shellwindow.open(); shellwindow.layout(); while (!shellwindow.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; &#125; /** * Create contents of the window. */ protected void createContents() &#123; shellwindow = new Shell(SWT.CLOSE | SWT.MIN); shellwindow.setSize(800, 450); shellwindow.setText(&quot;WebTimeMachine 3.2&quot;); Menu menu = new Menu(shellwindow, SWT.BAR); shellwindow.setMenuBar(menu); MenuItem menuItem = new MenuItem(menu, SWT.CASCADE); menuItem.setText(&quot;\\u7CFB\\u7EDF&quot;); Menu menu_1 = new Menu(menuItem); menuItem.setMenu(menu_1); /* * MenuItem menuItem_3 = new MenuItem(menu_1, SWT.NONE); * menuItem_3.addSelectionListener(new SelectionAdapter() &#123; * * @Override public void widgetSelected(SelectionEvent e) &#123; try &#123; //打开应用路径 * 打开配置文件路径 String str = * &quot;C:\\\\WINDOWS\\\\system32\\\\notepad.exe G:\\\\WebTimeMachine\\\\Java\\\\src\\\\db.properties&quot; * ; Runtime.getRuntime().exec(str); &#125; catch (IOException | NullPointerException * e2) &#123; MessageBox mb = new MessageBox(shellwindow,SWT.ICON_ERROR | * SWT.OK); mb.setText(&quot;配置文件遇到异常&quot;); mb.setMessage(e2.getMessage()); mb.open(); &#125; * * &#125; &#125;); menuItem_3.setText(&quot;\\u914D\\u7F6E\\u6587\\u4EF6&quot;); */ MenuItem menuItem_7 = new MenuItem(menu_1, SWT.NONE); menuItem_7.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; DirectoryDialog dd=new DirectoryDialog(shellwindow); dd.setText(&quot;目录浏览&quot;); dd.setMessage(&quot;请选择库目录所在位置&quot;); //dd.setFilterPath(&quot;C:\\\\&quot;); String locationPath = dd.open(); if(locationPath!=null)&#123; Runtime rt = Runtime.getRuntime(); try &#123; rt.exec(&quot;explorer.exe &quot; + locationPath); &#125; catch (IOException e1) &#123; MessageBox mb = new MessageBox(shellwindow,SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-0214 库目录获取错误&quot;); mb.setMessage(e1.getMessage()); mb.open(); &#125; &#125; &#125; &#125;); menuItem_7.setText(&quot;\\u5E93\\u76EE\\u5F55&quot;); MenuItem mntmDmp = new MenuItem(menu_1, SWT.NONE); mntmDmp.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; new OracleFileOut(shellwindow, countRec).open(); &#125; &#125;); mntmDmp.setText(&quot;DMP\\u6587\\u4EF6\\u5BFC\\u51FA&quot;); MenuItem mntmDmp_1 = new MenuItem(menu_1, SWT.NONE); mntmDmp_1.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; new OracleFileIn(shellwindow, countRec).open(); &#125; &#125;); mntmDmp_1.setText(&quot;DMP\\u6587\\u4EF6\\u5BFC\\u5165&quot;); MenuItem menuItem_4 = new MenuItem(menu_1, SWT.NONE); menuItem_4.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; System.exit(0); &#125; &#125;); menuItem_4.setText(&quot;\\u5B89\\u5168\\u9000\\u51FA&quot;); MenuItem menuItem_8 = new MenuItem(menu, SWT.CASCADE); menuItem_8.setText(&quot;\\u4E2A\\u4EBA&quot;); Menu menu_4 = new Menu(menuItem_8); menuItem_8.setMenu(menu_4); MenuItem menuItem_3 = new MenuItem(menu_4, SWT.NONE); menuItem_3.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; new PersonalCenter(shellwindow, SWT.NONE).open(); &#125; &#125;); menuItem_3.setText(&quot;\\u4E2A\\u4EBA\\u4E2D\\u5FC3&quot;); MenuItem menuItem_1 = new MenuItem(menu, SWT.CASCADE); menuItem_1.setText(&quot;\\u5E2E\\u52A9&quot;); Menu menu_2 = new Menu(menuItem_1); menuItem_1.setMenu(menu_2); MenuItem menuItem_6 = new MenuItem(menu_2, SWT.NONE); menuItem_6.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; HelpFile helpfile = new HelpFile(shellwindow, SWT.NONE); helpfile.open(); &#125; &#125;); menuItem_6.setText(&quot;\\u4F7F\\u7528\\u6587\\u6863&quot;); MenuItem menuItem_2 = new MenuItem(menu, SWT.CASCADE); menuItem_2.setText(&quot;\\u5173\\u4E8E&quot;); Menu menu_3 = new Menu(menuItem_2); menuItem_2.setMenu(menu_3); MenuItem menuItem_5 = new MenuItem(menu_3, SWT.NONE); menuItem_5.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; About about = new About(shellwindow, SWT.NONE); about.open(); &#125; &#125;); menuItem_5.setText(&quot;\\u7248\\u672C&quot;); TabFolder tabFolder = new TabFolder(shellwindow, SWT.NONE); tabFolder.setBounds(0, 0, 794, 401); TabItem tabItem = new TabItem(tabFolder, SWT.NONE); tabItem.setText(&quot;\\u4EFB\\u52A1\\u8868&quot;); Composite composite = new Composite(tabFolder, SWT.NONE); tabItem.setControl(composite); table = new Table(composite, SWT.BORDER | SWT.FULL_SELECTION); table.setBounds(10, 10, 649, 351); table.setHeaderVisible(true); table.setLinesVisible(true); TableColumn tableColumn = new TableColumn(table, SWT.NONE); tableColumn.setWidth(80); tableColumn.setText(&quot;\\u7F16\\u53F7&quot;); TableColumn tableColumn_1 = new TableColumn(table, SWT.NONE); tableColumn_1.setWidth(130); tableColumn_1.setText(&quot;\\u540D\\u79F0&quot;); TableColumn tableColumn_2 = new TableColumn(table, SWT.NONE); tableColumn_2.setWidth(180); tableColumn_2.setText(&quot;\\u8DEF\\u5F84&quot;); // TableColumn tableColumn_3 = new TableColumn(table, SWT.NONE); // tableColumn_3.setWidth(130); // tableColumn_3.setText(&quot;\\u7F13\\u5B58\\u8DEF\\u5F84&quot;); TableColumn tblclmnUrl = new TableColumn(table, SWT.NONE); tblclmnUrl.setWidth(255); tblclmnUrl.setText(&quot;Url&quot;); Button button = new Button(composite, SWT.NONE); button.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; String sql = &quot; select * from tasksheet where 1=1 &quot;; List&lt;String&gt; paramList = new ArrayList&lt;&gt;(); if (text.getText().trim().length() &gt; 0) &#123; sql += &quot; and TASKNAME like ? &quot;; paramList.add(&quot;%&quot; + text.getText() + &quot;%&quot;); &#125; try &#123; table.removeAll(); List&lt;Map&lt;String, Object&gt;&gt; ret = WTMbackstage.query(sql, paramList.toArray()); for (Map&lt;String, Object&gt; row : ret) &#123; TableItem tableItem = new TableItem(table, SWT.NONE); tableItem.setText(new String[] &#123; row.get(&quot;TASKID&quot;) + &quot;&quot;, // 避免空表格 row.get(&quot;TASKNAME&quot;) + &quot;&quot;, row.get(&quot;TASKRESULTFILE&quot;) + &quot;&quot;, // row.get(&quot;TASKCACHEFILE&quot;)+&quot;&quot;, row.get(&quot;TASKURLSTR&quot;) + &quot;&quot; &#125;); tableItem.setData(row); &#125; &#125; catch (SQLException e1) &#123; MessageBox mb = new MessageBox(shellwindow, SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-0201 获取数据失败&quot;); mb.setMessage(e1.getMessage()); mb.open(); &#125; &#125; &#125;); button.setBounds(684, 74, 80, 27); button.setText(&quot;\\u67E5\\u8BE2&quot;); Button button_1 = new Button(composite, SWT.NONE); button_1.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; if (table.getSelectionCount() &gt; 0) &#123; TableItem[] items = table.getSelection(); TableItem item = items[0]; @SuppressWarnings(&quot;unchecked&quot;) Map&lt;String, Object&gt; row = (Map&lt;String, Object&gt;) item.getData(); String flag = &quot;false&quot;; try &#123; flag = Reptile6.Init(row.get(&quot;TASKNAME&quot;) + &quot;&quot;, row.get(&quot;TASKRESULTFILE&quot;) + &quot;&quot;, row.get(&quot;TASKURLSTR&quot;) + &quot;&quot;); Map&lt;String, Object&gt; result = new LinkedHashMap&lt;&gt;(); result.put(&quot;MARK&quot;, flag); result.put(&quot;TASKID&quot;, row.get(&quot;TASKID&quot;)); result.put(&quot;TASKNAME&quot;, row.get(&quot;TASKNAME&quot;)); result.put(&quot;TASKRESULTFILE&quot;, row.get(&quot;TASKRESULTFILE&quot;)); result.put(&quot;TASKURLSTR&quot;, row.get(&quot;TASKURLSTR&quot;)); // 调用 肖理达方法(result); RecordBackstage.addRecord(result); &#125; catch (Exception e1) &#123; MessageBox mb = new MessageBox(shellwindow, SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-0202 获取数据失败&quot;); mb.setMessage(e1.getMessage()); mb.open(); return; &#125; if (flag.equals(&quot;true&quot;)) &#123; MessageBox mb1 = new MessageBox(shellwindow, SWT.ICON_INFORMATION | SWT.OK); mb1.setText(&quot;系统提示&quot;); mb1.setMessage(&quot;数据爬取成功：1条&quot;); mb1.open(); &#125; else &#123; MessageBox mb2 = new MessageBox(shellwindow, SWT.ICON_ERROR | SWT.OK); mb2.setText(&quot;WTM-0203 爬取数据失败&quot;); mb2.setMessage(&quot;爬取数据失败：1条&quot;); mb2.open(); &#125; &#125; else &#123; MessageBox mb = new MessageBox(shellwindow, SWT.ICON_WARNING | SWT.OK); mb.setText(&quot;WTM-0204 请选中爬取对象&quot;); mb.setMessage(&quot;请选中爬取对象&quot;); mb.open(); &#125; &#125; &#125;); button_1.setBounds(684, 278, 80, 27); button_1.setText(&quot;\\u7ACB\\u5373\\u6267\\u884C&quot;); Button button_7 = new Button(composite, SWT.NONE); button_7.setBounds(684, 145, 80, 27); button_7.setText(&quot;\\u65B0\\u589E&quot;); Button delete = new Button(composite, SWT.NONE); delete.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; if (table.getSelectionCount() &gt; 0) &#123; try &#123; TableItem[] items = table.getSelection(); TableItem item = items[0]; @SuppressWarnings(&quot;unchecked&quot;) Map&lt;String, Object&gt; row = (Map&lt;String, Object&gt;) item.getData(); String sql = &quot; delete from tasksheet where taskid = ? &quot;; WTMbackstage.update(sql, row.get(&quot;TASKID&quot;)); MessageBox mb = new MessageBox(shellwindow, SWT.ICON_INFORMATION | SWT.OK); mb.setText(&quot;系统提示&quot;); mb.setMessage(&quot;删除任务成功&quot;); mb.open(); &#125; catch (SQLException e1) &#123; MessageBox mb = new MessageBox(shellwindow, SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-0205 删除任务失败&quot;); mb.setMessage(e1.getMessage()); mb.open(); &#125; &#125; else &#123; MessageBox mb = new MessageBox(shellwindow, SWT.ICON_WARNING | SWT.OK); mb.setText(&quot;WTM-0206 请选中删除对象&quot;); mb.setMessage(&quot;请选中删除对象&quot;); mb.open(); &#125; &#125; &#125;); delete.setBounds(684, 211, 80, 27); delete.setText(&quot;\\u5220\\u9664&quot;); Button button_9 = new Button(composite, SWT.NONE); button_9.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; if (table.getSelectionCount() &gt; 0) &#123; TableItem[] items = table.getSelection(); TableItem item = items[0]; @SuppressWarnings(&quot;unchecked&quot;) Map&lt;String, Object&gt; row = (Map&lt;String, Object&gt;) item.getData(); new Modify(shellwindow, SWT.NONE, row).open(); &#125; else &#123; MessageBox mb = new MessageBox(shellwindow, SWT.ICON_WARNING | SWT.OK); mb.setText(&quot;WTM-0207 请选中修改对象&quot;); mb.setMessage(&quot;请选中修改对象&quot;); mb.open(); &#125; &#125; &#125;); button_9.setBounds(684, 178, 80, 27); button_9.setText(&quot;\\u4FEE\\u6539&quot;); Button button_10 = new Button(composite, SWT.NONE); button_10.setBounds(684, 311, 80, 27); button_10.setText(&quot;\\u5B9A\\u65F6\\u6267\\u884C&quot;); text = new Text(composite, SWT.BORDER); text.setBounds(684, 45, 80, 23); Label label_14 = new Label(composite, SWT.NONE); label_14.setBounds(711, 22, 24, 17); label_14.setText(&quot;\\u540D\\u79F0&quot;); TabItem tabItem_2 = new TabItem(tabFolder, SWT.NONE); tabItem_2.setText(&quot;\\u4EFB\\u52A1\\u8BA1\\u5212&quot;); Composite composite_2 = new Composite(tabFolder, SWT.NONE); tabItem_2.setControl(composite_2); Label lblNewLabel = new Label(composite_2, SWT.NONE); lblNewLabel.setFont(SWTResourceManager.getFont(&quot;Microsoft YaHei UI&quot;, 12, SWT.NORMAL)); lblNewLabel.setBounds(10, 24, 64, 21); lblNewLabel.setText(&quot;\\u6DFB\\u52A0\\u8BB0\\u5F55&quot;); Label label = new Label(composite_2, SWT.NONE); label.setFont(SWTResourceManager.getFont(&quot;Microsoft YaHei UI&quot;, 9, SWT.NORMAL)); label.setBounds(80, 47, 24, 17); label.setText(&quot;\\u540D\\u79F0&quot;); settaskname = new Text(composite_2, SWT.BORDER); settaskname.setBounds(137, 44, 250, 23); Label label_1 = new Label(composite_2, SWT.NONE); label_1.setBounds(80, 74, 48, 17); label_1.setText(&quot;\\u8DEF\\u5F84&quot;); settaskresultfile = new Text(composite_2, SWT.BORDER); settaskresultfile.setBounds(137, 71, 250, 23); Label label_3 = new Label(composite_2, SWT.NONE); label_3.setBounds(80, 103, 36, 17); label_3.setText(&quot;\\u6E90\\u7F51\\u5740&quot;); settaskurlstr = new Text(composite_2, SWT.BORDER); settaskurlstr.setBounds(137, 100, 500, 23); Button button_2 = new Button(composite_2, SWT.NONE); button_2.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; if (settaskname.getText().trim().length() &gt; 0 &amp;&amp; settaskresultfile.getText().trim().length() &gt; 0 &amp;&amp; settaskurlstr.getText().length() &gt; 0) &#123; try &#123; WTMbackstage.insertTask(settaskname.getText(), settaskresultfile.getText(), null, settaskurlstr.getText()); MessageBox mb = new MessageBox(shellwindow, SWT.ICON_INFORMATION | SWT.OK); mb.setText(&quot;系统提示&quot;); mb.setMessage(&quot;添加任务成功&quot;); mb.open(); &#125; catch (SQLException e1) &#123; MessageBox mb = new MessageBox(shellwindow, SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-0208 添加任务失败&quot;); mb.setMessage(e1.getMessage()); mb.open(); &#125; &#125;else &#123; MessageBox mb = new MessageBox(shellwindow, SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-0213 添加任务失败&quot;); mb.setMessage(&quot;文本框不能为空&quot;); mb.open(); &#125; &#125; &#125;); button_2.setBounds(137, 129, 80, 27); button_2.setText(&quot;\\u786E\\u8BA4\\u6DFB\\u52A0&quot;); Label lblOracle = new Label(composite_2, SWT.NONE); lblOracle.setText(&quot;Oracle\\u63A7\\u5236\\u53F0&quot;); lblOracle.setFont(SWTResourceManager.getFont(&quot;Microsoft YaHei UI&quot;, 12, SWT.NORMAL)); lblOracle.setBounds(10, 244, 106, 21); Label label_6 = new Label(composite_2, SWT.NONE); label_6.setBounds(80, 273, 24, 17); label_6.setText(&quot;\\u6307\\u4EE4&quot;); SQLoption = new Text(composite_2, SWT.BORDER); SQLoption.setBounds(137, 270, 500, 23); /* * Button button_3 = new Button(composite_2, SWT.NONE); * button_3.addSelectionListener(new SelectionAdapter() &#123; * * @Override public void widgetSelected(SelectionEvent e) &#123; try &#123; * WTMbackstage.deleteTask(Integer.parseInt(deletetask.getText())); MessageBox * mb = new MessageBox(shellwindow,SWT.ICON_INFORMATION | SWT.OK); * mb.setText(&quot;表记录删除成功&quot;); mb.setMessage(&quot;表记录删除成功&quot;); mb.open(); &#125; catch * (SQLException e1) &#123; MessageBox mb = new * MessageBox(shellwindow,SWT.ICON_ERROR | SWT.OK); * System.out.println(e1); mb.setText(&quot;表记录删除失败&quot;); * mb.setMessage(e1.getMessage()); mb.open(); &#125; &#125; &#125;); * button_3.setText(&quot;\\u786E\\u8BA4\\u5220\\u9664&quot;); button_3.setBounds(137, 232, * 80, 27); */ Button button_4 = new Button(composite_2, SWT.NONE); button_4.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; try &#123; WTMbackstage.SQLOption(SQLoption.getText()); MessageBox mb = new MessageBox(shellwindow, SWT.ICON_INFORMATION | SWT.OK);; mb.setText(&quot;系统提示 指令发送成功&quot;); mb.setMessage(&quot;指令发送成功：&quot; + SQLoption.getText()); mb.open(); &#125; catch (SQLException e1) &#123; MessageBox mb = new MessageBox(shellwindow, SWT.ICON_ERROR | SWT.OK); System.out.println(e1); mb.setText(&quot;WTM-0209 数据库遇到错误&quot;); mb.setMessage(e1.getMessage()); mb.open(); &#125; &#125; &#125;); button_4.setText(&quot;\\u53D1\\u9001&quot;); button_4.setBounds(137, 299, 80, 27); Label label_8 = new Label(composite_2, SWT.SEPARATOR | SWT.HORIZONTAL); label_8.setBounds(10, 205, 766, 2); Button button_3 = new Button(composite_2, SWT.NONE); button_3.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; settaskname.setText(&quot;&quot;); settaskurlstr.setText(&quot;&quot;); &#125; &#125;); button_3.setBounds(223, 129, 80, 27); button_3.setText(&quot;\\u91CD\\u7F6E&quot;); Button btnNewButton = new Button(composite_2, SWT.NONE); btnNewButton.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; DirectoryDialog dd=new DirectoryDialog(shellwindow); dd.setText(&quot;目录浏览&quot;); dd.setMessage(&quot;请选择库目录所在位置&quot;); dd.setFilterPath(&quot;C:\\\\&quot;); String locationPath = dd.open(); if(locationPath!=null)&#123; settaskresultfile.setText(locationPath); &#125; &#125; &#125;); btnNewButton.setBounds(400, 71, 60, 23); btnNewButton.setText(&quot;\\u6D4F\\u89C8&quot;); TabItem tabItem_3 = new TabItem(tabFolder, SWT.NONE); tabItem_3.setText(&quot;\\u5B9A\\u65F6\\u4EFB\\u52A1&quot;); Composite composite_3 = new Composite(tabFolder, SWT.NONE); tabItem_3.setControl(composite_3); Label label_9 = new Label(composite_3, SWT.NONE); label_9.setFont(SWTResourceManager.getFont(&quot;Microsoft YaHei UI&quot;, 10, SWT.NORMAL)); label_9.setBounds(10, 10, 282, 19); label_9.setText( &quot;\\u8B66\\u544A\\uFF1A\\u5373\\u65F6\\u542F\\u52A8\\u8BF7\\u5728\\u5F53\\u524D\\u65F6\\u95F4\\u57FA\\u7840\\u4E0A\\u540E\\u5EF6\\u4E00\\u5206\\u949F&quot;); Label lblNewLabel_1 = new Label(composite_3, SWT.NONE); lblNewLabel_1.setBounds(49, 58, 61, 17); lblNewLabel_1.setText(&quot;\\u542F\\u52A8\\u65F6\\u95F4\\uFF1A&quot;); Label label_10 = new Label(composite_3, SWT.SEPARATOR | SWT.HORIZONTAL); label_10.setBounds(10, 35, 756, 2); text_6 = new Text(composite_3, SWT.BORDER); text_6.setEnabled(false); text_6.setText(&quot;\\u5F53\\u5929&quot;); text_6.setBounds(117, 55, 73, 23); Label label_11 = new Label(composite_3, SWT.NONE); label_11.setBounds(196, 58, 12, 17); label_11.setText(&quot;\\u65E5&quot;); timerhour = new Text(composite_3, SWT.BORDER); timerhour.setText(&quot;23&quot;); timerhour.setBounds(214, 55, 73, 23); Label label_12 = new Label(composite_3, SWT.NONE); label_12.setBounds(293, 58, 12, 17); label_12.setText(&quot;\\u65F6&quot;); timerminute = new Text(composite_3, SWT.BORDER); timerminute.setText(&quot;59&quot;); timerminute.setBounds(311, 55, 73, 23); Label label_13 = new Label(composite_3, SWT.NONE); label_13.setBounds(390, 58, 61, 17); label_13.setText(&quot;\\u5206&quot;); Button button_5 = new Button(composite_3, SWT.NONE); button_5.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; WTMbackstage.spiderTimer(Integer.parseInt(timerhour.getText()), Integer.parseInt(timerminute.getText())); MessageBox mb = new MessageBox(shellwindow, SWT.ICON_INFORMATION | SWT.OK); mb.setText(&quot;已启动定时器&quot;); mb.setMessage(&quot;每天&quot; + timerhour.getText() + &quot;时&quot; + timerminute.getText() + &quot;分将自动运行&quot;); mb.open(); &#125; &#125;); button_5.setBounds(117, 100, 80, 27); button_5.setText(&quot;\\u5B9A\\u65F6\\u542F\\u52A8&quot;); Button button_6 = new Button(composite_3, SWT.NONE); button_6.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; WTMbackstage.spiderTimerStop(); MessageBox mb = new MessageBox(shellwindow, SWT.ICON_INFORMATION | SWT.OK); mb.setText(&quot;已停止定时器&quot;); mb.setMessage(&quot;定时器已经安全解除&quot;); mb.open(); &#125; &#125;); button_6.setBounds(214, 100, 80, 27); button_6.setText(&quot;\\u505C\\u6B62&quot;); TabItem tabItem_1 = new TabItem(tabFolder, SWT.NONE); tabItem_1.setText(&quot;\\u722C\\u53D6\\u8BB0\\u5F55&quot;); Composite composite_1 = new Composite(tabFolder, SWT.NONE); tabItem_1.setControl(composite_1); button_7.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; tabFolder.setSelection(tabItem_2); &#125; &#125;); button_10.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; tabFolder.setSelection(tabItem_3); &#125; &#125;); // 容创伟 图标 // Image image = new Image(display,&quot;G:\\\\WebTimeMachine\\\\img\\\\图标.ico&quot;); // 容创伟 最小化托盘 shellwindow.setImage(SWTResourceManager.getImage(WTMwindow.class, &quot;/img/\\u56FE\\u6807.ico&quot;)); final Tray tray = display.getSystemTray(); final TrayItem trayItem = new TrayItem(tray, SWT.NONE); trayItem.setImage(SWTResourceManager.getImage(WTMwindow.class, &quot;/img/\\u56FE\\u6807.ico&quot;)); trayItem.setVisible(false); trayItem.setToolTipText(&quot;WebTimeMachine 2.8&quot;); trayItem.addSelectionListener(new SelectionAdapter() &#123; public void widgetSelected(SelectionEvent e) &#123; toggleDisplay(shellwindow, tray); &#125; &#125;); shellwindow.addShellListener(new ShellAdapter() &#123; @Override public void shellIconified(ShellEvent e) &#123; toggleDisplay(shellwindow, tray); &#125; @Override public void shellClosed(ShellEvent e) &#123; trayItem.dispose(); System.exit(0); &#125; &#125;); final Menu trayMenu = new Menu(shellwindow, SWT.POP_UP); MenuItem showMenuItem = new MenuItem(trayMenu, SWT.PUSH); showMenuItem.setText(&quot;显示窗口&quot;); // 显示窗口，并隐藏托盘图标 showMenuItem.addSelectionListener(new SelectionAdapter() &#123; public void widgetSelected(SelectionEvent e) &#123; toggleDisplay(shellwindow, tray); &#125; &#125;); trayMenu.setDefaultItem(showMenuItem); new MenuItem(trayMenu, SWT.SEPARATOR); // 托盘中的退出菜单，程式只能通过这个菜单退出 MenuItem exitMenuItem = new MenuItem(trayMenu, SWT.PUSH); exitMenuItem.setText(&quot;退出程序&quot;); exitMenuItem.addSelectionListener(new SelectionAdapter() &#123; public void widgetSelected(SelectionEvent event) &#123; ///shellwindow.dispose(); System.exit(0); &#125; &#125;); // 在托盘图标上点击鼠标右键时，弹出系统菜单 trayItem.addMenuDetectListener(new MenuDetectListener() &#123; public void menuDetected(MenuDetectEvent e) &#123; trayMenu.setVisible(true); &#125; &#125;); // 肖理达 Label label_2 = new Label(composite_1, SWT.NONE); label_2.setText(&quot;\\u540D\\u79F0\\uFF1A&quot;); label_2.setBounds(29, 12, 35, 17); text_1 = new Text(composite_1, SWT.BORDER); text_1.setBounds(70, 9, 260, 23); Label label_4 = new Label(composite_1, SWT.NONE); label_4.setText(&quot;\\u722C\\u53D6\\u72B6\\u6001:&quot;); label_4.setBounds(357, 47, 57, 17); Label lblUrl = new Label(composite_1, SWT.NONE); lblUrl.setAlignment(SWT.CENTER); lblUrl.setText(&quot;URL\\uFF1A&quot;); lblUrl.setBounds(29, 47, 35, 17); Label label_7 = new Label(composite_1, SWT.NONE); label_7.setText(&quot;\\u4EFB\\u52A1\\u7F16\\u53F7\\uFF1A&quot;); label_7.setBounds(357, 12, 57, 17); Button button_8 = new Button(composite_1, SWT.NONE); button_8.setText(&quot;\\u67E5\\u8BE2&quot;); button_8.setBounds(40, 334, 80, 27); table_1 = new Table(composite_1, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI); table_1.setLinesVisible(true); table_1.setHeaderVisible(true); table_1.setBounds(10, 82, 766, 239); TableColumn tableColumn_3 = new TableColumn(table_1, SWT.LEFT); tableColumn_3.setWidth(60); tableColumn_3.setText(&quot;\\u8BB0\\u5F55\\u7F16\\u53F7&quot;); TableColumn tableColumn_4 = new TableColumn(table_1, SWT.LEFT); tableColumn_4.setWidth(150); tableColumn_4.setText(&quot;\\u65F6\\u95F4&quot;); TableColumn tblclmnNewColumn = new TableColumn(table_1, SWT.LEFT); tblclmnNewColumn.setWidth(70); tblclmnNewColumn.setText(&quot;\\u72B6\\u6001&quot;); TableColumn tblclmnNewColumn_1 = new TableColumn(table_1, SWT.NONE); tblclmnNewColumn_1.setWidth(70); tblclmnNewColumn_1.setText(&quot;\\u4EFB\\u52A1\\u7F16\\u53F7&quot;); TableColumn tblclmnNewColumn_2 = new TableColumn(table_1, SWT.LEFT); tblclmnNewColumn_2.setWidth(100); tblclmnNewColumn_2.setText(&quot;\\u540D\\u79F0&quot;); TableColumn tblclmnNewColumn_3 = new TableColumn(table_1, SWT.LEFT); tblclmnNewColumn_3.setWidth(140); tblclmnNewColumn_3.setText(&quot;\\u8DEF\\u5F84&quot;); TableColumn tblclmnUrl_1 = new TableColumn(table_1, SWT.LEFT); tblclmnUrl_1.setWidth(170); tblclmnUrl_1.setText(&quot;URL&quot;); combo = new Combo(composite_1, SWT.NONE); combo.setBounds(420, 44, 120, 25); combo.setItems(new String[] &#123; &quot;true&quot;, &quot;false&quot; &#125;); Label label_15 = new Label(composite_1, SWT.NONE); label_15.setText(&quot;\\u722C\\u53D6\\u65F6\\u95F4\\uFF1A&quot;); label_15.setBounds(570, 12, 61, 17); dateTime = new DateTime(composite_1, SWT.BORDER); dateTime.setBounds(642, 9, 98, 24); Label label_16 = new Label(composite_1, SWT.NONE); label_16.setText(&quot;\\u81F3&quot;); label_16.setAlignment(SWT.CENTER); label_16.setBounds(594, 47, 20, 17); dateTime_1 = new DateTime(composite_1, SWT.BORDER); dateTime_1.setBounds(642, 44, 98, 24); button_12 = new Button(composite_1, SWT.CHECK); button_12.setBounds(746, 12, 13, 17); button_13 = new Button(composite_1, SWT.CHECK); button_13.setBounds(746, 47, 13, 17); Button button_15 = new Button(composite_1, SWT.NONE); button_15.setText(&quot;\\u91CD\\u7F6E&quot;); button_15.setBounds(240, 334, 80, 27); Button button_16 = new Button(composite_1, SWT.NONE); button_16.setText(&quot;\\u5220\\u9664&quot;); button_16.setBounds(140, 334, 80, 27); text_2 = new Text(composite_1, SWT.BORDER); text_2.setBounds(70, 44, 260, 23); text_3 = new Text(composite_1, SWT.BORDER); text_3.setBounds(420, 9, 120, 23); Button button_11 = new Button(composite_1, SWT.NONE); button_11.setBounds(440, 334, 60, 27); button_11.setText(&quot;\\u4E0A\\u4E00\\u9875&quot;); Button button_14 = new Button(composite_1, SWT.NONE); button_14.setText(&quot;\\u4E0B\\u4E00\\u9875&quot;); button_14.setBounds(580, 334, 60, 27); spinner = new Spinner(composite_1, SWT.BORDER); spinner.setBounds(510, 334, 60, 27); countrec = new Label(composite_1, SWT.NONE); countrec.setBounds(656, 339, 120, 17); // 记录查询 肖理达 button_8.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; countRec = search(1); &#125; &#125;); // 重置按钮 肖理达 button_15.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; text_1.setText(&quot;&quot;); text_2.setText(&quot;&quot;); text_3.setText(&quot;&quot;); combo.setText(&quot;&quot;); button_12.setSelection(false); button_13.setSelection(false); &#125; &#125;); // 删除按钮：弹出密码输入框 肖理达 button_16.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; if (table_1.getSelectionCount() &gt; 0) &#123; UserCheck userCheck = new UserCheck(shellwindow, SWT.NONE); boolean access = userCheck.open(); if (access == false) &#123; return; &#125; TableItem[] tableItems = table_1.getSelection(); @SuppressWarnings(&quot;unchecked&quot;) Map&lt;String, Object&gt; ret = (Map&lt;String, Object&gt;) tableItems[0].getData(); String sql = &quot;delete from records where recno=?&quot;; MessageBox mb = new MessageBox(shellwindow, SWT.ICON_INFORMATION); mb.setText(&quot;系统提示&quot;); mb.setMessage(&quot;删除记录成功&quot;); mb.open(); try &#123; WTMbackstage.update(sql, ret.get(&quot;RECNO&quot;)); recPage = 1; search(recPage); &#125; catch (SQLException e1) &#123; // TODO Auto-generated catch block e1.printStackTrace(); &#125; &#125; else &#123; MessageBox mb = new MessageBox(shellwindow, SWT.ICON_WARNING); mb.setText(&quot;WTM-0210 记录选取错误&quot;); mb.setMessage(&quot;请选中记录对象&quot;); mb.open(); &#125; &#125; &#125;); // 记录查询：上一页 肖理达 button_11.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; if (recPage &lt;= 1) &#123; return; &#125; recPage--; search(recPage); &#125; &#125;); // 记录查询：下一页 肖理达 button_14.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; if (recPage &lt;= countRec / 10 &amp;&amp; (recPage != countRec / 10 || countRec % 10 != 0)) &#123; recPage++; search(recPage); &#125; &#125; &#125;); // 输入页码跳转 肖理达 spinner.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetDefaultSelected(SelectionEvent e) &#123; int index = spinner.getSelection(); if (index &lt; 1 || (index - 1 &gt; countRec / 10 || (index - 1 == countRec / 10 &amp;&amp; countRec % 10 == 0))) &#123; MessageBox mb = new MessageBox(shellwindow, SWT.ICON_WARNING); mb.setText(&quot;WTM-0211 无效的索引&quot;); mb.setMessage(&quot;页码无效！&quot;); mb.open(); &#125; else &#123; recPage = spinner.getSelection(); search(recPage); &#125; &#125; &#125;); &#125; // 托盘和窗口状态 public void toggleDisplay(Shell shell, Tray tray) &#123; try &#123; shell.setVisible(!shell.isVisible()); tray.getItem(0).setVisible(!shell.isVisible()); if (shell.getVisible()) &#123; shell.setMinimized(false); shell.setActive(); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; /* * private Image resize(Image src, int width, int height) &#123; Image scaled = new * Image(Display.getDefault(), width, height); GC gc = new GC(scaled); try&#123; * gc.setAdvanced(true); // 打开高级绘图模式 gc.setAntialias(SWT.ON);// 设置消除锯齿 * gc.setInterpolation(SWT.HIGH); // 设置插值 gc.drawImage(src, 0, 0, * src.getBounds().width, src.getBounds().height,0, 0, width, height); &#125;finally&#123; * gc.dispose(); &#125; return scaled; &#125; */ // 查询函数 肖理达 public int search(int recPage) &#123; table_1.removeAll(); List&lt;Object&gt; param = new ArrayList&lt;&gt;(); String sql = &quot;select * from records where 1=1&quot;; if (text_1.getText().length() &gt; 0) &#123; sql += &quot; and webname like ?&quot;; param.add(&quot;%&quot; + text_1.getText() + &quot;%&quot;); &#125; if (combo.getText().length() &gt; 0) &#123; sql += &quot; and success=?&quot;; param.add(combo.getText()); &#125; if (text_2.getText().length() &gt; 0) &#123; sql += &quot; and url like ?&quot;; param.add(&quot;%&quot; + text_2.getText() + &quot;%&quot;); &#125; if (text_3.getText().length() &gt; 0) &#123; sql += &quot; and taskid=?&quot;; param.add(text_3.getText()); &#125; if (button_12.getSelection()) &#123; Date start = Date.valueOf(dateTime.getYear() + &quot;-&quot; + (dateTime.getMonth() + 1) + &quot;-&quot; + dateTime.getDay()); sql += &quot; and time &gt;= ?&quot;; param.add(start); &#125; if (button_13.getSelection()) &#123; Date end = Date .valueOf(dateTime_1.getYear() + &quot;-&quot; + (dateTime_1.getMonth() + 1) + &quot;-&quot; + dateTime_1.getDay()); sql += &quot; and time &lt;= ?&quot;; param.add(end); &#125; Object[] paramArray = param.toArray(); List&lt;Map&lt;String, Object&gt;&gt; queryPage = null; List&lt;Map&lt;String, Object&gt;&gt; query = null; try &#123; queryPage = RecordBackstage.queryPage(sql, recPage, 10, paramArray); query = WTMbackstage.query(sql, paramArray); countRec = query.size(); &#125; catch (SQLSyntaxErrorException e1) &#123; MessageBox mb = new MessageBox(shellwindow, SWT.ICON_WARNING); mb.setText(&quot;WTM-0212 参数类型错误&quot;); mb.setMessage(&quot;任务编号仅为数字&quot;); mb.open(); &#125; catch (SQLException e1) &#123; // TODO Auto-generated catch block e1.printStackTrace(); &#125; if (queryPage != null) &#123; for (int i = 0; i &lt; queryPage.size(); i++) &#123; Map&lt;String, Object&gt; map = queryPage.get(i); TableItem tableItem = new TableItem(table_1, SWT.NONE); tableItem.setText(new String[] &#123; map.get(&quot;RECNO&quot;).toString(), map.get(&quot;TIME&quot;).toString(), map.get(&quot;SUCCESS&quot;).toString(), map.get(&quot;TASKID&quot;).toString(), (map.get(&quot;WEBNAME&quot;) + &quot;&quot;).toString(), (map.get(&quot;TASKRESULTFILE&quot;) + &quot;&quot;).toString(), (map.get(&quot;URL&quot;) + &quot;&quot;).toString() &#125;); tableItem.setData(map); spinner.setSelection(recPage); countrec.setText(&quot;共&quot; + countRec + &quot;条记录&quot;); &#125; &#125; if (query == null || query.size() == 0) &#123; spinner.setSelection(0); countrec.setText(&quot;无符合条件的记录&quot;); return 0; &#125; return countRec; &#125;&#125; WTMbackstagepackage org.wtm.demo;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.SQLException;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.Properties;import java.util.Timer;import java.util.TimerTask;public class WTMbackstage &#123; private static String url; private static String username; private static String password; public static Connection conn; private static Timer timer = null; public static void start() throws IOException, ClassNotFoundException, SQLException &#123; Properties p = new Properties(); System.out.println(&quot;正在尝试读取配置文件...&quot;); InputStream in = WTMbackstage.class.getClassLoader().getResourceAsStream(&quot;db.properties&quot;); p.load(in); String driver = p.getProperty(&quot;driver&quot;); url = p.getProperty(&quot;url&quot;); username = p.getProperty(&quot;username&quot;); password = p.getProperty(&quot;password&quot;); System.out.println(&quot;配置文件读取完成&quot;); System.out.println(&quot;正在尝试启动Oracle数据库驱动...&quot;); Class.forName(driver); System.out.println(&quot;启动数据库驱动完成&quot;); System.out.println(&quot;正在尝试连接到数据库...&quot;); conn = DriverManager.getConnection(url, username, password); System.out.println(&quot;连接到数据库完成&quot;); &#125; public static void main() &#123; // 用于自启动 &#125; // 查询所有TaskSheet表记录 public static void queryTask() throws SQLException &#123; String sql = &quot;select * from tasksheet&quot;; PreparedStatement ps = conn.prepareStatement(sql); ResultSet rs = ps.executeQuery(); ResultSetMetaData rsmd = rs.getMetaData(); for (int i = 1; i &lt;= rsmd.getColumnCount(); i++) &#123; String columnName = rsmd.getColumnName(i); System.out.print(columnName + &quot;\\t\\t&quot;); &#125; System.out.println(); while (rs.next()) &#123; for (int j = 1; j &lt;= rsmd.getColumnCount(); j++) &#123; Object columnValue = rs.getObject(j); System.out.print(columnValue + &quot;\\t&quot;); &#125; System.out.println(); &#125; if (ps != null) &#123; ps.close(); &#125; &#125; public static List&lt;Map&lt;String, Object&gt;&gt; query(String sql, Object... paramArray) throws SQLException &#123; PreparedStatement ps = conn.prepareStatement(sql); for (int i = 0; i &lt; paramArray.length; i++) &#123; ps.setObject(i + 1, paramArray[i]); &#125; ResultSet rs = ps.executeQuery(); // 获取元数据 ResultSetMetaData rsmd = rs.getMetaData(); List&lt;Map&lt;String, Object&gt;&gt; ret = new ArrayList&lt;&gt;(); while (rs.next()) &#123; Map&lt;String, Object&gt; row = new LinkedHashMap&lt;&gt;(); for (int i = 1; i &lt;= rsmd.getColumnCount(); i++) &#123; String columnName = rsmd.getColumnName(i); Object columnValue = rs.getObject(i); row.put(columnName, columnValue); &#125; ret.add(row); &#125; return ret; &#125; // 遍历TaskSheet任务表，爬以上网页 public static void spider() throws Exception &#123; String sql = &quot;select * from tasksheet&quot;; PreparedStatement ps = conn.prepareStatement(sql); ResultSet rs = ps.executeQuery(); while (rs.next()) &#123; Map&lt;String, Object&gt; result = new LinkedHashMap&lt;&gt;(); String mark = Reptile6.Init(rs.getString(&quot;TASKNAME&quot;), rs.getString(&quot;TASKRESULTFILE&quot;), rs.getString(&quot;TASKURLSTR&quot;)); result.put(&quot;MARK&quot;, mark); result.put(&quot;TASKID&quot;, rs.getInt(&quot;TASKID&quot;)); result.put(&quot;TASKNAME&quot;, rs.getString(&quot;TASKNAME&quot;)); result.put(&quot;TASKRESULTFILE&quot;, rs.getString(&quot;TASKRESULTFILE&quot;)); result.put(&quot;TASKURLSTR&quot;, rs.getString(&quot;TASKURLSTR&quot;)); // 调用 肖理达方法(result); RecordBackstage.addRecord(result); &#125; if (ps != null) &#123; ps.close(); &#125; &#125; // 添加TaskSheet表记录 public static void insertTask(String... data) throws SQLException &#123; String sql = &quot;insert into tasksheet values (Seq_tasksheet_taskid.nextval,?,?,?,?)&quot;; PreparedStatement ps = conn.prepareStatement(sql); for (int i = 0; i &lt; data.length; i++) &#123; ps.setObject(i + 1, data[i]); &#125; ps.executeUpdate(); if (ps != null) &#123; ps.close(); &#125; &#125; /* * // 删除TaskSheet表记录 已废弃 public static void deleteTask(int taskid) throws * SQLException &#123; String sql = &quot;delete from tasksheet where taskid = ?&quot;; * PreparedStatement ps = conn.prepareStatement(sql); ps.setInt(1, taskid); * ps.executeUpdate(); if (ps != null) &#123; ps.close(); &#125; &#125; */ public static int update(String sql, Object... paramArray) throws SQLException &#123; PreparedStatement ps = conn.prepareStatement(sql); for (int i = 0; i &lt; paramArray.length; i++) &#123; ps.setObject(i + 1, paramArray[i]); &#125; return ps.executeUpdate(); &#125; // 数据库操作 public static void SQLOption(String sql) throws SQLException &#123; PreparedStatement ps = conn.prepareStatement(sql); ps.executeUpdate(); if (ps != null) &#123; ps.close(); &#125; &#125; /* * // 网页爬虫 已废弃 private static void reptile(String urlName, String resultFile, * String cacheFile, String urlStr) throws IOException &#123; URL url = new * URL(urlStr); // 获取爬虫时间 long currentTime = System.currentTimeMillis(); // * 设置时间格式 DateFormat df = new SimpleDateFormat(&quot;yyyy_MM_dd_HH&quot;); String format = * df.format(currentTime); * * InputStream in = null; OutputStream out = null; Reader r = null; Writer w = * null; // cache缓存 URLConnection conin = url.openConnection(); in = * conin.getInputStream(); out = new FileOutputStream(cacheFile + * &quot;\\\\&quot; + urlName + &quot;Cache&quot; + format + &quot;.html&quot;); byte b[] = new byte[1024]; int * len = 0; while ((len = in.read(b)) != -1) &#123; out.write(b, 0, len); &#125; // 成品 r = * new FileReader(cacheFile + &quot;\\\\&quot; + urlName + &quot;Cache&quot; + format + &quot;.html&quot;); w = * new FileWriter(resultFile + &quot;\\\\&quot; + urlName + &quot; &quot; + format + &quot;.html&quot;); * BufferedReader br = new BufferedReader(r); BufferedWriter bw = new * BufferedWriter(w); String value = null; boolean flag = true; while ((value = * br.readLine()) != null) &#123; // 过滤器 String[] str = value.split(&quot; &quot;); for (int i * = 0; i &lt; str.length; i++) &#123; if (str[i].startsWith(&quot;id=\\&quot;bd_snap&quot;)) &#123; flag = * false; break; &#125; else &#123; flag = true; &#125; &#125; // 写入 if (flag) &#123; bw.write(value); * bw.newLine(); &#125; &#125; * * bw.flush(); * * if (in != null) &#123; in.close(); &#125; if (out != null) &#123; out.close(); &#125; if (r != * null) &#123; r.close(); &#125; if (w != null) &#123; w.close(); &#125; * * &#125; */ public static void spiderTimer(int hour, int minute) &#123; Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, hour); // 控制时 calendar.set(Calendar.MINUTE, minute); // 控制分 calendar.set(Calendar.SECOND, 0); // 控制秒 Date time = calendar.getTime(); DateFormat df = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;); String format = df.format(time); System.out.println(format); timer = new Timer(); timer.scheduleAtFixedRate(new TimerTask() &#123; public void run() &#123; System.out.println(&quot;-------设定要指定任务--------&quot;); try &#123; spider(); &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; catch (IOException e) &#123; throw new RuntimeException(e); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; // 启动时间//启动间隔 1000 * 60 * 60 * 24 单位毫秒 (一天24小时) &#125;, time, 1000 * 60 * 60 * 24); &#125; public static void spiderTimerStop() &#123; if (timer != null) &#123; timer.cancel(); &#125; &#125; // 容创伟 // 导出 //dmp文件名 dmp文件路径 表名 public static boolean backupData(String trim, String address, String trim3) throws InterruptedException, IOException &#123; boolean isSuccess = false; String commandStr = &quot;cmd.exe /c exp &quot;+username+&quot;/&quot;+password+&quot;@orcl file=&quot; + address + &quot;\\\\&quot; + trim + &quot;.dmp tables=(&quot; + trim3 + &quot;)&quot;; Runtime run = Runtime.getRuntime(); Process process = null; try &#123; process = run.exec(commandStr); &#125; catch (IOException e1) &#123; throw new IOException(e1); &#125; String line = null; // 读取ErrorStream很关键，解决了挂起的问题 BufferedReader br = new BufferedReader(new InputStreamReader(process.getErrorStream())); BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream())); try &#123; while ((line = br.readLine()) != null) &#123; System.out.println(line); &#125; while ((line = in.readLine()) != null) &#123; System.out.println(line); &#125; in.close(); br.close(); process.getOutputStream().close(); process.waitFor(); isSuccess = true; &#125; catch (IOException ex) &#123; throw new IOException(ex); &#125; catch (InterruptedException e) &#123; throw new InterruptedException(); &#125; finally &#123; if (in != null) &#123; try &#123; in.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; if (br != null) &#123; try &#123; br.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; return isSuccess; &#125; //容创伟 //导入 文件名 路径 public static boolean InputData(String address) throws InterruptedException, IOException &#123; boolean isSuccess = false; String commandStr = &quot;cmd.exe /c imp &quot;+username+&quot;/&quot;+password+&quot;@orcl file=&quot; + address + &quot; full=y&quot;; Runtime run = Runtime.getRuntime(); Process process = null; try &#123; process = run.exec(commandStr); &#125; catch (IOException e1) &#123; throw new IOException(e1); &#125; String line = null; // 读取ErrorStream很关键，解决了挂起的问题 BufferedReader br = new BufferedReader(new InputStreamReader(process.getErrorStream())); BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream())); try &#123; while ((line = br.readLine()) != null) &#123; System.out.println(line); &#125; while ((line = in.readLine()) != null) &#123; System.out.println(line); &#125; in.close(); br.close(); process.getOutputStream().close(); process.waitFor(); isSuccess = true; &#125; catch (IOException ex) &#123; throw new IOException(ex); &#125; catch (InterruptedException e) &#123; throw new InterruptedException(); &#125; finally &#123; if (in != null) &#123; try &#123; in.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; if (br != null) &#123; try &#123; br.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; return isSuccess; &#125;&#125; UserWinpackage org.wtm.demo;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.FileDialog;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Label;import java.io.IOException;import java.sql.SQLException;import java.util.List;import java.util.Map;import org.eclipse.swt.SWT;import org.eclipse.swt.widgets.Text;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.widgets.Menu;import org.eclipse.swt.widgets.MenuItem;import org.eclipse.swt.widgets.MessageBox;import org.eclipse.wb.swt.SWTResourceManager;public class UserWin &#123; protected Shell shell; private Text text; private Text text_1; private static int index; /** * Launch the application. * * @param args */ public static void main(String[] args) &#123; try &#123; UserWin window = new UserWin(); window.open(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; /** * Open the window. */ public void open() &#123; Display display = Display.getDefault(); createContents(); // 居中显示 int x = (display.getBounds().width - shell.getBounds().width) / 2; int y = (display.getBounds().height - shell.getBounds().height) / 2; shell.setLocation(x, y); shell.open(); // 自启动 //WTMbackstage.main(); shell.layout(); while (!shell.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; &#125; /** * Create contents of the window. */ Display display = new Display(); protected void createContents() &#123; shell = new Shell(SWT.CLOSE | SWT.MIN); shell.setSize(600, 450); shell.setText(&quot;\\u7BA1\\u7406\\u5458\\u9996\\u9875&quot;); //Image image = new Image(display, &quot;G:\\\\WebTimeMachine\\\\img\\\\图标.ico&quot;); shell.setImage(SWTResourceManager.getImage(UserWin.class, &quot;/img/\\u56FE\\u6807.ico&quot;)); /*Label lblNewLabel = new Label(shell, SWT.NONE); Image logo = new Image(display,&quot;G:\\\\WebTimeMachine\\\\img\\\\logo1.png&quot;); lblNewLabel.setImage(resize(logo,296,401)); lblNewLabel.setBounds(0, 0, 296, 401);*/ Label label = new Label(shell, SWT.NONE); label.setBounds(320, 109, 48, 20); label.setText(&quot;\\u7BA1\\u7406\\u5458\\uFF1A&quot;); text = new Text(shell, SWT.BORDER); text.setBounds(388, 106, 170, 26); Label label_1 = new Label(shell, SWT.NONE); label_1.setBounds(320, 163, 48, 20); label_1.setText(&quot;\\u5BC6 \\u94A5\\uFF1A&quot;); text_1 = new Text(shell, SWT.BORDER | SWT.PASSWORD); text_1.setBounds(388, 160, 170, 26); Button button = new Button(shell, SWT.NONE); button.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; //配置文件 数据库驱动 数据库连接 启动 try &#123; WTMbackstage.start(); &#125; catch (ClassNotFoundException e1) &#123; MessageBox mb = new MessageBox(shell, SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-0101 初始化可能遇到错误&quot;); mb.setMessage(e1.getMessage()); mb.open(); return; &#125; catch (IOException e1) &#123; MessageBox mb = new MessageBox(shell, SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-0102 初始化可能遇到错误&quot;); mb.setMessage(e1.getMessage()); mb.open(); return; &#125; catch (SQLException e1) &#123; MessageBox mb = new MessageBox(shell, SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-0103 初始化可能遇到错误&quot;); mb.setMessage(e1.getMessage()); mb.open(); return; &#125; try &#123; String sql = &quot;select * from AdminisAcount&quot;; //触发WTMbackstage的静态块 List&lt;Map&lt;String, Object&gt;&gt; ret = WTMbackstage.query(sql); WTMwindow window = new WTMwindow(); boolean flag = false; for (int i = 0; i &lt; ret.size(); i++) &#123; if (text.getText().trim().equals(ret.get(i).get(&quot;ADNAME&quot;)) &amp;&amp; text_1.getText().trim().equals(ret.get(i).get(&quot;ADPASSWORD&quot;))) &#123; shell.setVisible(false); WTMbackstage.SQLOption( &quot;update AdminisAcount set ADTIME = sysdate where ADID = &quot; + ret.get(i).get(&quot;ADID&quot;)); index = Integer.parseInt(ret.get(i).get(&quot;ADID&quot;)+&quot;&quot;); window.open(); flag = true; break; &#125; &#125; if (!flag) &#123; MessageBox mb = new MessageBox(shell, SWT.ICON_WARNING | SWT.OK); mb.setText(&quot;WTM-0104 访问被拒绝&quot;); mb.setMessage(&quot;管理员/密钥不合法，拒绝访问&quot;); mb.open(); &#125; &#125; catch (Exception e2) &#123; e2.printStackTrace(); &#125; &#125; &#125;); button.setBounds(388, 239, 98, 30); button.setText(&quot;\\u767B\\u5F55&quot;); Menu menu = new Menu(shell, SWT.BAR); shell.setMenuBar(menu); MenuItem menuItem = new MenuItem(menu, SWT.CASCADE); menuItem.setText(&quot;\\u7CFB\\u7EDF\\u914D\\u7F6E&quot;); Menu menu_1 = new Menu(menuItem); menuItem.setMenu(menu_1); MenuItem menuItem_1 = new MenuItem(menu_1, SWT.NONE); menuItem_1.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; try &#123; FileDialog fileDialog = new FileDialog(shell); String flag = fileDialog.open(); String address = fileDialog.getFilterPath()+&quot;\\\\&quot;+fileDialog.getFileName(); //打开应用路径 打开配置文件路径 if(flag!=null) &#123; String str = &quot;C:\\\\WINDOWS\\\\system32\\\\notepad.exe &quot; + address; Runtime.getRuntime().exec(str); &#125; &#125; catch (IOException | NullPointerException e2) &#123; MessageBox mb = new MessageBox(shell,SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-0105 获取配置文件失败&quot;); mb.setMessage(e2.getMessage()); mb.open(); &#125; &#125; &#125;); menuItem_1.setText(&quot;\\u914D\\u7F6E\\u6587\\u4EF6&quot;); Label lblNewLabel = new Label(shell, SWT.NONE); lblNewLabel.setImage(SWTResourceManager.getImage(UserWin.class, &quot;/img/logo1.png&quot;)); lblNewLabel.setBounds(0, 0, 300, 401); &#125; /*private Image resize(Image src, int width, int height) &#123; Image scaled = new Image(Display.getDefault(), width, height); GC gc = new GC(scaled); try&#123; gc.setAdvanced(true); // 打开高级绘图模式 gc.setAntialias(SWT.ON);// 设置消除锯齿 gc.setInterpolation(SWT.HIGH); // 设置插值 gc.drawImage(src, 0, 0, src.getBounds().width, src.getBounds().height,0, 0, width, height); &#125;finally&#123; gc.dispose(); &#125; return scaled; &#125;*/ public static int getIndex() &#123; return index; &#125;&#125; UserCheck 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126package org.wtm.demo;import org.eclipse.swt.widgets.Dialog;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.widgets.MessageBox;import java.util.ArrayList;import java.util.List;import java.util.Map;import org.eclipse.swt.SWT;import org.eclipse.swt.widgets.Text;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.wb.swt.SWTResourceManager;public class UserCheck extends Dialog &#123; // 删除时验证记录 //private static int userId; protected Object result; protected Shell shell; private Label label_1; private Text text_1; private boolean access; /** * Create the dialog. * * @param parent * @param style */ public UserCheck(Shell parent, int style) &#123; super(parent, style); setText(&quot;SWT Dialog&quot;); &#125; /** * Open the dialog. * * @return the result */ public boolean open() &#123; createContents(); Display display = getParent().getDisplay(); int x = (display.getBounds().width - shell.getBounds().width) / 2; int y = (display.getBounds().height - shell.getBounds().height) / 2; shell.setLocation(x, y); Label label = new Label(shell, SWT.NONE); label.setImage(SWTResourceManager.getImage(UserCheck.class, &quot;/img/delete.png&quot;)); label.setBounds(0, 0, 133, 171); shell.open(); shell.layout(); while (!shell.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; return access; &#125; /** * Create contents of the dialog. */ private void createContents() &#123; shell = new Shell(getParent(), SWT.DIALOG_TRIM | SWT.PRIMARY_MODAL); shell.setSize(400, 200); shell.setText(&quot;\\u767B\\u5F55\\u9A8C\\u8BC1&quot;); label_1 = new Label(shell, SWT.NONE); label_1.setFont(SWTResourceManager.getFont(&quot;Microsoft YaHei UI&quot;, 12, SWT.NORMAL)); label_1.setAlignment(SWT.CENTER); label_1.setText(&quot;\\u5BC6\\u7801\\uFF1A&quot;); label_1.setBounds(147, 44, 56, 23); text_1 = new Text(shell, SWT.BORDER | SWT.PASSWORD); text_1.setBounds(209, 45, 160, 23); Button btnNewButton = new Button(shell, SWT.NONE); btnNewButton.setBounds(175, 87, 80, 27); btnNewButton.setText(&quot;\\u786E\\u8BA4&quot;); Button button = new Button(shell, SWT.NONE); button.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; shell.close(); return; &#125; &#125;); button.setText(&quot;\\u53D6\\u6D88&quot;); button.setBounds(269, 87, 80, 27); btnNewButton.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; int userId=UserWin.getIndex(); List&lt;Object&gt; param = new ArrayList&lt;&gt;(); String sql = &quot;select Adpassword from AdminisAcount where adid=?&quot;; param.add(userId); Object[] paramArray = param.toArray(); Map&lt;String, Object&gt; query = null; query = RecordBackstage.queryOne(sql, paramArray); if (query != null) &#123; if (!(query.get(&quot;ADPASSWORD&quot;).toString().equals(text_1.getText()))) &#123; MessageBox mb = new MessageBox(shell, SWT.ICON_WARNING); mb.setText(&quot;WTM-0701 访问被拒绝&quot;); mb.setMessage(&quot;密钥不合法，拒绝访问&quot;); mb.open(); access = false; return; &#125; access = true; shell.close(); return; &#125; access=false; &#125; &#125;); &#125;&#125; Reptilepackage org.wtm.demo;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.FileReader;import java.io.IOException;import java.io.InputStream;import java.net.MalformedURLException;import java.net.URL;import java.net.URLConnection;import java.text.DateFormat;import java.text.SimpleDateFormat;public class Reptile6 &#123; public static void main(String[] args) &#123; //测试系统 /*try &#123; Init(&quot;腾讯游戏&quot;,&quot;G:\\\\WebMuseum\\\\result\\\\腾讯游戏&quot;,&quot;https://www.qq.com/&quot;); &#125; catch (IOException e) &#123; &#125;*/ &#125; @SuppressWarnings(&quot;resource&quot;) public static String Init(String urlName, String resultFile, String urlStr) &#123; URL url = null; String address = null; InputStream in = null; // 判断url是否存在 try &#123; url = new URL(urlStr); &#125; catch (MalformedURLException e1) &#123; return &quot;false&quot;; &#125; URLConnection conin; try &#123; conin = url.openConnection(); in = conin.getInputStream(); &#125; catch (IOException e1) &#123; return &quot;false&quot;; &#125; // 判断路径是否存在 address = resultFile; File hasFile = new File(address); if (!(hasFile.exists())) &#123; return &quot;false&quot;; &#125; // 时间戳 long currentTime = System.currentTimeMillis(); DateFormat df = new SimpleDateFormat(&quot;yyyy_MM_dd_HH&quot;); String format = df.format(currentTime); // 创建时间戳分类文件夹 File file = new File(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format); if (!(file.exists())) &#123; file.mkdirs(); &#125; FileOutputStream out; try &#123; out = new FileOutputStream(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + &quot;Main.html&quot;); &#125; catch (FileNotFoundException e1) &#123; return &quot;false&quot;; &#125; byte b[] = new byte[1024]; int len = 0; try &#123; while ((len = in.read(b)) != -1) &#123; out.write(b, 0, len); &#125; &#125; catch (IOException e1) &#123; return &quot;false&quot;; &#125; // 获取CSS FileReader readCss; try &#123; readCss = new FileReader(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + &quot;Main.html&quot;); &#125; catch (FileNotFoundException e1) &#123; return &quot;false&quot;; &#125; BufferedReader brCss = new BufferedReader(readCss); String Cssvalue = null; try &#123; while ((Cssvalue = brCss.readLine()) != null) &#123; String[] valueCss = Cssvalue.split(&quot; &quot;); for (int i = 0; i &lt; valueCss.length; i++) &#123; if (valueCss[i].startsWith(&quot;&lt;link&quot;) | valueCss[i].endsWith(&quot;&lt;link&quot;)) &#123; String findLink = Cssvalue; String[] findHREF = findLink.split(&quot; &quot;); for (int j = 0; j &lt; findHREF.length; j++) &#123; if (findHREF[j].startsWith(&quot;href=&quot;)) &#123; String[] findURL = findHREF[j].split(&quot;\\&quot;&quot;); InputStream inCss = null; URL urlCss = null; try &#123; if (findURL[1].startsWith(&quot;http&quot;)) &#123; urlCss = new URL(findURL[1]); &#125; else &#123; urlCss = new URL(&quot;http:&quot; + findURL[1]); &#125; URLConnection coninCss = urlCss.openConnection(); inCss = coninCss.getInputStream(); &#125; catch (MalformedURLException e1) &#123; continue; &#125; catch (IOException e2) &#123; continue; &#125; catch (Exception e3) &#123; continue; &#125; FileOutputStream outCss = null; try &#123; if (findURL[1].endsWith(&quot;.ico&quot;)) &#123; outCss = new FileOutputStream(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + findURL[1].hashCode() + &quot;.ico&quot;); &#125; if (findURL[1].endsWith(&quot;.svg&quot;)) &#123; outCss = new FileOutputStream(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + findURL[1].hashCode() + &quot;.svg&quot;); &#125; if (findURL[1].endsWith(&quot;.png&quot;)) &#123; outCss = new FileOutputStream(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + findURL[1].hashCode() + &quot;.png&quot;); &#125; if (findURL[1].endsWith(&quot;.css&quot;)) &#123; outCss = new FileOutputStream(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + findURL[1].hashCode() + &quot;.css&quot;); &#125; if (outCss == null) &#123; outCss = new FileOutputStream(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + findURL[1].hashCode() + &quot;.css&quot;); &#125; &#125; catch (FileNotFoundException e) &#123; continue; &#125; if (outCss != null) &#123; byte bCss[] = new byte[1024]; int lenCss = -1; try &#123; while ((lenCss = inCss.read(bCss)) != -1) &#123; outCss.write(bCss, 0, lenCss); &#125; &#125; catch (IOException e) &#123; continue; &#125; System.out.println(&quot;http:&quot; + findURL[1]); &#125; if(inCss!=null) &#123; inCss.close(); &#125; if(outCss!=null) &#123; outCss.close(); &#125; &#125; &#125; &#125; &#125; &#125; if(brCss!=null) &#123; brCss.close(); &#125; if(readCss!=null) &#123; readCss.close(); &#125; &#125; catch (IOException e1) &#123; //e1.printStackTrace(); &#125; // 获取Img FileReader readImg; try &#123; readImg = new FileReader(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + &quot;Main.html&quot;); &#125; catch (FileNotFoundException e1) &#123; //e1.printStackTrace(); return &quot;false&quot;; &#125; BufferedReader bfImg = new BufferedReader(readImg); String imgValue = null; try &#123; while ((imgValue = bfImg.readLine()) != null) &#123; String[] valueImg = imgValue.split(&quot; &quot;); for (int i = 0; i &lt; valueImg.length; i++) &#123; if (valueImg[i].startsWith(&quot;&lt;img&quot;) | valueImg[i].endsWith(&quot;&lt;img&quot;)) &#123; String findImg = imgValue; String[] find = findImg.split(&quot; &quot;); for (int j = 0; j &lt; find.length; j++) &#123; if (find[j].startsWith(&quot;src=&quot;)) &#123; String findSrc = find[j]; String[] findURL = findSrc.split(&quot;\\&quot;&quot;); if (findURL.length &gt; 1) &#123; String URL = findURL[1]; try &#123; getImg(URL, address, urlName, format); &#125; catch (IOException e) &#123; continue; &#125; &#125; else &#123; continue; &#125; &#125; if (find[j].startsWith(&quot;data-original=&quot;)) &#123; String findData = find[j]; String[] findURL = findData.split(&quot;\\&quot;&quot;); if (findURL.length &gt; 1) &#123; String URL = findURL[1]; try &#123; getImg(URL, address, urlName, format); &#125; catch (IOException e) &#123; continue; &#125; &#125; else &#123; continue; &#125; &#125; if (find[j].startsWith(&quot;data-ysrc=&quot;)) &#123; String findData = find[j]; String[] findURL = findData.split(&quot;\\&quot;&quot;); if (findURL.length &gt; 1) &#123; String URL = findURL[1]; try &#123; getImg(URL, address, urlName, format); &#125; catch (IOException e) &#123; continue; &#125; &#125; else &#123; continue; &#125; &#125; &#125; &#125; &#125; &#125; if(bfImg!=null) &#123; bfImg.close(); &#125; if(readImg!=null) &#123; readImg.close(); &#125; &#125; catch (IOException e1) &#123; //e1.printStackTrace(); &#125; // 获取js FileReader readJs; try &#123; readJs = new FileReader(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + &quot;Main.html&quot;); &#125; catch (FileNotFoundException e1) &#123; //e1.printStackTrace(); return &quot;false&quot;; &#125; BufferedReader brJs = new BufferedReader(readJs); String JsValues = null; try &#123; while ((JsValues = brJs.readLine()) != null) &#123; String[] valueJs = JsValues.split(&quot; &quot;); for (int i = 0; i &lt; valueJs.length; i++) &#123; if (valueJs[i].startsWith(&quot;&lt;script&quot;) | valueJs[i].endsWith(&quot;&lt;script&quot;)) &#123; String findJs = JsValues; String[] find = findJs.split(&quot; &quot;); for (int j = 0; j &lt; find.length; j++) &#123; if (find[j].startsWith(&quot;src=&quot;)) &#123; String findURL = find[j]; String[] getURL = findURL.split(&quot;\\&quot;&quot;); InputStream inJs = null; URL urlJs = null; try &#123; if (getURL.length &gt; 1) &#123; if (getURL[1].startsWith(&quot;http&quot;)) &#123; urlJs = new URL(getURL[1]); &#125; else &#123; urlJs = new URL(&quot;https:&quot; + getURL[1]); &#125; &#125; URLConnection coninJs = urlJs.openConnection(); inJs = coninJs.getInputStream(); &#125; catch (MalformedURLException e) &#123; continue; &#125; catch (IOException e) &#123; continue; &#125; catch (Exception e) &#123; continue; &#125; FileOutputStream outJs = null; if (getURL.length &gt; 1) &#123; try &#123; outJs = new FileOutputStream(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + getURL[1].hashCode() + &quot;.js&quot;); &#125; catch (FileNotFoundException e) &#123; continue; &#125; &#125; else &#123; continue; &#125; if (outJs != null) &#123; byte bJs[] = new byte[1024]; int lenJs = -1; try &#123; while ((lenJs = inJs.read(bJs)) != -1) &#123; outJs.write(bJs, 0, lenJs); &#125; &#125; catch (IOException e) &#123; continue; &#125; System.out.println(&quot;http:&quot; + getURL[1]); &#125; if(inJs!=null) &#123; inJs.close(); &#125; if(outJs!=null) &#123; outJs.close(); &#125; &#125; &#125; &#125; &#125; &#125; if(brJs!=null) &#123; brJs.close(); &#125; if(readJs!=null) &#123; readJs.close(); &#125; &#125; catch (IOException e) &#123; &#125; try &#123; if(in!=null) &#123; in.close(); &#125; if(out!=null) &#123; out.close(); &#125; &#125; catch (Exception e) &#123; // &#125; return &quot;true&quot;; &#125; public static void getImg(String url, String address, String urlName, String format) throws IOException &#123; URL imgUrl = null; InputStream imgIn = null; try &#123; if (url.startsWith(&quot;http&quot;)) &#123; imgUrl = new URL(url); &#125; else &#123; imgUrl = new URL(&quot;http:&quot; + url); &#125; URLConnection imgCon = imgUrl.openConnection(); imgIn = imgCon.getInputStream(); &#125; catch (Exception e) &#123; return; &#125; FileOutputStream imgOut = null; if (url.endsWith(&quot;.gif&quot;)) &#123; imgOut = new FileOutputStream(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + imgUrl.hashCode() + &quot;.gif&quot;); &#125; if (url.endsWith(&quot;.png&quot;)) &#123; imgOut = new FileOutputStream(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + imgUrl.hashCode() + &quot;.png&quot;); &#125; if (url.endsWith(&quot;.jpg&quot;)) &#123; imgOut = new FileOutputStream(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + imgUrl.hashCode() + &quot;.jpg&quot;); &#125; if (url.endsWith(&quot;.jpeg&quot;)) &#123; imgOut = new FileOutputStream(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + imgUrl.hashCode() + &quot;.jpeg&quot;); &#125; if (url.endsWith(&quot;/0&quot;)) &#123; imgOut = new FileOutputStream(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + imgUrl.hashCode() + &quot;.jpeg&quot;); &#125; if (imgOut == null) &#123; imgOut = new FileOutputStream(address + &quot;\\\\&quot; + urlName + &quot;_&quot; + format + &quot;\\\\&quot; + imgUrl.hashCode() + &quot;.webp&quot;); &#125; if (imgOut != null) &#123; byte i1[] = new byte[1024]; int imgLen = 0; while ((imgLen = imgIn.read(i1)) != -1) &#123; imgOut.write(i1, 0, imgLen); &#125; System.out.println(imgUrl); &#125; if(imgIn!=null) &#123; imgIn.close(); &#125; if(imgOut!=null) &#123; imgOut.close(); &#125; &#125;&#125; RecordBackstage 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package org.wtm.demo;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.SQLException;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;public class RecordBackstage &#123; // 添加记录 public static void addRecord(Map&lt;String, Object&gt; record) throws SQLException &#123; String sql = &quot;insert into records values(seq_rec_no.nextval,sysdate,?,?,?,?,?,?)&quot;; List&lt;Object&gt; param = new ArrayList&lt;&gt;(); param.add(record.get(&quot;MARK&quot;)); param.add(record.get(&quot;TASKID&quot;)); param.add(record.get(&quot;TASKRESULTFILE&quot;)); param.add(record.get(&quot;TASKNAME&quot;)); param.add(record.get(&quot;TASKURLSTR&quot;)); param.add(null); Object[] paramArray = param.toArray(); WTMbackstage.update(sql, paramArray); &#125; // 分页查询 public static List&lt;Map&lt;String, Object&gt;&gt; queryPage(String sql, int page, int rows, Object... paramArray) throws SQLException &#123; int startrows = (page - 1) * rows; int endrows = page * rows; sql = &quot;select t.* from(select t.*,rownum rn from(&quot; + sql + &quot;) t) t where t.rn &lt;=? and t.rn&gt;?&quot;; Object[] newparamArray = new Object[paramArray.length + 2]; System.arraycopy(paramArray, 0, newparamArray, 0, paramArray.length); newparamArray[newparamArray.length - 2] = endrows; newparamArray[newparamArray.length - 1] = startrows; return WTMbackstage.query(sql, newparamArray); &#125; public static Map&lt;String, Object&gt; queryOne(String sql, Object... paramArray) &#123; Connection conn = null; try &#123; conn = WTMbackstage.conn; PreparedStatement ps = conn.prepareStatement(sql); for (int i = 0; i &lt; paramArray.length; i++) &#123; ps.setObject(i + 1, paramArray[i]); &#125; ResultSet rs = ps.executeQuery(); ResultSetMetaData rsmd = rs.getMetaData(); Map&lt;String, Object&gt; row = new LinkedHashMap&lt;&gt;(); if (rs.next()) &#123; for (int i = 1; i &lt;= rsmd.getColumnCount(); i++) &#123; String columnName = rsmd.getColumnName(i); Object columValue = rs.getObject(i); row.put(columnName, columValue); &#125; &#125; return row; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125;&#125; PersonalCenter 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165package org.wtm.demo;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.widgets.Dialog;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Text;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.widgets.MessageBox;import java.sql.SQLException;import java.util.List;import java.util.Map;import org.eclipse.swt.SWT;import org.eclipse.wb.swt.SWTResourceManager;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;public class PersonalCenter extends Dialog &#123; protected Object result; protected Shell shell; private Text text; private Text text_1; private Text text_2; /** * Create the dialog. * @param parent * @param style */ public PersonalCenter(Shell parent, int style) &#123; super(parent, style); setText(&quot;SWT Dialog&quot;); &#125; /** * Open the dialog. * @return the result */ public Object open() &#123; createContents(); Display display = getParent().getDisplay(); int x = (display.getBounds().width - shell.getBounds().width) / 2; int y = (display.getBounds().height - shell.getBounds().height) / 2; shell.setLocation(x, y); shell.open(); shell.layout(); while (!shell.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; return result; &#125; /** * Create contents of the dialog. */ private void createContents() &#123; shell = new Shell(getParent(), SWT.DIALOG_TRIM | SWT.PRIMARY_MODAL); shell.setSize(450, 300); shell.setText(&quot;\\u4E2A\\u4EBA\\u4E2D\\u5FC3&quot;); Label lblNewLabel = new Label(shell, SWT.NONE); lblNewLabel.setImage(SWTResourceManager.getImage(PersonalCenter.class, &quot;/img/bg_1.png&quot;)); lblNewLabel.setBounds(0, 0, 444, 34); Label label = new Label(shell, SWT.NONE); label.setImage(SWTResourceManager.getImage(PersonalCenter.class, &quot;/img/bg_1.png&quot;)); label.setBounds(0, 237, 444, 34); Label label_1 = new Label(shell, SWT.CENTER); label_1.setFont(SWTResourceManager.getFont(&quot;Microsoft YaHei UI&quot;, 14, SWT.NORMAL)); label_1.setBounds(175, 40, 76, 25); label_1.setText(&quot;\\u4E2A\\u4EBA\\u4E2D\\u5FC3&quot;); Label label_2 = new Label(shell, SWT.NONE); label_2.setBounds(104, 88, 47, 17); label_2.setText(&quot;\\u7BA1\\u7406\\u5458\\uFF1A&quot;); text = new Text(shell, SWT.BORDER); text.setEnabled(false); text.setBounds(157, 85, 170, 23); text_1 = new Text(shell, SWT.BORDER); text_1.setBounds(157, 114, 170, 23); Label label_3 = new Label(shell, SWT.NONE); label_3.setBounds(104, 117, 47, 17); label_3.setText(&quot;\\u65B0\\u5BC6\\u94A5\\uFF1A&quot;); Label label_4 = new Label(shell, SWT.NONE); label_4.setBounds(86, 146, 65, 17); label_4.setText(&quot;\\u786E\\u8BA4\\u65B0\\u5BC6\\u94A5\\uFF1A&quot;); text_2 = new Text(shell, SWT.BORDER); text_2.setBounds(157, 143, 170, 23); int index = UserWin.getIndex(); Button button = new Button(shell, SWT.NONE); button.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; if(text_1.getText().trim().length()&gt;0 &amp;&amp; text_2.getText().trim().length()&gt;0) &#123; if(text_1.getText().equals(text_2.getText())) &#123; String sql = &quot; update AdminisAcount set ADPASSWORD = &quot;+ text_1.getText() +&quot; where ADID = &quot; + index; try &#123; WTMbackstage.SQLOption(sql); MessageBox mb = new MessageBox(shell,SWT.ICON_INFORMATION | SWT.OK); mb.setText(&quot;系统提示&quot;); mb.setMessage(&quot;密码修改成功，请重新登陆&quot;); mb.open(); System.exit(0); &#125; catch (SQLException e1) &#123; MessageBox mb = new MessageBox(shell,SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-1301 数据库遇到错误&quot;); mb.setMessage(e1.getMessage()); mb.open(); return; &#125; &#125;else &#123; MessageBox mb = new MessageBox(shell,SWT.ICON_WARNING | SWT.OK); mb.setText(&quot;WTM-1302 输入密钥两次不一致&quot;); mb.setMessage(&quot;输入密钥两次不一致&quot;); mb.open(); &#125; &#125;else &#123; MessageBox mb = new MessageBox(shell,SWT.ICON_WARNING | SWT.OK); mb.setText(&quot;WTM-1303 密钥不可为空&quot;); mb.setMessage(&quot;密钥不可为空&quot;); mb.open(); &#125; &#125; &#125;); button.setBounds(137, 185, 80, 27); button.setText(&quot;\\u786E\\u8BA4&quot;); Button button_1 = new Button(shell, SWT.NONE); button_1.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; shell.close(); &#125; &#125;); button_1.setBounds(223, 185, 80, 27); button_1.setText(&quot;\\u53D6\\u6D88&quot;); String sql = &quot;select ADNAME from AdminisAcount where ADID = ?&quot;; try &#123; List&lt;Map&lt;String,Object&gt;&gt; ret = WTMbackstage.query(sql,index); String ADname = ret.get(0).get(&quot;ADNAME&quot;)+&quot;&quot;; text.setText(ADname); &#125; catch (SQLException e1) &#123; MessageBox mb = new MessageBox(shell,SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-1304 数据库遇到错误&quot;); mb.setMessage(e1.getMessage()); mb.open(); return; &#125; &#125;&#125; OracleFileOut 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148package org.wtm.demo;import org.eclipse.swt.widgets.Dialog;import org.eclipse.swt.widgets.DirectoryDialog;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.widgets.MessageBox;import java.io.IOException;import org.eclipse.swt.SWT;import org.eclipse.swt.widgets.Text;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.widgets.Combo;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.wb.swt.SWTResourceManager;public class OracleFileOut extends Dialog &#123; protected Object result; protected Shell shlDmp; private Text txtFile; private Text txtGwebtimemachinedemotable; /** * Create the dialog. * @param parent * @param style */ public OracleFileOut(Shell parent, int style) &#123; super(parent, style); setText(&quot;SWT Dialog&quot;); &#125; /** * Open the dialog. * @return the result */ public Object open() &#123; createContents(); // 居中显示 Display display = Display.getDefault(); int x = (display.getBounds().width - shlDmp.getBounds().width) / 2; int y = (display.getBounds().height - shlDmp.getBounds().height) / 2; shlDmp.setLocation(x, y); shlDmp.open(); shlDmp.layout(); //Display display = getParent().getDisplay(); while (!shlDmp.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; return result; &#125; /** * Create contents of the dialog. */ private void createContents() &#123; shlDmp = new Shell(getParent(), SWT.DIALOG_TRIM | SWT.PRIMARY_MODAL); shlDmp.setSize(400, 300); shlDmp.setText(&quot;DMP\\u6587\\u4EF6\\u5BFC\\u51FA&quot;); Label label = new Label(shlDmp, SWT.NONE); label.setBounds(35, 64, 61, 17); label.setText(&quot;\\u6587\\u4EF6\\u540D\\uFF1A&quot;); Label label_1 = new Label(shlDmp, SWT.NONE); label_1.setBounds(35, 142, 61, 17); label_1.setText(&quot;\\u5BFC\\u51FA\\u8DEF\\u5F84\\uFF1A&quot;); Label label_2 = new Label(shlDmp, SWT.NONE); label_2.setBounds(35, 104, 61, 17); label_2.setText(&quot;\\u76EE\\u6807\\u8868\\u540D\\uFF1A&quot;); txtFile = new Text(shlDmp, SWT.BORDER); txtFile.setText(&quot;file&quot;); txtFile.setBounds(102, 61, 131, 23); txtGwebtimemachinedemotable = new Text(shlDmp, SWT.BORDER); txtGwebtimemachinedemotable.setBounds(102, 139, 210, 23); Combo combo = new Combo(shlDmp, SWT.NONE); combo.setItems(new String[] &#123;&quot;TASKSHEET&quot;, &quot;ADMINISACOUNT&quot;, &quot;RECORDS&quot;&#125;); combo.setBounds(102, 101, 131, 25); Button button = new Button(shlDmp, SWT.NONE); button.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; if(txtFile.getText().trim().length()&gt;0 &amp;&amp; txtGwebtimemachinedemotable.getText().trim().length()&gt;0 &amp;&amp; combo.getText().trim().length()&gt;0) &#123; try &#123; WTMbackstage.backupData(txtFile.getText().trim(),txtGwebtimemachinedemotable.getText().trim(),combo.getText().trim()); MessageBox mb = new MessageBox(shlDmp,SWT.ICON_INFORMATION | SWT.OK); mb.setText(&quot;系统提示 导出成功&quot;); mb.setMessage(&quot;导出文件位置：&quot;+txtGwebtimemachinedemotable.getText().trim()+&quot;\\\\&quot;+txtFile.getText().trim()); mb.open(); &#125; catch (InterruptedException e1) &#123; MessageBox mb = new MessageBox(shlDmp,SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-1101 导出失败&quot;); mb.setMessage(e1.getMessage()); mb.open(); &#125; catch (IOException e1) &#123; MessageBox mb = new MessageBox(shlDmp,SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-1102 导出失败&quot;); mb.setMessage(e1.getMessage()); mb.open(); &#125; &#125;else &#123; MessageBox mb = new MessageBox(shlDmp,SWT.ICON_WARNING | SWT.OK); mb.setText(&quot;WTM-1103 导出失败&quot;); mb.setMessage(&quot;文本框不能为空&quot;); mb.open(); &#125; &#125; &#125;); button.setBounds(153, 182, 80, 27); button.setText(&quot;\\u5BFC\\u51FA&quot;); Label label_3 = new Label(shlDmp, SWT.NONE); label_3.setImage(SWTResourceManager.getImage(OracleFileOut.class, &quot;/img/bg3_3.jpg&quot;)); label_3.setBounds(0, 237, 394, 34); Label label_4 = new Label(shlDmp, SWT.NONE); label_4.setImage(SWTResourceManager.getImage(OracleFileOut.class, &quot;/img/bg3_4.jpg&quot;)); label_4.setBounds(0, 0, 394, 34); Button btnNewButton = new Button(shlDmp, SWT.NONE); btnNewButton.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; DirectoryDialog dd=new DirectoryDialog(shlDmp); dd.setText(&quot;目录浏览&quot;); dd.setMessage(&quot;请选择导出数据库文件存放的目录位置&quot;); dd.setFilterPath(&quot;C:\\\\&quot;); String locationPath = dd.open(); if(locationPath!=null)&#123; txtGwebtimemachinedemotable.setText(locationPath); &#125; &#125; &#125;); btnNewButton.setBounds(318, 139, 60, 23); btnNewButton.setText(&quot;\\u6D4F\\u89C8&quot;); &#125;&#125; OracleFileIn 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127package org.wtm.demo;import org.eclipse.swt.widgets.Dialog;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.FileDialog;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.widgets.MessageBox;import java.io.IOException;import org.eclipse.swt.SWT;import org.eclipse.swt.widgets.Text;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.wb.swt.SWTResourceManager;public class OracleFileIn extends Dialog &#123; protected Object result; protected Shell shlDmp; private Text text_1; /** * Create the dialog. * @param parent * @param style */ public OracleFileIn(Shell parent, int style) &#123; super(parent, style); setText(&quot;SWT Dialog&quot;); &#125; /** * Open the dialog. * @return the result */ public Object open() &#123; Display display = Display.getDefault(); createContents(); // 居中显示 int x = (display.getBounds().width - shlDmp.getBounds().width) / 2; int y = (display.getBounds().height - shlDmp.getBounds().height) / 2; shlDmp.setLocation(x, y); Button button = new Button(shlDmp, SWT.NONE); button.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; FileDialog fileDialog = new FileDialog(shlDmp); String flag = fileDialog.open(); if(flag!=null) &#123; text_1.setText(fileDialog.getFilterPath()+&quot;\\\\&quot;+fileDialog.getFileName()); &#125; &#125; &#125;); button.setBounds(304, 92, 60, 23); button.setText(&quot;\\u6D4F\\u89C8&quot;); shlDmp.open(); shlDmp.layout(); //Display display = getParent().getDisplay(); while (!shlDmp.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; return result; &#125; /** * Create contents of the dialog. */ private void createContents() &#123; shlDmp = new Shell(getParent(), SWT.DIALOG_TRIM | SWT.PRIMARY_MODAL); shlDmp.setSize(400, 300); shlDmp.setText(&quot;DMP\\u6587\\u4EF6\\u5BFC\\u5165&quot;); Label label_1 = new Label(shlDmp, SWT.NONE); label_1.setBounds(30, 95, 61, 17); label_1.setText(&quot;\\u5BFC\\u5165\\u8DEF\\u5F84\\uFF1A&quot;); text_1 = new Text(shlDmp, SWT.BORDER); text_1.setBounds(97, 92, 200, 23); Button button = new Button(shlDmp, SWT.NONE); button.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; if(text_1.getText().trim().length()&gt;0) &#123; try &#123; WTMbackstage.InputData(text_1.getText().trim()); MessageBox mb = new MessageBox(shlDmp,SWT.ICON_INFORMATION | SWT.OK); mb.setText(&quot;系统提示 导入成功&quot;); mb.setMessage(&quot;导入文件位置：&quot;+text_1.getText().trim()); mb.open(); &#125; catch (InterruptedException e1) &#123; MessageBox mb = new MessageBox(shlDmp,SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-1201 导入失败&quot;); mb.setMessage(e1.getMessage()); mb.open(); &#125; catch (IOException e1) &#123; MessageBox mb = new MessageBox(shlDmp,SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-1202 导入失败&quot;); mb.setMessage(e1.getMessage()); mb.open(); &#125; &#125;else &#123; MessageBox mb = new MessageBox(shlDmp,SWT.ICON_WARNING | SWT.OK); mb.setText(&quot;WTM-1203 导入失败&quot;); mb.setMessage(&quot;文本框不能为空&quot;); mb.open(); &#125; &#125; &#125;); button.setBounds(160, 147, 80, 27); button.setText(&quot;\\u5BFC\\u5165&quot;); Label label_3 = new Label(shlDmp, SWT.NONE); label_3.setImage(SWTResourceManager.getImage(OracleFileIn.class, &quot;/img/bg3_3.jpg&quot;)); label_3.setBounds(0, 237, 394, 34); Label label_4 = new Label(shlDmp, SWT.NONE); label_4.setImage(SWTResourceManager.getImage(OracleFileIn.class, &quot;/img/bg3_4.jpg&quot;)); label_4.setBounds(0, 0, 394, 34); &#125;&#125; Modify 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164package org.wtm.demo;import org.eclipse.swt.widgets.Dialog;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.widgets.MessageBox;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import java.util.Map;import org.eclipse.swt.SWT;import org.eclipse.swt.widgets.Text;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;public class Modify extends Dialog &#123; protected Object result; protected Shell shlAbout; private Text id; private Text name; private Text resultfile; private Text url; private Map&lt;String, Object&gt; row; /** * Create the dialog. * @param parent * @param style */ public Modify(Shell parent, int style,Map&lt;String, Object&gt; row) &#123; super(parent, style); setText(&quot;SWT Dialog&quot;); this.row = row; &#125; /** * Open the dialog. * @return the result */ public Object open() &#123; createContents(); Display display = getParent().getDisplay(); int x = (display.getBounds().width - shlAbout.getBounds().width) / 2; int y = (display.getBounds().height - shlAbout.getBounds().height) / 2; shlAbout.setLocation(x, y); shlAbout.open(); shlAbout.layout(); while (!shlAbout.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; return result; &#125; /** * Create contents of the dialog. */ private void createContents() &#123; shlAbout = new Shell(getParent(), SWT.DIALOG_TRIM | SWT.PRIMARY_MODAL); shlAbout.setSize(300, 375); shlAbout.setText(&quot;\\u4FEE\\u6539\\u4EFB\\u52A1&quot;); Label label = new Label(shlAbout, SWT.NONE); label.setBounds(57, 65, 36, 17); label.setText(&quot;\\u7F16\\u53F7\\uFF1A&quot;); id = new Text(shlAbout, SWT.BORDER); id.setEnabled(false); id.setBounds(109, 62, 130, 23); Label label_1 = new Label(shlAbout, SWT.NONE); label_1.setBounds(57, 107, 36, 17); label_1.setText(&quot;\\u540D\\u79F0&quot;); name = new Text(shlAbout, SWT.BORDER); name.setBounds(109, 104, 130, 23); Label label_2 = new Label(shlAbout, SWT.NONE); label_2.setBounds(57, 152, 36, 17); label_2.setText(&quot;\\u8DEF\\u5F84&quot;); resultfile = new Text(shlAbout, SWT.BORDER); resultfile.setBounds(109, 149, 130, 23); Label lblUrl = new Label(shlAbout, SWT.NONE); lblUrl.setBounds(57, 193, 36, 17); lblUrl.setText(&quot;URL&quot;); url = new Text(shlAbout, SWT.BORDER); url.setBounds(109, 190, 130, 23); Button btnNewButton = new Button(shlAbout, SWT.NONE); btnNewButton.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; String sql = &quot; update tasksheet set TASKNAME=?,TASKRESULTFILE=?,TASKURLSTR=? where TASKID = &quot; + row.get(&quot;TASKID&quot;); List&lt;String&gt; paramList = new ArrayList&lt;&gt;(); if(name.getText().trim().length()&gt;0) &#123; paramList.add(name.getText()); &#125;else &#123; MessageBox mb = new MessageBox(shlAbout,SWT.ICON_WARNING | SWT.OK); mb.setText(&quot;WTM-0601 请填写名称&quot;); mb.setMessage(&quot;请填写名称&quot;); mb.open(); return; &#125; if(resultfile.getText().trim().length()&gt;0) &#123; paramList.add(resultfile.getText()); &#125;else &#123; MessageBox mb = new MessageBox(shlAbout,SWT.ICON_WARNING | SWT.OK); mb.setText(&quot;WTM-0602 请填写路径&quot;); mb.setMessage(&quot;请填写路径&quot;); mb.open(); return; &#125; if(url.getText().trim().length()&gt;0) &#123; paramList.add(url.getText()); &#125;else &#123; MessageBox mb = new MessageBox(shlAbout,SWT.ICON_WARNING | SWT.OK); mb.setText(&quot;WTM-0603 请填写URL&quot;); mb.setMessage(&quot;请填写URL&quot;); mb.open(); return; &#125; try &#123; WTMbackstage.update(sql, paramList.toArray()); &#125; catch (SQLException e1) &#123; MessageBox mb = new MessageBox(shlAbout,SWT.ICON_ERROR | SWT.OK); mb.setText(&quot;WTM-0604 数据库遇到错误&quot;); mb.setMessage(e1.getMessage()); mb.open(); return; &#125; MessageBox mb = new MessageBox(shlAbout,SWT.ICON_INFORMATION | SWT.OK); mb.setText(&quot;系统提示&quot;); mb.setMessage(&quot;修改成功&quot;); mb.open(); &#125; &#125;); btnNewButton.setBounds(57, 256, 80, 27); btnNewButton.setText(&quot;\\u4FDD\\u5B58&quot;); Button button = new Button(shlAbout, SWT.NONE); button.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; shlAbout.close(); &#125; &#125;); button.setBounds(159, 256, 80, 27); button.setText(&quot;\\u53D6\\u6D88&quot;); id.setText(row.get(&quot;TASKID&quot;)+&quot;&quot;); name.setText(row.get(&quot;TASKNAME&quot;)+&quot;&quot;); resultfile.setText(row.get(&quot;TASKRESULTFILE&quot;)+&quot;&quot;); url.setText(row.get(&quot;TASKURLSTR&quot;)+&quot;&quot;); &#125;&#125; HelpFile 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879package org.wtm.demo;import org.eclipse.swt.SWT;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.widgets.Dialog;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Text;import org.eclipse.wb.swt.SWTResourceManager;public class HelpFile extends Dialog &#123; protected Object result; protected Shell shell; private Text txtsearchEnginealtavistayahoogoogle; /** * Create the dialog. * @param parent * @param style */ public HelpFile(Shell parent, int style) &#123; super(parent, style); setText(&quot;SWT Dialog&quot;); &#125; /** * Open the dialog. * @return the result */ public Object open() &#123; Display display = Display.getDefault(); createContents(); //居中显示 int x = (display.getBounds().width - shell.getBounds().width) / 2; int y = (display.getBounds().height - shell.getBounds().height) / 2; shell.setLocation(x, y); shell.setLayout(null); shell.open(); shell.layout(); while (!shell.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; return result; &#125; /** * Create contents of the dialog. */ private void createContents() &#123; shell = new Shell(getParent(), SWT.DIALOG_TRIM | SWT.PRIMARY_MODAL); shell.setSize(450, 500); shell.setText(&quot;\\u7BA1\\u7406\\u5458\\u4F7F\\u7528\\u624B\\u518C&quot;); txtsearchEnginealtavistayahoogoogle = new Text(shell, SWT.BORDER | SWT.WRAP | SWT.V_SCROLL | SWT.READ_ONLY); txtsearchEnginealtavistayahoogoogle.setBounds(10, 62, 424, 341); txtsearchEnginealtavistayahoogoogle.setText(&quot;\\u9996\\u9875\\r\\n1\\u3001\\u767B\\u5F55\\u754C\\u9762\\uFF1A\\u6B63\\u786E\\u8F93\\u5165\\u7BA1\\u7406\\u5458\\u540D\\u5B57\\u548C\\u5BC6\\u7801\\u70B9\\u51FB\\u767B\\u5F55\\u5373\\u53EF\\u8FDB\\u5165WebTimeMachine\\u4E3B\\u754C\\u9762\\uFF1B\\r\\n2\\u3001\\u7CFB\\u7EDF\\u914D\\u7F6E\\uFF1A\\u70B9\\u51FB\\u914D\\u7F6E\\u6587\\u4EF6\\u6309\\u94AE\\u5373\\u53EF\\u81EA\\u52A8\\u6253\\u5F00\\u5176\\u6240\\u5728\\u7684\\u6587\\u4EF6\\u5939\\uFF0C\\u65B9\\u4FBF\\u53CA\\u65F6\\u4FEE\\u6539\\uFF1B\\r\\n\\r\\n\\u4E3B\\u754C\\u9762\\r\\n1\\u3001\\u5BFC\\u822A\\u680F\\r\\n \\uFF081\\uFF09\\u7CFB\\u7EDF\\uFF1A\\u76F4\\u63A5\\u70B9\\u51FB\\u53EF\\u6D4F\\u89C8\\u5E93\\u76EE\\u5F55\\uFF1BDMP\\u6587\\u4EF6\\u7684\\u5BFC\\u5165\\u5BFC\\u51FA\\uFF1B\\u5B89\\u5168\\u9000\\u51FA\\uFF1B\\r\\n \\uFF082\\uFF09\\u4E2A\\u4EBA\\uFF1A\\u7BA1\\u7406\\u5458\\u53EF\\u5728\\u4E2A\\u4EBA\\u4E2D\\u5FC3\\u4FEE\\u6539\\u5BC6\\u7801\\uFF1B\\r\\n \\uFF083\\uFF09\\u5E2E\\u52A9\\uFF1A\\u53EF\\u67E5\\u770B\\u4F7F\\u7528\\u624B\\u518C\\uFF0C\\u65B9\\u4FBF\\u8BE5\\u8F6F\\u4EF6\\u7684\\u64CD\\u4F5C\\u4F7F\\u7528\\uFF1B\\r\\n \\uFF084\\uFF09\\u5173\\u4E8E\\uFF1A\\u53EF\\u67E5\\u770B\\u8BE5\\u8F6F\\u4EF6\\u5F53\\u524D\\u7248\\u672C\\u4EE5\\u53CA\\u5176\\u5F00\\u53D1\\u8005\\uFF1B\\r\\n2\\u3001\\u4EFB\\u52A1\\u680F\\r\\n \\uFF081\\uFF09\\u4EFB\\u52A1\\u8868\\uFF1A\\u663E\\u793A\\u9700\\u8981\\u6267\\u884C\\u7684\\u4EFB\\u52A1\\uFF0C\\u5305\\u62EC\\uFF1A\\u7F16\\u53F7\\u3001\\u540D\\u79F0\\u3001\\u8DEF\\u5F84\\u3001Url\\u7B49\\uFF1B\\u53EF\\u8F93\\u5165\\u540D\\u79F0\\u8FDB\\u884C\\u8BE6\\u7EC6\\u67E5\\u8BE2\\u4EFB\\u52A1\\uFF0C\\u4E5F\\u53EF\\u76F4\\u63A5\\u67E5\\u8BE2\\u6240\\u6709\\u4EFB\\u52A1\\uFF1B\\u53EF\\u5BF9\\u4EFB\\u52A1\\u8FDB\\u884C\\u589E\\u3001\\u5220\\u3001\\u6539\\uFF1B\\u53EF\\u7ACB\\u5373\\u6267\\u884C\\u4E5F\\u53EF\\u5B9A\\u65F6\\u6267\\u884C\\uFF0C\\u70B9\\u51FB\\u5B9A\\u65F6\\u6267\\u884C\\u8DF3\\u8F6C\\u5B9A\\u65F6\\u4EFB\\u52A1\\u754C\\u9762\\uFF1B\\r\\n \\uFF082\\uFF09\\u4EFB\\u52A1\\u8BA1\\u5212\\uFF1A\\u6DFB\\u52A0\\u722C\\u53D6\\u4EFB\\u52A1\\uFF0C\\u6240\\u6DFB\\u52A0\\u7684\\u4EFB\\u52A1\\u53EF\\u5728\\u4EFB\\u52A1\\u680F\\u67E5\\u770B\\uFF1B\\r\\n \\uFF083\\uFF09\\u5B9A\\u65F6\\u4EFB\\u52A1\\uFF1A\\u53EF\\u9009\\u62E9\\u4E00\\u4E2A\\u65F6\\u95F4\\u6BB5\\u6765\\u5F00\\u542F\\u4EFB\\u52A1\\uFF0C\\u6B64\\u65F6\\u4EFB\\u52A1\\u680F\\u4E2D\\u6240\\u6709\\u4EFB\\u52A1\\u5C06\\u4F1A\\u5728\\u8BE5\\u65F6\\u95F4\\u6BB5\\u81EA\\u52A8\\u8FDB\\u884C\\u722C\\u53D6\\u5E76\\u4FDD\\u5B58\\u5728\\u6587\\u4EF6\\u5939\\u4E2D\\uFF1B\\r\\n \\uFF084\\uFF09\\u722C\\u53D6\\u8BB0\\u5F55\\uFF1A\\u5206\\u9875\\u663E\\u793A\\u722C\\u53D6\\u7684\\u5386\\u53F2\\u8BB0\\u5F55\\uFF0C\\u5305\\u62EC\\uFF1A\\u8BB0\\u5F55\\u7F16\\u53F7\\u3001\\u722C\\u53D6\\u65F6\\u95F4\\u3001\\u722C\\u53D6\\u72B6\\u6001\\u3001\\u4EFB\\u52A1\\u7F16\\u53F7\\u3001\\u540D\\u79F0\\u3001\\u8DEF\\u5F84\\u3001Url\\u7B49\\uFF1B\\u53EF\\u5BF9\\u722C\\u53D6\\u8BB0\\u5F55\\u4ECE\\u540D\\u79F0\\u3001Url\\u3001\\u4EFB\\u52A1\\u7F16\\u53F7\\u3001\\u722C\\u53D6\\u72B6\\u6001\\u4EE5\\u53CA\\u722C\\u53BB\\u65F6\\u95F4\\u7B49\\u65B9\\u9762\\u8FDB\\u884C\\u6A21\\u7CCA\\u3001\\u7CBE\\u786E\\u67E5\\u8BE2\\uFF1B\\r\\n&quot;); Label label = new Label(shell, SWT.CENTER); label.setFont(SWTResourceManager.getFont(&quot;Microsoft YaHei UI&quot;, 12, SWT.NORMAL)); label.setBounds(164, 21, 112, 25); label.setText(&quot;\\u7BA1\\u7406\\u5458\\u4F7F\\u7528\\u624B\\u518C&quot;); Button btnNewButton = new Button(shell, SWT.CENTER); btnNewButton.setBounds(143, 423, 158, 30); btnNewButton.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; shell.close(); &#125; &#125;); btnNewButton.setText(&quot;\\u5173\\u95ED&quot;); &#125;&#125; About 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273package org.wtm.demo;import org.eclipse.swt.widgets.Dialog;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.SWT;import org.eclipse.wb.swt.SWTResourceManager;public class About extends Dialog &#123; protected Object result; protected Shell shlAbout; /** * Create the dialog. * @param parent * @param style */ public About(Shell parent, int style) &#123; super(parent, style); setText(&quot;SWT Dialog&quot;); &#125; /** * Open the dialog. * @return the result */ public Object open() &#123; createContents(); Display display = getParent().getDisplay(); int x = (display.getBounds().width - shlAbout.getBounds().width) / 2; int y = (display.getBounds().height - shlAbout.getBounds().height) / 2; shlAbout.setLocation(x, y); shlAbout.open(); shlAbout.layout(); while (!shlAbout.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; return result; &#125; /** * Create contents of the dialog. */ private void createContents() &#123; shlAbout = new Shell(getParent(), SWT.DIALOG_TRIM | SWT.PRIMARY_MODAL); shlAbout.setSize(450, 300); shlAbout.setText(&quot;About&quot;); Label lblAbout = new Label(shlAbout, SWT.NONE); lblAbout.setFont(SWTResourceManager.getFont(&quot;Microsoft YaHei UI&quot;, 14, SWT.NORMAL)); lblAbout.setBounds(192, 12, 56, 25); lblAbout.setText(&quot;About&quot;); Label label = new Label(shlAbout, SWT.SEPARATOR | SWT.HORIZONTAL); label.setBounds(10, 43, 424, 2); Label lblWebtimemoine = new Label(shlAbout, SWT.NONE); lblWebtimemoine.setBounds(47, 64, 104, 17); lblWebtimemoine.setText(&quot;WebTimeMachine&quot;); Label lblNewLabel = new Label(shlAbout, SWT.NONE); lblNewLabel.setBounds(47, 87, 104, 17); lblNewLabel.setText(&quot;Version 3.2&quot;); Label lblHooyantsingChuangweirong = new Label(shlAbout, SWT.NONE); lblHooyantsingChuangweirong.setBounds(47, 110, 181, 34); lblHooyantsingChuangweirong.setText(&quot;Hooyantsing Chuangwei-Rong\\r\\nLida-Xiao Ziyun-Shao&quot;); &#125;&#125; 数据库脚本 123456789101112131415161718192021222324252627282930313233343536373839create table Tasksheet( taskid number(6) primary key, taskname varchar2(40), taskresultfile varchar2(60), taskcachefile varchar2(60), taskurlstr varchar2(600) unique);create sequence Seq_tasksheet_taskid ;create table AdminisAcount( Adid number(4)primary key, Adname varchar2(10), Adpassword varchar(20), Adcontact varchar2(11) not null, Ademail varchar2(100) constraint ck_adm_email check (Ademail like &#x27;_%@_%._%&#x27;), Adtime date);create sequence Ad_table start with 1001 increment by 1;insert into AdminisAcount values(Ad_table.Nextval,&#x27;胡燕卿&#x27;,&#x27;123456&#x27;,&#x27;123&#x27;,&#x27;1111@qq.com&#x27;,sysdate);insert into AdminisAcount values(Ad_table.Nextval,&#x27;容创伟&#x27;,&#x27;123456&#x27;,&#x27;123456&#x27;,&#x27;2222@qq.com&#x27;,sysdate);insert into AdminisAcount values(Ad_table.Nextval,&#x27;肖理达&#x27;,&#x27;123456&#x27;,&#x27;123456&#x27;,&#x27;123@qq.com&#x27;,sysdate);insert into AdminisAcount values(Ad_table.Nextval,&#x27;邵子芸&#x27;,&#x27;123456&#x27;,&#x27;123456&#x27;,&#x27;4444@qq.com&#x27;,sysdate);create table records( recno int primary key, --记录编号，主键，序列生成 time date, --爬取时间，调用数据库时间 success varchar2(6) constraint ck_rec_succ check(success in(&#x27;true&#x27;,&#x27;false&#x27;)), --爬取状态，约束为字符串true/false taskid int , --任务编号 taskresultfile varchar2(60), --爬取文件路径 webname varchar2(60), --网站名称 url varchar2(600), --url cache varchar2(60) --缓存文件，暂定null) create sequence seq_rec_no --创建主键序列select * from tasksheet;select * from AdminisAcount; 项目工程 WTM 3.2 **Demo.zip **","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第50次课程","slug":"技术向/Java/源辰课程记录/第50次课程","date":"2019-07-29T16:00:00.000Z","updated":"2022-05-11T01:18:07.391Z","comments":true,"path":"技术向/Java/源辰课程记录/第50次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC50%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第50次课程 07.30.2019 内容 MIS系统一[廖彦] Main Buju (包含布局练习) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281package am.buju;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.layout.GridLayout;import org.eclipse.swt.widgets.Table;import java.sql.Date;import java.util.ArrayList;import java.util.List;import java.util.Map;import org.eclipse.swt.SWT;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.widgets.MessageBox;import org.eclipse.swt.layout.GridData;import org.eclipse.swt.widgets.Text;import org.eclipse.swt.widgets.Composite;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.layout.FillLayout;import org.eclipse.swt.widgets.Combo;import org.eclipse.swt.widgets.TableColumn;import org.eclipse.swt.widgets.TableItem;import org.eclipse.swt.widgets.Spinner;import org.eclipse.swt.widgets.DateTime;public class Buju &#123; protected Shell shell; private Label lblNewLabe; private Label lblNewLabel_1; private Label lblNewLabel_2; private Label lblNewLabel_3; private Text text; private Text text_1; private Text text_2; private Table table; private Composite composite; private Button btnNewButton; private Button btnNewButton_1; private Button btnNewButton_2; private Button btnNewButton_3; private Button btnNewButton_4; private Combo combo; private TableColumn tblclmnNewColumn; private TableColumn tblclmnNewColumn_1; private TableItem tableItem; private Label label; private Button btnCheckButton; private TableColumn tblclmnNewColumn_2; private Label label_1; private Button button; private Label lblNewLabel_4; private DateTime dateTime; private DateTime dateTime_1; /** * Launch the application. * @param args */ public static void main(String[] args) &#123; try &#123; Buju window = new Buju(); window.open(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; /** * Open the window. */ public void open() &#123; Display display = Display.getDefault(); createContents(); shell.open(); shell.layout(); while (!shell.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; &#125; /** * Create contents of the window. */ protected void createContents() &#123; shell = new Shell(); shell.setSize(780, 630); shell.setLayout(new GridLayout(8, false)); lblNewLabe = new Label(shell, SWT.NONE); lblNewLabe.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1)); lblNewLabe.setText(&quot;\\u59D3\\u540D&quot;); text = new Text(shell, SWT.BORDER); text.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 6, 1)); composite = new Composite(shell, SWT.NONE); composite.setLayout(new GridLayout(2, false)); GridData gd_composite = new GridData(SWT.CENTER, SWT.CENTER, false, false, 1, 4); gd_composite.widthHint = 174; composite.setLayoutData(gd_composite); btnNewButton = new Button(composite, SWT.NONE); GridData gd_btnNewButton = new GridData(SWT.LEFT, SWT.CENTER, false, false, 2, 1); gd_btnNewButton.widthHint = 165; btnNewButton.setLayoutData(gd_btnNewButton); btnNewButton.setBounds(0, 0, 80, 27); btnNewButton.setText(&quot;\\u67E5\\u8BE2&quot;); btnNewButton_1 = new Button(composite, SWT.NONE); btnNewButton_1.setText(&quot;New Button&quot;); btnNewButton_2 = new Button(composite, SWT.NONE); btnNewButton_2.addSelectionListener(new SelectionAdapter() &#123; @SuppressWarnings(&quot;unchecked&quot;) @Override public void widgetSelected(SelectionEvent e) &#123; if(table.getSelectionCount()&gt;0) &#123; //确认用户有选中表格的某一行，从tableitem中获取打他 TableItem[] items = table.getSelection(); TableItem item = items[0]; Map&lt;String,Object&gt; row = (Map&lt;String, Object&gt;) item.getData(); //打开编辑窗口，将data传入窗口 new EmpWin(shell,SWT.NONE,row).open(); //未完待续... //窗口中完成编辑，并保存到数据库，退出之后 //如果保存成功，则刷新表格，执行查询方法 //如果取消保存，则什么都不做 &#125; else &#123; MessageBox mb = new MessageBox(shell); mb.setText(&quot;系统提示&quot;); mb.setMessage(&quot;请选择要修改的记录&quot;); mb.open(); &#125; &#125; &#125;); btnNewButton_2.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1)); btnNewButton_2.setText(&quot;\\u4FEE\\u6539&quot;); btnNewButton_3 = new Button(composite, SWT.NONE); btnNewButton_3.setText(&quot;New Button&quot;); btnNewButton_4 = new Button(composite, SWT.NONE); btnNewButton_4.setText(&quot;New Button&quot;); lblNewLabel_1 = new Label(shell, SWT.NONE); lblNewLabel_1.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1)); lblNewLabel_1.setText(&quot;New Label&quot;); text_1 = new Text(shell, SWT.BORDER); text_1.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 6, 1)); lblNewLabel_2 = new Label(shell, SWT.NONE); lblNewLabel_2.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1)); lblNewLabel_2.setText(&quot;New Label&quot;); text_2 = new Text(shell, SWT.BORDER); text_2.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 6, 1)); lblNewLabel_3 = new Label(shell, SWT.NONE); lblNewLabel_3.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1)); lblNewLabel_3.setText(&quot;\\u90E8\\u95E8&quot;); String sql = &quot;select * from dept&quot;; List&lt;Map&lt;String,Object&gt;&gt; ret = DBhelper.query(sql); String[] items = new String[ret.size()]; for(int i=0;i&lt;ret.size();i++) &#123; Map&lt;String,Object&gt; row = ret.get(i); items[i] = row.get(&quot;DNAME&quot;)+&quot;&quot;; &#125; combo = new Combo(shell, SWT.NONE); combo.setItems(items); combo.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 6, 1)); //将数据库的查询结果保存到combo中 combo.setData(ret);; label = new Label(shell, SWT.NONE); label.setText(&quot;\\u5F00\\u59CB\\u65E5\\u671F\\uFF1A&quot;); dateTime = new DateTime(shell, SWT.BORDER); btnCheckButton = new Button(shell, SWT.CHECK); btnCheckButton.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; &#125; &#125;); lblNewLabel_4 = new Label(shell, SWT.NONE); label_1 = new Label(shell, SWT.NONE); label_1.setText(&quot; \\u622A\\u6B62\\u65E5\\u671F\\uFF1A&quot;); dateTime_1 = new DateTime(shell, SWT.BORDER); button = new Button(shell, SWT.CHECK); new Label(shell, SWT.NONE); table = new Table(shell, SWT.BORDER | SWT.FULL_SELECTION); table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 8, 2)); table.setHeaderVisible(true); table.setLinesVisible(true); tblclmnNewColumn = new TableColumn(table, SWT.NONE); tblclmnNewColumn.setWidth(100); tblclmnNewColumn.setText(&quot;\\u7F16\\u53F7&quot;); tblclmnNewColumn_1 = new TableColumn(table, SWT.NONE); tblclmnNewColumn_1.setWidth(100); tblclmnNewColumn_1.setText(&quot;\\u59D3\\u540D&quot;); tblclmnNewColumn_2 = new TableColumn(table, SWT.NONE); tblclmnNewColumn_2.setWidth(100); tblclmnNewColumn_2.setText(&quot;New Column&quot;); btnNewButton.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; String sql = &quot;select * from emp where 1=1&quot;; List&lt;Object&gt; paramList = new ArrayList&lt;&gt;(); //排除空 if(text.getText().trim().length()&gt;0) &#123; sql += &quot; and ename like ?&quot;; paramList.add(&quot;%&quot;+text.getText()+&quot;%&quot;); &#125; if(combo.getText().trim().length()&gt;0)&#123; sql += &quot; and deptno = ?&quot;; @SuppressWarnings(&quot;unchecked&quot;) List&lt;Map&lt;String,Object&gt;&gt; list = (List&lt;Map&lt;String, Object&gt;&gt;) combo.getData(); //获取下拉列表的选择中项索引 int index = combo.getSelectionIndex(); paramList.add(list.get(index).get(&quot;DEPTNO&quot;)); &#125; /** * 加入日期 */ if(btnCheckButton.getSelection()) &#123; int y = dateTime.getYear(); int m = dateTime.getMonth() + 1; int d = dateTime.getDay(); sql += &quot; and hiredate &gt;= ?&quot;; //构建用于数据库的Date对象 java.sql.Date Date date = Date.valueOf(y+&quot;-&quot;+m+&quot;-&quot;+d); paramList.add(date); &#125; if(button.getSelection()) &#123; int y = dateTime_1.getYear(); int m = dateTime_1.getMonth() + 1; int d = dateTime_1.getDay(); sql += &quot; and hiredate &lt;= ?&quot;; //构建用于数据库的Date对象 java.sql.Date Date date = Date.valueOf(y+&quot;-&quot;+m+&quot;-&quot;+d); paramList.add(date); &#125; List&lt;Map&lt;String,Object&gt;&gt; ret = DBhelper.query(sql, paramList.toArray()); table.removeAll(); for(Map&lt;String,Object&gt; row:ret) &#123; tableItem = new TableItem(table,SWT.NONE); tableItem.setText(new String[] &#123; &quot;&quot;+row.get(&quot;EMPNO&quot;), &quot;&quot;+row.get(&quot;ENAME&quot;), (&quot;&quot;+row.get(&quot;HIREDATE&quot;)).substring(0, 10) &#125;); //将获取的数据放入tableItem中 tableItem.setData(row); &#125; &#125; &#125;); &#125;&#125; Class EmpWin Dialog 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120package am.buju;import org.eclipse.swt.widgets.Dialog;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Label;import java.util.Map;import org.eclipse.swt.SWT;import org.eclipse.swt.widgets.Text;import org.eclipse.swt.widgets.Combo;import org.eclipse.swt.widgets.Spinner;import org.eclipse.swt.widgets.Button;public class EmpWin extends Dialog &#123; protected Object result; protected Shell shell; private Text text; private Map&lt;String,Object&gt; row; /** * Create the dialog. * @param parent * @param style */ public EmpWin(Shell parent, int style,Map&lt;String,Object&gt; row) &#123; super(parent, style); setText(&quot;SWT Dialog&quot;); this.row = row; &#125; /** * Open the dialog. * @return the result */ public Object open() &#123; createContents(); shell.open(); shell.layout(); Display display = getParent().getDisplay(); while (!shell.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; return result; &#125; /** * Create contents of the dialog. */ private void createContents() &#123; shell = new Shell(getParent(), getStyle()); shell.setSize(334, 458); shell.setText(getText()); Label lblNewLabel = new Label(shell, SWT.NONE); lblNewLabel.setBounds(55, 55, 61, 17); lblNewLabel.setText(&quot;\\u59D3\\u540D&quot;); text = new Text(shell, SWT.BORDER); text.setBounds(122, 52, 152, 23); Label label = new Label(shell, SWT.NONE); label.setBounds(55, 107, 61, 17); label.setText(&quot;\\u804C\\u4F4D&quot;); Combo combo = new Combo(shell, SWT.NONE); combo.setBounds(122, 104, 152, 25); Label label_1 = new Label(shell, SWT.NONE); label_1.setBounds(55, 156, 61, 17); label_1.setText(&quot;\\u9886\\u5BFC&quot;); Combo combo_1 = new Combo(shell, SWT.NONE); combo_1.setBounds(122, 153, 152, 25); Label label_2 = new Label(shell, SWT.NONE); label_2.setBounds(55, 202, 61, 17); label_2.setText(&quot;\\u90E8\\u95E8&quot;); Combo combo_2 = new Combo(shell, SWT.NONE); combo_2.setBounds(122, 199, 152, 25); Label label_3 = new Label(shell, SWT.NONE); label_3.setBounds(55, 251, 61, 17); label_3.setText(&quot;\\u85AA\\u8D44&quot;); Spinner spinner = new Spinner(shell, SWT.BORDER); spinner.setBounds(122, 248, 76, 23); Label label_4 = new Label(shell, SWT.NONE); label_4.setBounds(55, 296, 61, 17); label_4.setText(&quot;\\u5956\\u91D1&quot;); Spinner spinner_1 = new Spinner(shell, SWT.BORDER); spinner_1.setBounds(122, 293, 76, 23); Button button = new Button(shell, SWT.NONE); button.setBounds(66, 355, 80, 27); button.setText(&quot;\\u4FDD\\u5B58&quot;); Button button_1 = new Button(shell, SWT.NONE); button_1.setBounds(176, 355, 80, 27); button_1.setText(&quot;\\u53D6\\u6D88&quot;); //给下拉列表添加选项 SwtHelper.addComboItem(combo, &quot;JOB&quot;,&quot;select distinct JOB from emp&quot;); SwtHelper.addComboItem(combo_1, &quot;ENAME&quot;,&quot;select * from emp&quot;); SwtHelper.addComboItem(combo_2, &quot;DNAME&quot;,&quot;select * from dept&quot;); text.setText(&quot;&quot;+row.get(&quot;ENAME&quot;)); SwtHelper.selectComboItem(combo, &quot;JOB&quot;, row.get(&quot;JOB&quot;)); SwtHelper.selectComboItem(combo_1, &quot;EMPNO&quot;, row.get(&quot;MGR&quot;)); SwtHelper.selectComboItem(combo_2, &quot;DEPTNO&quot;, row.get(&quot;DEPTNO&quot;)); &#125;&#125; 以下工具类 Class DBhelper 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183package am.buju;import java.io.InputStream;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.SQLException;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.Properties;public class DBhelper &#123; private static String url; private static String username; private static String password; //驱动加载 static &#123; try &#123; Properties p = new Properties(); //读取配置文件，转成输入流 InputStream in = DBhelper.class.getClassLoader().getResourceAsStream(&quot;db.properties&quot;); p.load(in); String driver = p.getProperty(&quot;driver&quot;); url = p.getProperty(&quot;url&quot;); username = p.getProperty(&quot;username&quot;); password = p.getProperty(&quot;password&quot;); Class.forName(driver); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; public static void main(String[] args) &#123; //String sql = &quot;insert into dept values(?,?,?)&quot;; //update(sql,11,&quot;财务&quot;,&quot;衡阳&quot;); &#125; /** * ...可变参数数组 */ //增删改 public static int update(String sql,Object...paramArray) &#123; Connection conn = null; try &#123; conn = openConnection(); PreparedStatement ps = conn.prepareStatement(sql); for(int i=0;i&lt;paramArray.length;i++) &#123; ps.setObject(i+1, paramArray[i]); &#125; return ps.executeUpdate(); &#125; catch(Exception e)&#123; //异常转型 throw new RuntimeException(e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; //连接 public static Connection openConnection() throws SQLException &#123; return DriverManager.getConnection(url, username, password); &#125; //查找 public static List&lt;Map&lt;String,Object&gt;&gt; query(String sql,Object...paramArray) &#123; Connection conn = null; try &#123; conn = openConnection(); PreparedStatement ps = conn.prepareStatement(sql); for(int i=0;i&lt;paramArray.length;i++) &#123; ps.setObject(i+1, paramArray[i]); &#125; ResultSet rs = ps.executeQuery(); //获取元数据 ResultSetMetaData rsmd = rs.getMetaData(); List&lt;Map&lt;String,Object&gt;&gt; ret = new ArrayList&lt;&gt;(); while(rs.next()) &#123; Map&lt;String,Object&gt; row = new LinkedHashMap&lt;&gt;(); for(int i=1;i&lt;=rsmd.getColumnCount();i++) &#123; String columnName = rsmd.getColumnName(i); Object columnValue = rs.getObject(i); row.put(columnName, columnValue); &#125; ret.add(row); &#125; return ret; &#125; catch(Exception e)&#123; //异常转型 throw new RuntimeException(e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; /** * 查询一条记录(例如根据主键查询记录) */ public static Map&lt;String,Object&gt; queryOne (String sql,Object...paramArray)&#123; Connection conn = null; try &#123; conn = openConnection(); PreparedStatement ps = conn.prepareStatement(sql); for(int i=0;i&lt;paramArray.length;i++) &#123; ps.setObject(i+1, paramArray[i]); &#125; ResultSet rs = ps.executeQuery(); //获取元数据 ResultSetMetaData rsmd = rs.getMetaData(); if(rs.next()) &#123; Map&lt;String,Object&gt; row = new LinkedHashMap&lt;&gt;(); for(int i=1;i&lt;rsmd.getColumnCount();i++) &#123; //获取列名 String columnName = rsmd.getColumnName(i); Object columnValue = rs.getObject(i); row.put(columnName, columnValue); &#125; return row; &#125; return null; &#125; catch(Exception e)&#123; //异常转型 throw new RuntimeException(e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; //分页查询 public static List&lt;Map&lt;String,Object&gt;&gt; queryPage ( String sql,int page,int rows,Object...paramArray)&#123; int startrow = (page - 1) * rows; int endrow = page * rows; sql = &quot;select t.*\\n&quot; + &quot; from ( select t.*,rownum rn from ( &quot;+sql+&quot;) t where rownum &lt;= ?) t\\n&quot; + &quot; where t.rn &gt; ?&quot;; //生成新的查询数组 Object[] newParamArray = new Object[paramArray.length + 2]; System.arraycopy(paramArray, 0, newParamArray, 0, paramArray.length); newParamArray[newParamArray.length - 2] = endrow; newParamArray[newParamArray.length - 1] = startrow; return query(sql,newParamArray); &#125; /** * 从查询结果中获取一个值，返回第一个行第一列的值 */ public static Object getValue(String sql,Object...paramArray) &#123; Map&lt;String,Object&gt; row = queryOne(sql,paramArray); if(row==null) &#123; return null; &#125;else &#123; for(Map.Entry&lt;String, Object&gt; e:row.entrySet()) &#123; return e.getValue(); &#125; &#125; return null; &#125;&#125; Class SwtHelper 1234567891011121314151617181920212223242526package am.buju;import java.util.List;import java.util.Map;import org.eclipse.swt.widgets.Combo;public class SwtHelper &#123; public static void addComboItem(Combo combo,String column,String sql,Object...params) &#123; List&lt;Map&lt;String,Object&gt;&gt; ret = DBhelper.query(sql, params); String[] items = new String[ret.size()]; for(int i=0;i&lt;ret.size();i++) &#123; items[i] = &quot;&quot;+ret.get(i).get(column); &#125; combo.setItems(items); combo.setData(ret); &#125; public static void selectComboItem(Combo combo,String column,Object value) &#123; @SuppressWarnings(&quot;unchecked&quot;) List&lt;Map&lt;String,Object&gt;&gt; ret = (List&lt;Map&lt;String, Object&gt;&gt;) combo.getData(); for(int index=0;index&lt;ret.size();index++) &#123; if(ret.get(index).get(column).equals(value)) &#123; combo.select(index); break; &#125; &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第49次课程","slug":"技术向/Java/源辰课程记录/第49次课程","date":"2019-07-28T16:00:00.000Z","updated":"2022-05-11T01:17:53.132Z","comments":true,"path":"技术向/Java/源辰课程记录/第49次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC49%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第49次课程 07.29.2019 内容 Java.swt包二[廖彦] 1.Table控件的练习 Class TableWin 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788package am.tablewin;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Table;import java.util.List;import java.util.Map;import org.eclipse.swt.SWT;import org.eclipse.swt.widgets.TableColumn;import org.eclipse.swt.widgets.TableItem;public class TableWin &#123; protected Shell shell; private Table table; /** * Launch the application. * @param args */ public static void main(String[] args) &#123; try &#123; TableWin window = new TableWin(); window.open(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; /** * Open the window. */ public void open() &#123; Display display = Display.getDefault(); createContents(); shell.open(); shell.layout(); while (!shell.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; &#125; /** * Create contents of the window. */ protected void createContents() &#123; shell = new Shell(); shell.setSize(481, 616); shell.setText(&quot;SWT Application&quot;); table = new Table(shell, SWT.BORDER | SWT.FULL_SELECTION); table.setBounds(31, 23, 404, 532); table.setHeaderVisible(true); table.setLinesVisible(true); TableColumn tableColumn = new TableColumn(table, SWT.NONE); tableColumn.setWidth(100); tableColumn.setText(&quot;\\u7F16\\u53F7&quot;); TableColumn tableColumn_1 = new TableColumn(table, SWT.NONE); tableColumn_1.setWidth(100); tableColumn_1.setText(&quot;\\u59D3\\u540D&quot;); TableColumn tableColumn_2 = new TableColumn(table, SWT.NONE); tableColumn_2.setWidth(100); tableColumn_2.setText(&quot;\\u804C\\u52A1&quot;); TableColumn tableColumn_3 = new TableColumn(table, SWT.NONE); tableColumn_3.setWidth(100); tableColumn_3.setText(&quot;\\u85AA\\u8D44&quot;); List&lt;Map&lt;String,Object&gt;&gt; ret = DBhelper.query(&quot;select * from emp&quot;); for(Map&lt;String,Object&gt; row:ret) &#123; TableItem tableItem = new TableItem(table,SWT.NONE); tableItem.setText(new String[] &#123; row.get(&quot;EMPNO&quot;)+&quot;&quot;, //避免空表格 row.get(&quot;ENAME&quot;).toString(), row.get(&quot;JOB&quot;).toString(), row.get(&quot;SAL&quot;).toString() &#125;); &#125; &#125;&#125; 2.Meru控件的练习 Class MeruWin 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163package am.tablewin;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Menu;import java.util.List;import java.util.Map;import org.eclipse.swt.SWT;import org.eclipse.swt.widgets.MenuItem;import org.eclipse.swt.widgets.MessageBox;import org.eclipse.swt.widgets.TabFolder;import org.eclipse.swt.widgets.TabItem;import org.eclipse.swt.widgets.Table;import org.eclipse.swt.widgets.TableColumn;import org.eclipse.swt.widgets.TableItem;import org.eclipse.swt.widgets.Composite;import org.eclipse.swt.widgets.Group;import org.eclipse.swt.custom.ScrolledComposite;import org.eclipse.swt.custom.SashForm;import org.eclipse.swt.widgets.Text;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;public class MeruWin &#123; protected Shell shell; private Table table; /** * Launch the application. * @param args */ public static void main(String[] args) &#123; try &#123; MeruWin window = new MeruWin(); window.open(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; /** * Open the window. */ public void open() &#123; Display display = Display.getDefault(); createContents(); //居中显示 int x = (display.getBounds().width - shell.getBounds().width) / 2; int y = (display.getBounds().height - shell.getBounds().height) / 2; shell.setLocation(x, y); shell.open(); shell.layout(); while (!shell.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; &#125; /** * Create contents of the window. */ protected void createContents() &#123; shell = new Shell(); shell.setSize(634, 593); shell.setText(&quot;SWT Application&quot;); Menu menu = new Menu(shell, SWT.BAR); shell.setMenuBar(menu); MenuItem mntmNewSubmenu = new MenuItem(menu, SWT.CASCADE); mntmNewSubmenu.setText(&quot;\\u7CFB\\u7EDF\\u7BA1\\u7406&quot;); Menu menu_1 = new Menu(mntmNewSubmenu); mntmNewSubmenu.setMenu(menu_1); MenuItem menuItem = new MenuItem(menu_1, SWT.NONE); menuItem.setText(&quot;\\u5458\\u5DE5\\u7BA1\\u7406&quot;); MenuItem menuItem_1 = new MenuItem(menu_1, SWT.NONE); menuItem_1.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; DeptDialog dd = new DeptDialog(shell,SWT.NONE,&quot;财务部&quot;); Object result = dd.open(); MessageBox mb = new MessageBox(shell); mb.setMessage(&quot;返回部门名称：&quot;+result); mb.open(); &#125; &#125;); menuItem_1.setText(&quot;\\u90E8\\u95E8\\u7BA1\\u7406&quot;); MenuItem mntmNewSubmenu_1 = new MenuItem(menu, SWT.CASCADE); mntmNewSubmenu_1.setText(&quot;New SubMenu&quot;); Menu menu_2 = new Menu(mntmNewSubmenu_1); mntmNewSubmenu_1.setMenu(menu_2); TabFolder tabFolder = new TabFolder(shell, SWT.NONE); tabFolder.setBounds(10, 10, 598, 514); TabItem tbtmNewItem = new TabItem(tabFolder, SWT.NONE); tbtmNewItem.setText(&quot;\\u9996\\u9875&quot;); menuItem.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; //标题页去重 for(TabItem t : tabFolder.getItems()) &#123; if(&quot;员工管理&quot;.equals(t.getText())) &#123; tabFolder.setSelection(t); return; &#125; &#125; TabItem tabItem = new TabItem(tabFolder, SWT.NONE); tabItem.setText(&quot;员工管理&quot;); table = new Table(tabFolder, SWT.BORDER | SWT.FULL_SELECTION); tabItem.setControl(table); table.setHeaderVisible(true); table.setLinesVisible(true); TableColumn tableColumn = new TableColumn(table, SWT.NONE); tableColumn.setWidth(100); tableColumn.setText(&quot;\\u7F16\\u53F7&quot;); TableColumn tableColumn_1 = new TableColumn(table, SWT.NONE); tableColumn_1.setWidth(100); tableColumn_1.setText(&quot;\\u59D3\\u540D&quot;); TableColumn tableColumn_2 = new TableColumn(table, SWT.NONE); tableColumn_2.setWidth(100); tableColumn_2.setText(&quot;\\u804C\\u52A1&quot;); TableColumn tableColumn_3 = new TableColumn(table, SWT.NONE); tableColumn_3.setWidth(100); tableColumn_3.setText(&quot;\\u85AA\\u8D44&quot;); List&lt;Map&lt;String,Object&gt;&gt; ret = DBhelper.query(&quot;select * from emp&quot;); for(Map&lt;String,Object&gt; row:ret) &#123; TableItem tableItem = new TableItem(table,SWT.NONE); tableItem.setText(new String[] &#123; row.get(&quot;EMPNO&quot;)+&quot;&quot;, //避免空表格 row.get(&quot;ENAME&quot;).toString(), row.get(&quot;JOB&quot;).toString(), row.get(&quot;SAL&quot;).toString() &#125;); &#125; //自动跳转到标题页 tabFolder.setSelection(tabItem); &#125; &#125;); &#125;&#125; **3.**Dialog工程文件 ​​用于做子程序框 Class DeptDialog 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475package am.tablewin;import org.eclipse.swt.widgets.Dialog;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Text;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.SWT;import org.eclipse.wb.swt.SWTResourceManager;public class DeptDialog extends Dialog &#123; //用于窗口关闭时，返回数据 protected Object result; protected Shell shell; private Text text; private String dname; /** * Create the dialog. * @param parent * @param style */ public DeptDialog(Shell parent, int style,String dname) &#123; super(parent, style); setText(&quot;SWT Dialog&quot;); this.dname = dname; &#125; /** * Open the dialog. * @return the result */ public Object open() &#123; createContents(); shell.open(); shell.layout(); Display display = getParent().getDisplay(); while (!shell.isDisposed()) &#123; //设置返回结果 dname = text.getText(); result = dname; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; return result; &#125; /** * Create contents of the dialog. */ private void createContents() &#123; shell = new Shell(getParent(), SWT.DIALOG_TRIM | SWT.PRIMARY_MODAL); shell.setSize(576, 519); shell.setText(getText()); Label label = new Label(shell, SWT.NONE); label.setBounds(109, 210, 61, 17); label.setText(&quot;\\u90E8\\u95E8\\u540D\\u79F0&quot;); text = new Text(shell, SWT.BORDER); text.setText(&quot;\\u8D22\\u52A1\\u90E8&quot;); text.setBounds(196, 210, 73, 23); Label label_1 = new Label(shell, SWT.NONE); label_1.setFont(SWTResourceManager.getFont(&quot;Microsoft YaHei UI&quot;, 15, SWT.NORMAL)); label_1.setBounds(181, 144, 109, 33); label_1.setText(&quot;\\u90E8\\u95E8\\u7BA1\\u7406&quot;); //设置部门名称 text.setText(dname); &#125;&#125; 4.工具类引入 Class DBhelper 关于Dao学习时的练习工具类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183package am.tablewin;import java.io.InputStream;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.SQLException;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.Properties;public class DBhelper &#123; private static String url; private static String username; private static String password; //驱动加载 static &#123; try &#123; Properties p = new Properties(); //读取配置文件，转成输入流 InputStream in = DBhelper.class.getClassLoader().getResourceAsStream(&quot;db.properties&quot;); p.load(in); String driver = p.getProperty(&quot;driver&quot;); url = p.getProperty(&quot;url&quot;); username = p.getProperty(&quot;username&quot;); password = p.getProperty(&quot;password&quot;); Class.forName(driver); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; public static void main(String[] args) &#123; //String sql = &quot;insert into dept values(?,?,?)&quot;; //update(sql,11,&quot;财务&quot;,&quot;衡阳&quot;); &#125; /** * ...可变参数数组 */ //增删改 public static int update(String sql,Object...paramArray) &#123; Connection conn = null; try &#123; conn = openConnection(); PreparedStatement ps = conn.prepareStatement(sql); for(int i=0;i&lt;paramArray.length;i++) &#123; ps.setObject(i+1, paramArray[i]); &#125; return ps.executeUpdate(); &#125; catch(Exception e)&#123; //异常转型 throw new RuntimeException(e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; //连接 public static Connection openConnection() throws SQLException &#123; return DriverManager.getConnection(url, username, password); &#125; //查找 public static List&lt;Map&lt;String,Object&gt;&gt; query(String sql,Object...paramArray) &#123; Connection conn = null; try &#123; conn = openConnection(); PreparedStatement ps = conn.prepareStatement(sql); for(int i=0;i&lt;paramArray.length;i++) &#123; ps.setObject(i+1, paramArray[i]); &#125; ResultSet rs = ps.executeQuery(); //获取元数据 ResultSetMetaData rsmd = rs.getMetaData(); List&lt;Map&lt;String,Object&gt;&gt; ret = new ArrayList&lt;&gt;(); while(rs.next()) &#123; Map&lt;String,Object&gt; row = new LinkedHashMap&lt;&gt;(); for(int i=1;i&lt;rsmd.getColumnCount();i++) &#123; String columnName = rsmd.getColumnName(i); Object columnValue = rs.getObject(i); row.put(columnName, columnValue); &#125; ret.add(row); &#125; return ret; &#125; catch(Exception e)&#123; //异常转型 throw new RuntimeException(e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; /** * 查询一条记录(例如根据主键查询记录) */ public static Map&lt;String,Object&gt; queryOne (String sql,Object...paramArray)&#123; Connection conn = null; try &#123; conn = openConnection(); PreparedStatement ps = conn.prepareStatement(sql); for(int i=0;i&lt;paramArray.length;i++) &#123; ps.setObject(i+1, paramArray[i]); &#125; ResultSet rs = ps.executeQuery(); //获取元数据 ResultSetMetaData rsmd = rs.getMetaData(); if(rs.next()) &#123; Map&lt;String,Object&gt; row = new LinkedHashMap&lt;&gt;(); for(int i=1;i&lt;rsmd.getColumnCount();i++) &#123; //获取列名 String columnName = rsmd.getColumnName(i); Object columnValue = rs.getObject(i); row.put(columnName, columnValue); &#125; return row; &#125; return null; &#125; catch(Exception e)&#123; //异常转型 throw new RuntimeException(e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; //分页查询 public static List&lt;Map&lt;String,Object&gt;&gt; queryPage ( String sql,int page,int rows,Object...paramArray)&#123; int startrow = (page - 1) * rows; int endrow = page * rows; sql = &quot;select t.*\\n&quot; + &quot; from ( select t.*,rownum rn from ( &quot;+sql+&quot;) t where rownum &lt;= ?) t\\n&quot; + &quot; where t.rn &gt; ?&quot;; //生成新的查询数组 Object[] newParamArray = new Object[paramArray.length + 2]; System.arraycopy(paramArray, 0, newParamArray, 0, paramArray.length); newParamArray[newParamArray.length - 2] = endrow; newParamArray[newParamArray.length - 1] = startrow; return query(sql,newParamArray); &#125; /** * 从查询结果中获取一个值，返回第一个行第一列的值 */ public static Object getValue(String sql,Object...paramArray) &#123; Map&lt;String,Object&gt; row = queryOne(sql,paramArray); if(row==null) &#123; return null; &#125;else &#123; for(Map.Entry&lt;String, Object&gt; e:row.entrySet()) &#123; return e.getValue(); &#125; &#125; return null; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第48次课程","slug":"技术向/Java/源辰课程记录/第48次课程","date":"2019-07-26T16:00:00.000Z","updated":"2022-05-11T01:17:41.490Z","comments":true,"path":"技术向/Java/源辰课程记录/第48次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC48%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第48次课程 07.27.2019 内容 Java.swt包一[廖彦] 1.关于多选框联动 Class ShengShi 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576package pm.swt;public class ShengShi &#123; public static final String[] PROVINCE = &#123;&quot;北京市&quot;,&quot;上海市&quot;,&quot;天津市&quot;,&quot;重庆市&quot;,&quot;河北省&quot;,&quot;山西省&quot;,&quot;辽宁省&quot;,&quot;吉林省&quot;,&quot;河南省&quot;,&quot;江苏省&quot;,&quot;浙江省&quot;,&quot;安徽省&quot;,&quot;福建省&quot;,&quot;江西省&quot;,&quot;山东省&quot;,&quot;湖北省&quot;,&quot;湖南省&quot;,&quot;广东省&quot;,&quot;海南省&quot;,&quot;四川省&quot;,&quot;贵州省&quot;,&quot;云南省&quot;,&quot;陕西省&quot;,&quot;甘肃省&quot;,&quot;青海省&quot;,&quot;黑龙江省&quot;,&quot;内蒙古自治区&quot;,&quot;广西壮族自治区&quot;,&quot;西藏自治区&quot;,&quot;宁夏回族自治区&quot;,&quot;新疆维吾尔自治区&quot;,&quot;台湾省&quot;,&quot;香港特别行政区&quot;,&quot;澳门特别行政区&quot;&#125;; public static final String[][] CITY = &#123; //北京市辖区名称 &#123;&quot;东城区&quot;,&quot;西城区&quot;,&quot;崇文区&quot;,&quot;宣武区&quot;,&quot;朝阳区&quot;,&quot;海淀区&quot;,&quot;丰台区&quot;,&quot;石景山区&quot;,&quot;房山区&quot;,&quot;通州区&quot;,&quot;顺义区&quot;,&quot;门头沟区&quot;,&quot;昌平区&quot;,&quot;大兴区&quot;,&quot;怀柔区&quot;,&quot;平谷区&quot;,&quot;密云县&quot;,&quot;延庆县&quot;&#125;, //上海市辖区名称 &#123;&quot;黄浦区&quot;,&quot;卢湾区&quot;,&quot;徐汇区&quot;,&quot;长宁区&quot;,&quot;静安区&quot;,&quot;普陀区&quot;,&quot;闸北区&quot;,&quot;虹口区&quot;,&quot;杨浦区&quot;,&quot;宝山区&quot;,&quot;闵行区&quot;,&quot;嘉定区&quot;,&quot;浦东新区&quot;,&quot;金山区&quot;,&quot;松江区&quot;,&quot;青浦区&quot;,&quot;南汇区&quot;,&quot;奉贤区&quot;,&quot;崇明县&quot;&#125;, //天津市辖区名称 &#123;&quot;和平区&quot;,&quot;河东区&quot;,&quot;河西区&quot;,&quot;南开区&quot;,&quot;河北区&quot;,&quot;红桥区&quot;,&quot;塘沽区&quot;,&quot;汉沽区&quot;,&quot;大港区&quot;,&quot;东丽区&quot;,&quot;西青区&quot;,&quot;津南区&quot;,&quot;北辰区&quot;,&quot;武清区&quot;,&quot;宝坻区&quot;,&quot;宁河县&quot;,&quot;静海县&quot;,&quot;蓟县&quot;&#125;, //重庆市辖区名称 &#123;&quot;渝中区&quot;,&quot;大渡口区&quot;,&quot;江北区&quot;,&quot;沙坪坝区&quot;,&quot;九龙坡区&quot;,&quot;南岸区&quot;,&quot;北碚区&quot;,&quot;万盛区&quot;,&quot;双桥区&quot;,&quot;渝北区&quot;,&quot;巴南区&quot;,&quot;万县区&quot;,&quot;涪陵区&quot;,&quot;永川市&quot;,&quot;合川市&quot;,&quot;江津市&quot;,&quot;南川市&quot;,&quot;长寿县&quot;,&quot;綦江县&quot;,&quot;潼南县&quot;,&quot;荣昌县&quot;,&quot;壁山县&quot;,&quot;大足县&quot;,&quot;铜梁县&quot;,&quot;梁平县&quot;,&quot;城口县&quot;,&quot;垫江县&quot;,&quot;武隆县&quot;,&quot;丰都县&quot;,&quot;忠 县&quot;,&quot;开 县&quot;,&quot;云阳县&quot;,&quot;青龙镇青龙嘴&quot;,&quot;奉节县&quot;,&quot;巫山县&quot;,&quot;巫溪县&quot;,&quot;南宾镇&quot;,&quot;中和镇&quot;,&quot;钟多镇&quot;,&quot;联合镇&quot;,&quot;汉葭镇&quot;&#125;, //河北省主要城市名称 &#123;&quot;石家庄市&quot;,&quot;唐山市&quot;,&quot;秦皇岛市&quot;,&quot;邯郸市&quot;,&quot;邢台市&quot;,&quot;保定市&quot;,&quot;张家口市&quot;,&quot;承德市&quot;,&quot;沧州市&quot;,&quot;廊坊市&quot;,&quot;衡水市&quot;&#125;, //山西省主要城市名称 &#123;&quot;太原市&quot;,&quot;大同市&quot;,&quot;阳泉市&quot;,&quot;长治市&quot;,&quot;晋城市&quot;,&quot;朔州市&quot;,&quot;晋中市&quot;,&quot;运城市&quot;,&quot;忻州市&quot;,&quot;临汾市&quot;,&quot;吕梁市&quot;&#125;, //辽宁省主要城市名称 &#123;&quot;沈阳市&quot;,&quot;大连市&quot;,&quot;鞍山市&quot;,&quot;抚顺市&quot;,&quot;本溪市&quot;,&quot;丹东市&quot;,&quot;锦州市&quot;,&quot;营口市&quot;,&quot;阜新市&quot;,&quot;辽阳市&quot;,&quot;盘锦市&quot;,&quot;铁岭市&quot;,&quot;朝阳市&quot;,&quot;葫芦岛市&quot;&#125;, //吉林省主要城市名称 &#123;&quot;长春市&quot;,&quot;吉林市&quot;,&quot;四平市&quot;,&quot;辽源市&quot;,&quot;通化市&quot;,&quot;白山市&quot;,&quot;松原市&quot;,&quot;白城市&quot;,&quot;延边朝鲜族自治州&quot;&#125;, //河南省主要城市名称 &#123;&quot;郑州市&quot;,&quot;开封市&quot;,&quot;洛阳市&quot;,&quot;平顶山市&quot;,&quot;安阳市&quot;,&quot;鹤壁市&quot;,&quot;新乡市&quot;,&quot;焦作市&quot;,&quot;濮阳市&quot;,&quot;许昌市&quot;,&quot;漯河市&quot;,&quot;三门峡市&quot;,&quot;南阳市&quot;,&quot;商丘市&quot;,&quot;信阳市&quot;,&quot;周口市&quot;,&quot;驻马店市&quot;,&quot;济源市&quot;&#125;, //江苏省主要城市名称 &#123;&quot;南京市&quot;,&quot;无锡市&quot;,&quot;徐州市&quot;,&quot;常州市&quot;,&quot;苏州市&quot;,&quot;南通市&quot;,&quot;连云港市&quot;,&quot;淮安市&quot;,&quot;盐城市&quot;,&quot;扬州市&quot;,&quot;镇江市&quot;,&quot;泰州市&quot;,&quot;宿迁市&quot;&#125;, //浙江省主要城市名称 &#123;&quot;杭州市&quot;,&quot;宁波市&quot;,&quot;温州市&quot;,&quot;嘉兴市&quot;,&quot;湖州市&quot;,&quot;绍兴市&quot;,&quot;金华市&quot;,&quot;衢州市&quot;,&quot;舟山市&quot;,&quot;台州市&quot;,&quot;丽水市&quot;&#125;, //安徽省主要城市名称 &#123;&quot;合肥市&quot;,&quot;芜湖市&quot;,&quot;蚌埠市&quot;,&quot;淮南市&quot;,&quot;马鞍山市&quot;,&quot;淮北市&quot;,&quot;铜陵市&quot;,&quot;安庆市&quot;,&quot;黄山市&quot;,&quot;滁州市&quot;,&quot;阜阳市&quot;,&quot;宿州市&quot;,&quot;巢湖市&quot;,&quot;六安市&quot;,&quot;亳州市&quot;,&quot;池州市&quot;,&quot;宣城市&quot;&#125;, //福建省主要城市名称 &#123;&quot;福州市&quot;,&quot;厦门市&quot;,&quot;莆田市&quot;,&quot;三明市&quot;,&quot;泉州市&quot;,&quot;漳州市&quot;,&quot;南平市&quot;,&quot;龙岩市&quot;,&quot;宁德市&quot;&#125;, //江西省主要城市名称 &#123;&quot;南昌市&quot;,&quot;景德镇市&quot;,&quot;萍乡市&quot;,&quot;九江市&quot;,&quot;新余市&quot;,&quot;鹰潭市&quot;,&quot;赣州市&quot;,&quot;吉安市&quot;,&quot;宜春市&quot;,&quot;抚州市&quot;,&quot;上饶市&quot;&#125;, //山东省主要城市名称 &#123;&quot;济南市&quot;,&quot;青岛市&quot;,&quot;淄博市&quot;,&quot;枣庄市&quot;,&quot;东营市&quot;,&quot;烟台市&quot;,&quot;潍坊市&quot;,&quot;威海市&quot;,&quot;济宁市&quot;,&quot;泰安市&quot;,&quot;日照市&quot;,&quot;莱芜市&quot;,&quot;临沂市&quot;,&quot;德州市&quot;,&quot;聊城市&quot;,&quot;滨州市&quot;,&quot;菏泽市&quot;&#125;, //湖北省主要城市名称 &#123;&quot;武汉市&quot;,&quot;黄石市&quot;,&quot;襄樊市&quot;,&quot;十堰市&quot;,&quot;荆州市&quot;,&quot;宜昌市&quot;,&quot;荆门市&quot;,&quot;鄂州市&quot;,&quot;孝感市&quot;,&quot;黄冈市&quot;,&quot;咸宁市&quot;,&quot;随州市&quot;,&quot;恩施州&quot;,&quot;仙桃市&quot;,&quot;潜江市&quot;,&quot;天门市&quot;,&quot;神农架林区&quot;&#125;, //湖南省主要城市名称 &#123;&quot;长沙市&quot;,&quot;株洲市&quot;,&quot;湘潭市&quot;,&quot;衡阳市&quot;,&quot;邵阳市&quot;,&quot;岳阳市&quot;,&quot;常德市&quot;,&quot;张家界市&quot;,&quot;益阳市&quot;,&quot;郴州市&quot;,&quot;永州市&quot;,&quot;怀化市&quot;,&quot;娄底市&quot;,&quot;湘西州&quot;&#125;, //广东省主要城市名称 &#123;&quot;广州市&quot;,&quot;深圳市&quot;,&quot;珠海市&quot;,&quot;汕头市&quot;,&quot;韶关市&quot;,&quot;佛山市&quot;,&quot;江门市&quot;,&quot;湛江市&quot;,&quot;茂名市&quot;,&quot;肇庆市&quot;,&quot;惠州市&quot;,&quot;梅州市&quot;,&quot;汕尾市&quot;,&quot;河源市&quot;,&quot;阳江市&quot;,&quot;清远市&quot;,&quot;东莞市&quot;,&quot;中山市&quot;,&quot;潮州市&quot;,&quot;揭阳市&quot;,&quot;云浮市&quot;&#125;, //海南省主要城市名称 &#123;&quot;海口市&quot;,&quot;龙华区&quot;,&quot;秀英区&quot;,&quot;琼山区&quot;,&quot;美兰区&quot;,&quot;三亚市&quot;&#125;, //四川省主要城市名称 &#123;&quot;成都市&quot;,&quot;自贡市&quot;,&quot;攀枝花市&quot;,&quot;泸州市&quot;,&quot;德阳市&quot;,&quot;绵阳市&quot;,&quot;广元市&quot;,&quot;遂宁市&quot;,&quot;内江市&quot;,&quot;乐山市&quot;,&quot;南充市&quot;,&quot;宜宾市&quot;,&quot;广安市&quot;,&quot;达州市&quot;,&quot;眉山市&quot;,&quot;雅安市&quot;,&quot;巴中市&quot;,&quot;资阳市&quot;,&quot;阿坝州&quot;,&quot;甘孜州&quot;,&quot;凉山州&quot;&#125;, //贵州省主要城市名称 &#123;&quot;贵阳市&quot;,&quot;六盘水市&quot;,&quot;遵义市&quot;,&quot;安顺市&quot;,&quot;铜仁地区&quot;,&quot;毕节地区&quot;,&quot;黔西南州&quot;,&quot;黔东南州&quot;,&quot;黔南州&quot;&#125;, //云南省主要城市名称 &#123;&quot;昆明市&quot;,&quot;大理市&quot;,&quot;曲靖市&quot;,&quot;玉溪市&quot;,&quot;昭通市&quot;,&quot;楚雄市&quot;,&quot;红河市&quot;,&quot;文山市&quot;,&quot;思茅市&quot;,&quot;西双版纳市&quot;,&quot;保山市&quot;,&quot;德宏市&quot;,&quot;丽江市&quot;,&quot;怒江市&quot;,&quot;迪庆市&quot;,&quot;临沧市&quot;&#125;, //陕西省主要城市名称 &#123;&quot;西安市&quot;,&quot;铜川市&quot;,&quot;宝鸡市&quot;,&quot;咸阳市&quot;,&quot;渭南市&quot;,&quot;延安市&quot;,&quot;汉中市&quot;,&quot;榆林市&quot;,&quot;安康市&quot;,&quot;商洛市&quot;&#125;, //甘肃省主要城市名称 &#123;&quot;兰州市&quot;,&quot;嘉峪关市&quot;,&quot;金昌市&quot;,&quot;白银市&quot;,&quot;天水市&quot;,&quot;武威市&quot;,&quot;张掖市&quot;,&quot;平凉市&quot;,&quot;酒泉市&quot;,&quot;庆阳市&quot;,&quot;定西市&quot;,&quot;陇南市&quot;,&quot;临夏州&quot;,&quot;甘南州&quot;&#125;, //青海省主要城市名称 &#123;&quot;西宁市&quot;,&quot;海东地区&quot;,&quot;海北州&quot;,&quot;黄南州&quot;,&quot;海南州&quot;,&quot;果洛州&quot;,&quot;玉树州&quot;,&quot;海西州&quot;&#125;, //黑龙江省主要城市名称 &#123;&quot;哈尔滨市&quot;,&quot;齐齐哈尔市&quot;,&quot;鸡西市&quot;,&quot;鹤岗市&quot;,&quot;双鸭山市&quot;,&quot;大庆市&quot;,&quot;伊春市&quot;,&quot;佳木斯市&quot;,&quot;七台河市&quot;,&quot;牡丹江市&quot;,&quot;黑河市&quot;,&quot;绥化市&quot;,&quot;大兴安岭地区&quot;&#125;, //内蒙古自治区主要城市名称 &#123;&quot;呼和浩特市&quot;,&quot;包头市&quot;,&quot;乌海市&quot;,&quot;赤峰市&quot;,&quot;通辽市&quot;,&quot;鄂尔多斯市&quot;,&quot;呼伦贝尔市&quot;,&quot;巴彦淖尔市&quot;,&quot;乌兰察布市&quot;,&quot;兴安盟&quot;,&quot;锡林郭勒盟&quot;,&quot;阿拉善盟&quot;&#125;, //广西壮族自治区主要城市名称 &#123;&quot;南宁市&quot;,&quot;柳州市&quot;,&quot;桂林市&quot;,&quot;梧州市&quot;,&quot;北海市&quot;,&quot;防城港市&quot;,&quot;钦州市&quot;,&quot;贵港市&quot;,&quot;玉林市&quot;,&quot;百色市&quot;,&quot;贺州市&quot;,&quot;河池市&quot;,&quot;来宾市&quot;,&quot;崇左市&quot;&#125;, //西藏自治区主要城市名称 &#123;&quot;拉萨市&quot;,&quot;昌都地区&quot;,&quot;山南地区&quot;,&quot;日喀则地区&quot;,&quot;那曲地区&quot;,&quot;阿里地区&quot;,&quot;林芝地区&quot;&#125;, //宁夏回族自治区主要城市名称 &#123;&quot;银川市&quot;,&quot;石嘴山市&quot;,&quot;吴忠市&quot;,&quot;固原市&quot;,&quot;中卫市&quot;&#125;, //新疆维吾尔自治区主要城市名称 &#123;&quot;乌鲁木齐市&quot;,&quot;克拉玛依市&quot;,&quot;吐鲁番地区&quot;,&quot;哈密地区&quot;,&quot;和田地区&quot;,&quot;阿克苏地区&quot;,&quot;喀什地区&quot;,&quot;克孜勒苏柯尔克孜自治州&quot;,&quot;巴音郭楞蒙古自治州&quot;,&quot;昌吉回族自治州&quot;,&quot;博尔塔拉蒙古自治州&quot;,&quot;伊犁哈萨克自治州&quot;,&quot;塔城地区&quot;,&quot;阿勒泰地区&quot;,&quot;石河子市&quot;,&quot;阿拉尔市&quot;,&quot;图木舒克市&quot;,&quot;五家渠市&quot;&#125;, //台湾省主要城市名称 &#123;&quot;台北市&quot;,&quot;高雄市&quot;,&quot;基隆市&quot;,&quot;台中市&quot;,&quot;台南市&quot;,&quot;新竹市&quot;,&quot;嘉义市&quot;,&quot;台北县&quot;,&quot;宜兰县&quot;,&quot;桃园县&quot;,&quot;新竹县&quot;,&quot;苗栗县&quot;,&quot;台中县&quot;,&quot;彰化县&quot;,&quot;南投县&quot;,&quot;云林县&quot;,&quot;嘉义县&quot;,&quot;台南县&quot;,&quot;高雄县&quot;,&quot;屏东县&quot;,&quot;澎湖县&quot;,&quot;台东县&quot;,&quot;花莲县&quot;&#125;, //香港特别行政区主要辖区名称 &#123;&quot;中西区&quot;,&quot;东区&quot;,&quot;九龙城区&quot;,&quot;观塘区&quot;,&quot;南区&quot;,&quot;深水埗区&quot;,&quot;黄大仙区&quot;,&quot;湾仔区&quot;,&quot;油尖旺区&quot;,&quot;离岛区&quot;,&quot;葵青区&quot;,&quot;北区&quot;,&quot;西贡区&quot;,&quot;沙田区&quot;,&quot;屯门区&quot;,&quot;大埔区&quot;,&quot;荃湾区&quot;,&quot;元朗区&quot;&#125;, //澳门地区 &#123;&quot;澳门地区&quot;&#125; &#125;;&#125; Class SwtHelper 12345678910111213141516package pm.swt;import java.util.ArrayList;import java.util.List;import org.eclipse.swt.widgets.Button;public class SwtHelper &#123; public static List&lt;String&gt; getSelection(Button...btns)&#123; List&lt;String&gt; list = new ArrayList&lt;&gt;(); for(Button btn : btns) &#123; list.add(btn.getText()); &#125; return list; &#125;&#125; Class TestWin 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188package pm.swt;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.widgets.MessageBox;import java.util.List;import org.eclipse.swt.SWT;import org.eclipse.swt.widgets.Text;import org.eclipse.swt.widgets.Combo;import org.eclipse.wb.swt.SWTResourceManager;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.widgets.Spinner;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.widgets.DateTime;import org.eclipse.swt.widgets.Table;import org.eclipse.swt.widgets.Tree;import org.eclipse.swt.widgets.TabFolder;public class TestWin &#123; protected Shell shell; private Text name; private Text pwd; /** * Launch the application. * @param args */ public static void main(String[] args) &#123; try &#123; TestWin window = new TestWin(); window.open(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; /** * Open the window. */ public void open() &#123; Display display = Display.getDefault(); createContents(); shell.open(); shell.layout(); while (!shell.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; &#125; /** * Create contents of the window. */ protected void createContents() &#123; shell = new Shell(); shell.setText(&quot;\\u5B66\\u751F\\u6CE8\\u518C\\u7CFB\\u7EDF&quot;); shell.setSize(453, 416); Label label = new Label(shell, SWT.NONE); label.setBounds(95, 30, 61, 17); label.setText(&quot;\\u59D3\\u540D&quot;); name = new Text(shell, SWT.BORDER); name.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetDefaultSelected(SelectionEvent e) &#123; if(name.getText().length()&lt;6||name.getText().length()&gt;10)&#123; MessageBox mb = new MessageBox(shell,SWT.ICON_WARNING | SWT.OK); mb.setText(&quot;系统提示&quot;); mb.setMessage(&quot;用户名必须是6~10位！&quot;); mb.open(); &#125; &#125; &#125;); name.setBounds(164, 27, 165, 23); Label label_1 = new Label(shell, SWT.NONE); label_1.setBounds(95, 81, 61, 17); label_1.setText(&quot;\\u5BC6\\u7801&quot;); pwd = new Text(shell, SWT.BORDER); pwd.setBounds(164, 80, 166, 23); Label label_2 = new Label(shell, SWT.NONE); label_2.setBounds(95, 133, 61, 17); label_2.setText(&quot;\\u7231\\u597D&quot;); Button likeBtn4 = new Button(shell, SWT.CHECK); likeBtn4.setBounds(285, 133, 47, 17); likeBtn4.setText(&quot;\\u7BEE\\u7403&quot;); Button likeBtn1 = new Button(shell, SWT.CHECK); likeBtn1.setBounds(164, 133, 33, 17); likeBtn1.setText(&quot;\\u5531&quot;); Button likeBtn2 = new Button(shell, SWT.CHECK); likeBtn2.setBounds(202, 133, 33, 17); likeBtn2.setText(&quot;\\u8DF3&quot;); Button likeBtn3 = new Button(shell, SWT.CHECK); likeBtn3.setBounds(241, 133, 44, 17); likeBtn3.setText(&quot;Rap&quot;); Combo combo = new Combo(shell, SWT.NONE); combo.setItems(ShengShi.PROVINCE); combo.setBounds(163, 178, 72, 25); Label label_3 = new Label(shell, SWT.NONE); label_3.setBounds(95, 181, 33, 17); label_3.setText(&quot;\\u7C4D\\u8D2F&quot;); Label label_4 = new Label(shell, SWT.NONE); label_4.setBounds(95, 238, 61, 17); label_4.setText(&quot;\\u6027\\u522B&quot;); Button button_2 = new Button(shell, SWT.RADIO); button_2.setBounds(164, 238, 61, 17); button_2.setText(&quot;\\u7537\\u751F&quot;); Button button_3 = new Button(shell, SWT.RADIO); button_3.setBounds(232, 238, 97, 17); button_3.setText(&quot;\\u5973\\u751F&quot;); DateTime dateTime = new DateTime(shell, SWT.BORDER); dateTime.setBounds(164, 280, 165, 24); Button button_5 = new Button(shell, SWT.NONE); button_5.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; //当鼠标点击按钮(或键盘回车),则会执行该方法的代码 //获取文本框的值 System.out.println(&quot;用户名&quot;+name.getText()); System.out.println(&quot;密码：&quot;+pwd.getText()); //获取下拉框的值 System.out.println(&quot;学历：&quot;+combo.getText()); //获取单选框、多选框的值 List&lt;String&gt; likes = SwtHelper.getSelection(likeBtn1,likeBtn2,likeBtn3,likeBtn4); System.out.println(&quot;爱好：&quot;+likes); List&lt;String&gt; sexs = SwtHelper.getSelection(button_2,button_2); System.out.println(&quot;性别：&quot;+sexs); //获取日期 System.out.printf(&quot;生日：%s年%s月%s日&quot;, dateTime.getYear(), dateTime.getMonth(), dateTime.getDay()); &#125; &#125;); button_5.setBounds(117, 332, 80, 27); button_5.setText(&quot;\\u786E\\u8BA4&quot;); Button button_6 = new Button(shell, SWT.NONE); button_6.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; //关闭窗口 shell.close(); &#125; &#125;); button_6.setBounds(232, 332, 80, 27); button_6.setText(&quot;\\u53D6\\u6D88&quot;); Label label_5 = new Label(shell, SWT.NONE); label_5.setBounds(95, 287, 61, 17); label_5.setText(&quot;\\u751F\\u65E5&quot;); Combo combo_1 = new Combo(shell, SWT.NONE); combo_1.setBounds(257, 178, 72, 25); combo.addSelectionListener(new SelectionAdapter() &#123; @Override public void widgetSelected(SelectionEvent e) &#123; //获取选中的选项的下标值(索引) int index = combo.getSelectionIndex(); //更新城市下拉框的选项列表 combo_1.setItems(ShengShi.CITY[index]); &#125; &#125;); &#125;&#125; 2.上下左右键位 移动 Class Move 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091package pm.swt;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.SWT;import org.eclipse.wb.swt.SWTResourceManager;import org.eclipse.swt.events.KeyAdapter;import org.eclipse.swt.events.KeyEvent;import org.eclipse.swt.graphics.Point;public class Move &#123; protected Shell shell; /** * Launch the application. * @param args */ public static void main(String[] args) &#123; try &#123; Move window = new Move(); window.open(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; /** * Open the window. */ public void open() &#123; Display display = Display.getDefault(); createContents(); shell.open(); shell.layout(); while (!shell.isDisposed()) &#123; if (!display.readAndDispatch()) &#123; display.sleep(); &#125; &#125; &#125; /** * Create contents of the window. */ protected void createContents() &#123; shell = new Shell(); shell.setSize(686, 685); shell.setText(&quot;SWT Application&quot;); Label label = new Label(shell, SWT.NONE); label.setImage(SWTResourceManager.getImage(Move.class, &quot;/pm/swt/timg.png&quot;)); label.setBounds(207, 196, 246, 250); shell.addKeyListener(new KeyAdapter() &#123; @Override public void keyPressed(KeyEvent e) &#123; int top = 16777217; int down = 16777218; int left = 16777219; int right = 16777220; System.out.println(e.keyCode); if(e.keyCode==top) &#123; Point p = label.getLocation(); p.y -= 5; label.setLocation(p); &#125; if(e.keyCode==down) &#123; Point p = label.getLocation(); p.y += 5; label.setLocation(p); &#125; if(e.keyCode==left) &#123; Point p = label.getLocation(); p.x -= 5; label.setLocation(p); &#125; if(e.keyCode==right) &#123; Point p = label.getLocation(); p.y += 5; label.setLocation(p); &#125; &#125; &#125;); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第47次课程","slug":"技术向/Java/源辰课程记录/第47次课程","date":"2019-07-25T16:00:00.000Z","updated":"2022-05-11T01:17:28.742Z","comments":true,"path":"技术向/Java/源辰课程记录/第47次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC47%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第47次课程 07.26.2019 内容 Dao封装[廖彦] **Class DBHelper ** 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183package dao.demo;import java.io.InputStream;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.SQLException;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.Properties;public class DBhelper &#123; private static String url; private static String username; private static String password; //驱动加载 static &#123; try &#123; Properties p = new Properties(); //读取配置文件，转成输入流 InputStream in = DBhelper.class.getClassLoader().getResourceAsStream(&quot;db.properties&quot;); p.load(in); String driver = p.getProperty(&quot;username&quot;); url = p.getProperty(&quot;url&quot;); username = p.getProperty(&quot;username&quot;); password = p.getProperty(&quot;password&quot;); Class.forName(driver); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; public static void main(String[] args) &#123; String sql = &quot;insert into dept values(?,?,?)&quot;; update(sql,11,&quot;财务&quot;,&quot;衡阳&quot;); &#125; /** * ...可变参数数组 */ //增删改 public static int update(String sql,Object...paramArray) &#123; Connection conn = null; try &#123; conn = openConnection(); PreparedStatement ps = conn.prepareStatement(sql); for(int i=0;i&lt;paramArray.length;i++) &#123; ps.setObject(i+1, paramArray[i]); &#125; return ps.executeUpdate(); &#125; catch(Exception e)&#123; //异常转型 throw new RuntimeException(e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; //连接 public static Connection openConnection() throws SQLException &#123; return DriverManager.getConnection(url, username, password); &#125; //查找 public static List&lt;Map&lt;String,Object&gt;&gt; query(String sql,Object...paramArray) &#123; Connection conn = null; try &#123; conn = openConnection(); PreparedStatement ps = conn.prepareStatement(sql); for(int i=0;i&lt;paramArray.length;i++) &#123; ps.setObject(i+1, paramArray[i]); &#125; ResultSet rs = ps.executeQuery(); //获取元数据 ResultSetMetaData rsmd = rs.getMetaData(); List&lt;Map&lt;String,Object&gt;&gt; ret = new ArrayList&lt;&gt;(); while(rs.next()) &#123; Map&lt;String,Object&gt; row = new LinkedHashMap&lt;&gt;(); for(int i=1;i&lt;rsmd.getColumnCount();i++) &#123; String columnName = rsmd.getColumnName(i); Object columnValue = rs.getObject(i); row.put(columnName, columnValue); &#125; ret.add(row); &#125; return ret; &#125; catch(Exception e)&#123; //异常转型 throw new RuntimeException(e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; /** * 查询一条记录(例如根据主键查询记录) */ public static Map&lt;String,Object&gt; queryOne (String sql,Object...paramArray)&#123; Connection conn = null; try &#123; conn = openConnection(); PreparedStatement ps = conn.prepareStatement(sql); for(int i=0;i&lt;paramArray.length;i++) &#123; ps.setObject(i+1, paramArray[i]); &#125; ResultSet rs = ps.executeQuery(); //获取元数据 ResultSetMetaData rsmd = rs.getMetaData(); if(rs.next()) &#123; Map&lt;String,Object&gt; row = new LinkedHashMap&lt;&gt;(); for(int i=1;i&lt;rsmd.getColumnCount();i++) &#123; //获取列名 String columnName = rsmd.getColumnName(i); Object columnValue = rs.getObject(i); row.put(columnName, columnValue); &#125; return row; &#125; return null; &#125; catch(Exception e)&#123; //异常转型 throw new RuntimeException(e); &#125; finally &#123; try &#123; if(conn!=null) &#123; conn.close(); &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; //分页查询 public static List&lt;Map&lt;String,Object&gt;&gt; queryPage ( String sql,int page,int rows,Object...paramArray)&#123; int startrow = (page - 1) * rows; int endrow = page * rows; sql = &quot;select t.*\\n&quot; + &quot; from ( select t.*,rownum rn from ( &quot;+sql+&quot;) t where rownum &lt;= ?) t\\n&quot; + &quot; where t.rn &gt; ?&quot;; //生成新的查询数组 Object[] newParamArray = new Object[paramArray.length + 2]; System.arraycopy(paramArray, 0, newParamArray, 0, paramArray.length); newParamArray[newParamArray.length - 2] = endrow; newParamArray[newParamArray.length - 1] = startrow; return query(sql,newParamArray); &#125; /** * 从查询结果中获取一个值，返回第一个行第一列的值 */ public static Object getValue(String sql,Object...paramArray) &#123; Map&lt;String,Object&gt; row = queryOne(sql,paramArray); if(row==null) &#123; return null; &#125;else &#123; for(Map.Entry&lt;String, Object&gt; e:row.entrySet()) &#123; return e.getValue(); &#125; &#125; return null; &#125;&#125; Class DBHelperTest 123456789101112131415161718192021222324252627282930313233343536373839404142434445package dao.demo;import java.util.List;import java.util.Map;import org.junit.Assert;import org.junit.Test;public class DBHelperTest &#123; @Test public void testQueryPage() &#123; String sql = &quot;select * from emp&quot;; List&lt;Map&lt;String,Object&gt;&gt; ret = DBhelper.queryPage(sql, 2, 5); Assert.assertEquals(&quot;BLAKE&quot;, ret.get(0).get(&quot;ENAME&quot;)); Assert.assertEquals(&quot;TURNER&quot;, ret.get(4).get(&quot;ENAME&quot;)); &#125; @Test public void testQuery() &#123; //查询所有表记录 String sql = &quot;select * from dept&quot;; List&lt;Map&lt;String,Object&gt;&gt; ret = DBhelper.query(sql); Assert.assertEquals(true,ret.size()&gt;0); //根据deptno查询表记录 sql = &quot;select * from dept where deptno = ?&quot;; ret = DBhelper.query(sql, 30); Assert.assertEquals(&quot;SALES&quot;, ret.get(0).get(&quot;DNAME&quot;)); &#125; @Test public void testUpdate() &#123; //测试添加 String sql = &quot;insert into dept values(?,?,?)&quot;; int cnt = DBhelper.update(sql, 12,&quot;财务&quot;,&quot;衡阳&quot;); Assert.assertEquals(1, cnt); //测试修改 sql = &quot;update dept set dname = ? where deptno = ?&quot;; cnt = DBhelper.update(sql, &quot;技术&quot;,12); Assert.assertEquals(1, cnt); //测试删除 sql = &quot;delete dept where deptno = ?&quot;; cnt = DBhelper.update(sql, 12); Assert.assertEquals(1, cnt); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第46次课程","slug":"技术向/Java/源辰课程记录/第46次课程","date":"2019-07-24T16:00:00.000Z","updated":"2022-05-11T01:17:15.184Z","comments":true,"path":"技术向/Java/源辰课程记录/第46次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC46%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第46次课程 07.25.2019 内容 java.jdbc高级技术[廖彦] 1.jdbc封装 将从数据库获取的数据打包成HashMap包放入List后返回 12345678910111213141516171819202122public List&lt;Map&lt;String,Object&gt;&gt; selectByName(String dname) throws SQLException, ClassNotFoundException&#123; Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;); String url = &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;; String user = &quot;scott&quot;; String password = &quot;tiger&quot;; Connection conn = DriverManager.getConnection(url, user, password); String sql = &quot;select * from dept where dname like ?&quot;; PreparedStatement ps = conn.prepareStatement(sql); ps.setString(1, &quot;%&quot;+dname+&quot;%&quot;); ResultSet rs = ps.executeQuery(); List&lt;Map&lt;String,Object&gt;&gt; ret = new ArrayList&lt;&gt;(); while(rs.next()) &#123; Map&lt;String,Object&gt; row = new LinkedHashMap&lt;&gt;(); row.put(&quot;DEPTNO&quot;, rs.getInt(&quot;DEPTNO&quot;)); row.put(&quot;DNAME&quot;,rs.getString(&quot;DNAME&quot;)); row.put(&quot;LOC&quot;, rs.getString(&quot;LOC&quot;)); ret.add(row); &#125; conn.close(); return ret;&#125; 2.数据库命令拼接（可多选条件） 1234567891011121314151617181920212223242526272829303132333435public List&lt;Map&lt;String,Object&gt;&gt; selectByNameAndLoc(String dname,String loc) throws ClassNotFoundException, SQLException&#123; String sql = &quot;select * from dept where 1=1&quot;; List&lt;Object&gt; paramList = new ArrayList&lt;&gt;(); //sql命令字符串拼接 if(dname != null) &#123; sql += &quot; and dname like ?&quot;; paramList.add(&quot;%&quot;+dname+&quot;%&quot;); &#125; if(loc != null) &#123; sql += &quot; and loc like ?&quot;; paramList.add(&quot;%&quot;+loc+&quot;%&quot;); &#125; Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;); String url = &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;; String user = &quot;scott&quot;; String password = &quot;tiger&quot;; Connection conn = DriverManager.getConnection(url, user, password); //预编译sql对象 PreparedStatement ps = conn.prepareStatement(sql); //将参数传入预编译sql对象 for(int i=0;i&lt;paramList.size();i++) &#123; ps.setObject(i+1, paramList.get(i)); &#125; ResultSet rs = ps.executeQuery(); List&lt;Map&lt;String,Object&gt;&gt; ret = new ArrayList&lt;&gt;(); while(rs.next()) &#123; Map&lt;String,Object&gt; row = new LinkedHashMap&lt;&gt;(); row.put(&quot;DEPTNO&quot;, rs.getInt(&quot;DEPTNO&quot;)); row.put(&quot;DNAME&quot;,rs.getString(&quot;DNAME&quot;)); row.put(&quot;LOC&quot;, rs.getString(&quot;LOC&quot;)); ret.add(row); &#125; conn.close(); return ret;&#125; 3.数据库自增序列调用 123456789101112131415//关于数据库自增序列的应用 public void insert(String dname,String loc) throws ClassNotFoundException, SQLException &#123; Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;); String url = &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;; String user = &quot;scott&quot;; String password = &quot;tiger&quot;; Connection conn = DriverManager.getConnection(url, user, password); String sql = &quot;insert into dept values(SEQ_DEPT_NO.nextval,?,?)&quot;; PreparedStatement ps = conn.prepareStatement(sql); ps.setString(1, dname); ps.setString(2, loc); ps.executeUpdate(); conn.close();&#125; 4.Oracle与java关于Date类型转换 根据入职日期查询 java.sql.Date SQL的日期类型，表示年月日 java.sql.Timestamp SQL的日期类型，表示年月日 时分秒(精确到毫秒级) 12345678910111213141516171819202122232425262728293031 /** * 根据入职日期查询 * java.sql.Date SQL的日期类型，表示年月日 * java.sql.Timestamp SQL的日期类型，表示年月日 时分秒(精确到毫秒级) */ public List&lt;Map&lt;String,Object&gt;&gt; selectByHiredate(Date hiredate) throws SQLException, ClassNotFoundException&#123; Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;); String url = &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;; String user = &quot;scott&quot;; String password = &quot;tiger&quot;; Connection conn = DriverManager.getConnection(url, user, password); String sql = &quot;select * from emp where hiredate = ?&quot;; //查询其他格式日期（如1982-2）的方法 //String sql = &quot;select * from emp where to_char(hiredate,&#x27;yymm&#x27;) = to_char(?,&#x27;yymm&#x27;)&quot;; //select * from emp where extract(year from hiredate) = 1981 and extract(month from hiredate) = 2; PreparedStatement ps = conn.prepareStatement(sql); ps.setDate(1, hiredate); ResultSet rs = ps.executeQuery(); List&lt;Map&lt;String,Object&gt;&gt; ret = new ArrayList&lt;&gt;(); while(rs.next()) &#123; //LinkedHashMap 有序的HashMap Map&lt;String,Object&gt; row = new LinkedHashMap&lt;&gt;(); row.put(&quot;EMPNO&quot;, rs.getInt(&quot;EMPNO&quot;)); row.put(&quot;ENAME&quot;,rs.getString(&quot;ENAME&quot;)); row.put(&quot;HIREDATE&quot;, rs.getString(&quot;HIREDATE&quot;)); ret.add(row); &#125; conn.close(); return ret;&#125; 5.@Test测试 单元测试 Class DeptDaoTest 12345678910111213141516171819202122232425262728@Test public void test1() throws ClassNotFoundException, SQLException &#123; DeptDao dao = new DeptDao(); List&lt;Map&lt;String,Object&gt;&gt; ret = dao.selectByName(&quot;S&quot;); System.out.println(ret); /** * 单元测试判断：断言 */ Assert.assertEquals(3, ret.size()); &#125; @Test public void test2() throws ClassNotFoundException, SQLException &#123; DeptDao dao = new DeptDao(); List&lt;Map&lt;String,Object&gt;&gt; ret = dao.selectByNameAndLoc(&quot;S&quot;, &quot;O&quot;); System.out.println(ret); /** * 单元测试判断：断言 */ Assert.assertEquals(2, ret.size()); &#125; @Test public void test3() throws ClassNotFoundException, SQLException &#123; DeptDao dao = new DeptDao(); dao.insert(&quot;财务部&quot;, &quot;衡阳&quot;); List&lt;Map&lt;String,Object&gt;&gt; ret = dao.selectByName(&quot;财务部&quot;); Assert.assertEquals(1, ret.size());&#125; Class EmpDaoTest 123456789@Test public void EmpDaoTest() throws ClassNotFoundException, SQLException &#123; EmpDao edao = new EmpDao(); Date hiredate = Date.valueOf(&quot;1981-2-20&quot;); List&lt;Map&lt;String,Object&gt;&gt; ret = edao.selectByHiredate(hiredate); System.out.println(ret); Assert.assertEquals(true,ret.size()&gt;0);&#125; 6.课堂作业 1234567891011121314151617 /** * 课堂练习 * 1.请将1982年前入职的员工加薪100 * 2.将FORD和BLAKE的下属员工对调 * @throws SQLException * @throws ClassNotFoundException */ @Test public void payRiseTest() throws ClassNotFoundException, SQLException &#123; EmpDao edao = new EmpDao(); edao.payRise(); &#125; @Test public void employeeAlignmentTest() throws ClassNotFoundException, SQLException &#123; EmpDao edao = new EmpDao(); edao.employeeAlignment(); &#125; 功能方法源码 123456789101112131415161718192021222324252627282930//课堂作业 public void payRise() throws ClassNotFoundException, SQLException &#123; Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;); String url = &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;; String user = &quot;scott&quot;; String password = &quot;tiger&quot;; Connection conn = DriverManager.getConnection(url, user, password); String sql = &quot;update empcopy set sal=sal+100 where extract(year from hiredate) &lt; 1982&quot;; PreparedStatement ps = conn.prepareStatement(sql); ps.executeUpdate(); conn.close(); &#125; public void employeeAlignment() throws ClassNotFoundException, SQLException &#123; Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;); String url = &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;; String user = &quot;scott&quot;; String password = &quot;tiger&quot;; Connection conn = DriverManager.getConnection(url, user, password); String sql1 = &quot;update empcopy set MGR = 0 where MGR = 7698&quot;; PreparedStatement ps1 = conn.prepareStatement(sql1); ps1.executeUpdate(); String sql2 = &quot;update empcopy set MGR = 7698 where MGR = 7902&quot;; PreparedStatement ps2 = conn.prepareStatement(sql2); ps2.executeUpdate(); String sql3 = &quot;update empcopy set MGR = 7902 where MGR = 0&quot;; PreparedStatement ps3 = conn.prepareStatement(sql3); ps3.executeUpdate();&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第45次课程","slug":"技术向/Java/源辰课程记录/第45次课程","date":"2019-07-22T16:00:00.000Z","updated":"2022-05-11T01:17:01.941Z","comments":true,"path":"技术向/Java/源辰课程记录/第45次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC45%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第45次课程 07.23.2019 内容 java.jdbc包[廖彦] 与数据库连接、增删改、普通查询和预编译查询 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139package com.yc.jdbc;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;public class JdbcTest &#123; public static void main(String[] args) throws ClassNotFoundException, SQLException &#123; JdbcTest jt = new JdbcTest(); jt.set(); //jt.saveDept(); &#125; //增加一条表记录 private void saveDept() throws ClassNotFoundException, SQLException &#123; //加载驱动 Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;); //创建连接 String url = &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;; String user = &quot;scott&quot;; String password = &quot;tiger&quot;; Connection conn = DriverManager.getConnection(url, user, password); //新增一个部门 String sql = &quot;insert into dept values(?,?,?)&quot;; PreparedStatement ps = conn.prepareStatement(sql); ps.setInt(1, 52); ps.setString(2, &quot;行政部&quot;); ps.setString(3, &quot;广州&quot;); //executeUpdate() 用于执行 增删改 返回的结果表示影响的行数 ps.executeUpdate(); System.out.println(&quot;部门添加成功&quot;); conn.close(); &#125; //删除一条表记录 private void delete() throws ClassNotFoundException, SQLException &#123; //加载驱动 Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;); //创建连接 String url = &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;; String user = &quot;scott&quot;; String password = &quot;tiger&quot;; Connection conn = DriverManager.getConnection(url, user, password); //删除一个部门 String sql = &quot;delete dept where deptno = ?&quot;; PreparedStatement ps = conn.prepareStatement(sql); ps.setInt(1, 50); //executeUpdate() 用于执行 增删改 返回的结果表示影响的行数 ps.executeUpdate(); System.out.println(&quot;部门删除成功&quot;); conn.close(); &#125; //修改一条表记录 private void set() throws ClassNotFoundException, SQLException &#123; //加载驱动 Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;); //创建连接 String url = &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;; String user = &quot;scott&quot;; String password = &quot;tiger&quot;; Connection conn = DriverManager.getConnection(url, user, password); //修改一个部门 String sql = &quot;update dept set DNAME = ?,LOC = ? where DEPTNO = ?&quot;; PreparedStatement ps = conn.prepareStatement(sql); ps.setString(1, &quot;财务部&quot;); ps.setString(2, &quot;上海&quot;); ps.setInt(3, 51); //executeUpdate() 用于执行 增删改 返回的结果表示影响的行数 ps.executeUpdate(); System.out.println(&quot;部门修改成功&quot;); conn.close(); &#125; //查询表记录(预编译写法 推荐) private void selectEmpByName(String ename) throws ClassNotFoundException, SQLException &#123; //加载驱动 Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;); //创建连接 String url = &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;; String user = &quot;scott&quot;; String password = &quot;tiger&quot;; Connection conn = DriverManager.getConnection(url, user, password); String sql = &quot;select * from emp where ename like ?&quot;; //创建预编译sql语句对象，使用?(占位符) PreparedStatement ps = conn.prepareStatement(sql); //设置参数，setXXX方法用于设置参数值，XXX表示类型，参数编号从1开始 ps.setString(1, &quot;%&quot;+ename+&quot;%&quot;); ResultSet rs = ps.executeQuery(); System.out.println(&quot;姓名\\t职位\\t工资&quot;); //next() 返回游标是否有指向一条记录，如果有则返回true while(rs.next()) &#123; // String name = rs.getString(&quot;ENAME&quot;); String job = rs.getString(&quot;JOB&quot;); float sal = rs.getFloat(&quot;SAL&quot;); System.out.printf(&quot;%s\\t%s\\t%s\\n&quot;,name,job,sal); &#125; conn.close(); &#125; //查询表记录(直接写法 不安全 SQL注入风险) private void selectAllDept() throws ClassNotFoundException, SQLException &#123; //加载驱动 Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;); //创建连接 String url = &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;; String user = &quot;scott&quot;; String password = &quot;tiger&quot;; Connection conn = DriverManager.getConnection(url, user, password); //创建语句对象 Statement stat = conn.createStatement(); //执行语句对象 String sql = &quot;select * from dept&quot;; //获取结果集 ResultSet ResultSet rs = stat.executeQuery(sql); //next() 返回游标是否有指向一条记录，如果有则返回true while(rs.next()) &#123; //ResultSet 对象提供了大量get XXX 方法，XXX表示数据的类型 int deptno = rs.getInt(1); String dname = rs.getString(2); String loc = rs.getString(3); System.out.printf(&quot;部门编号：%s 部门名称：%s 地址：%s\\n&quot;,deptno,dname,loc); &#125; //关闭连接 rs.close(); stat.close(); conn.close(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第44次课程","slug":"技术向/Java/源辰课程记录/第44次课程","date":"2019-07-21T16:00:00.000Z","updated":"2022-05-11T01:16:50.252Z","comments":true,"path":"技术向/Java/源辰课程记录/第44次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC44%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第44次课程 07.22.2019 **内容 ** **Oracle作业检查、复习及指导[蒋斌] ** 作业 SQL 123456789101112131415161718192021222324252627282930--练习2：--创建部门表Department 字段DepartmentID(主键约束)DepartmentName(部门名称非空唯一约束)--部门表添加三条以上的记录--创建员工表 Employees 字段Employees（主键约束）EmployeeName(非空约束) sex(检查约束) age(检查约束) DepartmentID(外键约束和部门产生联系)，LinkPhone(员工电话，非空唯一约束)---员工表添加四条以上的记录----分别为部门表和员工表创建序列，在添加记录时，主键通过序列自动生成create table Department( DepartmentID number(8) primary key, DepartmentName varchar2(50) not null unique);select * from Department;insert into Department values(d_up.nextval,&#x27;源辰教学部&#x27;);insert into Department values(d_up.nextval,&#x27;源辰教研部&#x27;);insert into Department values(d_up.nextval,&#x27;源辰招生部&#x27;);create sequence d_up start with 101 increment by 1;create table Employees( Employess number(10), EmployeeName varchar2(50) not null, sex varchar2(4) constraint ck_employess_sex check(sex=&#x27;男&#x27; or sex=&#x27;女&#x27;), age number(4) constraint ck_employess_age check(age between 18 and 45), DepartmentID number(8) constraint fk_employess_did references Department(DepartmentID), LinkPhone varchar2(30) not null unique);select * from Employees;create sequence e_up start with 192168 increment by 1;insert into Employees values(e_up.nextval,&#x27;张三&#x27;,&#x27;男&#x27;,20,101,46552134856);insert into Employees values(e_up.nextval,&#x27;李四&#x27;,&#x27;男&#x27;,31,102,89851234856);insert into Employees values(e_up.nextval,&#x27;王五&#x27;,&#x27;女&#x27;,24,103,36485157422);insert into Employees values(e_up.nextval,&#x27;麻六&#x27;,&#x27;男&#x27;,41,101,89889871313); SQL 1234567891011121314151617181920212223242526272829303132333435/*--练习1:--创建供应商信息表Supplier，字段：SupplierID:（主键约束）SupplierName（唯一约束），Phone（电话）,Address（非空约束）,PostalCode(邮编),City（非空约束）--供应商信息表添加三条以上的记录。--商品信息表Products 的字段 ProductID（主键） ProductName（非空约束）SupplierID（外键约束指向供应商信息表的主键）---商品信息表添加四条以上的记录--分别为供应商信息表和商品信息表创建序列，在添加记录时，主键通过序列自动生成*/create table Supplier( SupplierID number(4) primary key, SupplierName varchar2(20) unique, Phone varchar2(30), Address varchar2(50) not null, PostalCode varchar2(20), City varchar2(50) not null);select * from Supplier;delete from Supplier;insert into Supplier values(s_up.nextval,&#x27;中国石油&#x27;,1154685481,&#x27;北京市房山区&#x27;,130611,&#x27;北京市&#x27;);insert into Supplier values(s_up.nextval,&#x27;中国石化&#x27;,1154574381,&#x27;湖南省长沙市&#x27;,536611,&#x27;长沙市&#x27;);insert into Supplier values(s_up.nextval,&#x27;中国钢铁&#x27;,1753355481,&#x27;河北省唐山市&#x27;,453453,&#x27;唐山市&#x27;);create table Products( ProductID number(4) primary key, ProductName varchar2(20) not null, SupplierID number(4) constraint fk_pdt_sid references Supplier(SupplierID));select * from Products;delete from Products;insert into Products values(p_up.nextval,&#x27;汽油&#x27;,1001);insert into Products values(p_up.nextval,&#x27;柴油&#x27;,1001);insert into Products values(p_up.nextval,&#x27;煤油&#x27;,1002);insert into Products values(p_up.nextval,&#x27;不锈钢&#x27;,1003);create sequence s_up start with 1001 increment by 1;create sequence p_up start with 001 increment by 1; SQL 1234567891011--需求：查询员工表工资前三名的员工，练习create table hwcopy( empno number(10) primary key, ename varchar2(20), sal number(20), dr number(10));insert into hwcopy(empno,ename,sal,dr) select empno,ename,sal,dense_rank() over(order by sal desc) from emp ;select * from hwcopy where dr&lt;4;select a.* from (select empno,ename,sal,dense_rank() over(order by sal desc) as do from emp) a where do&lt;=3; SQL 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091create table Users( Id number(4) primary key, LoginPWD varchar2(10), NickName varchar2(10), Sex varchar2(6), StarID number(4) constraint fk_users_starid references star(Id), BloodTypeID number(4) constraint fk_user_bloodtypeid references bloodtype(Id));create table star( Id number(4) primary key, Star varchar2(10));create table bloodtype( Id number(4) primary key, BloodType varchar2(10));select * from users;select * from star;select * from bloodtype;create sequence seq_users start with 1 increment by 1;create sequence seq_star start with 1 increment by 1;create sequence seq_bloodtype start with 1 increment by 1;insert into Users values (seq_users.nextval,&#x27;0000&#x27;,&#x27;豆豆&#x27;,&#x27;男&#x27;,5,1);insert into Users values (seq_users.nextval,&#x27;00A0&#x27;,&#x27;小强&#x27;,&#x27;男&#x27;,4,4);insert into Users values (seq_users.nextval,&#x27;0000&#x27;,&#x27;静静&#x27;,&#x27;男&#x27;,3,2);insert into Users values (seq_users.nextval,&#x27;00B0&#x27;,&#x27;Java&#x27;,&#x27;男&#x27;,6,3);insert into Users values (seq_users.nextval,&#x27;0CC0&#x27;,&#x27;bobo&#x27;,&#x27;男&#x27;,2,1);insert into Users values (seq_users.nextval,&#x27;0BB0&#x27;,&#x27;我爱Java&#x27;,&#x27;男&#x27;,4,2);insert into Users values (seq_users.nextval,&#x27;0AA0&#x27;,&#x27;风筝&#x27;,&#x27;女&#x27;,1,1);insert into Users values (seq_users.nextval,&#x27;A000&#x27;,&#x27;benben&#x27;,&#x27;男&#x27;,1,1);insert into Users values (seq_users.nextval,&#x27;000C&#x27;,&#x27;吕洞宾&#x27;,&#x27;男&#x27;,11,1);insert into Users values (seq_users.nextval,&#x27;A000&#x27;,&#x27;清凉一夏&#x27;,&#x27;女&#x27;,6,2);insert into star values (seq_star.nextval,&#x27;白羊座&#x27;);insert into star values (seq_star.nextval,&#x27;金牛座&#x27;);insert into star values (seq_star.nextval,&#x27;双子座&#x27;);insert into star values (seq_star.nextval,&#x27;巨蟹座&#x27;);insert into star values (seq_star.nextval,&#x27;狮子座&#x27;);insert into star values (seq_star.nextval,&#x27;处女座&#x27;);insert into star values (seq_star.nextval,&#x27;天秤座&#x27;);insert into star values (seq_star.nextval,&#x27;天蝎座&#x27;);insert into star values (seq_star.nextval,&#x27;射手座&#x27;);insert into star values (seq_star.nextval,&#x27;魔蝎座&#x27;);insert into star values (seq_star.nextval,&#x27;水瓶座&#x27;);insert into star values (seq_star.nextval,&#x27;双鱼座&#x27;);insert into bloodtype values (seq_bloodtype.nextval,&#x27;A型&#x27;);insert into bloodtype values (seq_bloodtype.nextval,&#x27;B型&#x27;);insert into bloodtype values (seq_bloodtype.nextval,&#x27;O型&#x27;);insert into bloodtype values (seq_bloodtype.nextval,&#x27;AB型&#x27;);--查出血型为“O型” 的用户姓名、性别select users.nickname,users.sex,bloodtype.bloodtypefrom usersleft join bloodtypeon bloodtype.id = users.bloodtypeidwhere bloodtype.bloodtype = &#x27;O型&#x27;;--查出血型为“A型” 并且星座为“白羊座”的用户姓名 性别select users.nickname,users.sex,bloodtype.bloodtype,star.starfrom usersleft join bloodtypeon bloodtype.id = users.bloodtypeidleft join staron star.id = users.staridwhere bloodtype.bloodtype = &#x27;A型&#x27; and star.star = &#x27;白羊座&#x27;;--用户“.NET”更新自己的名字为“天外飞仙”，请编写SQL语句进行更新；update users set NickName = &#x27;天外飞仙&#x27; where id = 4;--查询输出用户的详细信息，输出结果如下图所示：select users.nickname,users.sex,star.star,bloodtype.bloodtypefrom usersleft join bloodtypeon bloodtype.id = users.bloodtypeidleft join staron star.id = users.starid--查询用户的密码中包含字符“A”的用户姓名、性别update users set NickName = &#x27;天外飞仙&#x27; where id = 4;--查询输出用户的详细信息，输出结果如下图所示：select users.nickname,users.sex,star.star,bloodtype.bloodtypefrom usersleft join bloodtypeon bloodtype.id = users.bloodtypeidleft join staron star.id = users.staridwhere users.loginpwd like (&#x27;%A%&#x27;) SQL 123456789101112131415161718192021--银行转账练习题create table bank( accountID varchar2(10) primary key, userName varchar2(20) not null, balance number(10) constraint ck_bank_balance check (balance &gt;= 0));insert into bank values (101,&#x27;张三&#x27;,900);insert into bank values (102,&#x27;李四&#x27;,1200);update bank set balance=balance-1000 where accountID=101;savepoint p1;update bank set balance=balance+1000 where accountID=102;rollback to savepoint p1;select * from bank;drop table bank;delete from bank; 项目SQL 销售信息管理系统实现要求.doc 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362--员工信息表create table tbEmp( eid number(10) primary key, ename varchar2(20) not null unique constraint ck_tbEmp_ename check(length(ename) between 2 and 5), esex varchar2(10) default &#x27;男&#x27; not null constraint ck_tbEmp_esex check(esex in(&#x27;男&#x27;,&#x27;女&#x27;)), eAge number(3) not null constraint ck_tbEmp_eage check(eage between 18 and 50), eaddr varchar2(30));--产品信息表create table tbProd( pid number(10) primary key, ptype varchar2(20) not null, pmark varchar2(20), pspec varchar2(20));--销售信息表create table tbSales( srno number(10) primary key, eid number(10) constraint fk_tbsales_eid references tbEmp(eid), pid number(10) constraint fk_tbsales_pid references tbProd(pid), pqty number(10) constraint ck_tbsales_pqty check(pqty&gt;=0), pamount number(10) constraint ck_tbsales_pamount check(pamount&gt;=0), sdate date);create sequence tbemp_eid start with 10000 increment by 1;create sequence tbprod_pid start with 1 increment by 1;create sequence tbsales_srno start with 1 increment by 1;insert into tbemp values (tbemp_eid.nextval,&#x27;张三&#x27;,&#x27;男&#x27;,19,&#x27;湖南省长沙市&#x27;);insert into tbemp values (tbemp_eid.nextval,&#x27;李四&#x27;,&#x27;女&#x27;,27,&#x27;湖南省衡阳市&#x27;);insert into tbemp values (tbemp_eid.nextval,&#x27;王五&#x27;,&#x27;男&#x27;,24,&#x27;湖南省湘潭市&#x27;);insert into tbemp values (tbemp_eid.nextval,&#x27;麻六&#x27;,&#x27;男&#x27;,25,&#x27;河北省保定市&#x27;);insert into tbemp values (tbemp_eid.nextval,&#x27;白洁&#x27;,&#x27;男&#x27;,21,&#x27;河北省石家庄市&#x27;);insert into tbemp values (tbemp_eid.nextval,&#x27;李云&#x27;,&#x27;男&#x27;,31,&#x27;湖南省长沙市&#x27;);insert into tbemp values (tbemp_eid.nextval,&#x27;杜甫&#x27;,&#x27;女&#x27;,29,&#x27;湖北省武汉市&#x27;);insert into tbprod values (tbprod_pid.nextval,&#x27;笔记本&#x27;,&#x27;外星人&#x27;,&#x27;17寸&#x27;);insert into tbprod values (tbprod_pid.nextval,&#x27;笔记本&#x27;,&#x27;华硕&#x27;,&#x27;15寸&#x27;);insert into tbprod values (tbprod_pid.nextval,&#x27;笔记本&#x27;,&#x27;惠普&#x27;,&#x27;13寸&#x27;);insert into tbprod values (tbprod_pid.nextval,&#x27;笔记本&#x27;,&#x27;联想&#x27;,&#x27;17寸&#x27;);insert into tbprod values (tbprod_pid.nextval,&#x27;电视机&#x27;,&#x27;长虹&#x27;,&#x27;29寸&#x27;);insert into tbprod values (tbprod_pid.nextval,&#x27;电视机&#x27;,&#x27;TLC&#x27;,&#x27;55寸&#x27;);insert into tbprod values (tbprod_pid.nextval,&#x27;电视机&#x27;,&#x27;熊猫&#x27;,&#x27;32寸&#x27;);insert into tbprod values (tbprod_pid.nextval,&#x27;笔记本&#x27;,&#x27;紫光&#x27;,&#x27;15寸&#x27;);insert into tbsales values (tbsales_srno.nextval,10001,1,6,60000,to_date(&#x27;2019-03-14&#x27;,&#x27;yyyy-mm-dd&#x27;));insert into tbsales values (tbsales_srno.nextval,10002,2,7,70000,to_date(&#x27;2019-04-07&#x27;,&#x27;yyyy-mm-dd&#x27;));insert into tbsales values (tbsales_srno.nextval,10003,2,10,120000,to_date(&#x27;2019-03-28&#x27;,&#x27;yyyy-mm-dd&#x27;));insert into tbsales values (tbsales_srno.nextval,10004,3,4,50000,to_date(&#x27;2019-04-21&#x27;,&#x27;yyyy-mm-dd&#x27;));insert into tbsales values (tbsales_srno.nextval,10005,4,8,780000,to_date(&#x27;2019-05-01&#x27;,&#x27;yyyy-mm-dd&#x27;));insert into tbsales values (tbsales_srno.nextval,10006,5,12,40000,to_date(&#x27;2019-03-10&#x27;,&#x27;yyyy-mm-dd&#x27;));insert into tbsales values (tbsales_srno.nextval,10005,4,4,440000,to_date(&#x27;2019-03-01&#x27;,&#x27;yyyy-mm-dd&#x27;));insert into tbsales values (tbsales_srno.nextval,10000,1,22,320000,to_date(&#x27;2019-04-07&#x27;,&#x27;yyyy-mm-dd&#x27;));insert into tbsales values (tbsales_srno.nextval,10004,5,8,240000,to_date(&#x27;2019-05-24&#x27;,&#x27;yyyy-mm-dd&#x27;));insert into tbsales values (tbsales_srno.nextval,10000,1,4,5200,to_date(&#x27;2019-03-11&#x27;,&#x27;yyyy-mm-dd&#x27;));insert into tbsales values (tbsales_srno.nextval,10003,7,10,200000,to_date(&#x27;2019-06-26&#x27;,&#x27;yyyy-mm-dd&#x27;));insert into tbsales values (tbsales_srno.nextval,10005,8,6,60000,to_date(&#x27;2019-03-28&#x27;,&#x27;yyyy-mm-dd&#x27;));insert into tbsales values (tbsales_srno.nextval,10004,8,9,90000,to_date(&#x27;2019-03-11&#x27;,&#x27;yyyy-mm-dd&#x27;));--1.查询三表的数据select * from tbemp;select * from tbprod;select * from tbsales;--2.查询男员工名单select * from tbempwhere esex = &#x27;男&#x27;;---多表查询(不需要查询总销售量和总销售价值,只需显示商品的销售情况即可)--1. 所有职员,所有商品的销售情况,包括:职员姓名,商品类别,商品品牌,商品规格,销售数量,销售价值,销售时间,按销售时间从高到低排列--【法一】/*select *from tbemp,tbprod,tbsaleswhere tbsales.eid = tbemp.eid and tbsales.pid = tbprod.pidorder by sdate desc;*/select *from tbempfull join tbsaleson tbsales.eid = tbemp.eid--最终select *from ( select * from tbemp full join tbsales on tbsales.eid = tbemp.eid ) afull join tbprodon a.pid = tbprod.pid;--2.笔记本4月份的销售情况,包括:商品编号,商品品牌,商品规格,销售数量,销售价值,按销售数量从低到高排列/*select *from tbsalesleft join tbprodon tbsales.pid = tbprod.pidwhere tbprod.ptype = &#x27;笔记本&#x27; and extract(month from sdate) = 4;*/select *from tbsalesleft join tbprodon tbprod.pid = tbsales.pid--最终select a.pid,a.pmark,a.pspec,a.pqty,a.pamountfrom ( select tbprod.pid,tbprod.pmark,tbprod.pspec,tbsales.pqty,tbsales.pamount,tbsales.sdate from tbsales left join tbprod on tbprod.pid = tbsales.pid where tbprod.ptype = &#x27;笔记本&#x27; ) awhere extract(month from a.sdate) = 4order by pqty asc;--3. 李云3月份的销售情况,包括:商品编号,销售数量,销售价值/*select tbsales.pid,tbsales.pqty,tbsales.pamountfrom tbempleft join tbsaleson tbsales.eid = tbemp.eidwhere tbemp.ename = &#x27;李云&#x27; and extract(month from sdate) = 3;*/select tbsales.eidfrom tbsaleswhere extract(month from sdate) = 3--最终select ename,pid,pqty,pamountfrom ( select tbsales.eid as eid,pid,pqty,pamount from tbsales where extract(month from sdate) = 3 ) aleft join tbempon tbemp.eid = a.eidwhere tbemp.ename = &#x27;李云&#x27;----4. 长虹29英寸艺术电视机的销售情况,包括:销售数量,销售价值,销售时间/*select tbsales.pqty,tbsales.pamount,sdatefrom tbsalesleft join tbprodon tbprod.pid = tbsales.pidwhere tbprod.pmark = &#x27;长虹&#x27; and tbprod.pspec = &#x27;29寸&#x27;;*/select *from tbprodwhere tbprod.pmark = &#x27;长虹&#x27;--最终select pqty,pamount,sdatefrom ( select pid,pspec from tbprod where tbprod.pmark = &#x27;长虹&#x27; ) aleft join tbsaleson tbsales.pid = a.pidwhere a.pspec = &#x27;29寸&#x27;;--5.长沙男职员4月销售情况/*select *from tbempleft join tbsaleson tbsales.eid = tbemp.eidwhere tbemp.esex = &#x27;男&#x27; and extract(month from sdate) = 4 and tbemp.eaddr like (&#x27;%长沙%&#x27;)*/select *from tbempwhere tbemp.esex = &#x27;男&#x27;--最终select *from ( select eid from tbemp where tbemp.esex = &#x27;男&#x27; ) aleft join tbsaleson tbsales.eid = a.eid--统计--1.总共有多少个职员select count(tbemp.eid)from tbemp--2.长虹电视被销售了多少次select count(tbsales.srno)from tbsalesleft join tbprodon tbprod.pid = tbsales.pidwhere tbprod.pmark = &#x27;长虹&#x27;;--3. 年龄最小的女职员的年龄(年龄最小的女职员的姓名,年龄)select tbemp.esex,min(tbemp.eage)from tbempwhere tbemp.esex = &#x27;女&#x27;group by tbemp.esex--4. 笔记本单笔销售价值最高的单笔销售价值select *from tbprodwhere tbprod.ptype = &#x27;笔记本&#x27;--最终select max(pamount)from tbsalesleft join tbprodon tbsales.pid = tbprod.pidwhere tbprod.ptype = &#x27;笔记本&#x27;--5. 熊猫电视机的每次销售的平均销售价值(熊猫电视机的平均销售价格)select tbsales.pamount/tbsales.pqtyfrom tbprodleft join tbsaleson tbsales.pid = tbprod.pidwhere tbprod.pmark = &#x27;熊猫&#x27;--6. 紫光笔记本3月份的销售总额select sum(tbsales.pamount)from tbprodleft join tbsaleson tbsales.pid = tbprod.pidwhere tbprod.pmark = &#x27;紫光&#x27; and extract(month from tbsales.sdate) = 3--分组与合计--1. 按类型,品牌统计商品的销售总数量,销售总数量低于5的不统计--按类型select tbprod.ptype,sum(tbsales.pqty)from tbsalesleft join tbprodon tbprod.pid = tbsales.pidgroup by tbprod.ptypehaving sum(tbsales.pqty)&gt;=5--按品牌select tbprod.ptype,tbprod.pmark,sum(tbsales.pqty)from tbsalesleft join tbprodon tbprod.pid = tbsales.pidgroup by tbprod.pid,tbprod.ptype,tbprod.pmarkhaving sum(tbsales.pqty)&gt;=5--2. 按品牌,规格统计笔记本的平均销售价格,按销售价格从高到低的顺序显示select tbprod.pmark,tbprod.pspec,sum(tbsales.pamount)/sum(tbsales.pqty)from tbsalesleft join tbprodon tbprod.pid = tbsales.pidgroup by tbprod.pmark,tbprod.pspecorder by sum(tbsales.pamount)/sum(tbsales.pqty) desc--3.按姓名统计男职员3月份/*select tbemp.eid,sum(tbsales.pamount)from tbempleft join tbsaleson tbsales.eid = tbemp.eidgroup by tbemp.eid,tbemp.esex,sdatehaving tbemp.esex = &#x27;男&#x27; and extract(month from sdate) = 3 and sum(tbsales.pamount)&gt;10000*/--select *from tbempleft join tbsaleson tbsales.eid = tbemp.eidwhere tbemp.esex = &#x27;男&#x27; and extract(month from tbsales.sdate) = 3;--最终select a.ename,sum(a.pamount)from ( select * from tbemp left join tbsales on tbsales.eid = tbemp.eid where tbemp.esex = &#x27;男&#x27; and extract(month from tbsales.sdate) = 3 ) agroup by a.enamehaving sum(a.pamount) &gt; 10000;--4. 找出销售总额最高的职员的姓名select tbsales.eid,sum(tbsales.pamount)from tbsalesgroup by tbsales.eid--select max(a.sumpamount)from ( select tbsales.eid,sum(tbsales.pamount) as sumpamount from tbsales group by tbsales.eid ) a--select a.eidfrom ( select max(a.sumpamount) as maxsumpamount from ( select tbsales.eid,sum(tbsales.pamount) as sumpamount from tbsales group by tbsales.eid ) a ) bleft join ( select tbsales.eid,sum(tbsales.pamount) as sumpamount from tbsales group by tbsales.eid ) aon a.sumpamount = b.maxsumpamount--最终select tbemp.ename,c.maxsumpamountfrom ( select a.eid as maxeid,b.maxsumpamount as maxsumpamount from ( select max(a.sumpamount) as maxsumpamount from ( select tbsales.eid,sum(tbsales.pamount) as sumpamount from tbsales group by tbsales.eid ) a ) b left join ( select tbsales.eid,sum(tbsales.pamount) as sumpamount from tbsales group by tbsales.eid ) a on a.sumpamount = b.maxsumpamount ) cleft join tbempon tbemp.eid = c.maxeid--5. 按姓名统计每个职员一共完成了多少笔销售业务select tbsales.eid,count(tbsales.srno)from tbsalesgroup by tbsales.eid--最终select tbemp.ename,a.cfrom tbempright join ( select tbsales.eid,count(tbsales.srno) as c from tbsales group by tbsales.eid ) aon a.eid = tbemp.eid--6. 找出完成销售业务笔数最多的职员的姓名和他完成的业务数select b.eidfrom ( select max(count(tbsales.srno)) as msrno from tbsales group by tbsales.eid ) aleft join ( select tbsales.eid,count(tbsales.srno) as csrno from tbsales group by tbsales.eid ) bon b.csrno = a.msrno--最终select tbemp.enamefrom tbempright join ( select b.eid as eid from ( select max(count(tbsales.srno)) as msrno from tbsales group by tbsales.eid ) a left join ( select tbsales.eid,count(tbsales.srno) as csrno from tbsales group by tbsales.eid ) b on b.csrno = a.msrno ) con c.eid = tbemp.eid--7. 按性别统计职员的最大年龄和最小年龄select tbemp.esex,max(tbemp.eage),min(tbemp.eage)from tbempwhere tbemp.esex = &#x27;男&#x27;group by tbemp.esex--select tbemp.esex,max(tbemp.eage),min(tbemp.eage)from tbempwhere tbemp.esex = &#x27;女&#x27;group by tbemp.esex--最终select tbemp.esex,max(tbemp.eage),min(tbemp.eage)from tbempwhere tbemp.esex = &#x27;男&#x27;group by tbemp.esexunionselect tbemp.esex,max(tbemp.eage),min(tbemp.eage)from tbempwhere tbemp.esex = &#x27;女&#x27;group by tbemp.esex","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第43次课程","slug":"技术向/Java/源辰课程记录/第43次课程","date":"2019-07-20T16:00:00.000Z","updated":"2022-05-11T01:16:36.421Z","comments":true,"path":"技术向/Java/源辰课程记录/第43次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC43%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第43次课程 07.21.2019 **内容 ** Oracle_项目案例[张影] 1.案例_BBS –原始表结构及数据如下 create table tbl_user( userid int primary key, –账户 uname varchar2(20), –用户名 upass varchar2(100), –密码 head varchar2(100), –头像 regtime date, –注册时间 gender int –性别 ); create sequence seq_tbl_user_uid; drop sequence seq_tbl_user_uid; insert into tbl_user (userid,uname,upass,head,regtime,gender) values(seq_tbl_user_uid.nextval,’a’,’a’,’1.gif’,sysdate,1); insert into tbl_user (userid,uname,upass,head,regtime,gender) values(seq_tbl_user_uid.nextval,’b’,’b’,’2.gif’,sysdate,1); select * from tbl_user; delete from tbl_user; –板块 create table tbl_board( boardid int primary key, –板块地址 boardname varchar2(50), –板块名称 parentid int –父板块 ); create sequence seq_tabl_board_boardid; insert into tbl_board(boardid,boardname,parentid) values(seq_tabl_board_boardid.nextval,’.net’,0); insert into tbl_board(boardid,boardname,parentid) values(seq_tabl_board_boardid.nextval,’java’,0); insert into tbl_board(boardid,boardname,parentid) values(seq_tabl_board_boardid.nextval,’db’,0); insert into tbl_board(boardid,boardname,parentid) values(seq_tabl_board_boardid.nextval,’project’,0); insert into tbl_board(boardid,boardname,parentid) values(seq_tabl_board_boardid.nextval,’ado.net‘,1); insert into tbl_board(boardid,boardname,parentid) values(seq_tabl_board_boardid.nextval,’asp.net‘,1); insert into tbl_board(boardid,boardname,parentid) values(seq_tabl_board_boardid.nextval,’vb.net‘,1); insert into tbl_board(boardid,boardname,parentid) values(seq_tabl_board_boardid.nextval,’jsp’,2); insert into tbl_board(boardid,boardname,parentid) values(seq_tabl_board_boardid.nextval,’struts’,2); insert into tbl_board(boardid,boardname,parentid) values(seq_tabl_board_boardid.nextval,’hibernate’,2); insert into tbl_board(boardid,boardname,parentid) values(seq_tabl_board_boardid.nextval,’sql’,3); insert into tbl_board(boardid,boardname,parentid) values(seq_tabl_board_boardid.nextval,’oracle’,3); insert into tbl_board(boardid,boardname,parentid) values(seq_tabl_board_boardid.nextval,’mysql’,3); select * from tbl_board; –主题帖 create table tbl_topic( topicid int primary key , title varchar2(50), content varchar2(1000), publishtime TIMESTAMP, modifytime TIMESTAMP, userid int, boardid int ); create sequence seq_tbl_topic_topicid; drop sequence seq_tbl_topic_topicid; alter table tbl_topic add constraint FK_topic_uid foreign key(userid) references tbl_user(userid); alter table tbl_topic add constraint FK_topic_boardid foreign key(boardid) references tbl_board(boardid); insert into tbl_topic(topicid,title,content,publishtime,modifytime,userid,boardid) values(seq_tbl_topic_topicid.nextval,’jsp good’,’ good,i agree’,sysdate,sysdate,1,8); insert into tbl_topic(topicid,title,content,publishtime,modifytime,userid,boardid) values(seq_tbl_topic_topicid.nextval,’jsp is very good’,’very good,i agree’,sysdate,sysdate,1,8); select * from tbl_topic; delete from tbl_topic; create table tbl_reply( replyid int primary key , title varchar2(50), content varchar2(1000), publishtime TIMESTAMP, modifytime TIMESTAMP, userid int, topicid int ); create sequence seq_tbl_reply_replyid; alter table tbl_reply add constraint FK_reply_uid foreign key(userid) references tbl_user(userid); alter table tbl_reply add constraint FK_reply_topicid foreign key(topicid) references tbl_topic(topicid); _————————————————————— _ –需求二：求出某个板块下按分页条件查询的贴子 –输出要求：1.分页 2.统计每个帖子下有多少回复数 3.某一个板块开始 –图片二的效果 ————————————————————— –基础数据 insert into tbl_reply(replyid,title,content,publishtime,modifytime,userid,topicid) values (seq_tbl_reply_replyid.nextval,’jsp is very good reply’,’very good,i agree reply’,sysdate,sysdate,2,2); select * from tbl_reply; —————- –自己练习，已废弃 select a.boardid as 地址,a.parentid as 板块,a.boardname as 论坛,count(tbl_topic.topicid) as 发帖数,nvl(tbl_user.uname,’帖子的作者’) ||’[‘|| nvl(to_char(tbl_topic.publishtime,’yyyy-mm-dd hh:mm:ss’),’这个帖子最后发布的时间’) ||’]’ as 最后发表 from tbl_board a left join tbl_topic on tbl_topic.boardid &#x3D; a.boardid left join tbl_user on tbl_topic.userid &#x3D; tbl_user.userid where a.parentid !&#x3D; 0 group by a.boardid,a.boardname,a.parentid,tbl_user.uname,tbl_topic.publishtime order by 板块 asc; —————- –&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;——————— –1.先查出板块最新帖子的修改时间 select boardid,max(modifytime) as modifytime from tbl_topic group by boardid; –2.再查出每个帖子的信息，关键是发帖人的信息（名字，编号），贴子标题，贴子编号 select topicid,title,modifytime,tbl_user.userid as userid,uname,boardid from tbl_topic left join tbl_user on tbl_topic.userid &#x3D; tbl_user.userid; –3.将上面两步整合，求每个板块最后一个贴子的信息 select title,uname,a.modifytime,topicid,a.boardid from ( select boardid,max(modifytime) as modifytime from tbl_topic group by boardid ) a, ( select topicid,title,modifytime,tbl_user.userid as userid,uname,boardid from tbl_topic left join tbl_user on tbl_topic.userid &#x3D; tbl_user.userid ) b where a.boardid &#x3D; b.boardid and a.modifytime &#x3D; b.modifytime; –4.统计每个板块的贴子数 select tbl_board.boardid as boardid,boardname,parentid,count(tbl_topic.topicid) from tbl_board left join tbl_topic on tbl_board.boardid &#x3D; tbl_topic.boardid group by tbl_board.boardid,boardname,parentid; –5.使用左外联将板块信息和板块下最新贴子信息整合 select b.boardid as boardid,boardname,parentid,total,topicid,title,modifytime,userid,uname from ( select title,uname,a.modifytime,topicid,a.boardid,userid from ( select boardid,max(modifytime) as modifytime from tbl_topic group by boardid ) a, ( select topicid,title,modifytime,tbl_user.userid as userid,uname,boardid from tbl_topic left join tbl_user on tbl_topic.userid &#x3D; tbl_user.userid ) b where a.boardid &#x3D; b.boardid and a.modifytime &#x3D; b.modifytime ) a right join ( select tbl_board.boardid as boardid,boardname,parentid,count(tbl_topic.topicid) as total from tbl_board left join tbl_topic on tbl_board.boardid &#x3D; tbl_topic.boardid group by tbl_board.boardid,boardname,parentid ) b on a.boardid &#x3D; b.boardid; —————&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;—— –1.统计每个贴子的回复数量 select topicid,count(replyid) as total from tbl_reply group by topicid; –2.按分页条件查这个boardid下当前页的贴子信息 –boardid:以后由java程序传来的参数 –pages：第几页 –pagesize：每页几条 select * from ( select rownum as rn,a.* from( select topicid,title,content,publishtime,modifytime,tbl_user.userid as userid,uname,boardid from tbl_topic inner join tbl_user on tbl_topic.userid &#x3D; tbl_user.userid where boardid &#x3D; 8 order by modifytime desc ) a where rownum &lt;&#x3D; 5 ) where rn &gt;&#x3D; 1; –3.合并以下 select a.topicid,title,content,publishtime,modifytime,userid,uname,boardid,total from ( select * from ( select rownum as rn,a.* from( select topicid,title,content,publishtime,modifytime,tbl_user.userid as userid,uname,boardid from tbl_topic inner join tbl_user on tbl_topic.userid &#x3D; tbl_user.userid where boardid &#x3D; 8 order by modifytime desc ) a where rownum &lt;&#x3D; 5 ) where rn &gt;&#x3D; 1 ) a left join ( select topicid,count(replyid) as total from tbl_reply group by topicid ) b on a.topicid &#x3D; b.topicid order by modifytime desc; –4.更高级：优化版 select a.topicid,title,content,publishtime,modifytime,userid,uname,boardid,total from ( select * from ( select rownum as rn,a.* from( select topicid,title,content,publishtime,modifytime,tbl_user.userid as userid,uname,boardid from tbl_topic inner join tbl_user on tbl_topic.userid &#x3D; tbl_user.userid where boardid &#x3D; 8 order by modifytime desc ) a where rownum &lt;&#x3D; 5 ) where rn &gt;&#x3D; 1 ) a left join ( select topicid,count(replyid) as total from tbl_reply where topicid in( select topicid from ( select rownum as rn,a.* from ( select topicid from tbl_topic inner join tbl_user on tbl_topic.userid &#x3D; tbl_user.userid where boardid &#x3D; 8 order by modifytime desc ) a where rownum &lt;&#x3D; 5 ) where rn &gt;&#x3D; 1 ) group by topicid ) b on a.topicid &#x3D; b.topicid order by modifytime desc; 目标 ** ** 讲师源码图 ** ** ** ** 2.奇偶行统计 &#x2F;* 只能依靠标识列的值来进行判断和选取 因为数据行可能存在增加、修改和删除，因此标识列的数据值并不“完全可靠”，例如标识列值为3，并不一定是第三行，因为如果第二行被删除了，它就是第二行，实际上也是偶数行 根据我们前面使用过的SELECT…INTO，可以创建一张新表，顺便创建新的标识列，再在新的标识列上执行奇偶判断 奇数判断依据：标识列值%2不等于0；偶数判断依据：标识列值%2等于0 *&#x2F; create table test1( tid int primary key, tname varchar2(10), price number(6) ); insert into test1 values(1,’苹果’,56); insert into test1 values(3,’香蕉’,435); insert into test1 values(5,’橘子’,234); insert into test1 values(6,’火龙果’,187); insert into test1 values(7,’猕猴桃’,323); insert into test1 values(8,’樱桃’,450); insert into test1 values(10,’西瓜’,686); commit; –奇偶行统计 select decode(rn,1,’奇数行统计’,’偶数行统计’),sum(a.price) as 结果 from( select t.*,mod(rownum,2) rn from test1 t ) a group by rn; 3.extract() 拆分日期类型","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第42次课程","slug":"技术向/Java/源辰课程记录/第42次课程","date":"2019-07-19T16:00:00.000Z","updated":"2022-05-11T01:16:26.730Z","comments":true,"path":"技术向/Java/源辰课程记录/第42次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC42%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第42次课程 07.20.2019 **内容 ** Oracle_高级查询[张影] create table stuinfo ( stuid int primary key, sname varchar2(50) unique, sage int not null constraint CK_age check(sage&gt;&#x3D;18 and sage&lt;&#x3D;30), saddress varchar2(50) ); create table course( cid int primary key, cname varchar2(50) ); create sequence seq_score_id; create table score( scoreid int primary key, studentid int , courseid int , score int ); insert into course(cid,cname) values(1,’j2se精讲’); insert into course(cid,cname) values(3,’sql server’); insert into course (cid,cname) values(9,’html网页设计’); insert into stuinfo(stuid,sname,sage,saddress) values(31,’张果老’,22,null); insert into stuinfo(stuid,sname,sage,saddress) values(29,’张三在’,20,null); insert into stuinfo(stuid,sname,sage,saddress) values(13,’李豹’,22,null); insert into stuinfo(stuid,sname,sage,saddress) values(15,’老胡’,22,’北京’); insert into stuinfo(stuid,sname,sage,saddress) values(17,’老江’,24,’湖南’); insert into stuinfo(stuid,sname,sage,saddress) values(19,’张无忌’,26,’衡阳’); insert into stuinfo(stuid,sname,sage,saddress) values(32,’二师兄’,28,’长沙’); insert into stuinfo(stuid,sname,sage,saddress) values(1,’韦小宝’,27,’上海’); insert into score values(seq_score_id.nextval,31,1,95); insert into score values(seq_score_id.nextval,29,1,67); insert into score values(seq_score_id.nextval,13,1,56); insert into score values(seq_score_id.nextval,15,1,81); insert into score values(seq_score_id.nextval,17,1,82); insert into score values(seq_score_id.nextval,19,1,78); insert into score values(seq_score_id.nextval,13,3,81); insert into score values(seq_score_id.nextval,15,3,92); insert into score values(seq_score_id.nextval,17,3,81); insert into score values(seq_score_id.nextval,19,3,66); insert into score values(seq_score_id.nextval,29,3,36); insert into score values(seq_score_id.nextval,31,3,73); insert into score values(seq_score_id.nextval,31,9,57); insert into score values(seq_score_id.nextval,29,9,76); insert into score values(seq_score_id.nextval,13,9,78); insert into score values(seq_score_id.nextval,15,9,89); insert into score values(seq_score_id.nextval,19,9,93); insert into score values(seq_score_id.nextval,13,1,80); insert into score values(seq_score_id.nextval,29,3,88); insert into score values(seq_score_id.nextval,31,9,69); select * from stuinfo; select * from course; select * from score; –查出所姓’张’的学员信息 select * from stuinfo where sname like ‘张%’; –查出所有saddress字段为’NULL’值的学员的信息 select * from stuinfo where saddress is null; –查出成绩在60到70分之间的学员的id号 select * from score where score between 60 and 70; select stuinfo.stuid as 学生编号,stuinfo.sname as 姓名,course.cid as 课程编号,course.cname as 课程名,score.score as 成绩 from score,stuinfo,course where score.studentid &#x3D; stuinfo.stuid and score.courseid &#x3D; course.cid and score between 60 and 70; select stuinfo.stuid as 学生编号,stuinfo.sname as 姓名,course.cid as 课程编号,course.cname as 课程名,score.score as 成绩 from score inner join stuinfo on stuinfo.stuid &#x3D; score.studentid inner join course on course.cid &#x3D; score.courseid where score.studentid &#x3D; stuinfo.stuid and score.courseid &#x3D; course.cid and score between 60 and 70; –查出地址是北京和上海的学生的信息 select * from stuinfo where saddress in(‘北京’,’上海’); select * from stuinfo where saddress &#x3D; ‘北京’ or saddress &#x3D; ‘上海’; –查出学员在’sql server’这门课程中的总成绩和平均成绩,最高分数，最低分数 select course.cname as 统计的课程,sum(score) as 总成绩,avg(score) as 平均分,max(score) as 最高分,min(score) as 最低分 from score left join course on course.cid &#x3D; score.courseid where course.cname &#x3D; ‘sql server’ group by course.cname; –查出学员在’j2se精讲’这门课程中不及格的学生人数 select course.cname as 课程名,count(scoreid) as 不及格人数 from score left join course on course.cid &#x3D; score.courseid where course.cname &#x3D; ‘j2se精讲’ and score.score &lt; 60 group by course.cname; –深入思考: 以上只求出了某一特定的课目的平均成绩，那如何一次性求出每一门课程的平均成绩呢？ –解决方案: 对课程进行分组,形成多个虚拟的数据集，对分组之后的结果再来求平均值 –语法: select 列名 from 表名 where 条件 group by 分组列 select course.cname as 课程名,avg(score.score) as 平均成绩 from score left join course on course.cid &#x3D; score.courseid group by course.cname; –特别提醒: 分组后，select 子句后的查询的结果要不就是分组的列，要不必须是聚合函数的列，而不能是其它的列. –如下所示: 错误示范：group by 所获得的是 聚合集 select stuinfo.stuid as 学生编号,course.cname as 课程名,avg(score.score) as 平均成绩 from score left join course on course.cid &#x3D; score.courseid left join stuinfo on stuinfo.stuid &#x3D; score.studentid group by stuinfo.stuid,course.cname; –多列分组的情况: 需求描述: 要求求出每次测试不同学员的不同课目的成绩(如果有补考，则为多次成绩的平均值) select score.studentid as 学生编号,stuinfo.sname as 学生名,score.courseid as 课程编号,course.cname as 课程名,avg(score.score) as 平均成绩 from score left join stuinfo on stuinfo.stuid &#x3D; score.studentid left join course on course.cid &#x3D; score.courseid group by score.studentid,score.courseid,stuinfo.sname,course.cname; –在上面基础上，只想查看参加过补考的学员的补考课目的平均成绩. –分析，这时要对分组后的数据进行分析，如果是补考的课目，则分组后会有多条记录， –having 对子集进行删选 where 对原表数据进行筛选 select score.studentid as 学生编号,stuinfo.sname as 学生名,score.courseid as 课程编号,course.cname as 课程名,avg(score.score) as 平均成绩 from score left join stuinfo on stuinfo.stuid &#x3D; score.studentid left join course on course.cid &#x3D; score.courseid group by score.studentid,score.courseid,stuinfo.sname,course.cname having count(scoreid)&gt;1; –总结：select 语法 – select 列名 –from 表名 –where 原表条件 –group by 分组列 –having 子集条件. –从多个表中取数据场景: –需求: 显示学生姓名，课程名及成绩 –解决方案1. 普通查询+多个主外键相等判断 –解决方案2: 使用多表联接查询 –种类:1. 内联结(inner join): 仅当至少有一个同属于两表的行符合联接条件时，内联接才返回行. 内联接消除与另一个表中任何不匹配的行. – 2. 外联结 ： 外联接会返回from 子句中提到的至少一个表的所有行，只要这些行符合任何where或having条件。 – 左外联接 left join ： 左边表中所有的行，右边表中没有的字段用null代替 – 右外联接 right join : 右边表中所有的行, 左边表中没有的字段用null代替 – 完整外联结 full join : 两表数据都返回，没有的地方用null代替. – 3. 交叉联结 (cross join) –1. 内联结语法: select 列名 from 表名 – inner join 表名2 – on 联结条件 _–案例: 显示学生姓名，课程名及成绩 _ –深入观察: 以下两条语句查询出来的结果数分别为多少，为什么? select c.cname,s.score from score s inner join course c on s.courseid&#x3D;&#x3D;c.cid _–结果为: _20____条记录 select c.cname,s.score from score s inner join course c on s.courseid&lt;&gt;c.cid _–结果为: _40_______条记录 3*20-20 –左外联接: 语法: select 列名 from 表名1 left join 表名2 on 联结条件 –特点: 优先查出表名1中所有的符合条件的数据，如果表名2中没有这个对应的数据，则用nULL填充值 –案例描述: 学生表中有一位学员’韦小宝’， 1号，没有参加过任何考试，下面请求出所有没有参加过任何考试的学员 select stuinfo.sname as 缺考人员 from stuinfo left join score on score.studentid &#x3D; stuinfo.stuid where score.score is null; –右外联接与左外联接正好相反: select stuinfo.sname as 缺考人员 from stuinfo right join score on score.studentid &#x3D; stuinfo.stuid where score.score is null; –完整外联接 select * from stuinfo full join score on stuinfo.stuid&#x3D;score.studentid _–结果: ___22_______条记录: 20+缺考2 select * from stuinfo left join score on stuinfo.stuid&#x3D;score.studentid –交叉联接: 左表中的每一行与右表中的每行都组合成。 笛卡尔乘积&#x3D;左表数据行*右表数据行 select * from stuinfo cross join score; —综合案例一: –需求描述:在数据库表中，数据行位置并不重要，但是一个单位中要根据奇数行和偶数行的数据来汇总，在这个汇总的基础上再得到一个数值， –因此，要查询数据库表的奇数行和偶数行的总数, 但原表中的id列的值并不是完全连续的，其中有一些数据已经删除了. create table tab1( id int primary key, total int ) insert into tab1 values(1,33); insert into tab1 values(3,44); insert into tab1 values(4,2); insert into tab1 values(5,6); insert into tab1 values(8,88); insert into tab1 values(9,3); insert into tab1 values(15,33); insert into tab1 values(17,34); insert into tab1 values(19,34); insert into tab1 values(20,29); select * from tab1; –解决方案: 只能依靠标识列的值来进行判断和选取, 但原有主键列已经不能用，所以必须生成一个新表，将原表的total列的数据插过去，并新增加标识列 –然后再在新表中通过新标识列来求奇数列值和偶数列值 –将一个表的数据插入到另一个表语法: select 列名, identity(种子，自增) into 新表名 from 源表名 create sequence seq_tab1_id2; create table newtable1 AS select seq_tab1_id2.nextval as id,total from tab1; select * from newtable1; select sum(total) from newtable1 where MOD(id,2)&#x3D;1; select sum(total) from newtable1 where MOD(id,2)&#x3D;0; –案例二: –一家银行发行了新的信用卡，刚开始的时候推广得很好，但是逐渐废卡也越来越多（卡上的余额少于2元，并且用户长时间不使用该卡）， –因此银行在二月份把这些少于2元的卡从都数据库表中删除了，但是很快问题就来了，用户发现他的卡再也不能使用而投诉，因此只能再把这些卡恢复。 create table cust( cardid int primary key, cname varchar2(50) ); create table accounts( accountid int primary key , cardid int , score int ); create sequence seq_account_aid; insert into cust values(16,’张三’); insert into cust values(23,’李四’); insert into cust values(25,’王五’); insert into cust values(29,’刘六’); insert into cust values(30,’杨七’); insert into accounts values(seq_account_aid.nextval,16,3400); insert into accounts values(seq_account_aid.nextval,25,4565); insert into accounts values(seq_account_aid.nextval,29,456); –分析: 1. 可以用left join找出cust表中有而account没有的记录（这种记录的特征是account.cardid is null) – 2. 再将找到的cardid号插入到account表中即可. 因为account表已经存在，这是将一些数据从一个表中提取 –再插入到另一个已存在的表中，所以可以使用insert into 表名1 select 值 from 源表名 insert into accounts (accountid,cardid,score) (select seq_account_aid.nextval,cust.cardid,2 from cust left join accounts on accounts.cardid &#x3D; cust.cardid where accounts.cardid is null); select * from accounts; –重置 drop table account; drop table cust; drop sequence seq_account_aid;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第41次课程","slug":"技术向/Java/源辰课程记录/第41次课程","date":"2019-07-18T16:00:00.000Z","updated":"2022-05-11T01:16:11.653Z","comments":true,"path":"技术向/Java/源辰课程记录/第41次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC41%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第41次课程 07.19.2019 **内容 ** Oracle_基础查询和函数[蒋斌] –复习日期函数 select * from emp; –修改日期 to_date 创建新的日期 update emp set hiredate&#x3D;to_date(‘2017&#x2F;02&#x2F;27’,’yyyy&#x2F;mm&#x2F;dd’) where empno &#x3D; 7369; –显示员工的入职年份和月份 to_char 以字符串的形式转化格式 select ename,to_char(hiredate,‘yyyy@mm@dd’) where emp; –查找出入职10年的员工 add_months(hiredate,12*10) 从入职的时间添加120个月，向后推了十年 select * from emp where add_months(hiredate,12*10)&lt;sysdate; –求每个员工入职的天数 trunc select ename,trunc(sysdate-hiredate) from emp; create table classInfo( cid int primary key, cname varchar2(50) ); create table student( sid int primary key, sname varchar2(50), age int constraint CK_student_age check(age between 16 and 28), sex varchar2(2) default ‘男’ constraint CK_student_sex check(sex&#x3D;’男’ or sex&#x3D;’女’), cid int constraint FK_cid references classInfo(cid), addr varchar2(100) ); create sequence seq_cid start with 1001 increment by 1; create sequence seq_sid start with 1001 increment by 1; insert into classInfo values(seq_cid.nextval,’YC001班’); insert into classInfo values(seq_cid.nextval,’YC002班’); insert into classInfo values(seq_cid.nextval,’YC003班’); insert into classInfo values(seq_cid.nextval,’YC004班’); insert into student(sid,sname,age,sex,cid,addr) values(seq_sid.nextval,’小倩’,20,default,1003,’衡阳’); insert into student(sid,sname,age,sex,cid,addr) values(seq_sid.nextval,’小红’,19,default,1004,’湖北省武汉’); insert into student(sid,sname,age,sex,cid,addr) values(seq_sid.nextval,’小强’,19,default,1003,’湖南省长沙’); insert into student(sid,sname,age,sex,cid,addr) values(seq_sid.nextval,’小白’,21,default,1003,’黑龙江省哈尔滨’); insert into student(sid,sname,age,sex,cid,addr) values(seq_sid.nextval,’唐京’,22,default,1003,’内蒙古省’); insert into student(sid,sname,age,sex,cid,addr) values(seq_sid.nextval,’张开花’,28,default,1004,’青海省’); insert into student(sid,sname,age,sex,cid,addr) values(seq_sid.nextval,’宁采臣’,20,default,1001,’’); select * from classInfo for update; select * from student; commit; delete from student where sid&#x3D;1007; –查询开始emp表 select empno,sal+500 from emp; –查询学生信息 查询一年后学生的年龄小于21 select * from student where age+1&lt;21; –查询学生为1002的学生 select * from student where cid&#x3D;1002; –查询不是1002的学生 select * from student where cid!&#x3D;1002; select * from student where cid&lt;&gt;1002; –查询年龄在20-22之间的学生 包括20和22 select * from student where age between 20 and 22; –查询1001班和1003班学生 select * from student where cid in(1001,1003); –查询不是1001班和1003班学生 select * from student where cid!&#x3D;1001 and cid!&#x3D;1003; select * from student where cid not in(1001,1003); –查询姓张的学生 select * from student where sname like ‘张%’; –查询张某的学生 两个字的名字 select * from student where sname like ‘唐_’; –查询地址为空的学生 select * from student where addr is null; –逻辑操作 and or not –查询湖南省长沙和湖北省武汉 select * from student where addr&#x3D;’湖南省长沙’ or addr&#x3D;’湖北省武汉’; select * from student where addr in(‘湖南省长沙’,’湖北省武汉’); –查询所有家庭地址不为空的学生 select * from student where addr is not null; –连续操作符 将多条sql语句连成一条语句执行 –union 两个表同时显示，并去除重复数据 select sid,sname from student union select empno,ename from emp; –union all 两个表同时显示，不去重 select sid,sname from student union all select empno,ename from emp; –intersect 获取两个表相同数据 select sid,sname from student intersect select empno,ename from emp; –多行函数聚合函数：对多行的数据进行函数运算 –查出员工最高，最低，平均，总和 的底薪 select max(sal),min(sal),avg(sal),sum(sal) from emp; –按照部门统计员工的最高，最低，平均 总和 底薪 select deptno,max(sal),min(sal),avg(sal),sum(sal) from emp group by deptno; select * from dept; select * from emp; –统计学生来自那些地区 去重函数 distinct 单表去重 select distinct addr from student; –统计有多少学生 select count(*) from student; select count(sid) from student; –统计学生来自多少个地区 select count(distinct addr) from student; –其他函数 –地址为空的学生，则显示“地址不详” nvl(addr,’地址不详’) select sname,nvl(addr,’地址不详’) from student; –查询学生的性别 如果是男 M 如果是女 F 类似于：sex&#x3D;’男’?’M’:’F’； decode(sex,’男’,’M’,’F’） –写法一 select sname,decode(sex,’男’,’M’,’F’) 性别 from student; –写法二 不推荐 when then end select sname,case sex when ‘男’ then ‘M’ when ‘女’ then ‘F’ end 性别 from student; –分析函数：排序 –根据学生的学号排序 order by 字段[desc&#x2F;asc] –默认是升序 select * from student order by sid; –asc升序 select * from student order by sid asc; –desc降序 select * from student order by sid desc; –row_number() 排序 over()开窗函数 select empno,ename,sal,row_number() over(order by sal desc) from emp; –1,2,3,4,5 –rank select empno,ename,sal,rank() over(order by sal desc) from emp; –1,2,3,3,5 –dense_rank select empno,ename,sal,dense_rank() over(order by sal desc) from emp; –1,2,3,3,4 –需求：查询员工表工资前三名的员工，练习 select empno,ename,sal,dense_rank() over(order by sal desc) from emp ; –分页查询 –rownum 伪列：是一序列，他是隐藏的一列，这个序列在查询的时候生成的 select ename,sal,rownum from emp; –通过rownum查出第一条数据 select ename,sal,rownum from emp where rownum &#x3D; 1; –通过rownum查出前几条数据 select ename,sal,rownum from emp where rownum &lt; 3; –分页查询 从开始至 到 结束值 这个区间的数据查出来 5 - 10 select no,empno,ename from(select rownum no,empno,ename from emp where rownum&lt;&#x3D;10 )where no&gt;&#x3D;5; –效率高的分页 select * from emp; –第一次筛选 select a.* from(select * from emp) a where rownum &lt;&#x3D;10; –第二次筛选 select * from (select a.*,rownum rn from(select * from emp) a where rownum &lt;&#x3D;10)where rn&gt;&#x3D;5; –笛卡尔乘积查询 select * from classInfo,student; –笛卡尔乘积查询 去重 select * from classInfo c,student s where c.cid&#x3D;s.cid; –内联查询 基于两张表 inner join 表 on 表达式 select * from student s inner join classInfo c on c.cid &#x3D; s.cid; –左连接 以左表为基准 左表的数据是要全部查出来的，如果右表没有值也会被当作空值查出来 select * from student s left join classInfo c on c.cid&#x3D;s.cid; –右连接 以右表为基准 右表的数据是要全部查出来的，如果左表没有值也会被当作空值查出来 select * from student s right join classInfo c on c.cid&#x3D;s.cid;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第40次课程","slug":"技术向/Java/源辰课程记录/第40次课程","date":"2019-07-17T16:00:00.000Z","updated":"2022-05-11T01:15:58.418Z","comments":true,"path":"技术向/Java/源辰课程记录/第40次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC40%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第40次课程 07.18.2019 **内容 ** Oracle_数据的操作[蒋斌] 1.案例表 –主表 create table classInfo( cid number(4) primary key, cname varchar2(100) unique not null, cyear number(4), clen number(1) ); –从表 create table stuInfo( stuNo number(10) primary key, cid number(4) constraint fk_stu_cid references classInfo(cid), stuName varchar2(100) not null, stuPwd varchar2(20) not null, stuCardId varchar2(20) constraint ck_stu_cardid check(length(stuCardId)&#x3D;18), stusex varchar2(4) default ‘男’ constraint ck_stu_sex check(stusex in(‘男’,’女’)), stuAge varchar2(4) constraint ck_stu_age check(stuAge between 12 and 30), stuTel varchar2(15) unique, stuAddr varchar2(100) ); 2.虚拟表 dual –dual 虚拟表 select * from dual; select sysdate from dual; select ‘hello’ from dual; **3.**数据操纵语言（DML） 对表增删查改 4.向表中添加表记录 –添加单条表记录 insert into classInfo values(1001,’计算机’,2019,4); &#x2F;insert into &lt;表名&gt; values(&lt;对应参数值&gt;)&#x2F; –添加单条指定字段表记录 insert into classInfo(cid,cname) values (1002,’软件’); &#x2F;insert into &lt;表名&gt;(&lt;字段名&gt;) values (&lt;对应参数值&gt;)&#x2F; –添加多条表记录 union insert into Classinfo select 1001,’计算机1班’,2019,4 from dual union select 1002,’计算机2班’,2018,4 from dual union select 1003,’计算机3班’,2017,4 from dual ; &#x2F;insert into &lt;表名&gt; select &lt;对应参数值&gt; from dual union …&#x2F; 5.表复制 –复制 –将A表中某些字段属性数据复制到另一张B表中 insert into classInfo(cid,cname) select empno,ename from emp; &#x2F;insert into &lt;B表名&gt;(&lt;B字段名&gt;) select &lt;对应B数量A字段名&gt; from &lt;A表名&gt;&#x2F; –复制表 create table classInfo1 AS select * from dept; &#x2F;create table &lt;新表名&gt; AS select * from &lt;被复制表名&gt;&#x2F; create table newtable1 AS select seq_tab1_id2.nextval as id,total from tab1; –复制表结构 create table classInfo2 as select * from dept where 1&#x3D;0; &#x2F;create table &lt;新表名&gt; as select * from &lt;被复制表名&gt; where 1&#x3D;0&#x2F; 6.更新数据（更改表记录中值） –更新数据 –更新目标表记录的数据 update classInfo set cyear&#x3D;2015,clen&#x3D;3 where cid&#x3D;1001; &#x2F;updata &lt;表名&gt; set &lt;字段名&#x3D;值&gt; where &lt;主键&#x3D;值&gt;&#x2F; –更新字段下所有值 update classInfo set clen&#x3D;3; &#x2F;update &lt;表名&gt; set &lt;字段名&#x3D;值&gt;&#x2F; –通过运算更新数据 update classInfo set cyear&#x3D;cyear-1; &#x2F;update &lt;表名&gt; set &lt;字段名&#x3D;函数&gt;&#x2F; –删除数据 delete from classInfo where cid&lt;1002; &#x2F;delete from &lt;表名&gt; where &lt;字段名&gt;&#x2F; –删除字段下为空的数据 delete from stuInfo where stuaddr is null; &#x2F;delete from &lt;表名&gt; where &lt;字段名&gt; is null&#x2F; –删除目标表记录的数据 delete from stuInfo where cid&#x3D;1003; &#x2F;delete from &lt;表名&gt; where &lt;主键&#x3D;值&gt;&#x2F; 7.事务控制 –事务控制 –提交事务 事务持久化 commit; –回滚事务 rollback; –回滚点 savepoint p; rollback to savepoint p; 8.序列 –序列 –自增序列 create sequence seq_id; select seq_id.nextval from dual; &#x2F;*create sequence &lt;序列名&gt; _ select &lt;序列名&gt;.nextval from dual*&#x2F;_ –查询序列的当前值，并不会使序列自增 select seq_id.currval from dual; &#x2F;select &lt;序列名&gt;.vurrval from dual&#x2F; –删除序列 drop sequence seq_id; &#x2F;drop sequence &lt;序列名&gt;&#x2F; –指定序列的起始值和每次自增值 create sequence seq_id start with 1001 increment by 1; &#x2F;create sequence &lt;序列名&gt; start with &lt;起始值&gt; increment by &lt;自增值&gt;&#x2F; –生成循环序列 create sequence seq_id start with 1 increment by 1 maxvalue 30 cycle; &#x2F;create sequence &lt;序列名&gt; start with &lt;起始值&gt; increment by &lt;自增值&gt; maxvalue &lt;最大值&gt; cycle&#x2F; 9.删除表记录 –删除表记录 –delete 清空表记录 delete from stuInfo; &#x2F;delete from &lt;表名&gt;&#x2F; –truncate 摧毁原表后重新创建新表 truncate table stuInfo; &#x2F;truncate table &lt;表名&gt;&#x2F; 10.函数 单行和多行函数（聚合函数） 11.数值函数 –数值函数 跟数学运算有关 –例：算出每个员工的日平均工资 –floot( ) 向下取整 select ename,floor(sal&#x2F;30) from emp; &#x2F;select floor(&lt;包含字段名运算函数&gt;) from &lt;表名&gt;&#x2F; –trunc( , )保留两位小数 select ename,trunc(sal&#x2F;30,2) from emp; &#x2F;select trunc(&lt;包含字段名运算函数&gt;,&lt;保留小数位&gt;) from &lt;表名&gt;&#x2F; –ceil( ) 向上取整 select ename,ceil(sal&#x2F;30) from emp; &#x2F;select ceil(&lt;包含字段名运算函数&gt;) from &lt;表名&gt;&#x2F; –round( ) 四舍五入 select ename,round(sal&#x2F;30) from emp; &#x2F;select round(&lt;包含字段名运算函数&gt;) from &lt;表名&gt;&#x2F; 12.字符函数 –字符函数 –lower( )转小写字母 select lower(ename) from emp; &#x2F;select lower(&lt;字段名&gt; from &lt;表名&gt;)&#x2F; –upper( )转大写字母 select upper(ename) from emp; &#x2F;select upper(&lt;字段名&gt; from &lt;表名&gt;)&#x2F; –length( )获取字符串的长度 select length(‘hello’) from dual; &#x2F;select length(&lt;字段名&gt; from &lt;表名&gt;&#x2F; –例：输出字符长度为5个字符的员工姓名 select ename from emp where length(ename)&#x3D;5; –substr( , , )截取字符串 –substr()函数 0和1都是首个字符 select substr(‘hello’,1,2) from dual; &#x2F;select substr(&lt;字段名&gt;,&lt;起始位置&gt;,&lt;截取个数&gt;) from &lt;表名&gt;&#x2F; 13.拼接符 –||拼接符,相当于Java中+ –例：两个字段拼接 select ename||’_’||job from emp; –例：员工姓名首字母大写，其余小写 select upper(substr(ename,1,1))||lower(substr(ename,2,length(ename)-1)) from emp; –instr(字符串,要查找的字符,开始位置,第几次出现) 返回的是字符索引位置 –例：查询学生来自哪个省份 select substr(stuaddr,1,instr(stuaddr,’省’,1,1)) as 省份 from stuInfo; 14.转换函数 –转换函数 –varchar2类型转换为Date类型 –转换日期有两种格式： yyyy&#x2F;mm&#x2F;dd yyyy-mm-dd update emp set hiredate &#x3D; to_date(‘2000-10-1’,’yyyy-mm-dd’) where empno &#x3D; 8888; &#x2F;update &lt;表名&gt; set &lt;字段名&gt; &#x3D; to_date(‘&lt;字符串日期&gt;’,’&lt;转换日期格式&gt;’) where &lt;主键 &#x3D; 值&gt;&#x2F; –Date类型转换成varchar2类型 select ename,to_char(hiredate,‘yyyy@mm@dd’) from emp; –获取当前服务器时间 select sysdate from dual;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第39次课程","slug":"技术向/Java/源辰课程记录/第39次课程","date":"2019-07-16T16:00:00.000Z","updated":"2022-05-11T01:15:43.822Z","comments":true,"path":"技术向/Java/源辰课程记录/第39次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC39%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第39次课程 07.17.2019 **内容 ** Oracle_表，约束的创建[蒋斌] 1.Oracle表创建 –主表 create table classInfo( cid number(4), cname varchar2(100), cyear number(4), clen number(1) ); –从表 create table stuInfo( stuNo number(10) primary key, cid number(4), stuName varchar2(100), stuCardId varchar2(20), sex varchar2(4), stuAge number(3), stuTel varchar2(15), stuAddr varchar2(100) ); 2.表记录的操作 –向表中添加表记录 insert into classInfo values(1,’计算机’,2014,4); &#x2F;insert into &lt;表名&gt; values(&lt;对应表参数&gt;);&#x2F; –将表中删除表记录 delete from classInfo; &#x2F;delete from &lt;表名&gt;&#x2F; –参数’’空字符串和null空 均是表空 insert into classInfo values(2,’’,2014,4); insert into classInfo values(3,null,2014,4); 表记录： 3.自增功能 –自增功能 create sequence s_test start with 1001 increment by 1; &#x2F;create sequence &lt;自定义序列名&gt; start with &lt;起始值&gt; increment by &lt;每次递增值&gt;;&#x2F; insert into classInfo values(s_test.nextval,’网络工程’,2014,4); &#x2F;添加表记录&#x2F; 4.Constraint 约束 –Constraint 约束 –添加约束 –主键约束 primary key 唯一、非空 alter table classInfo add constraint pk_stuInfo_cid primary key(cid); &#x2F;alter table &lt;表名&gt; add constraint &lt;自定义约束名&gt; primary key(&lt;字段名&gt;);&#x2F; –外键约束 foreign key alter table stuInfo add constraint fk_stuInfo_cid foreign key(cid) references classInfo(cid); &#x2F;alter table &lt;从表名&gt; add constraint &lt;自定义约束名&gt; foreign key(&lt;从表外键字段名&gt;) references &lt;主表名&lt;主表主键字段名&gt;&gt;&#x2F; –唯一约束 unique alter table classInfo add constraint uq_classInfo_cname unique(cname); &#x2F;alter table &lt;表名&gt; add constraint &lt;自定义约束名&gt; unique(&lt;字段名&gt;)&#x2F; –非空约束 alter table classInfo modify cname not null; &#x2F;alter table &lt;表名&gt; modify &lt;字段名&gt; not null;&#x2F; –检查校验约束 check –单选项 –法一 alter table stuInfo add constraint ck_stuInfo_sex check(sex&#x3D;’男’ or sex&#x3D;’女’); &#x2F;alter table &lt;表名&gt; add constraint &lt;自定义约束名&gt; check(&lt;检查字段名&gt;&#x3D;’值1’ or &lt;检查字段名&gt;&#x3D;’值2’);&#x2F; –法二 alter table stuInfo add constraint ck_stuInfo_sex check(sex in(‘男’,’女’)); &#x2F;alter table &lt;表名&gt; add constraint &lt;自定义约束名&gt; check(&lt;检查字段名&gt; in (‘值1’,’值2’))&#x2F; –范围项 –法一 alter table stuInfo add constraint ck_stuInfo_age check(stuAge&gt;12 and stuAge&lt;30); &#x2F;alter table &lt;表名&gt; add constraint &lt;自定义约束名&gt; check(&lt;检查字段名&gt; &gt; 值1 and &lt;检查字段名&gt; &lt; 值2);&#x2F; –法二 alter table stuInfo add constraint ck_stuInfo_age check(stuAge between 12 and 30); &#x2F;alter table &lt;表名&gt; add constraint &lt;自定义约束名&gt; check(&lt;检查字段名&gt; between 值1 and 值2)&#x2F; –对多个字段约束项 alter table stuInfo add constraint ck_stuInfo_telandaddr check(stuTel is not null or stuAddr is not null); &#x2F;alter table &lt;表名&gt; add constraint &lt;自定义约束名&gt; check(&lt;检查字段名1&gt; is not null or &lt;检查字段名2&gt; is not null)&#x2F; 5.建表时声明约束 –所有的约束在建表时声明 create table stuInfo( stuNo number(10) primary key, cid number(4) constraint fk_stuInfo_cid references classInfo(cid), stuNmae varchar2(100) not null, stuCardId varchar2(20) constraint ck_stuInfo_carid check(length(stuCardId)&#x3D;18), sex varchar2(4) default ‘男’ constraint ck_stuInfo_sex check(sex&#x3D;’男’ or sex&#x3D;’女’), stuAge number(3) constraint ck_stuInfo_age check(stuAge between 12 and 30), stuTel varchar2(15) unique, stuAddr varchar2(100), constraint ck_stuInfo_telandaddr check(stuTel is not null or stuAddr is not null) ); 6.对约束的操作 –对约束的操作 –查看表的约束 select * from user_constraints where table_name&#x3D;’STUINFO’; &#x2F;select * from user_constraints where table_name&#x3D;’&lt;表名&gt;’;&#x2F; –删除约束 alter table stuInfo drop constraint CK_STUINFO_CARID; &#x2F;alter table &lt;表名&gt; drop constraint &lt;约束名&gt;&#x2F; –禁用约束 alter table stuInfo disable constraint CK_STUINFO_SEX; &#x2F;alter table &lt;表名&gt; disable constraint &lt;约束名&gt;&#x2F; –启用约束 alter table stuInfo enable constraint CK_STUINFO_SEX; &#x2F;alter table &lt;表名&gt; enable constraint &lt;约束名&gt;&#x2F; –更改约束 alter table &lt;表名&gt; rename constraint &lt;旧约束&gt; to &lt;新约束&gt;; 7.对字段的操作 –查看表结构 select * from user_tab_columns where table_name&#x3D;’STUINFO’; &#x2F;select * from user_tab_columns where table_name&#x3D;’&lt;表名&gt;’&#x2F; –修改表名 alter table stuInfo rename to studentInfo; &#x2F;alter table &lt;旧表名&gt; rename to &lt;新表名&gt;&#x2F; –修改字段名 alter table studentInfo rename column sex to stuSex; &#x2F;alter table &lt;表名&gt; rename column &lt;旧字段名&gt; to &lt;新字段名&gt;&#x2F; –添加字段 alter table studentInfo add stupwd number(10); &#x2F;alter table &lt;表名&gt; add &lt;添加字段名&gt; &lt;添加字段类型&gt;&#x2F; –修改字段的数据类型 alter table studentInfo modify stupwd varchar2(10); &#x2F;alter table &lt;表名&gt; modify &lt;字段名&gt; &lt;新字段类型&gt;&#x2F; –删除字段 alter table studentInfo drop column stupwd; &#x2F;alter table &lt;表名&gt; drop column &lt;字段名&gt;&#x2F;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第38次课程","slug":"技术向/Java/源辰课程记录/第38次课程","date":"2019-07-14T16:00:00.000Z","updated":"2022-05-11T01:15:31.797Z","comments":true,"path":"技术向/Java/源辰课程记录/第38次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC38%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第38次课程 07.15.2019 **内容 ** Oracle_SQL基础、表空间和权限[蒋斌] SQL Window –查看当前用户下的表空间 select * from dba_tablespaces; –创建用户 create user yc identified by pw; create user navy identified by pw; create user hooy identified by pw; –删除用户 drop user yan cascade; –给yc用户授予会话的权限 ora-01045未授予视窗权限 grant create session to yc; –修改用户的密码 ora-01017用户名和密码错误 alter user yc identified by door; –用户的解锁和锁定 alter user yc account lock; alter user yc account unlock; –查看用户信息 select * from dba_users; –为用户授予创建用户和会话权限（连接系统） grant create user,create session to yc; –管理员将创建表和执行语句权限授予给其他用户，并且是管理员身份 grant create table,execute any procedure to yc with admin option; –管理员将创建表和执行语句权限授予给其他用户 grant create table,execute any procedure to navy; –查看当前用户权限 select * from user_sys_privs; –表空间的创建(注意：每条语句后没有分号;) –表空间里面存放的是 我的用户相关数据库文件，文件中存放多个表记录 –创建表空间至少对应一个数据库文件 create tablespace ycspace –表空间名 datafile ‘G:&#x2F;YC74&#x2F;190715&#x2F;code&#x2F;YCSAPCE.dbf’ –数据库文件 size 10M –数据库文件大小 autoextend on next 10M –数据库文件空间不够自动扩展，每次扩展10M maxsize 100M –数据库文件大小上限 –查看用户下的数据库文件 select * from dba_data_files; –修改表空间的状态 alter tablespace ycspace offline; –将表空间修改为离线状态 alter tablespace ycspace online; –修改表空间的文件 alter database datafile ‘G:&#x2F;YC74&#x2F;190715&#x2F;code&#x2F;YCSAPCE.dbf’ resize 20M; –表空间添加数据库文件 alter tablespace ycspace add datafile ‘G:&#x2F;YC74&#x2F;190715&#x2F;code&#x2F;YCSAPCEFile.dbf’ size 10M; –删除数据库文件 alter tablespace ycspace drop datafile ‘G:&#x2F;YC74&#x2F;190715&#x2F;code&#x2F;YCSAPCEFile.dbf’; –删除表空间并且删除文件 drop tablespace ycspace including contents and datafiles; –创建班级表 create table classInfo( –字段语法 字段名 字段数据类型（字段长度） cid number(4), – cname varchar2(100), –varchar(字节单位) cyear number(4), –4位整数 mysql:int(4) float double clen number(1) –学年制 ); –删除表 drop table classInfo; Command Window &#x2F;&#x2F;普通用户登陆&#x2F;&#x2F;管理员登陆 connect 用户名&#x2F;密码； connect sys&#x2F;a as sysdba; %!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;) &#x2F;&#x2F;查询当前用户 show user Error Code ora-01045：未授予视窗权限 ora-01017：用户名和密码错误 ora-01031：权限不足","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第37次课程","slug":"技术向/Java/源辰课程记录/第37次课程","date":"2019-07-13T16:00:00.000Z","updated":"2022-05-11T01:15:19.868Z","comments":true,"path":"技术向/Java/源辰课程记录/第37次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC37%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第37次课程 07.14.2019 **内容 ** API部分作业检查、复习及指导[蒋斌] 1.作业检查 双向链表的实现 **Class Node ** 12345678910111213package ShuangXiangLinkedList;public class Node&lt;E&gt; &#123; E item; Node&lt;E&gt; parent; Node&lt;E&gt; next; public Node() &#123; super(); &#125; public Node(E o) &#123; super(); this.item = o; &#125; &#125; Class DoubleLinkedList 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107package ShuangXiangLinkedList;public class DoubleLinkedList&lt;E&gt; &#123; Node&lt;E&gt; first; Node&lt;E&gt; last; int size; public boolean add(E item) &#123; Node&lt;E&gt; l = last; Node&lt;E&gt; node = new Node&lt;E&gt;(); node.item = item; if(l!=null) &#123; l.next = node; node.parent = l; &#125; if(first==null) &#123; first=node; &#125; last = node; size++; return true; &#125; public void addFirst(E item) &#123; Node&lt;E&gt; node = new Node&lt;E&gt;(); node.item = item; node.next = first; first.parent = node; first = node; size++; &#125; public void remove(int index) &#123; if(index&lt;0 || index&gt;=size) &#123; throw new IndexOutOfBoundsException(&quot;index&quot;+index+&quot;size&quot;); &#125; Node&lt;E&gt; pre = first; if(index==0) &#123; first = first.next; first.parent = null; size--; return; &#125; for(int i=0;i&lt;index-1;i++) &#123; pre = pre.next; &#125; Node&lt;E&gt; self = pre.next; Node&lt;E&gt; next = self.next; if(next==null) &#123; pre.next = null; self = null; last = pre; &#125;else &#123; pre.next = next; next.parent = pre; self = null; &#125; size--; &#125; public E removeLast() &#123; if(size==0 || first==null || last==null) &#123; throw new IndexOutOfBoundsException(&quot;请先创建链表&quot;); &#125; Node&lt;E&gt; pre = first; for(int i=0;i&lt;size-1;i++) &#123; pre = pre.next; &#125; pre.parent.next = null; size--; return pre.item; &#125; public int getSize() &#123; return size; &#125; public E get(int index) &#123; if(index&lt;0 || index&gt;=size) &#123; throw new IndexOutOfBoundsException(&quot;index&quot;+index+&quot;size&quot;); &#125; Node&lt;E&gt; result = first; for(int i=0;i&lt;index;i++) &#123; result = result.next; &#125; return result.item; &#125; public int indexOf(Object o) &#123; if(o==null) &#123; throw new RuntimeException(&quot;不能为空&quot;); &#125; if(!(o instanceof Node)) &#123;//o.getClass().equals(Node.class throw new RuntimeException(&quot;类型异常&quot;); &#125; int index = 0; //Node&lt;E&gt; node = new Node&lt;E&gt;((E)o); Node&lt;E&gt; node = (Node&lt;E&gt;)o; Node&lt;E&gt; flag = first; for(int i=0;i&lt;size;i++) &#123; if(node.item==flag.item) &#123; return index; &#125; flag = flag.next; index++; &#125; return -1; &#125;&#125; Main Test 123456789101112131415161718192021222324252627282930package ShuangXiangLinkedList;import java.util.Random;public class Test &#123; public static void main(String[] args) &#123; DoubleLinkedList&lt;Integer&gt; dll = new DoubleLinkedList&lt;Integer&gt;(); dll.add(11); //0 dll.add(22); //1 dll.add(33); //2 dll.add(44); //3 dll.add(55); //4 dll.add(66); //5 dll.add(77); //6 //删除下标元素 dll.remove(3); //将元素添加到表头 dll.addFirst(9); //删除最后一个元素并返回其值 int test1 = dll.removeLast(); System.out.println(&quot;删除最后一个元素并返回值：&quot;+test1); //通过节点node查找位置 Random r = new Random(); Node&lt;Integer&gt; test2 = new Node&lt;Integer&gt;(55); int test3 = dll.indexOf(test2); System.out.println(&quot;查找第几个元素：&quot;+test3); //打印双向链表 for(int i = 0;i&lt;dll.size;i++) &#123; System.out.print(dll.get(i)+&quot; &quot;); &#125; &#125;&#125; 基于Calendar类实现万年历 Main WanNianLi 1234567891011121314151617181920212223242526272829package course.pm.dos.homework;import java.text.*;import java.util.*;public class WanNianLi &#123; public static void main(String[] args) throws ParseException &#123; Scanner sc = new Scanner(System.in); Calendar cal = Calendar.getInstance(); System.out.println(&quot;请输入年份：&quot;); int year = sc.nextInt(); System.out.println(&quot;请输入月份：&quot;); int month = sc.nextInt(); Calendar calendar = Calendar.getInstance(); calendar.set(year, month-1, 1); int day = calendar.get(calendar.DAY_OF_WEEK);//获取某年某月开始的第一天是周几 int month_of_day = calendar.getActualMaximum(calendar.DAY_OF_MONTH);//获取每个月有多少天 System.out.println(&quot;星期日&quot; + &quot;\\t&quot; + &quot;星期一&quot; + &quot;\\t&quot; + &quot;星期二&quot; + &quot;\\t&quot; + &quot;星期三&quot; + &quot;\\t&quot; + &quot;星期四&quot; + &quot;\\t&quot; + &quot;星期五&quot; + &quot;\\t&quot; + &quot;星期六&quot;); int num = 1; for(int i=1;i&lt;day+month_of_day;i++) &#123; if(i&lt;day) &#123; System.out.print(&quot;\\t&quot;); continue; &#125; System.out.print((num++)+&quot;\\t&quot;); if(i%7==0) &#123; System.out.println(); &#125; &#125; &#125;&#125; 文件夹（目录）复制 Main WenJianFuZhi 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package course.pm.dos.homework;import java.io.*;public class WenJianFuZhi &#123; public static void main(String[] args) &#123; copyDir(&quot;G:\\\\YC74\\\\190713\\\\code\\\\cs&quot;,&quot;G:\\\\YC74\\\\190713\\\\code\\\\cd&quot;); System.out.println(&quot;复制完成&quot;); &#125; public static void copyDir(String ob,String obCopy) &#123; File obf = new File(ob); File obfCopy = new File (obCopy); if(obf.exists()) &#123; //存在 if(obf.isDirectory()) &#123; //是目录 if(!(obfCopy.exists())) &#123; obfCopy.mkdirs(); &#125; File[] listFile = obf.listFiles(); for(int i=0;i&lt;listFile.length;i++) &#123; copyDir(listFile[i].getPath(),obCopy+&quot;\\\\&quot;+listFile[i].getName()); &#125; &#125;else &#123; //是文件 Reader r = null; Writer w = null; try &#123; r = new FileReader(ob); w = new FileWriter(obCopy); BufferedReader br = new BufferedReader(r); BufferedWriter bw = new BufferedWriter(w); String value = null; while((value=br.readLine())!=null) &#123; bw.write(value); bw.newLine(); &#125; bw.flush(); r.close(); w.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;&#125; DOS copy方法的实现 Main DOS 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186package course.pm.dos.homework;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.Reader;import java.io.Writer;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Scanner;public class DOS &#123; public static void main(String[] args) throws IOException &#123; System.out.println(&quot;HooySkyNet-DOS[Version : 1.0]&quot;); System.out.println(&quot;(c) 2019 Hooyantsing 保留所有权利&quot;); System.out.println(&quot;&quot;); //展示盘符 showRoot(); System.out.println(&quot;\\n&quot;); //获取C盘 File[] listRoots = File.listRoots(); String path = listRoots[1].getPath(); while(true) &#123; showCRoot(path); String cmd = getCmd(); if(cmd.equalsIgnoreCase(&quot;help&quot;)) &#123; helpOp(); &#125; if(cmd.equalsIgnoreCase(&quot;dir&quot;))&#123; dirOp(path); &#125; if(cmd.endsWith(&quot;:&quot;)) &#123; if(new File(cmd).exists()) &#123; path = cmd+&quot;\\\\&quot;.toUpperCase(); &#125;else &#123; System.out.println(&quot;找不到指定的驱动器&quot;); &#125; &#125; if(cmd.startsWith(&quot;cd &quot;) || cmd.startsWith(&quot;CD &quot;)) &#123; path = cdop(cmd,path); &#125; if(cmd.startsWith(&quot;copy &quot;))&#123; copy(cmd,path); &#125; &#125; &#125; //DOS copy的实现 private static void copy(String cmd, String path) &#123; String[] address = cmd.split(&quot; &quot;); File str = new File(address[1]); File strCopy = new File(address[2]); if(!(str.exists()))&#123; System.out.println(&quot;不存在 &quot;+str.getName()+&quot; 文件&quot;); return; &#125; Reader re = null; Writer wr = null; Scanner sc = new Scanner(System.in); System.out.print(&quot;改写 &quot;+strCopy.getName()+&quot; 吗?&lt;yes/no/all&gt;&quot;); String flag = sc.nextLine(); if(flag.equals(&quot;yes&quot;) || flag.equals(&quot;y&quot;)) &#123; try &#123; re = new FileReader(path+&quot;\\\\&quot;+str); wr = new FileWriter(path+&quot;\\\\&quot;+strCopy); BufferedReader br = new BufferedReader(re); BufferedWriter bw = new BufferedWriter(wr); String value = null; while((value=br.readLine())!=null) &#123; bw.write(value); bw.newLine(); &#125; bw.flush(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; if(re!=null) &#123; try &#123; re.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; if(wr!=null) &#123; try &#123; wr.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; System.out.println(&quot;已经复制\\t 1个文件。&quot;); &#125; &#125; private static String cdop(String cmd, String path) &#123; //cd . if(cmd.equals(&quot;cd .&quot;)) &#123; return path; &#125;else if(cmd.equals(&quot;cd ..&quot;))&#123; //cd .. File f = new File(path); String parent = f.getParent(); if(parent!=null) &#123; return parent; &#125;else &#123; return path; &#125; &#125;else &#123;//cd D:\\AA String[] ss = cmd.split(&quot; &quot;); File f = new File(ss[1]); if(f.exists() &amp;&amp; f.isDirectory()) &#123; return f.getPath(); &#125;else &#123; System.out.println(&quot;未能找到&quot;+f.getName()+&quot;目录&quot;); return path; &#125; &#125; &#125; private static void dirOp(String path) &#123; int dirCount = 0; int fileCount = 0; File f = new File(path); File[] childFiles = f.listFiles(); for(int i=0;i&lt;childFiles.length;i++) &#123; File file = childFiles[i]; if(file.isDirectory()) &#123; dirCount++; &#125; long time = file.lastModified(); Date d = new Date(time); SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy.MM.dd hh:mm:ss&quot;); System.out.print(sdf.format(d)+&quot;\\t&quot;+(file.isFile()?&quot; &quot;:&quot;&lt;DIR&gt;&quot;)); if(file.isFile()) &#123; fileCount++; long len = file.length(); String changLength = changeLength(len); System.out.print(&quot;\\t &quot;+changLength); &#125;else &#123; System.out.print(&quot;\\t&quot;); &#125; System.out.print(&quot;\\t\\t&quot;+file.getName()); System.out.println(); &#125; System.out.println(&quot;\\n\\t\\t文件：&quot;+fileCount+&quot;\\t目录：&quot;+dirCount+&quot;\\n\\n&quot;); &#125; private static String changeLength(long len) &#123; String s = &quot;&quot;; if(len/1024/1024==0) &#123; if(len/1024==0) &#123; s = len + &quot;B&quot;; &#125;else &#123; s = len/1024 + &quot;K&quot;; &#125; &#125;else &#123; s = len/1024/1024 + &quot;M&quot;; &#125; return s; &#125; private static void helpOp() throws IOException &#123; BufferedReader br = new BufferedReader(new FileReader(&quot;help.txt&quot;)) ; String value = null; StringBuffer sb = new StringBuffer(); while((value=br.readLine())!=null) &#123; sb.append(value+&quot;\\n&quot;); &#125; System.out.println(sb.toString()); &#125; private static String getCmd() &#123; Scanner sc = new Scanner(System.in); return sc.nextLine(); &#125; private static void showCRoot(String path) &#123; System.out.print(path+&quot;&gt;&quot;); &#125; private static void showRoot() &#123; File[] listRoots = File.listRoots(); for(int i=0;i&lt;listRoots.length;i++) &#123; System.out.print(listRoots[i].getPath()+&quot; &quot;); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第36次课程","slug":"技术向/Java/源辰课程记录/第36次课程","date":"2019-07-12T16:00:00.000Z","updated":"2022-05-11T01:15:08.994Z","comments":true,"path":"技术向/Java/源辰课程记录/第36次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC36%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第36次课程 07.13.2019 **内容 ** Java_API_项目案例[蒋斌] **1.**将字节流(InputStream)包装成字符流(InputStreamReader) Reader&#x2F;InputStreamReader&#x2F;FileReader关系 InputStreamReader：是字节流通向字符流的桥梁。 BufferedReader 内包装 InputStreamReader 1BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); 案例分析： 1234567891011121314151617181920212223242526package course.pm;import java.io.BufferedReader;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;public class Demo1 &#123; public static void main(String[] args) throws IOException &#123; //字节流 InputStream in = new FileInputStream(&quot;网络端口.txt&quot;); //将字节流(InputStream)包装成字符流(InputStreamReader) InputStreamReader inputStreamReader = new InputStreamReader(in); BufferedReader br = new BufferedReader(inputStreamReader); char[] ch = new char[1024]; br.readLine(); int len = -1; StringBuffer sb = new StringBuffer(); while((len=br.read(ch))!=-1) &#123; sb.append(new String(ch)); &#125; System.out.println(sb.toString()); &#125;&#125; **2.**DataInputStream和DataOutputStream（数据流） 案例分析： 1234567891011121314151617181920212223242526272829303132package course.pm;import java.io.DataInputStream;import java.io.DataOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;public class Demo2 &#123; public static void main(String[] args) throws IOException &#123; File f = new File(&quot;2.txt&quot;); OutputStream out = new FileOutputStream(f); //将字节流包装成数据流 DataOutputStream dataout = new DataOutputStream(out); dataout.writeInt(100); dataout.writeBoolean(true); //和FileWriter一样需要刷新 dataout.flush(); InputStream in = new FileInputStream(f); DataInputStream dataIn = new DataInputStream(in); //获取文件中int值 int readInt = dataIn.readInt(); System.out.println(readInt); //获取文件中的Boolean值 boolean bool = dataIn.readBoolean(); System.out.println(bool); &#125;&#125; 3.ObjectInputStream和****ObjectOutputStream（对象流） 案例分析： 1234567891011121314151617181920212223242526272829package course.pm;import java.io.*;public class Demo3 &#123; public static void main(String[] args) throws IOException, ClassNotFoundException &#123; Person p = new Person(&quot;张三&quot;,18); ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(&quot;3.txt&quot;)); //将对象p写入 out.writeObject(p); out.flush(); ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;3.txt&quot;)); Person inp = (Person)in.readObject(); System.out.println(inp.toString()); &#125;&#125;//对象class Person implements Serializable&#123; //必须实现Serializable(序列化)接口，才能使用对象流 private String name; private transient int age; //transient 反序列化 在写入文件时不可写入 public Person(String name, int age) &#123; super(); this.name = name; this.age = age; &#125; @Override public String toString() &#123; return &quot;Person [name=&quot; + name + &quot;]&quot;; &#125;&#125; **4.**Properties类（配置文件） Properties 继承于 Hashtable。 案例分析：本案例将在控制台输出 12345678910111213141516171819package course.pm;import java.util.*;import java.util.Map.Entry;public class Demo4 &#123; public static void main(String[] args) &#123; //获取系统的Properties信息 Properties properties = System.getProperties(); //由于Properties继承于Hashtable，因此也是这种类型。 Set&lt;Entry&lt;Object,Object&gt;&gt; entrySet = properties.entrySet(); Iterator&lt;Entry&lt;Object,Object&gt;&gt; iterator = entrySet.iterator(); while(iterator.hasNext()) &#123; Entry&lt;Object,Object&gt; entry = iterator.next(); System.out.println(entry.getKey()+&quot; &quot;+entry.getValue()); &#125; &#125;&#125; 案例分析：本案例将生成文件 &lt;本案例未进行整理&gt; 1234567891011121314151617package course.pm;import java.io.*;import java.util.Properties;public class Demo5 &#123; public static void main(String[] args) throws IOException &#123; OutputStream out = new FileOutputStream(&quot;config.properties&quot;); Properties properties = System.getProperties(); properties.store(out, &quot;配置文件&quot;); InputStream in = new FileInputStream(&quot;config.properties&quot;); Properties p2 = new Properties(); p2.load(in); System.out.println(p2.toString()); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第35次课程","slug":"技术向/Java/源辰课程记录/第35次课程","date":"2019-07-11T16:00:00.000Z","updated":"2022-05-11T01:14:56.137Z","comments":true,"path":"技术向/Java/源辰课程记录/第35次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC35%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第35次课程 07.12.2019 **内容 ** Java_API_java.io包****[蒋斌] 1.File类 案例解析： 构造 File 变量名 &#x3D; new File(“文件路径”); 字段 File.pathSeparator：与系统有关的路径分隔符，为了方便，它被表示为一个字符串。在Windows下为“;”。 File.separator：与系统有关的默认名称分隔符，为了方便，它被表示为一个字符串。在Windows下为“\\”。 方法 **File.createNewFile()**：创建文件，创建成功返回true，失败返回false。 **File.exists()**：判断文件是否存在，存在返回true，不存在返回false。 *File.***.listFiles()**：获取当前目录下所有子文件的抽象路径。 123456789101112131415161718192021222324252627282930public class File_Test &#123; public static void main(String[] args) throws IOException &#123; //按照不同系统，输出分隔符 //打印; String pathseparator = File.pathSeparator; System.out.println(pathseparator); //打印\\ String separator = File.separator; System.out.println(separator); // String path = &quot;G:\\\\YC74&quot;+separator+&quot;190712\\\\code\\\\lab\\\\mubiao.txt&quot;; System.out.println(path); //实例化File File f1 = new File(&quot;G:\\\\YC74\\\\190712\\\\code\\\\lab\\\\mubiao.png&quot;); //创建文件，创建成功返回true，失败返回false System.out.println(f1.createNewFile()); //判断文件是否存在，存在返回true，否则返回false System.out.println(f1.exists()); //获取文件夹下下面的所有子文件 File f2 = new File(&quot;G:\\\\YC74\\\\190712\\\\code\\\\lab&quot;); //获取的文件名放入数组中 File[] listFiles = f2.listFiles(); //打印数组 for(int i=0;i&lt;listFiles.length;i++) &#123; System.out.println(listFiles[i]); &#125; &#125;&#125; 2.[案例]文件搜索 案例分析： 方法 **File.****getName()**：获取文件名 **File.getAbsolutePath()**：获取文件的绝对路径字符串。 **File.****getName().contains(key)**：以File所在路径为参照，获取其他文件的相对路径，key是关键字。 **File.****isDirectory()**：判断是否是目录（文件夹），存在且是目录返回true，否则返回false。 123456789101112131415161718192021222324252627282930313233343536373839404142package hooy.file;import java.io.File;import java.util.ArrayList;public class WenJianSouSuo &#123; static ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(); private static int fileNum; //统计 private static int foldNum; public static void main(String[] args) &#123; search(&quot;G:\\\\YC74&quot;,&quot;&quot;); for(String s:list) &#123; System.out.println(s); &#125; System.out.println(&quot;文件夹：&quot;+foldNum+&quot;\\t文件：&quot;+fileNum); &#125; public static void search(String path,String key) &#123; File f = new File(path); //判断是否存在文件和文件夹 if(f.exists()) &#123; //判断是否是文件还是文件夹 if(f.isDirectory()) &#123; //是文件夹 //获取子文件 File[] listFiles = f.listFiles(); for(int i=0;i&lt;listFiles.length;i++) &#123; //获取子文件的 绝对路径 String absolutePath = listFiles[i].getAbsolutePath(); //递归 search(absolutePath,key); &#125; foldNum++; &#125;else &#123; //是文件 if(f.getName().contains(key)) &#123; //获取 相对路径 list.add(f.getPath()); &#125; fileNum++; &#125; &#125; &#125;&#125; *3.FileInputStream类* 文件输入流 案例分析： 构造 InputStream in &#x3D; new FileInputStream(FILE) 方法 *FileInputStream(FILE)***.read()**：从此输入流中读取一个数据字节。如果没有输入可用，则此方法将阻塞。返回下一个数据字节，如果已到达文件末尾，则返回 -1。仅读取一次，继续向后读取。 案例：每次仅读取一个字符 12345678910111213141516171819public class Demo3 &#123; public static void main(String[] args) &#123; //定位文件位置 File f = new File(&quot;&quot;); try &#123; //获取输入流 InputStream in = new FileInputStream(f); for(int i=0;i&lt;f.length();i++) &#123; //每次读取一个字节 int v2 = in.read(); System.out.println(v2); &#125; &#125;catch(FileNotFoundException e) &#123; e.printStackTrace(); &#125;catch(IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 案例：每次读取一个数组的字符量 FileInputStream(FILE).read()读取结束的标志是返回-1。 程序结束后，通过finally结束流。 123456789101112131415161718192021222324252627282930313233343536373839package hooy.file;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;public class Demo4 &#123; public static void main(String[] args) &#123; //定位文件位置 File f = new File(&quot;网络端口.txt&quot;); InputStream in = null; try &#123; //获取输入流 in = new FileInputStream(f); byte[] b = new byte[1024]; int len = -1; //.read()方法：每个字符仅读一次，继续往后读取 while((len=in.read(b))!=-1) &#123; //System.out.println(in.read(b)); //String(数组,从哪开始,到哪里结束) String str = new String(b,0,len); System.out.println(str); &#125; &#125;catch(FileNotFoundException e) &#123; e.printStackTrace(); &#125;catch(IOException e) &#123; e.printStackTrace(); &#125;finally &#123; if(in!=null) &#123; try &#123; in.close(); &#125;catch(IOException e)&#123; e.printStackTrace(); &#125; &#125; &#125; &#125;&#125; 4.[案例]文件复制（基于InputStream和OutputStream实现****） 案例分析： 构造 **OutputStream out &#x3D; **new FileOutputStream(“地址”) **OutputStream out &#x3D; ****new FileOutputStream(“地址”，true)**：加入参数true，写入文件时，将在原有数据后面继续写入。 方法 *FileOutputStream(“”)***.write(b, 0, len)**：文件输出流，将内容写入文件中。（数据数组，开始下标，结束下标）。 123456789101112131415161718192021222324252627282930313233343536373839404142434445package hooy.file;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;public class Demo5 &#123; public static void main(String[] args) &#123; //输入流 InputStream in = null; //输出流 OutputStream out = null; try &#123; //获取输入流 in = new FileInputStream(&quot;&quot;); //获取输出流 out = new FileOutputStream(&quot;&quot;); byte[] b = new byte[1024]; int len = -1; //文件读完的标志：返回不再是字节长度，而是-1 while((len=in.read(b))!=-1) &#123; //将输入流读到的内容放入输出流中 out.write(b, 0, len); &#125; &#125;catch(IOException e) &#123; e.printStackTrace(); &#125;finally &#123; if(in!=null) &#123; try &#123; in.close(); &#125;catch(IOException e) &#123; e.printStackTrace(); &#125; &#125; if(out!=null) &#123; try &#123; out.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;&#125; 5.[案例]文件复制（基于Reader和Writer实现****） 案例分析： 构造 字符流和缓冲字符流应同时出现 **Reader r &#x3D; ****new FileReader(“1.txt”)**：输入字符流 **BufferedReader br &#x3D; new BufferedReader(r)**：读缓冲字符流 **Writer w &#x3D; ****new FileWriter(“2.txt”)**：输出字符流 **BufferedWriter bw &#x3D; new BufferedWriter(w)**：写缓冲字符流 方法 *BufferedReader(FileReader(“1.txt”))***.readLine()**：读取缓冲字符流中的数据，仅读取一次后继续向后读取，按照行读取。 *BufferedReader(FileReader(“1.txt”))***.readLine()**读取结束的标志是返回null。 *BufferedWriter(FileWriter(“2.txt”))***.write(value)**：将读到的value数据写入到文件当中，若文件不存在，则创建。 *BufferedWriter(FileWriter(“2.txt”))***.newLine()**：写入数据时，进行换行。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package hooy.file;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.Reader;import java.io.Writer;//通过 字符输入、输出流 来实现文件的复制public class Reader_Writer &#123; public static void main(String[] args) &#123; //创建字符输入、输出流 Reader r = null ; Writer w = null ; try &#123; r = new FileReader(&quot;1.txt&quot;); w = new FileWriter(&quot;2.txt&quot;); //创建 读写缓冲字符流 BufferedReader br = new BufferedReader(r); BufferedWriter bw = new BufferedWriter(w); String value = null; //文件读完的标志：返回不再是数据，而是null while((value=br.readLine())!=null) &#123; //将读取出来的数据写入 bw.write(value); //换行 bw.newLine(); &#125; bw.flush(); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; if(r!=null) &#123; try &#123; r.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; if(w!=null) &#123; try &#123; w.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第34次课程","slug":"技术向/Java/源辰课程记录/第34次课程","date":"2019-07-10T16:00:00.000Z","updated":"2022-05-11T01:14:44.269Z","comments":true,"path":"技术向/Java/源辰课程记录/第34次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC34%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第34次课程 07.11.2019 **内容 ** 案例解析[蒋斌] 0.List Set Map的区别 1.重复对象 list允许重复的对象，而set方法不允许重复对象 2.null元素 list可以插入多个null元素，而set只允许插入一个null元素 List：列表 Set：集合 Map：映射 1.HashMap类 例题分析： 1.List声明对ArrayList的引用 ArrayList类（Class）实现（implement）了List接口（interface） 12//List接口名&lt;泛型&gt; 变量名 = new ArrayList类名&lt;泛型&gt;();List&lt;Student&gt; list = new ArrayList&lt;Student&gt;(); 2.将元素添加到List中 List.add(对象) 3.创建一个HashMap 12//Map&lt;K（key值）,V（value值）&gt; 变量名 = new HashMap&lt;K,B&gt;(); Map&lt;String,List&lt;Student&gt;&gt; yc = new HashMap&lt;String,List&lt;Student&gt;&gt;(); 4.将元素添加到HashMap中 HashMap.put(K,V) -&gt;K和V都是泛型变量（数据类型的变量） 5.获取HashMap中以Set打包好的Entry **Hash.entrySet() ** -&gt;返回的是Set 12//参考：Set&lt;Map.Entry&lt;String, List&lt;Student&gt;&gt;&gt; entrySet = yc.entrySet(); 6.添加迭代器（） Set.iterator() 推断：Set是集合类，可以挨个遍历。 12//迭代器接口名&lt;泛型&gt; 变量名 = Set.iterator()Iterator&lt;Entry&lt;String,List&lt;Student&gt;&gt;&gt; iterator = entrySet.iterator(); 7.获取HashMap中以Set打包好的Key（Entry内部类中的Key） HashMap.KeySet() -&gt;返回的是Set 8.获取Entry中的Key和Value Entry.getKey() Entry.getValue() Main TestHashMap 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package pm.map;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.Set;public class TestHashMap &#123; public static void main(String[] args) &#123; List&lt;Student&gt; list1 = new ArrayList&lt;Student&gt;(); for(int i=0;i&lt;5;i++) &#123; list1.add(new Student(&quot;张&quot;+i,i+1)); &#125; List&lt;Student&gt; list2 = new ArrayList&lt;Student&gt;(); for(int i=0;i&lt;5;i++) &#123; list2.add(new Student(&quot;李&quot;+i,i+1)); &#125; List&lt;Student&gt; list3 = new ArrayList&lt;Student&gt;(); for(int i=0;i&lt;5;i++) &#123; list3.add(new Student(&quot;王&quot;+i,i+1)); &#125; Map&lt;String,List&lt;Student&gt;&gt; yc = new HashMap&lt;String,List&lt;Student&gt;&gt;(); yc.put(&quot;一班&quot;, list1); yc.put(&quot;二班&quot;, list2); yc.put(&quot;三班&quot;, list3); System.out.println(&quot;班级共有&quot;+yc.size()); //循环遍历第一种方式 /*Map中包含内部类Entry,调用entrySet()方法时，将所有创建好的Entry元素打包成Set返回。Set是 种元素集合，可以通过Iterator迭代。因此，Set内部元素是Entry，Entry内部元素是Key和Value */ int total = 0; Set&lt;Map.Entry&lt;String, List&lt;Student&gt;&gt;&gt; entrySet = yc.entrySet(); Iterator&lt;Entry&lt;String,List&lt;Student&gt;&gt;&gt; iterator = entrySet.iterator(); while(iterator.hasNext()) &#123; Entry&lt;String,List&lt;Student&gt;&gt; entry = iterator.next(); System.out.println(&quot;班级名&quot;+entry.getKey()); List&lt;Student&gt; value = entry.getValue(); for(Student s:value) &#123; System.out.println(s); total++; &#125; &#125; System.out.println(&quot;总共有：&quot;+total+&quot;个学生&quot;); System.out.println(&quot;总共有：&quot;+yc.size()+&quot;个班&quot;); //循环遍历第二种方式 Set&lt;String&gt; keySet = yc.keySet(); Iterator&lt;String&gt; iterator2 = keySet.iterator(); while(iterator2.hasNext()) &#123; String key = iterator2.next(); System.out.println(key); List&lt;Student&gt; list = yc.get(key); for(Student student : list) &#123; System.out.println(student); &#125; if(yc.containsKey(&quot;一班&quot;)) &#123; System.out.println(&quot;这个班存在&quot;); &#125;else &#123; System.out.println(&quot;班不存在&quot;); &#125; &#125; &#125;&#125; Class Student 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162package pm.map;class Student implements Comparable &#123; private String name; private int age; public Student() &#123; super(); &#125; public Student(String name, int age) &#123; super(); this.name = name; this.age = age; &#125; @Override public String toString() &#123; return &quot;Student [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;; &#125; @Override public int hashCode() &#123; final int prime = 31; int result = 1; result = prime * result + age; result = prime * result + ((name == null) ? 0 : name.hashCode()); return result; &#125; @Override public boolean equals(Object obj) &#123; if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; Student other = (Student) obj; if (age != other.age) return false; if (name == null) &#123; if (other.name != null) return false; &#125; else if (!name.equals(other.name)) return false; return true; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; @Override public int compareTo(Object o) &#123; if(!(o instanceof Student)) &#123; throw new RuntimeException(&quot;错误&quot;); &#125; return this.hashCode()-((Student)o).hashCode(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第33次课程","slug":"技术向/Java/源辰课程记录/第33次课程","date":"2019-07-09T16:00:00.000Z","updated":"2022-05-11T01:14:33.221Z","comments":true,"path":"技术向/Java/源辰课程记录/第33次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC33%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第33次课程 07.10.2019 **内容 ** *Java_API_java.util包[蒋斌]* ** ** 0.&lt;补丁包&gt; 0.1Jar包的导入 对第32次课程（上一节课）的补丁包。 1.将“Jar包（log4j-1.2.15）”复制，在“Java项目（Java_API_lang）”右键选择粘贴。 2.将“配置文件（log4j）”复制，在“src”右键选择粘贴。 配置文件源码： 日志级别：****debug&lt;INFO&lt;WARN&lt;ERROR&lt;PATAL(致命错误) 12345678910log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.Target=System.out log4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %m%nlog4j.appender.file=org.apache.log4j.FileAppenderlog4j.appender.file.File=yc.loglog4j.appender.file.Threshold=debuglog4j.appender.file.layout=org.apache.log4j.PatternLayoutlog4j.appender.file.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %l %m%nlog4j.rootLogger=debug, stdout,file 例题分析： 功能：用于将错误信息存放入文本文件（.txt）中，生成错误和异常日志。 1234567891011121314import org.apache.log4j.Logger;public class Logger_Test &#123; public static void main(String[] args) &#123; //创建logger对象 Logger logger = Logger.getLogger(Logger_Test.class); //日志级别： //debug&lt;INFO&lt;WARN&lt;ERROR&lt;PATAL(致命错误) try &#123; int result = 1/0; &#125;catch(Exception e) &#123; logger.debug(e.getMessage(),e); &#125; &#125;&#125; 例题结果： 1.生成目标文件： 2.生成错误和错误日志（报告）： 0.2[案例]打字游戏 对第31次课程作业的补丁包。 获取1997.01.01 00:00至现在时刻，已经流逝的时间，单位毫秒。 1long currentTime = System.currentTimeMillis(); 老师标准代码： Class Game 12345678910package com.yc.typingmaster;/*** 玩家玩游戏。*/public class Test &#123; public static void main(String[] args) &#123; Player player = new Player(); player.play(); &#125;&#125; Class Level 12345678910111213141516171819202122232425262728293031323334package com.yc.typingmaster;/*** 玩家级别。*/public class Level &#123; private int levelNo; // 级别号 private int strLength; // 各级别一次输出字符串的长度 private int strTime; // 各级别输出字符串的次数 private int timeLimit; // 各级别闯关的时间限制 private int perScore; // 各级别成功输入一次字符串后增加的分值 public Level(int levelNo, int strLength, int strTime, int timeLimit, int perScore) &#123; this.levelNo = levelNo; this.strLength = strLength; this.strTime = strTime; this.timeLimit = timeLimit; this.perScore = perScore; &#125; public int getLevelNo() &#123; return levelNo; &#125; public int getStrLength() &#123; return strLength; &#125; public int getStrTime() &#123; return strTime; &#125; public int getTimeLimit() &#123; return timeLimit; &#125; public int getPerScore() &#123; return perScore; &#125;&#125; Class LevelParam 123456789101112131415package com.yc.typingmaster;/*** 级别参数类，配置各个级别参数。*/public class LevelParam &#123; public final static Level levels[]=new Level[6];//对应六个级别 static &#123; levels[0]=new Level(1, 2, 10, 30,1); levels[1]=new Level(2, 3, 9, 26,2); levels[2]=new Level(3, 4, 8, 22,5); levels[3]=new Level(4, 5, 7, 18,8); levels[4]=new Level(5, 6, 6, 15,10); levels[5]=new Level(6, 7, 5, 12,15); &#125;&#125; Class Player 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.yc.typingmaster;import java.util.Scanner;/*** 玩家类。*/public class Player &#123; private int levelNo; // 级别号 private int curScore; // 当前积分 private long startTime = 0; // 各级别开始时间 private int elapsedTime; // 各级别已用时间 public long getStartTime() &#123; return startTime; &#125; public void setStartTime(long startTime) &#123; this.startTime = startTime; &#125; public int getLevelNo() &#123; return levelNo; &#125; public void setLevelNo(int levelNo) &#123; this.levelNo = levelNo; &#125; public int getCurScore() &#123; return curScore; &#125; public void setCurScore(int curScore) &#123; this.curScore = curScore; &#125; public int getElapsedTime() &#123; return elapsedTime; &#125; public void setElapsedTime(int elapseTime) &#123; this.elapsedTime = elapseTime; &#125; /** * 玩家玩游戏。 */ public void play() &#123; Game game = new Game(this); Scanner input = new Scanner(System.in); // 外层循环，循环一次级别晋一级 for (int i = 0; i &lt; LevelParam.levels.length; i++) &#123; // 1、 晋级[从一级开始玩....] this.levelNo += 1; // 2、 晋级后计时清零,积分清零 this.startTime = System.currentTimeMillis(); this.curScore = 0; // 3、 内层循环，循环一次完成一次字符串的输出、输入、比较 [每个级别需要玩的次数(总的时间是否少于通关时间)....] for (int j = 0; j &lt; LevelParam.levels[levelNo-1].getStrTime(); j++) &#123; // 3.1、游戏输出字符串 String outStr = game.printStr(); // 3.2、接收用户输入 String inStr = input.next(); // 3.3、游戏判断玩家输入是否正确，并输出相应结果信息 game.printResult(outStr, inStr); &#125; &#125; &#125;&#125; Main Test 12345678910package com.yc.typingmaster;/*** 玩家玩游戏。*/public class Test &#123; public static void main(String[] args) &#123; Player player = new Player(); player.play(); &#125;&#125; 自己代码： Class Game 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.hooy.typingmaster;import java.util.Random;import java.util.Scanner;public class Game &#123; private Player player; private String[] str = &#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&quot;j&quot;,&quot;k&quot;,&quot;l&quot;,&quot;m&quot;, &quot;n&quot;,&quot;o&quot;,&quot;p&quot;,&quot;q&quot;,&quot;r&quot;,&quot;s&quot;,&quot;t&quot;,&quot;u&quot;,&quot;v&quot;,&quot;w&quot;,&quot;x&quot;,&quot;y&quot;,&quot;z&quot;&#125;; private Random r = new Random(); private Scanner sc = new Scanner(System.in); public Game(Player player) &#123; super(); this.player = player; &#125; public String printStr() &#123; String out = &quot;&quot;; int strNumber; for(int i=0;i&lt;LevelParam.level[player.getLevelNo()-1].getStrLength();i++) &#123; strNumber = r.nextInt(str.length); out += str[strNumber]; &#125; //输出字符串，返回字符串用于和玩家输入比较 System.out.println(out); return out; &#125; public String inStr() &#123; System.out.println(&quot;现在开始打字：&quot;); return sc.nextLine(); &#125; public void printResult(String out,String in) &#123; if(out.equals(in)) &#123; //输出和输入相同 long currentTime = System.currentTimeMillis(); //检查是否超时 if((currentTime-player.getStartTime())/1000&gt; LevelParam.level[player.getLevelNo()-1].getTimeLimit()) &#123; System.out.println(&quot;用时：&quot;+((currentTime-player.getStartTime())/1000)+&quot;，已超时&quot;); System.exit(1); &#125;else &#123; //未超时 //计算积分 player.setCurrScore(player.getCurrScore()+ LevelParam.level[player.getLevelNo()-1].getPerScore()); //计算时间 player.setElapsedTime((int)(currentTime-player.getStartTime())/1000); //汇总输出 System.out.println(&quot;输入正确，您的积分为：&quot;+player.getCurrScore()+&quot;，等级为：&quot;+ player.getLevelNo()+&quot;，已用时间：&quot;+player.getElapsedTime()+&quot;秒&quot;); &#125; &#125;else &#123; //输出和输入不相同 System.out.println(&quot;测试：输入错误&quot;); System.exit(1); &#125; &#125;&#125; Class Level 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.hooy.typingmaster;public class Level &#123; private int levelNo; //各级别号 private int strLength;//各级别一次输出字符串的长度 private int strTime; //各级别输出字符串的次数 private int timeLimit;//各级别闯关的时间限制 private int perScore; //各级别正确输入一次的得分 public Level() &#123; super(); &#125; public Level(int levelNo, int strLength, int strTime, int timeLimit, int perScore) &#123; super(); this.levelNo = levelNo; this.strLength = strLength; this.strTime = strTime; this.timeLimit = timeLimit; this.perScore = perScore; &#125; public int getLevelNo() &#123; return levelNo; &#125; public void setLevelNo(int levelNo) &#123; this.levelNo = levelNo; &#125; public int getStrLength() &#123; return strLength; &#125; public void setStrLength(int strLength) &#123; this.strLength = strLength; &#125; public int getStrTime() &#123; return strTime; &#125; public void setStrTime(int strTime) &#123; this.strTime = strTime; &#125; public int getTimeLimit() &#123; return timeLimit; &#125; public void setTimeLimit(int timeLimit) &#123; this.timeLimit = timeLimit; &#125; public int getPerScore() &#123; return perScore; &#125; public void setPerScore(int perScore) &#123; this.perScore = perScore; &#125;&#125; Class LevelParam 12345678910111213package com.hooy.typingmaster;public class LevelParam &#123; public final static Level[] level = new Level[6]; static &#123; level[0] = new Level(1,2,10,30,1); level[1] = new Level(2,3,9,26,2); level[2] = new Level(3,4,8,22,5); level[3] = new Level(4,5,7,18,8); level[4] = new Level(5,6,6,15,10); level[5] = new Level(6,7,5,12,15); &#125;&#125; Class Player 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package com.hooy.typingmaster;public class Player &#123; private int levelNo; //玩家当前级别号 private int currScore; //玩家当前级别积分 private long startTime; //当前级别开始时间 private int elapsedTime; //当前级别已用时间 public Player() &#123; super(); &#125; public Player(int levelNo, int currScore, int startTime, int elapsedTime) &#123; super(); this.levelNo = levelNo; this.currScore = currScore; this.startTime = startTime; this.elapsedTime = elapsedTime; &#125; public int getLevelNo() &#123; return levelNo; &#125; public int getCurrScore() &#123; return currScore; &#125; public long getStartTime() &#123; return startTime; &#125; public int getElapsedTime() &#123; return elapsedTime; &#125; public void setLevelNo(int levelNo) &#123; this.levelNo = levelNo; &#125; public void setCurrScore(int currScore) &#123; this.currScore = currScore; &#125; public void setStartTime(int startTime) &#123; this.startTime = startTime; &#125; public void setElapsedTime(int elapsedTime) &#123; this.elapsedTime = elapsedTime; &#125; public void play() &#123; Game game = new Game(this); for(int i=0;i&lt;LevelParam.level.length;i++) &#123; this.levelNo = i+1; //分数清零 this.currScore = 0; //时间清零 this.startTime = System.currentTimeMillis(); //出题 for(int j=0;j&lt;LevelParam.level[this.levelNo].getStrTime();j++) &#123; game.printResult(game.printStr(),game.inStr()); &#125; &#125; System.out.println(&quot;恭喜你通关游戏！&quot;); &#125;&#125; Main Test 1234567package com.hooy.typingmaster;public class Test &#123; public static void main(String[] args) &#123; Player player = new Player(); player.play(); &#125;&#125; 1.Class类 导入Class文件：Class.forName(“hooy.java.lang.Person”) 获取Class中属性相关内容：Class.getDeclaredFields() 获取Class中方法相关内容：Class.getDeclaredMethods() 获取属性&#x2F;方法类型：Field.getType() Method.getType() 获取属性&#x2F;方法名称：Field.getName() Method.getName() 1234567891011121314151617public class Class_FieldAndMethod &#123; public static void main(String[] args) throws ClassNotFoundException &#123; //找到目标类 Class clzz = Class.forName(&quot;hooy.java.lang.Person&quot;); //将获取的类属性信息放入Field类型数组中 Field[] fields = clzz.getDeclaredFields(); for (Field field : fields) &#123; //获取属性类型和属性名 System.out.println(field.getType()+&quot;==&quot;+field.getName()); &#125; //将获取的类方法信息放入Method类型数组中 Method[] methods = clzz.getDeclaredMethods(); for (Method method : methods) &#123; System.out.println(method.getName()); &#125; &#125;&#125; 2.equals和hashCode方法重写 equals方法：指示其他某个对象是否与此对象“相等”。 hashCode方法：返回该对象的哈希码值。 例如： 12345678910111213141516171819202122232425//重写equals方法 @Override public boolean equals(Object obj) &#123; if(obj==null) &#123; return false; &#125; if(!(obj instanceof Person)) &#123; return false; &#125; Person p = (Person)obj; //比较hashCode值 if(this.hashCode()==p.hashCode()) &#123; return true; &#125; return false; &#125;//重写hashCode方法，其中算法仅是体现过程 @Override public int hashCode() &#123; int result = 0; int prime = 31; result = prime * (name==null?0:name.hashCode()); result = prime * result + (idcode==null?0:idcode.hashCode()); return result; &#125; 3.Object.clone方法 例题分析： 超类protected用于修饰方法，表示子类需要重写该方法，重写方法中也可以通过super.继承 1234567891011121314151617181920212223242526272829303132333435363738394041public class Object_Test &#123; public static void main(String[] args) throws CloneNotSupportedException &#123; Student s = new Student(&quot;张三&quot;); Student clone = (Student)s.clone(); System.out.println(s==clone); System.out.println(clone.getName()); &#125;&#125;class Student extends Object&#123; private String name; public Student(String name) &#123; super(); this.name = name; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; //protected用于修饰方法，表示子类需要重写该方法，也可以通过super.继承 //返回与同一个对象(不同变量引用同一个对象) @Override protected Object clone() throws CloneNotSupportedException&#123; return this; &#125; /* //返回克隆的一个新对象(不同变量引用不同对象) @Override //&lt;-安全机制 protected Object clone() throws CloneNotSupportedException&#123; return new Student(this.name); &#125; */ /* //父类clone方法不支持 @Override protected Object clone() throws CloneNotSupportedException&#123; return super.clone(); &#125; */&#125; 4.Object.toString方法 例题分析： 1234@Override public String toString() &#123; return &quot;PersonTest [name=&quot; + name + &quot;, idcode=&quot; + idcode + &quot;]&quot;; &#125; 5.Date类和Calendar类 已过时的日期类（Date），通常被日历类（Calendar）取代。 例题分析： Date类获取当前时间：Date date &#x3D; new Date() Date类定义日期格式：DateFormat df &#x3D; new SimpleDateFormat(“yyyy年MM月dd日 HH:mm:ss”) Calendar类获取当前时间：Calendar c &#x3D; Calendar.getInstance() Calendar类使用关键字获取值：Calendar.get(Calendar.VALUE) 1234567891011121314151617181920public class DateAndCalendar_Test &#123; public static void main(String[] args) &#123; //Date //获取当前时间 Date date = new Date(); //自定义日期格式 DateFormat df = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;); String format = df.format(date); System.out.println(format); //Calendar(日历) Calendar c = Calendar.getInstance(); System.out.println(c); //字段选取 System.out.println(&quot;年：&quot;+c.get(Calendar.YEAR)); System.out.println(&quot;月：&quot;+c.get(Calendar.MONTH)); System.out.println(&quot;日：&quot;+c.get(Calendar.DATE)); System.out.println(&quot;周：&quot;+c.get(Calendar.DAY_OF_WEEK)); &#125;&#125; 6.Random类 常用于产生随机数。 例题分析： 12345678910111213141516171819public class Random_Test &#123; public static void main(String[] args) &#123; Random r = new Random(); int count = 0; int flag = 0; StringBuffer sb = new StringBuffer(); while(count&lt;5) &#123; flag = r.nextInt(2); if(flag==0) &#123; sb.append(r.nextInt(10)); &#125; if(flag==1) &#123; sb.append((char)(r.nextInt(26)+97)); &#125; count++; &#125; System.out.println(sb.toString()); &#125;&#125; 7.ArrayList类 数据结构：顺序存储结构 通过数组实现 例题分析： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public class MyList&lt;T&gt; &#123; private Object[] data; private int size; public MyList() &#123; this(10); &#125; public MyList(int len) &#123; if(len&lt;=0) &#123; throw new IllegalArgumentException(&quot;参数异常&quot;); &#125; //申请所需空间 data = new Object[len]; &#125; //扩容 public void capactiy(int newSize) &#123; if(size&lt;newSize) &#123; Object[] new_obj = new Object[newSize*2]; //原数组 从下标开始位置 新数组 从下标开始位置 复制多少 System.arraycopy(data, 0, new_obj, 0, size); data = new_obj; &#125; &#125; public boolean add(T obj) &#123; //判断是否扩容 capactiy(size+1); data[size++] = obj; return true; &#125; public int getSize() &#123; return size; &#125; public void indexCheck(int i) &#123; if(i&lt;0 || i&gt;=size) &#123; throw new RuntimeException(&quot;索引值不合法&quot;); &#125; &#125; public T get(int i) &#123; indexCheck(i); return (T)data[i]; &#125; public static void main(String[] args) &#123; MyList&lt;String&gt; list = new MyList&lt;String&gt;(); list.add(&quot;张三&quot;); list.add(&quot;李四&quot;); list.add(&quot;王五&quot;); for(int i=0;i&lt;list.getSize();i++) &#123; System.out.println(list.get(i)); &#125; &#125;&#125; 8.LinkedList类 数据结构：链式存储结构 通过链(地址)实现 例题分析： Class MyNode 相当于C&#x2F;C++中通过结构体创建节点类型 1234567891011121314public class MyNode&lt;E&gt; &#123; //节点成员 E item; MyNode&lt;E&gt; next; public MyNode() &#123; super(); &#125; public MyNode(E item, MyNode&lt;E&gt; next) &#123; super(); this.item = item; this.next = next; &#125;&#125; **Class **MyLinkedList 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public class MyLinkedList&lt;E&gt; &#123; MyNode&lt;E&gt; first; MyNode&lt;E&gt; last; int size; public void add(E item) &#123; MyNode&lt;E&gt; l = last;//表示最后节点 MyNode&lt;E&gt; node = new MyNode&lt;E&gt;(); node.item = item; node.next = null; if(l!=null) &#123;//表示已经有节点 l.next = node; &#125; if(first==null) &#123;//里面没有 first=node;//第一次添加 &#125; last = node;//始终是最后一个 size++; &#125; public E get(int index) &#123; if(index&lt;0 || index&gt;=size) &#123; throw new IndexOutOfBoundsException(&quot;index&quot;+index+&quot;size&quot;); &#125; MyNode&lt;E&gt; result = first; for(int i=0;i&lt;index;i++) &#123; result = result.next; &#125; return result.item; &#125; public int getSize() &#123; return size; &#125; public void remove(int index) &#123; if(index&lt;0 || index&gt;=size) &#123; throw new IndexOutOfBoundsException(&quot;index&quot;+index+&quot;size&quot;); &#125; MyNode&lt;E&gt; pre = first; if(index==0) &#123; first = first.next; size--; return; &#125; for(int i=0;i&lt;index-1;i++) &#123; pre = pre.next; &#125; MyNode&lt;E&gt; self = pre.next; MyNode&lt;E&gt; next = self.next; if(next==null) &#123; pre.next = null; self = null; last = pre; &#125;else &#123; pre.next = next; self = null; &#125; size--; &#125;&#125; **9.**Vector和Stack类 Stack：栈。 10.Set类 包含两个子类：HashSet和TreeSet **HashSet**：返回元素的顺序并不是特定的。基于HashMap。 **TreeSet**：返回元素的顺序是根据比较器（Comparator）实现，因此按照每个字符值排序。基于二叉树（TreeMap）。 例题分析： 迭代器：Iterator iterator1 &#x3D; Set.iterator() 注解： 接口名&lt;泛型&gt; 参数名 &#x3D; 类名（继承接口并实现）&lt;泛型&gt;.方法名（继承接口具体实现的方法）() **Iterator.hasNext()**：如果仍有元素可以迭代，则返回 true。（换句话说，如果 next 返回了元素而不是抛出异常，则返回 true）。 Iterator**.next()**：返回迭代的下一个元素。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788public class Set_Test &#123; public static void main(String[] args) &#123; //HashSet Set&lt;Student&gt; set1 = new HashSet&lt;Student&gt;(); for(int i=0;i&lt;20;i++) &#123; set1.add(new Student((&quot;张&quot;)+i,(18+i))); &#125; Iterator&lt;Student&gt; iterator1 = set1.iterator(); while(iterator1.hasNext()) &#123; System.out.println(iterator1.next()); &#125; System.out.println(&quot;=========================&quot;); //TreeSet Set&lt;Student&gt; set2 = new TreeSet&lt;Student&gt;(); for(int i=0;i&lt;20;i++) &#123; set2.add(new Student((&quot;张&quot;)+i,(18+i))); &#125; Iterator&lt;Student&gt; iterator2 = set2.iterator(); while(iterator2.hasNext()) &#123; System.out.println(iterator2.next()); &#125; &#125; &#125;class Student implements Comparable &#123; private String name; private int age; public Student() &#123; super(); &#125; public Student(String name, int age) &#123; super(); this.name = name; this.age = age; &#125; @Override public String toString() &#123; return &quot;Student [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;; &#125; @Override public int hashCode() &#123; final int prime = 31; int result = 1; result = prime * result + age; result = prime * result + ((name == null) ? 0 : name.hashCode()); return result; &#125; @Override public boolean equals(Object obj) &#123; if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; Student other = (Student) obj; if (age != other.age) return false; if (name == null) &#123; if (other.name != null) return false; &#125; else if (!name.equals(other.name)) return false; return true; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; @Override public int compareTo(Object o) &#123; if(!(o instanceof Student)) &#123; throw new RuntimeException(&quot;错误&quot;); &#125; return this.hashCode()-((Student)o).hashCode(); &#125; &#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"JAVA便利贴","slug":"技术向/Java/源辰技术储备/JAVA便利贴","date":"2019-07-08T16:00:00.000Z","updated":"2022-05-11T01:55:53.975Z","comments":true,"path":"技术向/Java/源辰技术储备/JAVA便利贴/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/JAVA%E4%BE%BF%E5%88%A9%E8%B4%B4/","excerpt":"","text":"JAVA便利贴 04.25.2019 ** ** ** ** ** ** 0.宪规则 &#x2F;&#x2F; 1.运算符优先级 2.运算符优先级 速学堂：http://www.sxt.cn/Java_jQuery_in_action&#x2F;Java_Identifier.html 3.ASCII控制字符（ASCII码） 百度百科：https://baike.sogou.com/v53369.htm?fromTitle=ASCII 4.排序算法 冒泡排序（bubbleSort****） 12345678910int temp;for(int i=0;i&lt;arr.length-1;i++) &#123; for(int j=0;j&lt;arr.length-i-1;j++) &#123; if(arr[j]&gt;arr[j+1]) &#123; temp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = temp; &#125; &#125;&#125; 12345678910int temp;for(int i=0;i&lt;arr.lenth;i++)&#123; for(int j=i+1;j&lt;arr.length;j++)&#123; if(arr[i]&lt;arr[j])&#123; temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; &#125; &#125;&#125; 选择排序（selectSort****） 123456789101112for(int i=0;i&lt;arr.length;i++) &#123; int temp; int min = i; for(int j=i+1;j&lt;arr.length;j++) &#123; if(arr[min]&gt;arr[j]) &#123; min = j; &#125; &#125; temp = arr[i]; arr[i] = arr[min]; arr[min] = temp; &#125; 插入排序（insertSort） 123456789for(int i=1;i&lt;arr.length;i++) &#123; int index = i; int next = arr[i]; while(index&gt;0 &amp;&amp; arr[index-1]&gt;next) &#123; arr[index] = arr[index-1]; index--; &#125; arr[index] = next;&#125; 将数字（字符串）转化为数字（值） 1int number = Integer.parseInt(sc.nextLine());","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第32次课程","slug":"技术向/Java/源辰课程记录/第32次课程","date":"2019-07-08T16:00:00.000Z","updated":"2022-05-11T01:14:18.184Z","comments":true,"path":"技术向/Java/源辰课程记录/第32次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC32%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第32次课程 07.09.2019 **内容 ** Java_API_lang包[蒋斌] **1.**Integer类 Integer 类在对象中包装了一个基本类型 int 的值。 int类型最大值和最小值 1234int maxValue = Integer.MAX_VALUE;int minValue = Integer.MIN_VALUE;System.out.println(maxValue);System.out.println(minValue); 包装类，比基本型拥有更多的功能方法 12//将int型包装成Interger类Integer in = new Integer(10); 自动装箱和拆箱 1234//自动装箱Integer in = 10;//自动拆箱int out = in; int转其他基本类输出，十进制转其他进制 **int转float：Integer.floatValue() ** 十进制转二进制：Integer.toBinaryString(INT) 十进制转十六进制：Integer.toHexString(INT) 12345678//获取10的float值 = 10.0System.out.println(in.floatValue());//将十进制转二进制String binaryString = Integer.toBinaryString(10); //用于哈夫曼压缩和解压//将十进制转十六进制String hexString = Integer.toHexString(10);System.out.println(&quot;转二进制：&quot;+binaryString);System.out.println(&quot;转十六进制：&quot;+hexString); 2.Character类 Character 类在对象中包装一个基本类型 char 的值。 自动选择输出的类型 *输出数组中的数字：***Character.isDigit(value) ** *输出数组中的字母：***Character.isLetter(value) ** *输出数组中的空格：***Character.isWhitespace(value) ** *输出数组中的大写：***Character.isUpperCase(value) ** 12345678910111213141516char[] ch = &#123;&#x27;#&#x27;,&#x27;7&#x27;,&#x27;b&#x27;,&#x27;A&#x27;,&#x27; &#x27;&#125;; for(int i=0;i&lt;ch.length;i++) &#123; char value = ch[i]; if(Character.isDigit(value)) &#123; System.out.println(value+&quot;这是一个数字&quot;); &#125; if(Character.isLetter(value)) &#123; System.out.println(value+&quot;这是一个字母&quot;); &#125; if(Character.isWhitespace(value)) &#123; System.out.println(value+&quot;这是一个空格&quot;); &#125; if(Character.isUpperCase(value)) &#123; System.out.println(value+&quot;这是一个大写&quot;); &#125; &#125; 3.堆和常量池 12345678910111213141516171819 //length()是方法，length是属性 String s = &quot;hello你好&quot;; int length = s.length(); //字符串的比较 //堆中开辟两个不同的空间 String s1 = new String(&quot;hello&quot;); String s2 = new String(&quot;hello&quot;); //返回false，因为地址不同 System.out.println(s1==s2); //常量池中共用同一个常量 String s3 = &quot;hello&quot;; String s4 = &quot;hello&quot;; //返回true System.out.println(s3==s4); //返回false，s1位于堆，s3位于常量池，地址不相同 System.out.println(s1==s3); 4.String类 将byte转为char后连接成String字符串 123byte[] b = &#123;97,98,99,100&#125;;String s1 = new String(b);System.out.println(s1); 编码：中文 GBK中占2个字节，UTF-8中占3个字节 String.getBytes(“UTF-8&#x2F;GBK”) 123456789101112String str = &quot;word你好&quot;;//编码： 中文 GBK中占2个字节，UTF-8中占3个字节byte[] bytes1 = str.getBytes(&quot;UTF-8&quot;);for(byte by:bytes1) &#123; System.out.print(by+&quot;,&quot;);&#125;System.out.println();byte[] bytes2 = str.getBytes(&quot;GBK&quot;);for(byte by:bytes2) &#123; System.out.print(by+&quot;,&quot;);&#125;System.out.println(); 解码： 12345//解码String s2 = new String(bytes1,&quot;UTF-8&quot;);System.out.println(s2);//解码 指定范围 从bytes2[1]开始，共解码2个值String s3 = new String(bytes2,1,2); 字符串转char数组 String.toCharArray() 12345//字符串转charString ch = &quot;hello&quot;;char[] charArray = ch.toCharArray();for(char c:charArray) &#123; System.out.print(c+&quot;,&quot;); 5.Split方法 将字符串通过“字符”切割成String[]数组元素 String.split(“CHAR”) 123456789101112131415//题目：String s = &quot;10,12;23,34,15;6,7,8&quot;; 请将s字符串解析后放入到二维数组中String s = &quot;10,12;23,34,15;6,7,8&quot;;String[] s1 = s.split(&quot;;&quot;);String[][] result = new String[s1.length][];for(int i=0;i&lt;s1.length;i++) &#123; String[] s2 = s1[i].split(&quot;,&quot;); result[i] = s2; &#125;for(String[] arr1:result) &#123; for(String arr2:arr1) &#123; System.out.print(arr2+&quot;\\t&quot;); &#125; System.out.println();&#125; 6.e-Mail案例 项目要求： 1234567/**合法邮箱规则：有且仅有一个@和.@在.之前且@不能是第一位 . 不能是最后一位@与.不能相邻新浪邮箱应当以yc@sina.com*/ 源码： 查找字符所在字符串位置的下标：String.indexOf(“CHAR”) 截取字符串：String.substring(INT,INT) 12345678910111213141516 Scanner sc = new Scanner(System.in); System.out.println(&quot;请输入邮箱地址：&quot;); String email = sc.nextLine(); //String.indexOf 用于查找字符所在字符串的位置 int atIndex = email.indexOf(&quot;@&quot;); int doIndex = email.indexOf(&quot;.&quot;); if(atIndex==-1) &#123; throw new RuntimeException(&quot;邮箱格式不正确，@位置不对&quot;); &#125;; if(doIndex&lt;=atIndex+1) &#123; throw new RuntimeException(&quot;邮箱格式不正确，.位置不对&quot;); &#125; //String.substring 用于截取字符串 String userName = email.substring(0,atIndex); String webStie = email.substring(atIndex+1,doIndex); System.out.println(webStie+&quot;欢迎您&quot;+userName); 7.StringBuffer类 线程安全的可变字符序列。 可变字符串，当字符发生变化时，不会重新创建对象 添加字符操作 StringBuffer.append(“CHAR”) 123456//append()使用StringBuffer sb = new StringBuffer(&quot;hello&quot;);System.out.println(sb.hashCode());//添加sb.append(&quot;a&quot;);System.out.println(sb.hashCode()); 调用倒转方法后，原sb也发生过改变 StringBuffer.reverse() 1234//reverse()使用//调用倒转方法后，原sb也发生过改变StringBuffer bs = sb.reverse();System.out.println(bs); 将StringBuffer转化为String StringBuffer.toString(); 1String s = sb.toString(); 8.MyString案例 模拟一些已经实现的类的功能 **字符串匹配：String.**compareTo(STRING) 如果相等则返回1，否则返回两字符串中字符差值，并且不再比较之后字符 从后向前匹配：String.endWith(STRING) 从前向后匹配：String.stateWith(STRING) 查找字符，从i开始：String.indexOf(INT,INT) Class MyString 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package com.hooy.mystring;public class MyString implements Comparable&#123; private char[] ch; public MyString() &#123; super(); &#125; public MyString(char[] ch) &#123; super(); this.ch = ch; &#125; private void protect(Object o) &#123; if(o==null) &#123; throw new RuntimeException(&quot;待比较的对象不能为空&quot;); &#125; if(!(o instanceof MyString)) &#123; throw new IllegalArgumentException(&quot;待比较的对象不是MyString&quot;); &#125; &#125; @Override public int compareTo(Object o) &#123; protect(o); MyString ms = (MyString)o; if(this.ch.length!=ms.ch.length) &#123; return -1; &#125; for(int i=0;i&lt;ch.length;i++) &#123; if(this.ch[i]==ms.ch[i]) &#123; continue; &#125; return this.ch[i] - ms.ch[i]; &#125; return 0; &#125; public boolean endWith(Object o) &#123; protect(o); MyString ms = (MyString)o; int thisLength = ch.length; int oLength = ms.ch.length; for(int i=1;i&lt;=ms.ch.length;i++) &#123; if(this.ch[thisLength-i]!=ms.ch[oLength-i]) &#123; return false; &#125; &#125; return true; &#125; public boolean startWith(Object o) &#123; protect(o); MyString ms = (MyString)o; for(int i=0;i&lt;ms.ch.length;i++) &#123; if(this.ch[i]!=ms.ch[i]) &#123; return false; &#125; &#125; return true; &#125; public int indexOf(int ch) &#123; return indexOf(ch,0); &#125; private int indexOf(int ch, int fromIndex) &#123; for(int i=fromIndex;i&lt;this.ch.length;i++) &#123; if(ch==this.ch[i]) &#123; return i; &#125; &#125; return -1; &#125;&#125; Main MyString_Test 123456789101112131415161718192021222324252627package com.hooy.mystring;import java.util.Scanner;public class MyString_Test &#123; private static Scanner sc = new Scanner(System.in); public static void main(String[] args) &#123; char[] ch1 = &#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;; char[] ch2 = &#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;&#125;; MyString ms1 = new MyString(ch1); MyString ms2 = new MyString(ch2); System.out.println(ms1.compareTo(ms2)); System.out.println(&quot;请输入网址：&quot;); String url = sc.nextLine(); MyString ms3 = new MyString(url.toCharArray()); MyString ms4 = new MyString(&quot;.com&quot;.toCharArray()); MyString ms5 = new MyString(&quot;www&quot;.toCharArray()); if(ms3.endWith(ms4)) &#123; System.out.println(&quot;.com是商业网址&quot;); &#125; if(ms3.startWith(ms5)) &#123; System.out.println(&quot;www是万维网&quot;); &#125; System.out.println(ms2.indexOf(99)); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第31次课程","slug":"技术向/Java/源辰课程记录/第31次课程","date":"2019-07-06T16:00:00.000Z","updated":"2022-05-11T01:14:08.319Z","comments":true,"path":"技术向/Java/源辰课程记录/第31次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC31%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第31次课程 07.07.2019 **内容 ** Java_API_Exception处理[蒋斌] 1.异常处理 1.1try：异常捕获 仅写一个，最开始的位置。内部放入可能产生异常的代码。 1.2catch：捕获后解决异常 可写多个，可对捕获的不同异常进行处理。最后catch（Exception）{代码}，用于捕获未预期的异常的通用处理方式。 1.3flinally：最终 仅写一个，放在最后，无论是否报错都将执行内代码，通常用于写资源释放代码。 try{ ** 可能产生异常的代码** ** }catch(异常类型){** ** 异常后的处理代码** ** }finally{** ** &#x2F;&#x2F;多用于资源释放的代码** ** 无论是否报异常，都将执行的代码** ** }** 程序运行时产生的常见异常位于：RuntimeException ** ** 详见：JDK_API文档 异常（Exception）两类：运行异常 和 编译异常（非处理不可的异常） **2.**ArithmeticException（算数运算异常） 1.当除数为0时，这种情况比较常见，所以我们在进行除法运算之前先判断下除数是否为0 2.如果运算的结果是无线循环的小数，并且在除的时候没有对结果设置精确的位数，这时就会抛出异常，这种情况比较容易被忽视，抛出异常后一般都会考虑是否为0，因此，要特别注意！！ 3.当我们设置了结果的舍入模式是：ROUND_UNNECESSARY模式时，如果确保了计算的结果是精确的，则不会抛出异常，否则，就会抛出ArithmeticException异常！ 实验代码 12345678910111213141516171819package com.hooy.exception;import java.util.Scanner;public class SuanShu_exception &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); System.out.println(&quot;请输入两个数字：&quot;); int a = sc.nextInt(); int b = sc.nextInt(); try &#123; //尝试：放入可能报异常的代码 System.out.println(&quot;值：&quot;+a/b); &#125;catch(ArithmeticException e) &#123; //ArithmeticException 异常的算数运算 //出现异常则执行catch中的代码，否则不执行 System.out.println(&quot;errer:除数不可为零&quot;); &#125; System.out.println(&quot;程序正常结束&quot;); &#125;&#125; 3.NullPointer****Exception（空指针异常） 4.ArrayIndexOutOfBoundsException（越界异常） 5.多异常捕获 实验代码 1234567891011121314151617181920212223242526272829package com.hooy.exception;import java.util.Scanner;public class Exception_Test &#123; public static void main(String[] args) &#123; int[] arr = new int[2]; Scanner sc = new Scanner(System.in); try &#123; int count = 0; while(count&lt;=arr.length) &#123;//&lt;= 触发越界异常 System.out.println(&quot;请输入第&quot;+(count+1)+&quot;个数&quot;); //第二次键入0 触发除数为零异常 //键入非数字字符 触发数字转换异常 arr[count] = Integer.parseInt(sc.nextLine()); count++; &#125; System.out.println(arr[0]+&quot;/&quot;+arr[1]+&quot;=&quot;+arr[0]/arr[1]); //不同的catch用于捕获不同的异常 &#125;catch(ArithmeticException e)&#123; System.out.println(&quot;除数为零异常&quot;); &#125;catch(NumberFormatException e) &#123; System.out.println(&quot;数字转化异常&quot;); &#125;catch(ArrayIndexOutOfBoundsException e) &#123; System.out.println(&quot;数组越界异常&quot;); &#125;catch(Exception e) &#123;//Exception等级最高，包含各种异常，因此放在最后作为捕获异常的最后防线 System.out.println(&quot;最高级异常&quot;); &#125; System.out.println(&quot;程序正常结束&quot;); &#125;&#125; 6.throw（异常抛出） 将异常抛给调用这个方法的类，让别人来处理。 单个代码块中仅一条throw，执行到throw即刻停止继续执行当前方法。 Class Person &#x2F;&#x2F;含有throw的类 123456789101112131415161718192021222324252627package com.hooy.exception;public class Person &#123; private String name; private int age; public Person() &#123;&#125; public Person(String name,int age) &#123; this.name = name; this.age = age; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) throws Exception &#123; if(age&lt;0 || age&gt;200) &#123; //将异常抛出，让调用者处理这个异常 throw new Exception(&quot;年龄不合法&quot;); &#125; this.age = age; &#125; &#125; Main Person_Test &#x2F;&#x2F;处理捕获Person类中的异常 12345678910111213package com.hooy.exception;public class Person_Test &#123; public static void main(String[] args) &#123; Person p = new Person(); //由调用setAge方法的类来捕获异常，并做出处理方式 try &#123; p.setAge(-1); &#125; catch (Exception e) &#123; e.printStackTrace(); System.out.println(&quot;异常&quot;); &#125; &#125;&#125; 7.自定义异常 自定义一个异常，并继承Exception（相当于隶属于Exception旗下） **Class **AgeException 1234567package com.hooy.exception;public class AgeException extends Exception&#123; public AgeException() &#123;&#125; public AgeException(String msg) &#123; super(msg); &#125;&#125; Main Person 可将用于Person类 1234567891011121314151617181920212223242526package com.hooy.exception;public class Person &#123; private String name; private int age; public Person() &#123;&#125; public Person(String name,int age) &#123; this.name = name; this.age = age; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) throws AgeException &#123; if(age&lt;0 || age&gt;200) &#123; //将异常抛出，让调用者处理这个异常 throw new AgeException(&quot;年龄不合法&quot;); &#125; this.age = age; &#125;&#125; 8.关于异常的Demo 如果某异常继承RuntimeException，则该异常可以不被声明 **Class **LanPingException 1234567package Demo;public class LanPingException extends Exception&#123; public LanPingException() &#123;&#125; public LanPingException(String msg) &#123; super(msg); &#125;&#125; **Class **MaoYanException 1234567package Demo;public class MaoYanException extends Exception&#123; public MaoYanException() &#123;&#125; public MaoYanException(String msg) &#123; super(msg); &#125;&#125; **Class **NoPlanException 123456package Demo;public class NoPlanException extends Exception &#123; public NoPlanException(String msg) &#123; super(msg); &#125;&#125; Class Computer 12345678910111213141516171819package Demo;public class Computer &#123; private int state = 1; //电脑开机 public void run() throws LanPingException, MaoYanException &#123; if(state==1) &#123; throw new LanPingException(&quot;蓝屏故障&quot;); &#125; if(state==2) &#123; throw new MaoYanException(&quot;机器冒烟&quot;); &#125; System.out.println(&quot;电脑正常运行中！&quot;); &#125; //电脑重启 public void reset() &#123; state = 2; //配置文件-&gt; 0:恢复正常 2：电脑冒烟 1：电脑蓝屏(陷入蓝屏重启循环，递归崩溃，不建议尝试) System.out.println(&quot;已重启&quot;); &#125;&#125; Class User 1234567891011121314151617181920212223242526package Demo;public class User &#123; private Computer computer; public User(Computer com) &#123; this.computer = com; &#125; public void prelect() throws NoPlanException &#123; try &#123; computer.run(); &#125; catch (LanPingException e) &#123; System.out.println(e.getMessage()); computer.reset(); //重启后尝试开机 prelect(); &#125; catch (MaoYanException e) &#123; System.out.println(e.getMessage()); test(); throw new NoPlanException(&quot;尊敬的领导，电脑坏了，我要下班&quot;); &#125; &#125; private void test() &#123; System.out.println(&quot;电脑冒烟，上自习&quot;); &#125;&#125; **Main **Exception_Test 123456789101112package Demo;public class Exception_Test &#123; public static void main(String[] args) &#123; User user = new User(new Computer()); try &#123; user.prelect(); &#125; catch (NoPlanException e) &#123; System.err.println(e.getMessage()); System.out.println(&quot;换台电脑继续上课&quot;); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第29次课程","slug":"技术向/Java/源辰课程记录/第29次课程","date":"2019-07-05T16:00:00.000Z","updated":"2022-05-11T01:13:43.948Z","comments":true,"path":"技术向/Java/源辰课程记录/第29次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC29%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第29次课程 07.06.2019 **内容 ** ** Java_面向对象部分复习[蒋斌]** 1.[游戏]大富翁_续 Class Gamepackage com.hooy.homework.dfw;import java.util.Random;import java.util.Scanner;public class Game &#123; private String[] playName = new String[2]; private Map map; private int posplay1; private int posplay2; private String[] goAndStop = new String[2]; private Scanner sc = new Scanner(System.in); private Random r = new Random(); public void init() &#123; map = new Map(); posplay1 = 0; posplay2 = 0; goAndStop[0] = &quot;on&quot;; goAndStop[1] = &quot;on&quot;; &#125; public void start() &#123; init(); System.out.println(&quot;========================================&quot;); System.out.println(&quot;|| ||&quot;); System.out.println(&quot;|| 大 富 翁 ||&quot;); System.out.println(&quot;|| ||&quot;); System.out.println(&quot;========================================&quot;); System.out.println(&quot;\\n&quot;); System.out.println(&quot;XXXXXXXXXXXXXXXX 双人对战 XXXXXXXXXXXXXXXX&quot;); System.out.println(&quot;\\n&quot;); System.out.println(&quot;请选择角色：1.钱夫人 2.大老千 3.阿依公主 4.贝哥&quot;); System.out.println(&quot;请选择一号玩家角色：&quot;); int role1 = sc.nextInt(); int role2 = 0; do &#123; System.out.println(&quot;请选择二号玩家角色：&quot;); role2 = sc.nextInt(); &#125;while(role1==role2); sc.nextLine(); setRole(1,role1); setRole(2,role2); System.out.println(&quot;****************************************&quot;); System.out.println(&quot; Game Start &quot;); System.out.println(&quot;****************************************&quot;); System.out.println(playName[0]+&quot;,您的代号：A&quot;); System.out.println(playName[1]+&quot;,您的代号：B&quot;); System.out.println(&quot;图例：¤幸运转盘 ★地雷位置 ■暂停位置 〓时空隧道 ∷普通&quot;); map.showMap(posplay1,posplay2); //游戏 play(); &#125; private void play() &#123; while(true) &#123; System.out.println(); if(&quot;on&quot;.equals(goAndStop[0])) &#123; int step = throwshifter(1); System.out.println(&quot;\\n骰子数&quot;+step); posplay1 += step; if(posplay1&lt;100) &#123; //调用游戏规则方法 posplay1 = gameRule(1,posplay1); &#125;else &#123; System.out.println(&quot;恭喜：&quot;+playName[0]+&quot;，奔跑第一名！&quot;); break; &#125; &#125;else &#123; System.out.println(&quot;停止一次&quot;); goAndStop[0] = &quot;on&quot;; &#125; System.out.println(&quot;您当前位置：&quot;+posplay1); map.showMap(posplay1,posplay2); System.out.println(); if(&quot;on&quot;.equals(goAndStop[1])) &#123; int step = throwshifter(2); System.out.println(&quot;\\n骰子数&quot;+step); posplay2 += step; if(posplay2&lt;100) &#123; //调用游戏规则方法 posplay2 = gameRule(2,posplay2); &#125;else &#123; System.out.println(&quot;恭喜：&quot;+playName[1]+&quot;，奔跑第一名！&quot;); break; &#125; &#125;else &#123; System.out.println(&quot;停止一次&quot;); goAndStop[1] = &quot;on&quot;; &#125; System.out.println(&quot;您当前位置：&quot;+posplay2); map.showMap(posplay1,posplay2); &#125; &#125; private int throwshifter(int i) &#123; System.out.print(playName[i-1]+&quot;请按任意键投掷骰子&quot;); sc.nextLine(); return r.nextInt(6)+1; &#125; private void setRole(int no, int role) &#123; switch(role) &#123; case 1: playName[no-1] = &quot;钱夫人&quot;; break; case 2: playName[no-1] = &quot;大老千&quot;; break; case 3: playName[no-1] = &quot;阿依公主&quot;; break; case 4: playName[no-1] = &quot;贝哥&quot;; break; default: System.out.println(&quot;请输入正确选项&quot;); &#125; &#125; public int gameRule(int player,int posplay) &#123; //幸运转盘 if(map.getMap()[posplay]==1) &#123; System.out.println(&quot;幸运转盘&quot;); map.showMap(posplay1,posplay2); int result = 0; do &#123; System.out.println(&quot;\\n1.交换 2.炸弹&quot;); result = sc.nextInt(); sc.nextLine(); switch(result) &#123; case 1: if(player==1) &#123; int temp = posplay1; posplay1 = posplay2; posplay2 = temp; return posplay1; &#125;else &#123; int temp = posplay1; posplay1 = posplay2; posplay2 = temp; return posplay2; &#125; case 2: //老师案例(存在隐含bug，不建议使用) /*if(player==1 &amp;&amp; posplay2&lt;6) &#123; posplay2 = 0; &#125;else &#123; posplay2 -= 6; &#125; if(player==2 &amp;&amp; posplay1&lt;6)&#123; posplay1 = 0; &#125;else &#123; posplay1 -= 6; &#125;*/ //老师案例(修复版) if(player==1) &#123; if(posplay2&lt;6) &#123; posplay2 = 0; &#125;else &#123; posplay2 -= 6; &#125; &#125; if(player==2) &#123; if(posplay1&lt;6) &#123; posplay1 = 0; &#125;else &#123; posplay1 -= 6; &#125; &#125; //自主案例(修复老师案例中隐含bug，推荐) /*if(player==1 &amp;&amp; posplay2&lt;6) &#123; posplay2 = 0; &#125; if(player==1 &amp;&amp; posplay2&gt;=6)&#123; posplay2 -= 6; &#125; if(player==2 &amp;&amp; posplay1&lt;6)&#123; posplay1 = 0; &#125; if(player==2 &amp;&amp; posplay1&gt;=6)&#123; posplay1 -= 6; &#125;*/ return posplay; default: System.out.println(&quot;没有这个选项&quot;); &#125; &#125;while(result&lt;1 || result&gt;2); //报错 return -1000; &#125; //地雷位置 if(map.getMap()[posplay]==2) &#123; System.out.println(&quot;地雷位置&quot;); if(posplay&lt;6) &#123; return 0; &#125; return posplay-6; &#125; //暂停 if(map.getMap()[posplay]==3) &#123; System.out.println(&quot;暂停位置&quot;); goAndStop[player-1] = &quot;off&quot;; return posplay; &#125; //时空隧道 if(map.getMap()[posplay]==4) &#123; System.out.println(&quot;时空隧道&quot;); return posplay+10; &#125; return posplay; &#125;&#125; Class Map 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394package com.hooy.homework.dfw;public class Map &#123; private int[] map = new int[100]; private int[] lucyTurn = &#123;6,23,40,55,69,83&#125;; //幸运转盘 private int[] landMine = &#123;5,13,17,33,38,50,64,80,94&#125;; //地雷位置 private int[] pause = &#123;9,27,60,93&#125;; //暂停位置 private int[] timeTunnel = &#123;20,25,45,63,72,88,90&#125;; //时空隧道 //关卡：1.幸运轮盘 2.地雷 3.暂停 4.时空隧道 0.普通 public void createMap() &#123; for(int i=0;i&lt;lucyTurn.length;i++) &#123; map[lucyTurn[i]] = 1; &#125; for(int i=0;i&lt;landMine.length;i++) &#123; map[landMine[i]] = 2; &#125; for(int i=0;i&lt;pause.length;i++) &#123; map[pause[i]] = 3; &#125; for(int i=0;i&lt;timeTunnel.length;i++) &#123; map[timeTunnel[i]] = 4; &#125; &#125; //横右向 public void showLine(int start,int end,int posplay1,int posplay2) &#123; for(int i=start;i&lt;end;i++) &#123; getGraph(i,map[i],posplay1,posplay2); &#125; &#125; //横左向 public void showLineR(int start,int end,int posplay1,int posplay2) &#123; for(int i=start;i&gt;end;i--) &#123; getGraph(i,map[i],posplay1,posplay2); &#125; &#125; //右竖 public void showRLine(int start,int end,int posplay1,int posplay2) &#123; for(int i=start;i&lt;end;i++) &#123; System.out.println(); for(int j=1;j&lt;=4;j++) &#123; System.out.print(&quot;\\t&quot;); &#125; getGraph(i,map[i],posplay1,posplay2); &#125; System.out.println(); &#125; //左竖 public void showLLine(int start,int end,int posplay1,int posplay2) &#123; for(int i=start;i&lt;end;i++) &#123; System.out.println(); getGraph(i,map[i],posplay1,posplay2); &#125; System.out.println(); &#125; private void getGraph(int i,int choice,int posplay1,int posplay2) &#123; if(i==posplay1 &amp;&amp; i==posplay2) &#123; System.out.print(&quot;@&quot;); &#125;else if(i==posplay1)&#123; System.out.print(&quot;A&quot;); &#125;else if(i==posplay2) &#123; System.out.print(&quot;B&quot;); &#125;else &#123; switch(choice) &#123; case 1: System.out.print(&quot;¤&quot;); break; case 2: System.out.print(&quot;★&quot;); break; case 3: System.out.print(&quot;■&quot;); break; case 4: System.out.print(&quot;〓&quot;); break; default: System.out.print(&quot;∷&quot;); &#125; &#125; &#125; public void showMap(int posplay1,int posplay2) &#123; createMap(); showLine(0,31,posplay1,posplay2); showRLine(31,35,posplay1,posplay2); showLineR(65,34,posplay1,posplay2); showLLine(66,69,posplay1,posplay2); showLine(69,100,posplay1,posplay2); &#125; public int[] getMap() &#123; return map; &#125;&#125; Main Test 1234567891011121314package com.hooy.homework.dfw;public class Test &#123; public static void main(String[] args) &#123; /*Map maps = new Map(); maps.createMap(); maps.showLine(0,31); maps.showRLine(31,35); maps.showLine(35,66); maps.showLLine(66,69); maps.showLine(69,100);*/ Game g = new Game(); g.start(); &#125;&#125; 最终效果图：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第30次课程","slug":"技术向/Java/源辰课程记录/第30次课程","date":"2019-07-05T16:00:00.000Z","updated":"2022-05-11T01:13:55.420Z","comments":true,"path":"技术向/Java/源辰课程记录/第30次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC30%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第30次课程 07.06.2019 **内容 ** OOP部分作业检查、复习及指导[蒋斌]","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第28次课程","slug":"技术向/Java/源辰课程记录/第28次课程","date":"2019-07-04T16:00:00.000Z","updated":"2022-05-11T01:13:29.412Z","comments":true,"path":"技术向/Java/源辰课程记录/第28次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC28%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第28次课程 07.05.2019 **内容 ** ** Java项目案例[蒋斌]** 1.[游戏]大富翁 Class Game 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293package com.hooy.dfw;import java.util.Random;import java.util.Scanner;public class Game &#123; private String[] playName = new String[2]; private Map map; private int posplay1; private int posplay2; private String[] goAndStop = new String[2]; private Scanner sc = new Scanner(System.in); private Random r = new Random(); public void init() &#123; map = new Map(); posplay1 = 0; posplay2 = 0; goAndStop[0] = &quot;on&quot;; goAndStop[1] = &quot;on&quot;; &#125; public void start() &#123; init(); System.out.println(&quot;========================================&quot;); System.out.println(&quot;|| ||&quot;); System.out.println(&quot;|| 大 富 翁 ||&quot;); System.out.println(&quot;|| ||&quot;); System.out.println(&quot;========================================&quot;); System.out.println(&quot;\\n\\n&quot;); System.out.println(&quot;XXXXXXXXXXXXXXXX 双人对战 XXXXXXXXXXXXXXXX&quot;); System.out.println(&quot;\\n&quot;); System.out.println(&quot;请选择角色：1.钱夫人 2.大老千 3.阿依公主 4.贝哥&quot;); System.out.println(&quot;请选择一号玩家角色：&quot;); int role1 = sc.nextInt(); int role2 = 0; do &#123; System.out.println(&quot;请选择二号玩家角色：&quot;); role2 = sc.nextInt(); &#125;while(role1==role2); setRole(1,role1); setRole(2,role2); System.out.println(&quot;****************************************&quot;); System.out.println(&quot; Game Start &quot;); System.out.println(&quot;****************************************&quot;); System.out.println(playName[0]+&quot;,您的代号：A&quot;); System.out.println(playName[1]+&quot;,您的代号：B&quot;); System.out.println(&quot;图例：¤幸运转盘 ★地雷位置 ■暂停位置 〓时空隧道 ∷普通&quot;); map.showMap(posplay1,posplay2); //游戏 play(); &#125; private void play() &#123; while(posplay1&lt;99 &amp;&amp; posplay2&lt;99) &#123; if(&quot;on&quot;.equals(goAndStop[0])) &#123; int step = throwshifter(1); System.out.println(&quot;\\n骰子数&quot;+step); System.out.println(&quot;您当前位置：&quot;+posplay1); &#125;else &#123; System.out.println(&quot;停止一次&quot;); goAndStop[0] = &quot;on&quot;; &#125; &#125; &#125; private int throwshifter(int i) &#123; System.out.println(playName[i-1]+&quot;请按任意键投掷骰子&quot;); sc.nextLine(); return r.nextInt(6)+1; &#125; private void setRole(int no, int role) &#123; switch(role) &#123; case 1: playName[no-1] = &quot;钱夫人&quot;; break; case 2: playName[no-1] = &quot;大老千&quot;; break; case 3: playName[no-1] = &quot;阿依公主&quot;; break; case 4: playName[no-1] = &quot;贝哥&quot;; break; default: System.out.println(&quot;请输入正确选项&quot;); &#125; &#125;&#125; Class Map 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485package com.hooy.dfw;public class Map &#123; int[] map = new int[100]; int[] lucyTurn = &#123;6,23,40,55,69,83&#125;; //幸运转盘 int[] landMine = &#123;5,13,17,33,38,50,64,80,94&#125;; //地雷位置 int[] pause = &#123;9,27,60,90&#125;; //暂停位置 int[] timeTunnel = &#123;20,25,45,63,72,88,90&#125;; //时空隧道 //关卡：1.幸运轮盘 2.地雷 3.暂停 4.时空隧道 0.普通 public void createMap() &#123; for(int i=0;i&lt;lucyTurn.length;i++) &#123; map[lucyTurn[i]] = 1; &#125; for(int i=0;i&lt;landMine.length;i++) &#123; map[landMine[i]] = 2; &#125; for(int i=0;i&lt;pause.length;i++) &#123; map[pause[i]] = 3; &#125; for(int i=0;i&lt;timeTunnel.length;i++) &#123; map[timeTunnel[i]] = 4; &#125; &#125; //横向 public void showLine(int start,int end,int posplay1,int posplay2) &#123; for(int i=start;i&lt;end;i++) &#123; getGraph(i,map[i],posplay1,posplay2); &#125; &#125; //右竖 public void showRLine(int start,int end,int posplay1,int posplay2) &#123; for(int i=start;i&lt;end;i++) &#123; System.out.println(); for(int j=1;j&lt;=84;j++) &#123; System.out.print(&quot; &quot;); &#125; getGraph(i,map[i],posplay1,posplay2); &#125; System.out.println(); &#125; //左竖 public void showLLine(int start,int end,int posplay1,int posplay2) &#123; for(int i=start;i&lt;end;i++) &#123; System.out.println(); getGraph(i,map[i],posplay1,posplay2); &#125; System.out.println(); &#125; private void getGraph(int i,int choice,int posplay1,int posplay2) &#123; if(i==posplay1 &amp;&amp; i==posplay2) &#123; System.out.print(&quot;@&quot;); &#125;else if(i==posplay1)&#123; System.out.print(&quot;A&quot;); &#125;else if(i==posplay2) &#123; System.out.print(&quot;B&quot;); &#125;else &#123; switch(choice) &#123; case 1: System.out.print(&quot;¤&quot;); break; case 2: System.out.print(&quot;★&quot;); break; case 3: System.out.print(&quot;■&quot;); break; case 4: System.out.print(&quot;〓&quot;); break; default: System.out.print(&quot;∷&quot;); &#125; &#125; &#125; public void showMap(int posplay1,int posplay2) &#123; createMap(); showLine(0,31,posplay1,posplay2); showRLine(31,35,posplay1,posplay2); showLine(35,66,posplay1,posplay2); showLLine(66,69,posplay1,posplay2); showLine(69,100,posplay1,posplay2); &#125;&#125; Main Test 1234567891011121314package com.hooy.dfw;public class Test &#123; public static void main(String[] args) &#123; /*Map maps = new Map(); maps.createMap(); maps.showLine(0,31); maps.showRLine(31,35); maps.showLine(35,66); maps.showLLine(66,69); maps.showLine(69,100);*/ Game g = new Game(); g.start(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第27次课程","slug":"技术向/Java/源辰课程记录/第27次课程","date":"2019-06-22T16:00:00.000Z","updated":"2022-05-11T01:13:12.536Z","comments":true,"path":"技术向/Java/源辰课程记录/第27次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC27%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第27次课程 06.23.2019 **内容 ** ** Java_interface与多态2[蒋斌]** 1.复习及练习一 **Interface **Measurable 1234package com.hooy.mbi;public interface Measurable &#123; public double meausurable(Object obj);&#125; **Class **Contair 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121package com.hooy.mbi;public class Contair &#123; private double max; private Object maxObj; private double min; private Object minObj; private double avg; private double sum; private int count; private Object[] objs = new Object[2]; private Measurable m; public Contair() &#123;&#125; public Contair(Measurable m) &#123; this.m = m; &#125; public void add(Object obj) &#123; //初始化，防止报错 if(count==0) &#123; Person init = new Person(&quot;无&quot;,0.0,0.0); maxObj = init; minObj = init; &#125; //添加过滤器 if(obj==null) &#123; //System.err.println(&quot;对象不能为空&quot;); return; &#125; if(!(obj instanceof Person)) &#123; //System.err.println(&quot;非法数据类型&quot;); return; &#125; if(((Person)obj).getWeight()&lt;=0 || ((Person)obj).getWeight()&gt;=500 || ((Person)obj).getHeight()&lt;=0 || ((Person)obj).getHeight()&gt;=3.0)&#123; //System.err.println(&quot;体重或身高参数存在异常&quot;); return; &#125; //自定义栈结构 double result = m.meausurable(obj); if(count==0) &#123; maxObj = obj; minObj = obj; max = result; min = result; &#125;else &#123; double maxResult = m.meausurable(maxObj); double minResult = m.meausurable(minObj); if(result&gt;maxResult) &#123; maxObj = obj; max = result; &#125; if(result&lt;minResult) &#123; minObj = obj; min = result; &#125; &#125; //扩容 if(count&gt;=objs.length) &#123; Object[] newObj = new Object[objs.length*2]; for(int i=0;i&lt;objs.length;i++) &#123; newObj[i] = objs[i]; &#125; objs = newObj; &#125; objs[count] = obj; count++; sum += result; avg = sum/count; &#125; public double getMax() &#123; return max; &#125; public void setMax(double max) &#123; this.max = max; &#125; public Object getMaxObj() &#123; return maxObj; &#125; public void setMaxObj(Object maxObj) &#123; this.maxObj = maxObj; &#125; public double getMin() &#123; return min; &#125; public void setMin(double min) &#123; this.min = min; &#125; public Object getMinObj() &#123; return minObj; &#125; public void setMinObj(Object minObj) &#123; this.minObj = minObj; &#125; public double getAvg() &#123; return avg; &#125; public void setAvg(double avg) &#123; this.avg = avg; &#125; public double getSum() &#123; return sum; &#125; public void setSum(double sum) &#123; this.sum = sum; &#125; public Measurable getM() &#123; return m; &#125; public void setM(Measurable m) &#123; this.m = m; &#125; public int getCount() &#123; return count; &#125;&#125; **Class **Person 1234567891011121314151617181920212223242526272829303132package com.hooy.mbi;public class Person &#123; private String name; private double weight; private double height; public Person() &#123;&#125; public Person(String name,double weight,double height) &#123; super(); this.name = name; this.weight = weight; this.height = height; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public double getWeight() &#123; return weight; &#125; public void setWeight(double weight) &#123; this.weight = weight; &#125; public double getHeight() &#123; return height; &#125; public void setHeight(double height) &#123; this.height = height; &#125; &#125; **Class **PersonMeasurable 123456789101112131415161718package com.hooy.mbi;public class PersonMeasurable implements Measurable&#123; @Override public double meausurable(Object obj) &#123; //obj不能为空 if(obj==null) &#123; throw new RuntimeException(&quot;对象不为空&quot;); &#125; //obj数据类型 应是Person类型 if(!(obj instanceof Person)) &#123; throw new RuntimeException(&quot;非法数据类型&quot;); &#125; //将Object类型强制转换为Person类型 Person p = (Person)obj; double bmi = p.getWeight()/(p.getHeight()*p.getHeight()); return bmi; &#125;&#125; Main Test 12345678910111213141516171819202122package com.hooy.mbi;import java.util.Random;public class Test &#123; public static void main(String[] args) &#123; Contair cont = new Contair(new PersonMeasurable()); Person p1 = new Person(&quot;张三&quot;,100,-10); Person p2 = new Person(&quot;李四&quot;,80,1.5); Person p3 = new Person(&quot;王五&quot;,-20,1.6); Person p4 = new Person(&quot;麻六&quot;,160,1.6); Random p = new Random(); cont.add(p1); cont.add(p); cont.add(p3); cont.add(p4); System.out.println(&quot;bmi最大：&quot;+cont.getMax()); System.out.println(&quot;bmi最小：&quot;+cont.getMin()); System.out.println(&quot;bmi平均：&quot;+cont.getAvg()); System.out.println(&quot;bmi总计：&quot;+cont.getSum()); System.out.println(&quot;最肥的是：&quot;+((Person)cont.getMaxObj()).getName()); System.out.println(&quot;最瘦的是：&quot;+((Person)cont.getMinObj()).getName()); &#125;&#125; 2.复习及练习二 Interface Info 1234package com.hooy.pointer;public interface Info &#123; public String getInfo();&#125; Abstract Printer 1234package com.hooy.pointer;public abstract class Printer &#123; public abstract void pointer(Info inf);&#125; **Class **BlackPrinter 1234567package com.hooy.pointer;public class BlackPrinter extends Printer &#123; @Override public void pointer(Info inf) &#123; System.out.println(&quot;黑白打印&quot;+inf.getInfo()); &#125;&#125; **Class **ColorPrinter 12345678package com.hooy.pointer;public class ColorPrinter extends Printer&#123; @Override public void pointer(Info inf) &#123; System.out.println(&quot;彩色打印&quot;+inf.getInfo()); &#125;&#125; **Class **Company 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package com.hooy.pointer;public class Company implements Info&#123; private String name; private String date; private Printer p; private int count; public Employee[] emps = new Employee[2]; public Company(String name, String date) &#123; super(); this.name = name; this.date = date; &#125; //不同价格打印机 public void buy(int money) &#123; if(money&lt;1000) &#123; p = new BlackPrinter(); &#125;else &#123; p = new ColorPrinter(); &#125; &#125; //将员工添加入编制 public void add(Employee emp) &#123; if(count&gt;=emps.length) &#123; Employee[] newEmps = new Employee[emps.length*2]; for(int i=0;i&lt;emps.length;i++) &#123; newEmps[i] = emps[i]; &#125; emps = newEmps; &#125; emps[count] = emp; count++; &#125; //公司使用打印机 public void printComp() &#123; p.pointer(this); &#125; //员工使用打印机 public void printEmps() &#123; System.out.println(&quot;本公司员工：&quot;); for(int i=0;i&lt;getCount();i++) &#123; p.pointer(emps[i]); &#125; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getDate() &#123; return date; &#125; public void setDate(String date) &#123; this.date = date; &#125; @Override public String getInfo() &#123; return this.getName()+&quot;创建于：&quot;+this.getDate(); &#125; public int getCount() &#123; return count; &#125;&#125; **Class **Employee 1234567891011121314151617181920212223242526272829package com.hooy.pointer;public class Employee implements Info&#123; private String name; private int age; public Employee() &#123; super(); &#125; public Employee(String name,int age) &#123; super(); this.name = name; this.age = age; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; @Override public String getInfo() &#123; return this.getName()+&quot;年龄：&quot;+this.getAge(); &#125;&#125; Main Test 1234567891011121314151617181920212223package com.hooy.pointer;public class Test &#123; public static void main(String[] args) &#123; //创建公司 Company com = new Company(&quot;源辰&quot;,&quot;2010-10-10&quot;); //公司购买打印机 com.buy(1000); //公司使用打印机 com.printComp(); //创建员工 Employee emps1 = new Employee(&quot;张三&quot;,20); Employee emps2 = new Employee(&quot;张三&quot;,20); Employee emps3 = new Employee(&quot;张三&quot;,20); Employee emps4 = new Employee(&quot;张三&quot;,20); //将员工添加入公司编制 com.add(emps1); com.add(emps2); com.add(emps3); com.add(emps4); //员工使用打印机 com.printEmps(); &#125;&#125; 3.复习及练习三 **Interface **Judage 1234package com.hooy.teacher;public interface Judage &#123; public void judage();&#125; Class MathTeacher 1234567package com.hooy.teacher;public class MathJudage implements Judage&#123; @Override public void judage() &#123; System.out.println(&quot;请问1+1=?&quot;); &#125;&#125; Class Teacher 1234567891011121314151617181920212223242526272829303132333435package com.hooy.teacher;public class Teacher &#123; private String name; private String course; public Teacher() &#123; super(); &#125; public Teacher(String name,String course) &#123; super(); this.name = name; this.course = course; &#125; public void selfIntroduce() &#123; System.out.println(&quot;我是&quot;+name+&quot;，所教科目：&quot;+course); &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; if(name==null || &quot;&quot;.equals(name)) &#123; this.name = &quot;匿名&quot;; &#125; this.name = name; &#125; public String getCourse() &#123; return course; &#125; public void setCourse(String course) &#123; if(course==null || &quot;&quot;.equals(&quot;&quot;)) &#123; this.course = &quot;百科&quot;; &#125; this.course = course; &#125;&#125; **Class **Examiner 12345678package com.hooy.teacher;public class Examiner &#123; //形参内可以为接口类型 public void judage(Teacher t,Judage judage) &#123; t.selfIntroduce(); judage.judage(); &#125;&#125; Main Test 123456789package com.hooy.teacher;public class Test &#123; public static void main(String[] args) &#123; Teacher t = new Teacher(&quot;张三&quot;,&quot;数学&quot;); MathJudage mj = new MathJudage(); Examiner ex = new Examiner(); ex.judage(t, mj); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第26次课程","slug":"技术向/Java/源辰课程记录/第26次课程","date":"2019-06-20T16:00:00.000Z","updated":"2022-05-11T01:13:01.124Z","comments":true,"path":"技术向/Java/源辰课程记录/第26次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC26%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第26次课程 06.21.2019 **内容 ** ** Java_interface与多态1[蒋斌]** 1.蜘蛛网扑克牌[排序功能] 知识点： 字符串内字符截取 将字符串内的数字转化为 数字 12345String name = &quot;1-2&quot;;//字符串内字符截取//将字符串内的数字转化为 数字int value = Integer.parseInt(name.substring(0,1);获取值：value = 1; 自制排序功能（最直观）： 190620Z.zip Class Main 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146import java.awt.*;import java.util.Random;import javax.sql.CommonDataSource;import javax.swing.*;public class Main extends JFrame&#123; private Container contentPane; private Card[] cards = new Card[56]; //创建三个玩家 private CardsContair[] playContair = new CardsContair[3]; //预留地主牌 private CardsContair landLord = new CardsContair(); public void start() &#123; init(); cardInit(); for(int i=0;i&lt;playContair.length;i++) &#123; Common.sort(playContair[i]); &#125; for(int j=0;j&lt;playContair[0].c.length;j++) &#123; Common.move(playContair[0].c[j], playContair[0].c[j].getLocation(), new Point(50,60+j*20)); contentPane.setComponentZOrder(playContair[0].c[j], 0); &#125; for(int j=0;j&lt;playContair[1].c.length;j++) &#123; Common.move(playContair[1].c[j], playContair[1].c[j].getLocation(), new Point(180+j*25,450)); contentPane.setComponentZOrder(playContair[1].c[j], 0); &#125; for(int j=0;j&lt;playContair[2].c.length;j++) &#123; Common.move(playContair[2].c[j], playContair[2].c[j].getLocation(), new Point(700,60+j*20)); contentPane.setComponentZOrder(playContair[2].c[j], 0); &#125; &#125; public void init()&#123; //设置窗口大小 this.setSize(830, 630); //关闭窗口即终止程序 this.setDefaultCloseOperation(3); //窗口居中 this.setLocationRelativeTo(null); //空布局 this.setLayout(null); //初始化容器 contentPane = this.getContentPane(); //设置容器背景颜色(R,G,B) contentPane.setBackground(new Color(0,112,26)); //窗口显示(非隐藏) this.setVisible(true); &#125; public void cardInit() &#123; int count = 1; for(int i=1;i&lt;=5;i++) &#123; for(int j=1;j&lt;=13;j++) &#123; if(i==5&amp;&amp;j&gt;=3) &#123; break; &#125;else &#123; //设置权值(power) if(i==5 &amp;&amp; j==2) &#123; cards[count] = new Card(i+&quot;-&quot;+j,false,17); //控件的位置 cards[count].setLocation(300+(i*20), 50); //将cards[count]控件添加到contentPane容器上 contentPane.add(cards[count]); count++; continue; &#125; if(i==5 &amp;&amp; j==1) &#123; cards[count] = new Card(i+&quot;-&quot;+j,false,16); //控件的位置 cards[count].setLocation(300+(i*20), 50); //将cards[count]控件添加到contentPane容器上 contentPane.add(cards[count]); count++; continue; &#125; if(j==2) &#123; cards[count] = new Card(i+&quot;-&quot;+j,false,15); //控件的位置 cards[count].setLocation(300+(i*20), 50); //将cards[count]控件添加到contentPane容器上 contentPane.add(cards[count]); count++; continue; &#125; if(j==1) &#123; cards[count] = new Card(i+&quot;-&quot;+j,false,14); //控件的位置 cards[count].setLocation(300+(i*20), 50); //将cards[count]控件添加到contentPane容器上 contentPane.add(cards[count]); count++; continue; &#125; cards[count] = new Card(i+&quot;-&quot;+j,false,j); //控件的位置 cards[count].setLocation(300+(i*20), 50); //将cards[count]控件添加到contentPane容器上 contentPane.add(cards[count]); count++; &#125; &#125; &#125; //洗牌 Random r = new Random(); for(int i=0;i&lt;1000;i++) &#123; int a = r.nextInt(54)+1; int b = r.nextInt(54)+1; Card temp = cards[a]; cards[a] = cards[b]; cards[b] = temp; &#125; for(int i=0;i&lt;3;i++) &#123; playContair[i] = new CardsContair(); &#125; //发牌 for(int i=1;i&lt;=54;i++) &#123; if(i&gt;=52) &#123; landLord.add(cards[i]); Common.move(cards[i], cards[i].getLocation(), new Point(300+(i-52)*80,15)); continue; &#125; switch((i-1)%3) &#123; case 0: Common.move(cards[i], cards[i].getLocation(), new Point(50,60+i*7)); playContair[0].add(cards[i]); cards[i].turnFront(); break; case 1: Common.move(cards[i], cards[i].getLocation(), new Point(180+i*7,450)); playContair[1].add(cards[i]); cards[i].turnFront(); break; case 2: Common.move(cards[i], cards[i].getLocation(), new Point(700,60+i*7)); playContair[2].add(cards[i]); cards[i].turnFront(); break; &#125; contentPane.setComponentZOrder(cards[i], 0); &#125; &#125;&#125; Class Common 1234567891011121314151617181920212223242526272829303132333435363738394041import java.awt.Point;public class Common &#123; //移动效果方法，用于发牌 public static void move(Card card,Point from,Point to) &#123; if(to.x != from.x) &#123; double k = (1.0) * (to.y - from.y) / (to.x - from.x); double b = to.y - to.x * k; int flag = 0; if(from.x &lt; to.x) &#123; flag = 10; &#125;else &#123; flag = -10; &#125; for(int i=from.x;Math.abs(i-to.x)&gt;20;i+=flag) &#123; double y = k * i + b; card.setLocation(i,(int)y); try &#123; //延迟3s 完成 Thread.sleep(3); &#125;catch(InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; //位置校准 card.setLocation(to); &#125; //排序 public static void sort(CardsContair playContair) &#123; for(int i=0;i&lt;playContair.getSize()-1;i++) &#123; for(int j=0;j&lt;playContair.getSize()-i-1;j++) &#123; if(playContair.c[j].getPower()&gt;playContair.c[j+1].getPower()) &#123; Card temp = playContair.c[j]; playContair.c[j] = playContair.c[j+1]; playContair.c[j+1] = temp; &#125; &#125; &#125; &#125;&#125; Class Card 123456789101112131415161718192021222324252627282930313233343536373839import javax.swing.*;public class Card extends JLabel&#123; private String name; private boolean up; //private int flower; //private int number; private int power; public Card()&#123; &#125; public Card(String name,boolean up,int power) &#123; this.name = name; this.up = up; this.power = power; //设置牌的高度和宽度 this.setSize(71,96); if(up) &#123; //正面 turnFront(); &#125;else &#123; //反面 turnRear(); &#125; &#125; //正面贴图 public void turnFront() &#123; this.setIcon(new ImageIcon(&quot;images/&quot;+name+&quot;.gif&quot;)); &#125; //反面贴图 public void turnRear() &#123; this.setIcon(new ImageIcon(&quot;images/rear.gif&quot;)); &#125; public int getPower() &#123; return power; &#125;&#125; Class CardsContair 1234567891011121314151617181920212223242526272829//单个玩家public class CardsContair &#123; public Card[] c; private int index; public CardsContair()&#123; c = new Card[17]; &#125; public void add(Card card) &#123; if(index&gt;=c.length) &#123; //数组扩容 Card[] newC = new Card[c.length*2]; for(int i=0;i&lt;c.length;i++) &#123; newC[i] = c[i]; &#125; c = newC; &#125; c[index] = card; index++; &#125; public int getSize() &#123; return index; &#125; public Card[] getC() &#123; return c; &#125;&#125; Main Test 12345public class Test &#123; public static void main(String[] args) &#123; new Main().start();; &#125;&#125; 2.多态 一个类的多种形态 父类的引用指向子类：父类 变量名 &#x3D; new 子类; 实践例题1： Class Shape 12345678910111213141516171819package com.hooy.www;public class Shape &#123; //形状 public void draw() &#123; System.out.println(&quot;基本的形状&quot;); &#125;&#125;class Circls extends Shape&#123; //圆形 public void draw() &#123; System.out.println(&quot;圆形&quot;); &#125;&#125;class Square extends Shape&#123; //方形 public void draw() &#123; System.out.println(&quot;方形&quot;); &#125;&#125; Main Shape_Test 1234567package com.hooy.www;public class Shape_Test &#123; public static void main(String[] args) &#123; Shape s = new Circls(); s.draw(); &#125;&#125; 实践例题2： **Abstract **Class Plane 123456789101112131415161718192021222324252627package com.hooy.www;public abstract class Plane &#123; public abstract void fly(); //起飞 public abstract void land(); public void planeFlyandLand(Plane p) &#123; p.fly(); p.land(); &#125;&#125;class Copter extends Plane&#123; //重写 public void fly() &#123; System.out.println(&quot;垂直起飞&quot;); &#125; public void land() &#123; System.out.println(&quot;垂直降落&quot;); &#125;&#125;class Jet extends Plane&#123; //重写 public void fly() &#123; System.out.println(&quot;喷气起飞&quot;); &#125; public void land() &#123; System.out.println(&quot;喷气降落&quot;); &#125;&#125; Main Plane_Test 1234567package com.hooy.www;public class Plane_Test &#123; public static void main(String[] args) &#123; Plane p = new Jet(); p.planeFlyandLand(p); &#125;&#125; 3.接口（interface） 比抽象类更抽象 不能实例化（new） 接口里： 属性不加final也是常量，不加static也是静态。 方法不加abstract也是抽象方法。方法是抽象的，没有方法体。 实践例题1： interface Jump 12345678package com.hooy.interface_Test;//接口：制定的一种标准public interface Jump &#123; //接口内所有属性均为：final(常量) static(静态) final static int a = 10; //接口内所有方法均为：abstract(抽象) public void superJump();&#125; Main Person 123456789package com.hooy.interface_Test;public class Person implements Jump&#123; //重写：具体实现 接口Jump中的superJump方法 @Override public void superJump() &#123; System.out.println(&quot;跳的很高&quot;); &#125;&#125; 接口可以多实现 1234//例如：public class Gaode implements TalkLikeGirl,Path&#123; 类体&#125; 接口可以多继承 实践例题2： Talk **Interface **baseTalk 1234package com.hooy.Talk;public interface baseTalk &#123; public void talk(String content);&#125; **Interface ** TalkLikeGirl 1234package com.hooy.Talk;public interface TalkLikeGirl extends baseTalk&#123; public void changeTalk(String content);&#125; Interface Path 1234package com.hooy.Talk;public interface Path &#123; public void genPah(String content);&#125; Class Gaode 12345678910111213141516171819202122package com.hooy.Talk;public class Gaode implements TalkLikeGirl,Path&#123; @Override public void talk(String content) &#123; System.out.println(&quot;高德地图欢迎您&quot;); changeTalk(content); genPah(content); &#125; @Override public void genPah(String content) &#123; System.out.println(&quot;林志玲音色：林志玲为您导航！&quot;); System.out.println(content); &#125; @Override public void changeTalk(String content) &#123; //空格为分隔符，String[0] = &quot;衡阳&quot;，String[1] = &quot;北京&quot; String start = content.split(&quot; &quot;)[0]; String end = content.split(&quot; &quot;)[1]; System.out.println(start+&quot;--长沙--&quot;+end); &#125; &#125; Main Test 12345678package com.hooy.Talk;public class Test &#123; public static void main(String[] args) &#123; Gaode gd = new Gaode(); //content = &quot;衡阳 北京&quot; gd.talk(&quot;衡阳 北京&quot;); &#125;&#125; 实践例题3： 项目中使用Class（类）来实现，下节课中将用Interface（接口）来实现。 Teacher Class Teacher 123456789101112131415161718192021222324252627282930313233343536package com.hooy.teacher;public class Teacher &#123; private String name; private String course; public Teacher() &#123; super(); &#125; public Teacher(String name,String course) &#123; super(); this.name = name; this.course = course; &#125; public void selfIntroduce() &#123; System.out.println(&quot;我是&quot;+name+&quot;，所教科目：&quot;+course); &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; if(name==null || &quot;&quot;.equals(name)) &#123; this.name = &quot;匿名&quot;; &#125; this.name = name; &#125; public String getCourse() &#123; return course; &#125; public void setCourse(String course) &#123; if(course==null || &quot;&quot;.equals(&quot;&quot;)) &#123; this.course = &quot;百科&quot;; &#125; this.course = course; &#125; &#125; Class EnglishTeacher 123456789101112131415161718192021222324252627package com.hooy.teacher;public class EnglishTeacher extends Teacher &#123; //超类里已经有的成员，但权限为私有，所以需要重新创建成员 private String name; private String course; public EnglishTeacher(String name) &#123; super(); this.name = name; this.course = &quot;英语&quot;; &#125; public void selfIntroduce() &#123; System.out.println(&quot;我是&quot;+name+&quot;，所教科目：&quot;+course); &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; if(name==null || &quot;&quot;.equals(name)) &#123; this.name = &quot;匿名&quot;; &#125; this.name = name; &#125; public String getCourse() &#123; return course; &#125; &#125; Class MathTeacher 12345678910111213141516171819202122232425262728package com.hooy.teacher;public class MathTeacher extends Teacher &#123; //超类里已经有的成员，但权限为私有，所以需要重新创建成员 private String name; private String course; public MathTeacher(String name) &#123; super(); this.name = name; this.course = &quot;英语&quot;; &#125; public void selfIntroduce() &#123; System.out.println(&quot;我是&quot;+name+&quot;，所教科目：&quot;+course); &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; if(name==null || &quot;&quot;.equals(name)) &#123; this.name = &quot;匿名&quot;; &#125; this.name = name; &#125; public String getCourse() &#123; return course; &#125; &#125; **Class **Examiner 12345678910111213package com.hooy.teacher;public class Examiner &#123; public void judage(Teacher t) &#123; t.selfIntroduce(); if(&quot;数学&quot;.equals(t.getCourse()))&#123; System.out.println(&quot;1+1=?&quot;); &#125;else if(&quot;英语&quot;.equals(t.getCourse())) &#123; System.out.println(&quot;衬衫的价格?&quot;); &#125;else &#123; System.out.println(&quot;西游记作者：章承恩?&quot;); &#125; &#125;&#125; Main Test 12345678package com.hooy.teacher;public class Test &#123; public static void main(String[] args) &#123; Teacher t = new EnglishTeacher(&quot;张三&quot;); Examiner ex = new Examiner(); ex.judage(t); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第25次课程","slug":"技术向/Java/源辰课程记录/第25次课程","date":"2019-06-18T16:00:00.000Z","updated":"2022-05-11T01:12:49.094Z","comments":true,"path":"技术向/Java/源辰课程记录/第25次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC25%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第25次课程 06.19.2019 **内容 ** ** Java_OOP3_2[蒋斌]** 1.[游戏]蜘蛛王扑克牌 此为标准蜘蛛王扑克牌，不含发牌后自动排序 Class Card 123456789101112131415161718192021222324252627282930import javax.swing.*;public class Card extends JLabel&#123; private String name; private boolean up; public Card()&#123; &#125; public Card(String name,boolean up) &#123; this.name = name; this.up = up; //设置牌的高度和宽度 this.setSize(71,96); if(up) &#123; //正面 turnFront(); &#125;else &#123; //反面 turnRear(); &#125; &#125; //正面贴图 public void turnFront() &#123; this.setIcon(new ImageIcon(&quot;images/&quot;+name+&quot;.gif&quot;)); &#125; //反面贴图 public void turnRear() &#123; this.setIcon(new ImageIcon(&quot;images/rear.gif&quot;)); &#125;&#125; **Class **CardsContair 1234567891011121314151617181920212223242526//单个玩家public class CardsContair &#123; private Card[] c; private int index; public CardsContair()&#123; c = new Card[10]; &#125; public void add(Card card) &#123; if(index&gt;=c.length) &#123; //数组扩容 Card[] newC = new Card[c.length*2]; for(int i=0;i&lt;c.length;i++) &#123; newC[i] = c[i]; &#125; c = newC; &#125; c[index] = card; index++; &#125; public int getSize() &#123; return index; &#125;&#125; **Class **Common 制作移动效果时，可以借鉴move方法 1234567891011121314151617181920212223242526272829import java.awt.Point;public class Common &#123; //移动效果方法，用于发牌 public static void move(Card card,Point from,Point to) &#123; if(to.x != from.x) &#123; double k = (1.0) * (to.y - from.y) / (to.x - from.x); double b = to.y - to.x * k; int flag = 0; if(from.x &lt; to.x) &#123; flag = 10; &#125;else &#123; flag = -10; &#125; for(int i=from.x;Math.abs(i-to.x)&gt;20;i+=flag) &#123; double y = k * i + b; card.setLocation(i,(int)y); try &#123; //延迟3s 完成 Thread.sleep(3); &#125;catch(InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; //位置校准 card.setLocation(to); &#125; //排序&#125; Class Main 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394import java.awt.*;import java.util.Random;import javax.sql.CommonDataSource;import javax.swing.*;public class Main extends JFrame&#123; private Container contentPane; private Card[] cards = new Card[56]; //创建三个玩家 private CardsContair[] playContair = new CardsContair[3]; //预留地主牌 private CardsContair landLord = new CardsContair(); public void start() &#123; init(); cardInit(); &#125; public void init()&#123; //设置窗口大小 this.setSize(830, 630); //关闭窗口即终止程序 this.setDefaultCloseOperation(3); //窗口居中 this.setLocationRelativeTo(null); //空布局 this.setLayout(null); //初始化容器 contentPane = this.getContentPane(); //设置容器背景颜色(R,G,B) contentPane.setBackground(new Color(0,112,26)); //窗口显示(非隐藏) this.setVisible(true); &#125; public void cardInit() &#123; int count = 1; for(int i=1;i&lt;=5;i++) &#123; for(int j=1;j&lt;=13;j++) &#123; if(i==5&amp;&amp;j&gt;=3) &#123; break; &#125;else &#123; cards[count] = new Card(i+&quot;-&quot;+j,false); //控件的位置 cards[count].setLocation(300+(i*20), 50); //将cards[count]控件添加到contentPane容器上 contentPane.add(cards[count]); count++; &#125; &#125; &#125; //洗牌 Random r = new Random(); for(int i=0;i&lt;1000;i++) &#123; int a = r.nextInt(53)+1; int b = r.nextInt(53)+1; Card temp = cards[a]; cards[a] = cards[b]; cards[b] = temp; &#125; for(int i=0;i&lt;3;i++) &#123; playContair[i] = new CardsContair(); &#125; //发牌 for(int i=1;i&lt;=54;i++) &#123; if(i&gt;=52) &#123; landLord.add(cards[i]); Common.move(cards[i], cards[i].getLocation(), new Point(300+(i-52)*80,16)); continue; &#125; switch((i-1)%3) &#123; case 0: Common.move(cards[i], cards[i].getLocation(), new Point(50,60+i*5)); playContair[0].add(cards[i]); cards[i].turnFront(); break; case 1: Common.move(cards[i], cards[i].getLocation(), new Point(180+i*7,450)); playContair[1].add(cards[i]); cards[i].turnFront(); break; case 2: Common.move(cards[i], cards[i].getLocation(), new Point(700,60+i*5)); playContair[2].add(cards[i]); cards[i].turnFront(); break; &#125; //牌组整理 contentPane.setComponentZOrder(cards[i], 0); &#125; &#125;&#125; Main Test 12345public class Test &#123; public static void main(String[] args) &#123; new Main().start();; &#125;&#125; 效果图：","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第24次课程","slug":"技术向/Java/源辰课程记录/第24次课程","date":"2019-06-16T16:00:00.000Z","updated":"2022-05-11T01:12:35.636Z","comments":true,"path":"技术向/Java/源辰课程记录/第24次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC24%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第24次课程 06.17.2019 **内容 ** ** HTML5CSS3部分作业检查、复习及指导[蒋斌]**","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第23次课程","slug":"技术向/Java/源辰课程记录/第23次课程","date":"2019-06-04T16:00:00.000Z","updated":"2022-05-11T01:12:22.481Z","comments":true,"path":"技术向/Java/源辰课程记录/第23次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC23%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第23次课程 06.05.2019 **内容 ** CSS 说明：由于参加常宁姐婚礼（2019.06.08），因此未能参加本次课程。 知识点： HTML5标签： 引入.swf格式文件，动画效果的图片。 1&lt;embed src=&quot;film.swf&quot; /&gt; CSS3样式： 文本首行缩进两个字符。 1text-indent=30px;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第22次课程","slug":"技术向/Java/源辰课程记录/第22次课程","date":"2019-06-01T16:00:00.000Z","updated":"2022-05-11T01:12:06.423Z","comments":true,"path":"技术向/Java/源辰课程记录/第22次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC22%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第22次课程 06.02.2019 **内容 ** CSS 1.position(定位) **position : absolute（绝对定位）****relative(相对定位)**\\fixed(固定定位) ; 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; div&#123; height: 100px; width: 100px; &#125; /*position:absolute 绝对定位*/ /*脱离文档流，不占用原来位置（相当于float），可定位任意位置*/ #absolute&#123; position: absolute; top:200px; left: 200px; background: red; &#125; /*position:relative 相对定位*/ /*脱离文档流，占用原来位置，可定位任意位置*/ #relative&#123; position: relative; top:300px; left: 300px; background: blue; &#125; /*position:fixed 固定定位*/ /*脱离文档流，一直存在于屏幕的某个位置*/ #fixed&#123; position:fixed; top:400px; left: 400px; background: green; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;absolute&quot;&gt;&lt;/div&gt; &lt;div id=&quot;relative&quot;&gt;&lt;/div&gt; &lt;div id=&quot;fixed&quot;&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 2.子绝父相 子标签绝对位置，父标签相对位置 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; /*子绝父相*/ #father&#123; height: 200px; width: 200px; margin: 500px auto; background: red; position: relative; &#125; #son&#123; height: 100px; width: 100px; background: blue; position: absolute; top: 10px; left: 10px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;father&quot;&gt; &lt;div id=&quot;son&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 3.[项目]Win8,web版本 效果图： ** ** CSS CSS.css 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160*&#123; padding: 0; margin: 0;&#125;body&#123; font-family: &quot;微软雅黑&quot;; background: url(../img/1.png) no-repeat; background-size: cover; /*背景最大化*/&#125;header,footer&#123; /*群选择器*/ width: 100%; height: 40px; background: #999; /*背景颜色*/ position: fixed; /*固定定位*/ color: #fff; /*字体颜色*/ line-height: 40px; /*文字上下居中*/ text-align: center; /*文字左右居中*/ opacity: 0.8; /*半透明：80%*/ letter-spacing: 4px; /*文字间距*/&#125;header&#123; left: 0; top:0; /*距离顶部*/&#125;footer&#123; left: 0; bottom: 0; /*距离底部*/&#125;ul li&#123; list-style: none; /*去掉小圆点*/ position: relative; /*“父标签”，相对位置*/ float: left; overflow: hidden; /*区域外的部分隐藏*/&#125;ul li div&#123; width: 100%; height: 100%; color: #fff; font-size: 20px; text-align: center; line-height: 155px; position: absolute; /*“子标签”，绝对位置*/ transition: all .3s ease-in; /*过渡动画：所有方向 播放时长 由慢到快*/&#125;article&#123; margin-top: 100px; margin-left: 80px; width: 95%; height: 640px; &#125;@-webkit-keyframes start&#123; /*开场动画*/ 0%&#123;transform: translateX(400px); opacity: 0;&#125; /*过渡动画：X轴方向 不透明度*/ 100%&#123;transform: translateX(0); opacity: 1;&#125;&#125;article #coll&#123; height: 100%; width: 400px; float: left; -webkit-animation: start 2s ease-out 1 normal; /*开场动画开关：动画名称 播放时长 由快到慢 播放次数 正常播放*/&#125;article #coll ul&#123; /*后代选择器*/ width: 100%; height: 100%;&#125;.li1&#123; width: 100%; height: 24%; margin-bottom: 2%; background: red;&#125;.li1 div:first-child&#123; background: url(../img/blue.jpg);&#125;.li1 div:last-child&#123; background:url(../img/summer.jpg); top:100%;&#125;.li1:hover div&#123; /*将鼠标放在li1上时，触发伪类，div变化*/ transform: translateY(-100%);&#125;.li2&#123; width: 49%; height: 24%; background: blue;&#125;.li2 div:first-child&#123; background: blue;&#125;.li2 div:last-child&#123; background: orchid; left: -100%;&#125;.li2:hover div&#123; transform: translateX(100%);&#125;.li3&#123; width: 49%; height: 24%; margin-left: 2%; background:purple;&#125;.li3 div:first-child&#123; background: purple;&#125;.li3 div:last-child&#123; background: gold; left: 100%;&#125;.li3:hover div&#123; transform: translateX(-100%);&#125;.li4&#123; width: 49%; height: 24%; margin-top: 2%; background: yellow;&#125;.li4 div:first-child&#123; background: yellow;&#125;.li4 div:last-child&#123; background: olive; left: -100%;&#125;.li4:hover div&#123; transform: translateX(100%);&#125;.li5&#123; width: 49%; height: 24%; margin-top: 2%; margin-left: 2%; background: pink;&#125;.li5 div:first-child&#123; background: pink;&#125;.li5 div:last-child&#123; background: deeppink; left: 100%;&#125;.li5:hover div&#123; transform: translateX(-100%);&#125;.li6&#123; width: 100%; height: 24%; margin-top: 2%; background: orange;&#125;.li6 div:first-child&#123; background: url(../img/summer.jpg);&#125;.li6 div:last-child&#123; background: url(../img/blue.jpg); top:-100%;&#125;.li6:hover div&#123; transform: translateY(100%);&#125; HTML GuanWang.html 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;css/CSS.css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;header&gt;欢迎使用Win8操作系统&lt;/header&gt; &lt;article&gt; &lt;div id=&quot;coll&quot;&gt; &lt;ul&gt; &lt;li class=&quot;li1&quot;&gt; &lt;div&gt;你好&lt;/div&gt; &lt;div&gt;中国&lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;li2&quot;&gt; &lt;div&gt;你好&lt;/div&gt; &lt;div&gt;中国&lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;li3&quot;&gt; &lt;div&gt;你好&lt;/div&gt; &lt;div&gt;中国&lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;li4&quot;&gt; &lt;div&gt;你好&lt;/div&gt; &lt;div&gt;中国&lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;li5&quot;&gt; &lt;div&gt;你好&lt;/div&gt; &lt;div&gt;中国&lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;li6&quot;&gt; &lt;div&gt;你好&lt;/div&gt; &lt;div&gt;中国&lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/article&gt; &lt;footer&gt;湖南衡阳源辰信息科技有限公司&amp;copy;版权所有2014-01-01&lt;/footer&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第21次课程","slug":"技术向/Java/源辰课程记录/第21次课程","date":"2019-05-31T16:00:00.000Z","updated":"2022-05-11T01:11:54.277Z","comments":true,"path":"技术向/Java/源辰课程记录/第21次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC21%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第21次课程 06.01.2019 **内容 ** CSS 1.认识div标签 除了div标签，其他的块级元素不能嵌套块级元素。 普通的块级元素可以嵌套行内元素。 div： 1.块级元素 2.可以嵌套任何元素 3.适合做网页布局 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; span&#123; color: red; font-size: 14px; font-weight: bold; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 除了div标签，其他的块级元素不能嵌套块级元素。 普通的块级元素可以嵌套行内元素。 div： 1.块级元素 2.可以嵌套任何元素 3.适合做网页布局 --&gt; &lt;p&gt;汗滴禾&lt;span&gt;下&lt;/span&gt;土&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 2.行内标签转为块级标签 1display: block; /*可将行内标签转化为块级标签*/ 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; span&#123; display: block; /*可将行内标签转化为块级标签*/ &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 块级元素：独占一行，能够设置高度和宽度 行内元素：不独占一行，设置高度和宽度没有效果 --&gt; &lt;p&gt;块级标签&lt;/p&gt; &lt;span&gt;行内标签&lt;/span&gt; &lt;/body&gt;&lt;/html&gt; 3.div盒子布局 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; /*开头，用于消除默认外边框和内边框*/ *&#123; padding: 0; margin: 0; &#125; div&#123; /*div基本属性*/ height: 100px; /*设置高度*/ width: 100px; /*设置宽度*/ background:red; /*设置背景颜色*/ /*margin外边框用法*/ margin: 10px; /*统一设置上下左右10px*/ margin-top: 10px; /*设置距上10px*/ margin-bottom: 10px; /*设置距下10px*/ margin-left: 10px; /*设置距左10px*/ margin-right: 10px; /*设置距右10px*/ margin: 0 auto; /*距上0px，居中显示*/ /*border边框用法*/ border: 1px solid blue; /*三参数：width,style,color*/ border-width: 1px; /*设置边宽度*/ border-style: solid; /*设置边样式*/ border-color: blue; /*设置边颜色*/ border-radius: 100%; /*设置四角曲度，100%时div为圆形*/ border-top: 1px solid blue; /*单独设置上边框*/ border-bottom: 2px dashed green; /*单独设置下边框*/ border-left: 3px double yellow; /*单独设置左边框*/ border-right: 4px dotted pink; /*单独设置右边框*/ /*padding内边框用法*/ padding: 10px; /*统一设置上下左右10px*/ padding-top: 50px; /*设置距上50px*/ padding-bottom: 50px; /*设置距下50px*/ padding-left: 50px; /*设置距左50px*/ padding-right: 50px; /*设置距右50px*/ &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 4.float应用 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; #bigBox&#123; margin: 0 auto; width: 600px; &#125; #box1&#123; height: 100px; width: 600px; background: gray; &#125; #box2&#123; height: 300px; width: 300px; background: deepskyblue; float: left; &#125; #box3&#123; height: 300px; width: 300px; background: greenyellow; float: left; /*脱离文本流，在页面上浮动*/ &#125; #box4&#123; height: 100px; width: 600px; background: gray; clear: both; /*清除其他标签的float*/ &#125; p&#123; font-weight: bold; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;bigBox&quot;&gt; &lt;div id=&quot;box1&quot;&gt;&lt;p&gt;顶部（header)&lt;/p&gt;&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;&lt;p&gt;登陆（login）&lt;/p&gt;&lt;/div&gt; &lt;div id=&quot;box3&quot;&gt;&lt;p&gt;登陆说明（loginright）&lt;/p&gt;&lt;/div&gt; &lt;div id=&quot;box4&quot;&gt;&lt;p&gt;底部（footer）&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 5.[项目]菜单栏 效果图： ** ** 伪类（hover）图： ** ** 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; *&#123; padding: 0; margin: 0; &#125; #nav&#123; width: 960px; height: 50px; border: 1px solid red; margin: 100px auto; &#125; #nav ul&#123; list-style: none; /*去除小圆点*/ &#125; #nav ul li&#123; float: left; widows: 120px; height: 100%; text-align: center; /*文字左右居中*/ line-height: 50px; /*文字上下居中*/ background: purple; &#125; #nav ul li a&#123; color: white; text-decoration: none; /*去除下划线*/ display: block; width: 120px; height: 100%; &#125; #nav ul li a:hover&#123; background: #F90; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;nav&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;网站栏目&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第20次课程","slug":"技术向/Java/源辰课程记录/第20次课程","date":"2019-05-27T16:00:00.000Z","updated":"2022-05-11T01:11:31.695Z","comments":true,"path":"技术向/Java/源辰课程记录/第20次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC20%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第20次课程 05.28.2019 **内容 ** OOP 1.对象数组 Class Student 1234567891011121314151617181920212223242526272829303132333435package com.yc.bean;public class Student &#123; private int sID; private String sName; private int age; public Student(int sID, String sName, int age) &#123; super(); this.sID = sID; this.sName = sName; this.age = age; &#125; public int getsID() &#123; return sID; &#125; public void setsID(int sID) &#123; this.sID = sID; &#125; public String getsName() &#123; return sName; &#125; public void setsName(String sName) &#123; this.sName = sName; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; public String getInfo() &#123; return (&quot;学号：&quot;+this.sID+&quot;\\t姓名：&quot;+this.sName+&quot;\\t年龄：&quot;+this.age); &#125;&#125; Main Test 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394package com.yc.bean;import java.util.Random;import java.util.Scanner;public class Test &#123; private static final int MAX = 5; private static Random r = new Random(); private static Scanner sc = new Scanner(System.in); public static void main(String[] args) &#123; Student[] students = new Student[MAX]; //Init for(int i=0;i&lt;students.length;i++) &#123; students[i] = new Student(i+1,&quot;Hooy&quot;+i,r.nextInt(6)+18); &#125; //Show show(students); //Sort sortAge(students); //Show System.out.println(&quot;年龄排序：&quot;); show(students); //Sort sortName(students); //Show System.out.println(&quot;名字排序：&quot;); show(students); //Find System.out.println(&quot;请输入要查询学生名：&quot;); String toFind = sc.nextLine(); int index = binarySearch(students,toFind); System.out.println(index==-1?&quot;查无此人&quot;:&quot;此人信息：&quot;+students[index].getInfo()); &#125; //二分查找法 private static int binarySearch(Student[] students,String toFind) &#123; int low = 0; int high = students.length; int mid = 0; while(low&lt;=high) &#123; mid = (low+high)/2; if(students[mid].getsName().equals(toFind)) &#123; return mid; &#125;else if(students[mid].getsName().compareTo(toFind)&lt;0) &#123; low = mid + 1; &#125;else &#123; high = mid - 1; &#125; &#125; return -1; &#125; private static void sortName(Student[] students) &#123; if(students==null || students.length==0) &#123; System.out.println(&quot;数组为空，无法排序&quot;); return; &#125; for(int i=0;i&lt;students.length-1;i++) &#123; for(int j=0;j&lt;students.length-i-1;j++) &#123; //(名字j) - (名字j+1) &lt; 0 if(students[j].getsName().compareTo(students[j+1].getsName())&lt;0) &#123; Student temp = students[j]; students[j] = students[j+1]; students[j+1] = temp; &#125; &#125; &#125; &#125; private static void sortAge(Student[] students) &#123; if(students==null || students.length==0) &#123; System.out.println(&quot;数组为空，无法排序&quot;); return; &#125; for(int i=0;i&lt;students.length-1;i++) &#123; for(int j=0;j&lt;students.length-i-1;j++) &#123; if(students[j].getAge()&gt;students[j+1].getAge()) &#123; Student temp = students[j]; students[j] = students[j+1]; students[j+1] = temp; &#125; &#125; &#125; &#125; private static void show(Student[] students) &#123; if(students==null || students.length==0) &#123; System.out.println(&quot;数组为空，无法输出&quot;); return; &#125; for(Student arr:students) &#123; System.out.println(arr.getInfo()); &#125; &#125;&#125; 2.继承 extends 通俗讲：子类是父类功能的扩展。子类继承父类非私有成员和类。 注意关键字：extends（继承） protected（受保护的） Class Person 123456789101112131415161718192021package com.yc.bean;public class Person &#123; //在同包内都可访问,父子类可访问 protected String sName; protected int sAge; public Person() &#123; super(); &#125; public String getsName() &#123; return sName; &#125; public void setsName(String sName) &#123; this.sName = sName; &#125; public int getsAge() &#123; return sAge; &#125; public void setsAge(int sAge) &#123; this.sAge = sAge; &#125;&#125; Class Student 123456789101112131415161718192021222324252627282930313233343536373839404142package com.yc.bean;public class Student extends Person&#123; private int sID; //private String sName; //private int sAge; public Student(int sID, String sName, int sAge) &#123; super(); this.sID = sID; this.sName = sName; this.sAge = sAge; &#125; public int getsID() &#123; return sID; &#125; public void setsID(int sID) &#123; this.sID = sID; &#125; /*public String getsName() &#123; return sName; &#125; public void setsName(String sName) &#123; this.sName = sName; &#125; public int getsAge() &#123; return sAge; &#125; public void setsAge(int sAge) &#123; this.sAge = sAge; &#125;*/ public String getInfo() &#123; //子类内寻找变量 /*return (&quot;学号：&quot;+this.sID+&quot;\\t姓名：&quot;+this.sName+&quot;\\t年龄：&quot;+this.sAge);*/ //父类内寻找变量 /*return (&quot;学号：&quot;+this.sID+&quot;\\t姓名：&quot;+super.sName+&quot;\\t年龄：&quot;+super.sAge);*/ //调用父类方法 return (&quot;学号：&quot;+this.sID+&quot;\\t姓名：&quot;+this.getsName()+&quot;\\t年龄：&quot;+this.getsAge()); //父类变量为：protected /*return (&quot;学号：&quot;+sID+&quot;\\t姓名：&quot;+sName+&quot;\\t年龄：&quot;+sAge);*/ &#125;&#125; Class Teacher 123456789101112131415161718package com.yc.bean; //继承Personpublic class Teacher extends Person&#123; private double salary; public Teacher() &#123; super(); &#125; public Teacher(double salary) &#123; super(); this.salary = salary; &#125; public double getSalary() &#123; return salary; &#125; public void setSalary(double salary) &#123; this.salary = salary; &#125;&#125; 3.四种权限 ** ** 访问限制由高到低：private（私有）&gt;缺省&gt;protected（受保护）&gt;public（公有） 4.上一级 super(); &#x2F;&#x2F;也称父级 Class Father 12345678910111213package com.yc.bean;public class Father &#123; private String name; public Father() &#123; System.out.println(&quot;Father类无参构造器&quot;); &#125; public Father(String name) &#123; super(); //实例父级Object类 this.name = name; System.out.println(&quot;Father类有参构造器&quot;); &#125;&#125; Class Son 12345678910111213package com.yc.bean;public class Son extends Father&#123; private int age; public Son() &#123; super(&quot;张三&quot;); System.out.println(&quot;Son类无参构造器&quot;); &#125; public Son(String name,int age) &#123; super(name); //实例父级Father类 this.age = age; System.out.println(&quot;Son类有参构造器&quot;); &#125;&#125; Main TestSuper 123456package com.yc.bean;public class TestSuper &#123; public static void main(String[] args) &#123; new Son(&quot;smith&quot;,40); &#125;&#125; 贴士： **super()调用上一级构造器，super.**调用上一级方法。","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第19次课程","slug":"技术向/Java/源辰课程记录/第19次课程","date":"2019-05-24T16:00:00.000Z","updated":"2022-05-11T01:11:11.019Z","comments":true,"path":"技术向/Java/源辰课程记录/第19次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC19%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第19次课程 05.25.2019 **内容 ** OOP 1.[项目]扫雷 Class Point 123456789101112131415161718192021222324252627282930313233343536public class Point &#123; private int x; private int y; private int state; //状态表示方法：0b 1111 11 1 //前四位表示雷的数量： 8：1000 7：0111 6：0110... //中间两位表示当前位置打开状态： 00没开 01打开 10插旗 //最后一位表示有无雷： 0没雷 1有雷 public Point(int x, int y, int state) &#123; super(); this.x = x; this.y = y; this.state = state; &#125; public Point() &#123; super(); &#125; public int getX() &#123; return x; &#125; public void setX(int x) &#123; this.x = x; &#125; public int getY() &#123; return y; &#125; public void setY(int y) &#123; this.y = y; &#125; public int getState() &#123; return state; &#125; public void setState(int state) &#123; this.state = state; &#125;&#125; Class MineMap 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161import java.util.Random;import java.util.Scanner;public class MineMap &#123; private int width; private int height; private int mineCount; //初始化棋盘 public Point[][] getMineMap()&#123; Point[][] map = new Point[height][width]; //将Point内的State置为0 for(int i=0;i&lt;map.length;i++) &#123; for(int j=0;j&lt;map[i].length;j++) &#123; map[i][j] = new Point(i,j,0); &#125; &#125; return burnMine(map); &#125; public Point[][] burnMine(Point[][] points)&#123; Random r = new Random(); for(int i=0;i&lt;mineCount;) &#123;//i++要判断可以加雷，才++ int x = r.nextInt(height); int y = r.nextInt(width); //判断当前位置 points[x][y].getState() 是否有雷 //位运算。 /* 1000001 &amp;0000001 =0000001 */ if((points[x][y].getState()&amp;0b1)!=0b1) &#123; //无雷 i++; /* 1000000 |0000001 =1000001 */ //当前位置 points[x][y].setState(points[x][y].getState()|0b1); //上三个邻居 if(x-1&gt;=0) &#123; points[x-1][y].setState(points[x-1][y].getState()+0b1000); //左上角 if(y-1&gt;=0) &#123; points[x-1][y-1].setState(points[x-1][y-1].getState()+0b1000); &#125; //右上角 if(y+1&lt;width) &#123; points[x-1][y+1].setState(points[x-1][y+1].getState()+0b1000); &#125; &#125; //下三个邻居 if(x+1&lt;height) &#123; points[x+1][y].setState(points[x+1][y].getState()+0b1000); //左下角 if(y-1&gt;=0) &#123; points[x+1][y-1].setState(points[x+1][y-1].getState()+0b1000); &#125; //右下角 if(y+1&lt;width) &#123; points[x+1][y+1].setState(points[x+1][y+1].getState()+0b1000); &#125; &#125; //左邻居 if(y-1&gt;=0) &#123; points[x][y-1].setState(points[x][y-1].getState()+0b1000); &#125; //右邻居 if(y+1&lt;width) &#123; points[x][y+1].setState(points[x][y+1].getState()+0b1000); &#125; &#125;else &#123; //有雷 &#125; &#125; return points; &#125; //开局 默认 public MineMap() &#123; this(10,10,30); &#125; //自定义难度 public MineMap(int width, int height, int mineCount) &#123; super(); this.width = width; this.height = height; this.mineCount = mineCount; &#125; /*//选择难度 1简单/2中等/3困难 public MineMap(int difficulty) &#123; switch(difficulty) &#123; case 1: this.width = 5; this.height = 5; this.mineCount = 10; break; case 2: this.width = 10; this.height = 10; this.mineCount = 30; break; case 3: this.width = 15; this.height = 15; this.mineCount = 50; break; case 0: System.out.println(&quot;请输入高，宽，雷数(空格隔开)：&quot;); Scanner sc = new Scanner(System.in); this.height = sc.nextInt(); this.width = sc.nextInt(); this.mineCount = sc.nextInt(); break; default: System.out.println(&quot;请重新选择&quot;); &#125; &#125;*/ public int getWidth() &#123; return width; &#125; public void setWidth(int width) &#123; this.width = width; &#125; public int getHeight() &#123; return height; &#125; public void setHeight(int height) &#123; this.height = height; &#125; public int getMineCount() &#123; return mineCount; &#125; public void setMineCount(int mineCount) &#123; this.mineCount = mineCount; &#125;&#125; Class ClearMineGameimport java.util.Scanner;public class ClearMineGame &#123; private MineMap map; //地雷地图 private int pointCount; //点数 private int useTime; //游戏的时间 private Point[][] minePoint;//地雷的布局 private Scanner sc = new Scanner(System.in); public void start() &#123; System.out.println(&quot;\\t\\tClearMineGame&quot;); int choice = 0; do&#123; System.out.println(&quot;请选择游戏难度：&quot;); System.out.println(&quot;1.普通 2.中等 3.困难 0.自定义&quot;); choice = sc.nextInt(); switch(choice) &#123; case 1: map = new MineMap(5,5,1); pointCount = 5*5; break; case 2: map = new MineMap(10,10,30); pointCount = 10*10; break; case 3: map = new MineMap(15,15,99); pointCount = 15*15; break; case 0:; default: System.out.println(&quot;没有此选项，请重新选择！&quot;); &#125; &#125;while(choice&gt;3 || choice&lt;1); minePoint = map.getMineMap(); //作弊显示：将0bxxxx 00 x -&gt; 0bxxxx 01 x,改为打开状态 System.out.println(&quot;作弊显示：&quot;); peek(minePoint); System.out.println(&quot;=========================================&quot;); //重新隐藏起来：将0bxxxx 01 x -&gt; 0bxxxx 00 x,改为关闭状态 for(int i=0;i&lt;minePoint.length;i++) &#123; for(int j=0;j&lt;minePoint[i].length;j++) &#123; minePoint[i][j].setState(minePoint[i][j].getState() &amp; 0b1111001); &#125; &#125; playGame(); &#125; private void playGame() &#123; boolean isOver = false; int i = 1; long start = System.currentTimeMillis(); //开始时间 do &#123; System.out.println(&quot;第&quot;+(i++)+&quot;次操作后的雷场：&quot;); showMineField(minePoint); System.out.println(&quot;=========================================&quot;); System.out.println(&quot;请输入x坐标：&quot;); int x = sc.nextInt(); sc.nextLine(); System.out.println(&quot;请输入y坐标：&quot;); int y = sc.nextInt(); sc.nextLine(); Point p = minePoint[x-1][y-1]; int choice = 0; do &#123; System.out.println(&quot;请选择操作：(1.打开 2.插旗 3.拔旗)&quot;); choice = sc.nextInt(); sc.nextLine(); switch(choice) &#123; case 1: isOver = openPoint(p); break; case 2: insertFlag(p); break; case 3: delFlag(p); break; default: System.out.println(&quot;还有这种操作？？&quot;); &#125; &#125;while(choice&gt;3 || choice&lt;1); &#125;while(!isOver); /*if(isOver==false) &#123; System.out.println(&quot;游戏结束&quot;); &#125;else &#123; //递归方法 缺点：调用playGame()次数多了可能导致游戏崩溃 *用do&#123;&#125;while()代替; playGame(); &#125;*/ long end = System.currentTimeMillis(); if(isOver) &#123; System.out.println(&quot;游戏结束&quot;); System.out.println(&quot;共花费：&quot;+(end-start)/1000/60+&quot;分钟&quot;); &#125; &#125; private boolean openPoint(Point p) &#123; int state = p.getState(); //1.是否是雷，是雷则游戏结束 if((state&amp;0b1)==0b1) &#123; System.out.println(&quot;点&quot;+p.getX()+&quot;,&quot;+p.getY()+&quot;是雷，游戏结束&quot;); peek(minePoint); return true; &#125; //1.当前p不是雷 1)是数字 2)是0，则递归显示周围所有不为雷的位置，到数字停止 openAll(p); //当p不是雷，打开周围的点，并且pointCount-- if(pointCount==map.getMineCount()) &#123; System.out.println(&quot;恭喜你，游戏通关&quot;); return true; &#125; //修复插旗后还可以直接打开的bug if((p.getState()&amp;0b110)==0b100) &#123; System.out.println(&quot;点&quot;+p.getX()+&quot;,&quot;+p.getY()+&quot;已插旗，请先取消旗子&quot;); sc.nextLine(); &#125; return false; &#125; private void openAll(Point p) &#123; int state = p.getState(); //递归终止条件，即不能打开的点 //(state.0b1)==0b1:雷 //(state.0b110)==0b100:插旗 //(state.0b110)==0b10:已打开 if((state&amp;0b1)==0b1 || (state&amp;0b110)==0b100 ||(state&amp;0b110)==0b10) &#123; return; &#125; int x = p.getX(); int y = p.getY(); minePoint[x][y].setState(p.getState()+0b10); pointCount--; //判断是否为0个雷 if((state&gt;&gt;3)==0) &#123; //当前位为0，则递归来打开 //判断附近的坐标 //上邻居 if(x-1&gt;=0) &#123; openAll(minePoint[x-1][y]); //判断左上角 if(y-1&gt;=0) &#123; openAll(minePoint[x-1][y-1]); &#125; if(y+1&lt;minePoint[0].length) &#123; openAll(minePoint[x-1][y+1]); &#125; &#125; //判断下邻居 if(x+1&lt;minePoint.length) &#123; openAll(minePoint[x+1][y]); //判断左上角 if(y-1&gt;=0) &#123; openAll(minePoint[x+1][y-1]); &#125; if(y+1&lt;minePoint[0].length) &#123; openAll(minePoint[x+1][y+1]); &#125; &#125; //判断左邻居 if(y-1&gt;=0) &#123; openAll(minePoint[x][y-1]); &#125; if(y+1&lt;minePoint[0].length) &#123; openAll(minePoint[x][y+1]); &#125; &#125; &#125; private void delFlag(Point p) &#123; //1.取出p的state int state = p.getState(); //2.判断是否已经有旗子，没有则不能拔旗 if((state&amp;0b110)==0b100) &#123; //3.有，对应位与00取与操作 minePoint[p.getX()][p.getY()].setState(p.getState()&amp;0b1111001); return; &#125; System.out.println(&quot;点&quot;+p.getX()+&quot;,&quot;+p.getY()+&quot;没有插旗，不能拔旗&quot;); sc.nextLine(); &#125; private void insertFlag(Point p) &#123; //1.取出p的state int state = p.getState(); //2.判断是否打开，打开了则不能插旗 if((state&amp;0b110)==0b10) &#123; System.out.println(&quot;点&quot;+p.getX()+&quot;,&quot;+p.getY()+&quot;已经打开，不能插旗&quot;); sc.nextLine(); return; &#125; //3.没打开，但已经插旗，也不能插旗 if((state&amp;0b110)==0b100) &#123; System.out.println(&quot;点&quot;+p.getX()+&quot;,&quot;+p.getY()+&quot;已经插旗，不能重复插旗&quot;); sc.nextLine(); return; &#125; //4.可以插旗 minePoint[p.getX()][p.getY()].setState(p.getState()+0b100); &#125; private void peek(Point[][] minePoint) &#123; for(int i=0;i&lt;minePoint.length;i++) &#123; for(int j=0;j&lt;minePoint[i].length;j++) &#123; minePoint[i][j].setState((minePoint[i][j].getState() &amp; 0b1111001) | 0b10); &#125; &#125; showMineField(minePoint); &#125; private void showMineField(Point[][] minePoints) &#123; int rows = minePoints.length; int cols = minePoints[0].length; for(int i=0;i&lt;=cols;i++) &#123; if(i==0) &#123; System.out.print(&quot; \\t&quot;); &#125;else &#123; System.out.print(i+&quot; &quot;); &#125; &#125; System.out.println(); for(int i=0;i&lt;rows;i++) &#123; System.out.print(i+1+&quot;\\t&quot;); for(int j=0;j&lt;cols;j++) &#123; //没有打开，且没有雷00x if((minePoints[i][j].getState() &amp; 0b110)==0b0) &#123; System.out.print(&quot;N &quot;); &#125;else if((minePoints[i][j].getState() &amp; 0b110)==0b100)&#123; //是否要插旗10x System.out.print(&quot;F &quot;); &#125;else &#123;//01x if((minePoints[i][j].getState() &amp; 0b01)==0b1) &#123; //打开且是雷011 System.out.print(&quot;M &quot;); &#125;else &#123; //打开不是雷010 System.out.print((minePoint[i][j].getState()&gt;&gt;3)+&quot; &quot;); &#125; &#125; &#125; System.out.println(); &#125; &#125;&#125; Main Test 123456789101112131415public class Test &#123; public static void main(String[] args) &#123; /*MineMap m = new MineMap(); Point[][] map = m.getMineMap(); Point[][] map = new MineMap(10,10,100).getMineMap(); for(int i=0;i&lt;map.length;i++) &#123; for(int j=0;j&lt;map[i].length;j++) &#123; System.out.print(map[i][j].getState()+&quot;\\t&quot;); &#125; System.out.println(); &#125;*/ new ClearMineGame().start(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第18次课程","slug":"技术向/Java/源辰课程记录/第18次课程","date":"2019-05-21T16:00:00.000Z","updated":"2022-05-11T01:10:55.184Z","comments":true,"path":"技术向/Java/源辰课程记录/第18次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC18%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第18次课程 05.22.2019 **内容 ** OOP 1.[项目]连连看（作业） Class Point 1234567891011121314151617181920212223242526272829public class Point &#123; public int x; public int y; public int data; public Point(int x, int y, int data) &#123; super(); this.x = x; this.y = y; this.data = data; &#125; public void setData(int data) &#123; this.data = data; &#125; public boolean isSame(Point p) &#123; if(this.x==p.x &amp;&amp; this.y==p.y) &#123; return true; &#125;else &#123; return false; &#125; &#125; public boolean equals(Point p) &#123; if(this.data==p.data) &#123; return true; &#125;else &#123; return false; &#125; &#125;&#125; Main Linkimport java.util.Random;import java.util.Scanner;public class Link &#123; int row_len; //行数 int colunm_len; //列数 int[][] chessBoard; //棋盘 int pic_count = 10; //图片数量为pic_count-1张，图片序号为1-9 char border = 35; //用于显示边框 public static void main(String[] args) &#123; Link l = new Link(); l.showChessBoard(); &#125; private void showChessBoard() &#123; //初始化棋盘操作 init(); //显示棋盘 show(); boolean flag = true; Scanner sc = new Scanner(System.in); do &#123; System.out.println(&quot;请输入要消除的两个点的坐标(0 0 0 0)：&quot;); int x1 = sc.nextInt(); int y1 = sc.nextInt(); int x2 = sc.nextInt(); int y2 = sc.nextInt(); Point p1 = new Point(x1,y1,chessBoard[x1][y1]); Point p2 = new Point(x2,y2,chessBoard[x2][y2]); if(isEraseOK(p1,p2)==true) &#123; chessBoard[p1.x][p1.y] = 0; chessBoard[p2.x][p2.y] = 0; show(); if(isGameOver()==true) &#123; flag = false; &#125; &#125; &#125;while(flag); &#125; //判断是否能消除 private boolean isEraseOK(Point p1, Point p2) &#123; //1.判断两个点的值是否相等 if(p1.equals(p2)==false) &#123; System.out.println(p1.data+&quot;和&quot;+p2.data+&quot;两点值不同，无法消除&quot;); return false; &#125; //2.判断两点是否位置一样 if(p1.isSame(p2)) &#123; System.out.println(&quot;两点坐标相同，无法消除&quot;); return false; &#125; //3.判断两点的值是否为0 if(p1.data==0 ||p2.data==0) &#123; System.out.println(&quot;不能消除空对象，无法消除&quot;); return false; &#125; //4.判断是否可以一线消，两线消，三线消。 if(isOneLine(p1,p2) || isTwoLine(p1,p2) || isThreeLine(p1,p2)) &#123; return true; &#125; return false; &#125; //三线 private boolean isThreeLine(Point p1, Point p2) &#123; Point ry = new Point(1,p1.y,chessBoard[1][p1.y]); Point rx = new Point(p1.x,1,chessBoard[p1.x][1]); for(int i=1;i&lt;row_len-1;i++) &#123; ry.x = i; ry.setData(chessBoard[i][p1.y]); if(isOneLine(p1,ry) &amp;&amp; isTwoLine(ry,p2) &amp;&amp; chessBoard[i][p1.y]==0) &#123; return true; &#125; &#125; for(int j=1;j&lt;colunm_len-1;j++) &#123; rx.y = j; rx.setData(chessBoard[p1.x][j]); if(isOneLine(p1,rx) &amp;&amp; isTwoLine(rx,p2) &amp;&amp; chessBoard[p1.x][j]==0) &#123; return true; &#125; &#125; return false; &#125; //两线 private boolean isTwoLine(Point p1, Point p2) &#123; Point t1 = new Point(p1.x,p2.y,chessBoard[p1.x][p2.y]); Point t2 = new Point(p2.x,p1.y,chessBoard[p2.x][p1.y]); if(isOneLine(p1,t1) &amp;&amp; isOneLine(p2,t1) &amp;&amp; t1.data==0) &#123; return true; &#125; if(isOneLine(p1,t2) &amp;&amp; isOneLine(p2,t2) &amp;&amp; t2.data==0) &#123; return true; &#125; return false; &#125; //一线 private boolean isOneLine(Point p1, Point p2) &#123; if(p1.x==p2.x) &#123; int min = p1.y&lt;p2.y?p1.y:p2.y; int max = p1.y&gt;p2.y?p1.y:p2.y; for(int i=min+1;i&lt;max;i++) &#123; if(chessBoard[p1.x][i]!=0) &#123; return false; &#125; &#125; return true; &#125; if(p1.y==p2.y) &#123; int min = p1.x&lt;p2.x?p1.x:p2.x; int max = p1.x&gt;p2.x?p1.x:p2.x; for(int i=min+1;i&lt;max;i++) &#123; if(chessBoard[i][p1.y]!=0) &#123; return false; &#125; &#125; return true; &#125; return false; &#125; private boolean isGameOver() &#123; for(int i=1;i&lt;chessBoard.length-1;i++) &#123; for(int j=1;j&lt;chessBoard[i].length-1;j++) &#123; if(chessBoard[i][j]!=0) &#123; return false; &#125; &#125; &#125; return true; &#125; private void init() &#123; Scanner sc = new Scanner(System.in); System.out.println(&quot;======= 难度系数控制 =======&quot;); System.out.println(&quot;请输入棋盘行数：&quot;); row_len = sc.nextInt(); do &#123; System.out.println(&quot;请输入棋盘列数(列数必须大于6列，且为偶数)：&quot;); colunm_len = sc.nextInt(); &#125;while(colunm_len&lt;6 || colunm_len%2!=0); row_len += 2; colunm_len += 2; chessBoard = new int[row_len][colunm_len]; //上下两层边界 for(int i=0;i&lt;colunm_len;i++) &#123; chessBoard[0][i] = border; chessBoard[row_len-1][i] = border; &#125; //左右两层边界 for(int j=0;j&lt;row_len;j++) &#123; chessBoard[j][0] = border; chessBoard[j][colunm_len-1] = border; &#125; //棋盘内部生成数 Random r = new Random(); for(int i=1;i&lt;row_len-1;i++) &#123; for(int j=1;j&lt;colunm_len-1;j+=2) &#123; chessBoard[i][j] = r.nextInt(pic_count-1)+1;//排除0 chessBoard[i][j+1] = chessBoard[i][j]; &#125; &#125; for(int i=0;i&lt;row_len*colunm_len;i++) &#123; int index_x1 = 0; int index_x2 = 0; int index_y1 = 0; int index_y2 = 0; while(index_x1==0) &#123; index_x1 = r.nextInt(row_len-1); &#125; while(index_y1==0) &#123; index_y1 = r.nextInt(colunm_len-1); &#125; while(index_x2==0) &#123; index_x2 = r.nextInt(row_len-1); &#125; while(index_y2==0) &#123; index_y2 = r.nextInt(colunm_len-1); &#125; int temp; temp = chessBoard[index_x1][index_y1]; chessBoard[index_x1][index_y1] = chessBoard[index_x2][index_y2]; chessBoard[index_x2][index_y2] = temp; &#125; &#125; private void show() &#123; System.out.println(&quot;=======当前棋盘=======&quot;); for(int i=0;i&lt;colunm_len;i++) &#123; System.out.print(&quot; &quot;+i+&quot; &quot;); &#125; System.out.println(); for(int i=0;i&lt;row_len;i++) &#123; System.out.print(i); for(int j=0;j&lt;colunm_len;j++) &#123; if(i==0||j==0||i==row_len-1||j==colunm_len-1) &#123; System.out.print(&quot; &quot;+(char)chessBoard[i][j]+&quot; &quot;); &#125;else &#123; if(chessBoard[i][j]==0) &#123; System.out.print(&quot; &quot;); &#125;else &#123; System.out.print(&quot; &quot;+chessBoard[i][j]+&quot; &quot;); &#125; &#125; &#125; System.out.print(i); System.out.println(); &#125; for(int i=0;i&lt;colunm_len;i++) &#123; System.out.print(&quot; &quot;+i+&quot; &quot;); &#125; System.out.println(); for(int i=0;i&lt;colunm_len;i++) &#123; System.out.print(&quot;===&quot;); &#125; System.out.println(); &#125;&#125; 2.[项目]扫雷 作者原创代码： Class Point 123456789101112131415161718192021222324252627282930313233343536public class Point &#123; private int x; private int y; private int state; //状态表示方法：0b 1111 11 1 //前四位表示雷的数量： 8：1000 7：0111 6：0110... //中间两位表示当前位置打开状态： 00没开 01打开 10插旗 //最后一位表示有无雷： 0没雷 1有雷 public Point(int x, int y, int state) &#123; super(); this.x = x; this.y = y; this.state = state; &#125; public Point() &#123; super(); &#125; public int getX() &#123; return x; &#125; public void setX(int x) &#123; this.x = x; &#125; public int getY() &#123; return y; &#125; public void setY(int y) &#123; this.y = y; &#125; public int getState() &#123; return state; &#125; public void setState(int state) &#123; this.state = state; &#125;&#125; Class MineMap 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162import java.util.Random;import java.util.Scanner;public class MineMap &#123; private int width; private int height; private int mineCount; //初始化棋盘 public Point[][] getMineMap()&#123; Point[][] map = new Point[height][width]; //将Point内的State置为0 for(int i=0;i&lt;map.length;i++) &#123; for(int j=0;j&lt;map[i].length;j++) &#123; map[i][j] = new Point(i,j,0); &#125; &#125; return burnMine(map); &#125; public Point[][] burnMine(Point[][] points)&#123; Random r = new Random(); for(int i=0;i&lt;mineCount;) &#123;//i++要判断可以加雷，才++ int x = r.nextInt(height); int y = r.nextInt(width); //判断当前位置 points[x][y].getState() 是否有雷 //位运算。 /* 1000001 &amp;0000001 =0000001 */ if((points[x][y].getState()&amp;0b1)!=0b1) &#123; //无雷 i++; /* 1000000 |0000001 =1000001 */ //当前位置 points[x][y].setState(points[x][y].getState()|0b1); //上三个邻居 if(x-1&gt;=0) &#123; points[x-1][y].setState(points[x-1][y].getState()+0b1000); //左上角 if(y-1&gt;=0) &#123; points[x-1][y-1].setState(points[x-1][y-1].getState()+0b1000); &#125; //右上角 if(y+1&lt;width) &#123; points[x-1][y+1].setState(points[x-1][y+1].getState()+0b1000); &#125; &#125; //下三个邻居 if(x+1&lt;height) &#123; points[x+1][y].setState(points[x+1][y].getState()+0b1000); //左下角 if(y-1&gt;=0) &#123; points[x+1][y-1].setState(points[x+1][y-1].getState()+0b1000); &#125; //右下角 if(y+1&lt;width) &#123; points[x+1][y+1].setState(points[x+1][y+1].getState()+0b1000); &#125; &#125; //左邻居 if(y-1&gt;=0) &#123; points[x][y-1].setState(points[x][y-1].getState()+0b1000); &#125; //右邻居 if(y+1&lt;width) &#123; points[x][y+1].setState(points[x][y+1].getState()+0b1000); &#125; &#125;else &#123; //有雷 &#125; &#125; return points; &#125; //开局 默认 public MineMap() &#123; this(10,10,30); &#125; //自定义难度 public MineMap(int width, int height, int mineCount) &#123; super(); this.width = width; this.height = height; this.mineCount = mineCount; &#125; /*//选择难度 1简单/2中等/3困难 public MineMap(int difficulty) &#123; switch(difficulty) &#123; case 1: this.width = 5; this.height = 5; this.mineCount = 10; break; case 2: this.width = 10; this.height = 10; this.mineCount = 30; break; case 3: this.width = 15; this.height = 15; this.mineCount = 50; break; case 0: System.out.println(&quot;请输入高，宽，雷数(空格隔开)：&quot;); Scanner sc = new Scanner(System.in); this.height = sc.nextInt(); this.width = sc.nextInt(); this.mineCount = sc.nextInt(); break; default: System.out.println(&quot;请重新选择&quot;); &#125; &#125;*/ public int getWidth() &#123; return width; &#125; public void setWidth(int width) &#123; this.width = width; &#125; public int getHeight() &#123; return height; &#125; public void setHeight(int height) &#123; this.height = height; &#125; public int getMineCount() &#123; return mineCount; &#125; public void setMineCount(int mineCount) &#123; this.mineCount = mineCount; &#125;&#125; Main Test 123456789101112131415public class Test &#123; public static void main(String[] args) &#123; /*MineMap m = new MineMap(); Point[][] map = m.getMineMap(); Point[][] map = new MineMap(10,10,100).getMineMap(); for(int i=0;i&lt;map.length;i++) &#123; for(int j=0;j&lt;map[i].length;j++) &#123; System.out.print(map[i][j].getState()+&quot;\\t&quot;); &#125; System.out.println(); &#125;*/ new ClearMineGame().start(); &#125;&#125; Class ClearMineGame 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165/* ClearMineGame* version:3.0* 特性：1.增加了操作系统，包括打开和插旗操作。2.增加了放置旗子计数器。3.增加了踩到雷游戏结束。* 4.增加了自定义模式。5.逻辑上优化，修复bug。**/import java.util.Scanner;public class ClearMineGame &#123; private MineMap map; //地雷地图 private int pointCount; //旗子数 private int useTime; //游戏的时间 private Point[][] minePoint;//地雷的布局 private Scanner sc = new Scanner(System.in); public void start() &#123; System.out.println(&quot;\\t\\tClearMineGame&quot;); int choice = 0; do&#123; System.out.println(&quot;请选择游戏难度：&quot;); System.out.println(&quot;1.普通 2.中等 3.困难 0.自定义&quot;); choice = sc.nextInt(); switch(choice) &#123; case 1: map = new MineMap(5,5,9); //pointCount = 5*5; break; case 2: map = new MineMap(10,10,30); //pointCount = 10*10; break; case 3: map = new MineMap(15,15,99); //pointCount = 15*15; break; case 0: System.out.println(&quot;请输入长、宽和雷数(空格隔开)：&quot;); int a = sc.nextInt(); int b = sc.nextInt(); int c = sc.nextInt(); map = new MineMap(a,b,c); break; default: System.out.println(&quot;没有此选项，请重新选择！&quot;); &#125; &#125;while(choice&gt;3 || choice&lt;0); minePoint = map.getMineMap(); while(showMineField(minePoint)) &#123; optionBox(minePoint); &#125; System.out.println(); System.err.print(&quot;踩到雷了，游戏结束&quot;); &#125; private void optionBox(Point[][] minePoints) &#123; System.out.println(&quot;选择您的操作：1.打开 2.插旗 3.拔旗&quot;); int i = 0; i = sc.nextInt(); switch(i) &#123; case 1: openBox(minePoints); break; case 2: setFlag(minePoints); break; case 3: delFlag(minePoints); default: System.out.println(&quot;请重新输入&quot;); &#125; /*if(i==1) &#123; openBox(minePoints); &#125;else &#123; setFlag(minePoints); &#125; */ &#125; private void delFlag(Point[][] minePoints) &#123; System.out.println(&quot;请输入打开坐标(空格隔开)：&quot;); int x = sc.nextInt(); int y = sc.nextInt(); if(x&lt;=map.getHeight() &amp;&amp; y&lt;=map.getWidth() &amp;&amp; x&gt;0 &amp;&amp; y&gt;0) &#123; minePoints[x-1][y-1].setState(minePoints[x-1][y-1].getState() &amp; 0b1111001); &#125;else &#123; System.out.println(&quot;坐标不存在，请重新输入&quot;); &#125; &#125; private void openBox(Point[][] minePoints) &#123; System.out.println(&quot;请输入打开坐标(空格隔开)：&quot;); int x = sc.nextInt(); int y = sc.nextInt(); if(x&lt;=map.getHeight() &amp;&amp; y&lt;=map.getWidth() &amp;&amp; x&gt;0 &amp;&amp; y&gt;0) &#123; minePoints[x-1][y-1].setState(minePoints[x-1][y-1].getState()|0b10); &#125;else &#123; System.out.println(&quot;坐标不存在，请重新输入&quot;); &#125; &#125; private void setFlag(Point[][] minePoints) &#123; System.out.println(&quot;请输入插旗坐标(空格隔开)：&quot;); int x = sc.nextInt(); int y = sc.nextInt(); if(x&lt;=map.getHeight() &amp;&amp; y&lt;=map.getWidth() &amp;&amp; x&gt;0 &amp;&amp; y&gt;0) &#123; if((minePoints[x-1][y-1].getState() &amp; 0b110)==0b10) &#123; System.out.println(x+&quot;,&quot;+y+&quot;已经被打开，无法插旗&quot;); &#125;else &#123; minePoints[x-1][y-1].setState(minePoints[x-1][y-1].getState()|0b100); pointCount++; System.out.println(&quot;已经放置旗子数：&quot;+pointCount); &#125; &#125;else &#123; System.out.println(&quot;坐标不存在，请重新输入&quot;); &#125; &#125; private boolean showMineField(Point[][] minePoints) &#123; int rows = minePoints.length; int cols = minePoints[0].length; boolean flag = true; for(int i=0;i&lt;=cols;i++) &#123; if(i==0) &#123; System.out.print(&quot; \\t&quot;); &#125;else &#123; System.out.print(i+&quot; &quot;); &#125; &#125; System.out.println(); for(int i=0;i&lt;rows;i++) &#123; System.out.print(i+1+&quot;\\t&quot;); for(int j=0;j&lt;cols;j++) &#123; //没有打开，且没有雷00x if((minePoints[i][j].getState() &amp; 0b110)==0b0) &#123; System.out.print(&quot;N &quot;); &#125;else if((minePoints[i][j].getState() &amp; 0b110)==0b100)&#123; //是否要插旗10x System.out.print(&quot;F &quot;); &#125;else &#123;//01x if((minePoints[i][j].getState() &amp; 0b01)==0b1) &#123; //打开且是雷011 System.out.print(&quot;X &quot;); flag = false; //break; &#125;else &#123; //打开不是雷010 //System.out.print(minePoints[i][j].getState()+&quot;\\t&quot;); System.out.printf(&quot;%d&quot;,minePoints[i][j].getState()&gt;&gt;3); System.out.print(&quot; &quot;); &#125; &#125; &#125; System.out.println(); &#125; return flag; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第17次课程","slug":"技术向/Java/源辰课程记录/第17次课程","date":"2019-05-19T16:00:00.000Z","updated":"2022-05-11T01:10:41.092Z","comments":true,"path":"技术向/Java/源辰课程记录/第17次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC17%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第17次课程 05.20.2019 **内容 ** CSS 1.样式 内联样式、内部样式、外部样式 注意：CSS样式优先级，最靠近标签的CSS优先级最高。 等价于：内联样式&gt;内部样式&#x2F;外部样式 HTML 1234567891011121314151617181920212223&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;无标题文档&lt;/title&gt; &lt;!--内部样式--&gt; &lt;style&gt; h1&#123; color:blue; font-size: 30px; &#125; &lt;/style&gt; &lt;!--外部样式--&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style1.css&quot; /&gt;&lt;/head&gt;&lt;body&gt; &lt;!--内联样式--&gt; &lt;p style=&quot;color: red;font-size: 20px&quot; &gt;锄禾日当午&lt;/p&gt; &lt;h1&gt;汗滴禾下土&lt;/h1&gt; &lt;h2&gt;粒粒皆辛苦&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt; 外部CSS 1234h2&#123; color:pink; font-size: 10px; &#125; 2.CSS选择器 优先级：内联样式&gt;（id&gt;class&gt;tag）内部样式 HTML 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; li&#123;/* tag */ /* 颜色 */ color: pink; /* 字号 */ font-size: 20px; /* 字体 */ font-family: &quot;隶书&quot;; &#125; .cred&#123;/* class */ color: red; font-size: 30px; font-family: &quot;楷体&quot;; &#125; #cblue&#123;/* id */ color: blue; font-size: 40px; font-family: &quot;宋体&quot;; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- div盒子标签 --&gt; &lt;div&gt; &lt;!-- 快捷键：ul&gt;li*4 + TABLE键 --&gt; &lt;ul&gt; &lt;li&gt;家用百货&lt;/li&gt; &lt;li&gt;各类书籍&lt;/li&gt; &lt;li&gt;手机数码&lt;/li&gt; &lt;li&gt;日用百货&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div&gt; &lt;!-- 快捷键：ul&gt;li*4 + TABLE键 --&gt; &lt;ul&gt; &lt;li class=&quot;cred&quot;&gt;家用百货&lt;/li&gt; &lt;li class=&quot;cred&quot;&gt;各类书籍&lt;/li&gt; &lt;li id=&quot;cblue&quot;&gt;手机数码&lt;/li&gt; &lt;li style=&quot;color:green;font-size: 50px;&quot;&gt;日用百货&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 效果图： 3.页面自适应 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body&#123; font-size: 15px; font-family: &quot;微软雅黑&quot;; &#125; #note&#123; width: 80%; margin: 0 auto; &#125; table&#123; border: 1px solid grey;/* 边框1px,实线,灰色 */ width: 80%;/* 重点！宽度永远仅占页面的80% */ border-collapse: collapse; border-spacing: 0; margin: 0 auto;/* 外边距 */ &#125; table tr&#123;/* 解释:对table标签内的tr标签进行CSS */ border: 1px solid gray; &#125; table th,td&#123; padding: 10px;/* 内边距 */ text-align: center;/* 字体居中 */ &#125; @media only screen and (max-width: 500px) &#123; table&#123; border: 0; &#125; table thead&#123; display: none; &#125; table tr&#123; margin-bottom: 10px; display: block; text-align: center; border: 1px dashed #ccc; &#125; table td&#123; display: block; text-align: right; border: 1px dashed #ccc; &#125; table td:before&#123; content: attr(data); font-weight: bold; float: left; &#125; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;note&quot;&gt; &lt;h1&gt;演示：纯CSS实现自适应布局表格（缩小显示区域看下）&lt;/h1&gt; &lt;p&gt;调整页面宽度，或者在不同屏幕尺寸的设备上(PC，手机)尝试浏览器本页， 你会发现下面的表格呈现出自适应布局特征，能够自动的使用不同的屏幕尺寸， 数据的表现不会因为屏幕大小变化而变得不合适。&lt;/p&gt; &lt;/div&gt; &lt;table&gt; &lt;thead&gt; &lt;th&gt;支付&lt;/th&gt; &lt;th&gt;日期&lt;/th&gt; &lt;th&gt;金额&lt;/th&gt; &lt;th&gt;周期&lt;/th&gt; &lt;/thead&gt; &lt;tr&gt; &lt;td data=&quot;支付&quot; = &quot;&quot;&gt;支付#1&lt;/td&gt; &lt;td data=&quot;日期&quot;&gt;02/01/2015&lt;/td&gt; &lt;td data=&quot;金额&quot;&gt;￥2,311&lt;/td&gt; &lt;td data=&quot;周期&quot;&gt;01/01/2015 - 01/31/2015&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td data=&quot;支付&quot;&gt;支付#2&lt;/td&gt; &lt;td data=&quot;日期&quot;&gt;03/01/2015&lt;/td&gt; &lt;td data=&quot;金额&quot;&gt;￥3,311&lt;/td&gt; &lt;td data=&quot;周期&quot;&gt;01/01/2015 - 01/31/2015&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt; 4.标签归纳 1","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第16次课程","slug":"技术向/Java/源辰课程记录/第16次课程","date":"2019-05-17T16:00:00.000Z","updated":"2022-05-11T01:10:26.605Z","comments":true,"path":"技术向/Java/源辰课程记录/第16次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC16%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第16次课程 05.18.2019 **内容 ** HTML 1.基本块级标签 、、和 123456789101112131415161718192021222324252627282930&lt;!doctype html&gt; &lt;!--告诉系统这是个html文档--&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;!--指定用utf-8编码和解吗--&gt; &lt;title&gt;无标题文档&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!--&lt;h_&gt;&lt;/h_&gt;标题标签，有六级--&gt; &lt;h1&gt;标题&lt;/h1&gt; &lt;h2&gt;标题&lt;/h2&gt; &lt;h3&gt;标题&lt;/h3&gt; &lt;h4&gt;标题&lt;/h4&gt; &lt;h5&gt;标题&lt;/h5&gt; &lt;h6&gt;标题&lt;/h6&gt; &lt;!--&lt;br/&gt;换行--&gt; 床头明月光，&lt;br/&gt; 疑是地上霜。&lt;br/&gt; 举头望明月，&lt;br/&gt; 低头思故乡。&lt;br/&gt; &lt;!--&lt;p&gt;&lt;/p&gt;常用文本标签--&gt; &lt;p&gt;床头明月光，&lt;/p&gt; &lt;p&gt;疑是地上霜。&lt;/p&gt; &lt;p&gt;举头望明月，&lt;/p&gt; &lt;p&gt;低头思故乡。&lt;/p&gt; &lt;!--&lt;hr/&gt;横线--&gt; &lt;hr/&gt; &lt;/body&gt;&lt;/html&gt; 实验： 效果图： 源码： 123456789101112131415161718192021222324&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;Test1&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;唐诗三百首&lt;/h1&gt; &lt;hr&gt; &lt;h2&gt;目录&lt;/h2&gt; &lt;h3&gt;第一首，静夜思&lt;/h3&gt; &lt;h3&gt;第二首，忆江南&lt;/h3&gt; &lt;h3&gt;第三首，长恨歌&lt;/h3&gt; &lt;hr&gt; &lt;h2&gt;静夜思&lt;/h2&gt; &lt;p&gt;作者：李白&lt;/p&gt; &lt;p&gt;床前明月光，疑是地上霜。举头望明月，低头思故乡。&lt;/p&gt; &lt;hr&gt; &lt;h3&gt;【李白简介】&lt;/h3&gt; &lt;p&gt;李白，字太白，号青莲居士，自称与李唐皇室同宗，祖籍陇西成纪（今甘肃天水附近），剩余暗喜碎叶（遗址在今库尔吉斯斯坦国境内的阿克别希姆）。五岁随父迁居锦州彭明县&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 2.列表 有序，无序。 内标签： 自定义 内标签：(标题)、（正文） 源码： 1234567891011121314151617181920212223242526272829&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;无标题文档&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--有序列表--&gt; &lt;h3&gt;注册步骤：&lt;/h3&gt; &lt;ol type=&quot;A&quot;&gt; &lt;!--默认为阿拉伯数字，type=&quot;&quot;内可选A/a/I/i等。--&gt; &lt;li&gt;填写信息&lt;/li&gt; &lt;li&gt;注册邮箱&lt;/li&gt; &lt;/ol&gt; &lt;!--无序列表--&gt; &lt;h3&gt;新人指南：&lt;/h3&gt; &lt;ul type=&quot;circle&quot;&gt;&lt;!--默认为圆点，type=&quot;&quot;内可选方块/空心圆。--&gt; &lt;li&gt;如何激活会员&lt;/li&gt; &lt;li&gt;如何注册会员&lt;/li&gt; &lt;li&gt;如何充钱氪金&lt;/li&gt; &lt;/ul&gt; &lt;!--自定义列表--&gt; &lt;dl&gt; &lt;dt&gt;咖啡&lt;/dt&gt; &lt;dd&gt;一种黑色的热饮料，原料据说是咖啡豆，非洲盛产这类原料&lt;/dd&gt; &lt;dd&gt;可以提神，刺激神经&lt;/dd&gt; &lt;/dl&gt;&lt;/body&gt;&lt;/html&gt; 效果图： 3.表格框 表格框 ** 标题** ** 表头** ** ** ****** ** ** ** ** 表体** ** 行** ** 列** ** &gt;&#x2F;td&gt;** ** ** ** ** 源码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;无标题文档&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;table border=&quot;1px&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;500px&quot; align=&quot;center&quot;&gt; &lt;!--边框为1px，cellpadding+cellspacing=&quot;0&quot;用于消除边框间隔，框宽500px，居中。--&gt; &lt;caption&gt;年终工资报表&lt;/caption&gt; &lt;!--&lt;caption&gt;&lt;/caption&gt;表格标题--&gt; &lt;thead&gt; &lt;!--&lt;thead&gt;&lt;/thead&gt;表头，字体加粗--&gt; &lt;th&gt;区域办事处&lt;/th&gt; &lt;th&gt;岗位&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;工资&lt;/th&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;!--&lt;tbody&gt;&lt;/tbody&gt;表体--&gt; &lt;tr&gt; &lt;!--&lt;tr&gt;&lt;/tr&gt;行，&lt;td&gt;&lt;/td&gt;列。--&gt; &lt;td rowspan=&quot;3&quot;&gt;华东区&lt;/td&gt; &lt;!--rowspan=&quot;_&quot;向下合并框--&gt; &lt;td rowspan=&quot;2&quot;&gt;人事专员&lt;/td&gt; &lt;td&gt;张民&lt;/td&gt; &lt;td&gt;1500&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;王洪&lt;/td&gt; &lt;td&gt;1500&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td rowspan=&quot;3&quot;&gt;软件开发工程师&lt;/td&gt; &lt;td&gt;李开元&lt;/td&gt; &lt;td&gt;6000&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td rowspan=&quot;2&quot;&gt;中南区&lt;/td&gt; &lt;td&gt;杨桃&lt;/td&gt; &lt;td&gt;5000&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;梁朝&lt;/td&gt; &lt;td&gt;5000&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;3&quot;&gt;总计&lt;/td&gt; &lt;!--colspan=&quot;_&quot;向右边合并框--&gt; &lt;td&gt;19000&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 效果图： 4.标签 type&#x3D;”text” **%!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;) ** 1姓名：&lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;匿名&quot;&gt; type&#x3D;”password” **%!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;) ** 1密码：&lt;input type=&quot;password&quot; name=&quot;password&quot; value=&quot;admin&quot;&gt; type&#x3D;”radio” **%!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;) ** 12性别：&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;man&quot;&gt;男生 &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;woman&quot;&gt;女生 type&#x3D;”checkbox” ** ** 12爱好：&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;football&quot;&gt;足球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;basketball&quot;&gt;篮球 ** ** ** ** ** ** 12345班级： &lt;select name=&quot;class&quot;&gt; &lt;option value=&quot;wl1701&quot;&gt;网络1701&lt;/option&gt; &lt;option value=&quot;wl1702&quot;&gt;网络1702&lt;/option&gt; &lt;/select&gt; 1234协议： &lt;textarea rows=&quot;10&quot; cols=&quot;10&quot; name=&quot;xy&quot;&gt; 测试代码/测试代码/测试代码/测试代码/测试代码/测试代码/测试代码/测试代码/测试代码/测试代码/ &lt;/textarea&gt;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第15次课程","slug":"技术向/Java/源辰课程记录/第15次课程","date":"2019-05-15T16:00:00.000Z","updated":"2022-05-11T01:10:15.209Z","comments":true,"path":"技术向/Java/源辰课程记录/第15次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC15%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第15次课程 05.16.2019 **内容 ** OOP_2 1.方法重载 static（静态）相关： 123456789101112131415161718192021public class Test1 &#123; public static void main(String[] args) &#123; int x1 = -1; double x2 = -1.3; Test1 t = new Test1(); t.abs(x1); t.abs(x2); &#125; //static //有：main方法可以直接调用。 //无：需要先对类(Test1)实例化(new)后，再通过对象变量名(t)调用。 public _____ void abs(int x) &#123; int result = x&gt;0?x:-x; System.out.println(x+&quot;\\t的绝对值：&quot;+result); &#125; public void abs(double x) &#123; double result = x&gt;0?x:-x; System.out.println(x+&quot;\\t的绝对值：&quot;+result); &#125;&#125; 重载： 123456789101112131415161718192021222324public class Test2 &#123; public static void main(String[] args) &#123; int x = 1; int y = 2; double z = 3.4; add(x,y,1); add(x,y); add(x,z); &#125; //方法重载：形参类型、顺序、个数不同，方法名相同 public static void add(int x,int y,int z) &#123; System.out.println(&quot;1&quot;); System.out.println(x+y); &#125; public static void add(int x,int y) &#123; System.out.println(&quot;2&quot;); System.out.println(x+y); &#125; public static void add(int x,double y) &#123; System.out.println(&quot;3&quot;); System.out.println(x+y); &#125;&#125; 3.static静态 Class Person2 1234567891011121314151617181920212223public class Person2 &#123; public Person2() &#123;//优先级三级，new后运行 System.out.println(&quot;构造方法&quot;); &#125; &#123;//优先级二级，每次new前运行，在构造方法前运行。 //应用场景：对程序各部分检测 System.out.println(&quot;实例块&quot;); &#125; static &#123;//优先级一级，jvm加载这个类，就会运行，且仅运行一次。 //应用场景：系统环境检测 System.out.println(&quot;静态块&quot;); &#125; public void show() &#123; System.out.println(&quot;对象方法/实例方法&quot;); &#125; public static void show2() &#123; System.out.println(&quot;静态方法&quot;); &#125;&#125; Main 12345678910111213141516public class Test5 &#123; public static void main(String[] args) &#123; new Person2(); new Person2(); //结果：静态块仅运行一次，实例块和构造方法运行两次。 //非静态调用 Person2 p = new Person2(); p.show(); //静态调用 Person2.show2(); //静态成员/方法属于类(Person2)。非静态成员/方法属于对象(p)。 &#125;&#125; 4.Package（包） 123创建包：package com.yc.bean;关键字 包名（若多级目录用&quot;.&quot;隔开） 123调入包：import java.until.Scanner;关键字 控制台创建包： （1）应用记事本（.java）写好代码。 ** ** （2）通过控制台 javac -d . Person.java编译。 ** ** 关键字释义：__javac:java命令，-d：创建文件夹，.：当前目录，Person.java:源文件。 （3）生成包com\\yc\\bean,并且Person字节码在其中。 ** ** 若调用： ** ** 控制台调用包： （1）应用记事本（.java）写好代码。 其中：调用了包com.yc.bean中的Person字节码文件。 ** ** （2）通过控制台 javac Test.java编译。 %!(EXTRA markdown.ResourceType&#x3D;, string&#x3D;, string&#x3D;) **同时将多个源码文件（.java）编译，若存在包（package），则生成包： ** 目录中仅存源码文件。 ** ** 通过javac -d . *.java 则统一生成所有文件。 ** ** ​ ** **","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第14次课程","slug":"技术向/Java/源辰课程记录/第14次课程","date":"2019-05-12T16:00:00.000Z","updated":"2022-05-11T01:10:03.390Z","comments":true,"path":"技术向/Java/源辰课程记录/第14次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC14%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第14次课程 05.13.2019 **内容 ** OOP_1 1.计算器 Class Calculator 12345678910111213141516171819202122232425262728293031323334353637383940414243package Calculator;public class Calculator &#123; int x; int y; public Calculator() &#123; super(); &#125; public Calculator(int x, int y) &#123; super(); this.x = x; this.y = y; &#125; public int getX() &#123; return x; &#125; public void setX(int x) &#123; this.x = x; &#125; public int getY() &#123; return y; &#125; public void setY(int y) &#123; this.y = y; &#125; public int add() &#123; return this.x+this.y; &#125; public int sub() &#123; return this.x-this.y; &#125; public int mul() &#123; return this.x*this.y; &#125; public int div() &#123; if(y==0) &#123; System.err.println(&quot;被除数不能为0&quot;); &#125; return this.x/this.y; &#125;&#125; 2.计算体积 3.结婚和离婚 Class Person 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104package Person;public class Person &#123; private String name; private int age; private boolean gender; private Person partner; //结婚 public void marry(Person other) &#123; if(other==null) &#123; System.out.println(&quot;不能与空对象结婚&quot;); return; &#125; if(other==this) &#123; System.out.println(&quot;不能与自己结婚&quot;); return; &#125; if(this.gender==other.gender) &#123; System.out.println(&quot;同性不能结婚，性别都是：&quot;+this.gender); return; &#125; if(this.partner!=null) &#123; System.out.println(this.name+&quot;已婚，已婚对象为：&quot;+this.partner.name); return; &#125; if(other.partner!=null) &#123; System.out.println(other.name+&quot;已婚，已婚对象为：&quot;+other.partner.name); return; &#125; if(isAgeOk(this)==false) &#123; System.out.println(this.name+&quot;未到结婚年龄&quot;); return; &#125; if(isAgeOk(other)==false) &#123; System.out.println(other.name+&quot;未到结婚年龄&quot;); return; &#125; //OK this.partner=other; other.partner=this; System.out.println(this.name+&quot;与&quot;+other.name+&quot;喜结良缘，早生贵子&quot;); &#125; public boolean isAgeOk(Person P) &#123; if(P.gender==true&amp;&amp;P.age&lt;24 || P.gender==false&amp;&amp;P.age&lt;22) &#123; return false; &#125; return true; &#125; //离婚 public void divoice(Person other) &#123; if(other==null) &#123; System.out.println(this.name+&quot;不能与空对象离婚&quot;); return; &#125; if(this.partner==null) &#123; System.out.println(this.name+&quot;还未结婚，无法离婚&quot;); return; &#125; if(other.partner==null) &#123; System.out.println(other.name+&quot;还未结婚，无法离婚&quot;); return; &#125; if(this.partner!=other &amp;&amp; other.partner!=this) &#123; System.out.println(this.name+&quot;与&quot;+other.name+&quot;不是夫妻关系，无法离婚&quot;); return; &#125; //OK this.partner=null; other.partner=null; System.out.println(this.name+&quot;与&quot;+other.name+&quot;离婚成功，重获自由&quot;); &#125; //自动生成代码 public Person() &#123; super(); &#125; public Person(String name, int age, boolean gender) &#123; super(); this.name = name; this.age = age; this.gender = gender; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; public boolean isGender() &#123; return gender; &#125; public void setGender(boolean gender) &#123; this.gender = gender; &#125; public Person getPartner() &#123; return partner; &#125;&#125; Main 12345678910111213141516171819package Person;public class Main1 &#123; public static void main(String[] args) &#123; Person p1 = new Person(&quot;张三&quot;,25,true); Person p2 = new Person(&quot;小红&quot;,24,false); Person p3 = new Person(&quot;李四&quot;,18,true); Person p4 = new Person(&quot;王五&quot;,30,true); //p1与p2结婚，p3与p4结婚 p1.marry(p2); p3.marry(p4); //p1与p2离婚，p2与p4结婚 p1.divoice(p2); p2.marry(p4); //p2与p4离婚，p2与p3结婚 p2.divoice(p4); p2.marry(p3); &#125;&#125; 4.栈 Class MyStack 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package MyStack;public class MyStack &#123; private final int NUM = 10; private int[] arr; private int top = 0; public MyStack()&#123; super(); arr = new int[NUM]; top = 0; &#125; public int capacity() &#123; return arr.length; &#125; public int size() &#123; return top; &#125; public void push(int x) &#123; if(top==arr.length) &#123; //扩容 int[] temp = new int[arr.length*2]; for(int i=0;i&lt;arr.length;i++) &#123; temp[i] = arr[i]; &#125; arr = temp; //垃圾回收 System.gc(); &#125; arr[top] = x; top++; &#125; public int pop() &#123; if(top==0) &#123; System.out.println(&quot;栈空&quot;); return -1; &#125; top--; return arr[top]; &#125; public int peek() &#123; if(top==0) &#123; System.out.println(&quot;栈空&quot;); return -1; &#125; return arr[top-1]; &#125; public void clear() &#123; arr = new int[NUM]; top = 0; System.gc(); &#125;&#125; Main 1234567891011121314151617package MyStack;public class Main2 &#123; public static void main(String[] args) &#123; MyStack m = new MyStack(); m.push(3); m.push(2); m.push(1); System.out.println(&quot;栈总容量：&quot;+m.capacity()); System.out.println(&quot;已存元素个数：&quot;+m.size()); System.out.println(&quot;栈顶元素：&quot;+m.peek()); System.out.print(&quot;出栈元素：&quot;); while(m.size()!=0) &#123; int ele = m.pop(); System.out.print(ele+&quot;\\t&quot;); &#125; &#125;&#125; 5.在二维数组中找出最大值 Class Location 123456789101112131415161718192021222324252627282930313233package Location;public class Location &#123; private int row; private int column; private int maxValue; public Location() &#123; super(); &#125; public Location(int row, int column, int maxValue) &#123; super(); this.row = row; this.column = column; this.maxValue = maxValue; &#125; public int getRow() &#123; return row; &#125; public void setRow(int row) &#123; this.row = row; &#125; public int getColumn() &#123; return column; &#125; public void setColumn(int column) &#123; this.column = column; &#125; public int getMaxValue() &#123; return maxValue; &#125; public void setMaxValue(int maxValue) &#123; this.maxValue = maxValue; &#125;;&#125; Main 123456789101112131415161718192021222324252627282930313233package Location;import java.util.Random;public class Main3 &#123; public static void main(String[] args) &#123; int[][] arr = new int[10][10]; Random r = new Random(); for(int i=0;i&lt;arr.length;i++) &#123; for(int j=0;j&lt;arr[i].length;j++) &#123; arr[i][j] = r.nextInt(100); System.out.print(arr[i][j]+&quot;\\t&quot;); &#125; System.out.println(); &#125; Location location = locateLargest(arr); System.out.println(location.getRow()+&quot;行&quot;+location.getColumn()+&quot;列,最大值为：&quot;+location.getMaxValue()); &#125; public static Location locateLargest(int[][] arr) &#123; Location location = new Location(); int max = arr[0][0]; for(int i=0;i&lt;arr.length;i++) &#123; for(int j=0;j&lt;arr[i].length;j++) &#123; if(max&lt;=arr[i][j]) &#123; max = arr[i][j]; location.setRow(i); location.setColumn(j); location.setMaxValue(max); &#125; &#125; &#125; return location; &#125;&#125; 6.模拟股票 Class Stock 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package Stook;public class Stock &#123; private String symbol; private String name; private double closePrice; private double openPrice; private double topPrice; private double bottomPrice; public Stock(String symbol, String name) &#123; super(); this.symbol = symbol; this.name = name; &#125; public double getChangePercent() &#123; return (closePrice - openPrice)/openPrice; &#125; public double getClosePrice() &#123; return closePrice; &#125; public void setClosePrice(double closePrice) &#123; this.closePrice = closePrice; &#125; public double getOpenPrice() &#123; return openPrice; &#125; public void setOpenPrice(double openPrice) &#123; this.openPrice = openPrice; &#125; public double getTopPrice() &#123; return topPrice; &#125; public void setTopPrice(double topPrice) &#123; this.topPrice = topPrice; &#125; public double getBottomPrice() &#123; return bottomPrice; &#125; public void setBottomPrice(double bottomPrice) &#123; this.bottomPrice = bottomPrice; &#125; public String getSymbol() &#123; return symbol; &#125; public String getName() &#123; return name; &#125;&#125; Main 123456789101112131415package Stook;import java.util.Random;public class Main4 &#123; public static void main(String[] args) &#123; Stock s = new Stock(&quot;000002&quot;,&quot;万科A&quot;); Random r = new Random(); for(int i=0;i&lt;10;i++) &#123; s.setOpenPrice(r.nextDouble()*2+10); s.setClosePrice(r.nextDouble()*2+10); s.setBottomPrice(r.nextDouble()*2+10); s.setTopPrice(s.getBottomPrice()+r.nextDouble()*2); System.out.println(s.getName()+&quot;\\t涨跌：&quot;+s.getChangePercent()); &#125; &#125;&#125; 7.ATM Class Account 1234567891011121314151617181920212223242526272829package ATM;public class Account &#123; private int id; private int balance; public Account(int id) &#123; super(); this.id = id; this.balance = 100; &#125; public int getId() &#123; return id; &#125; public void check() &#123; System.out.println(&quot;账户&quot;+id+&quot;的余额：&quot;+balance); &#125; public void deposit(int money) &#123; balance += money; System.out.println(&quot;存款操作完成&quot;); &#125; public void widthdraw(int money) &#123; if(money&gt;balance) &#123; System.out.println(&quot;余额不足，请确认后操作&quot;); return; &#125; balance -= money; System.out.println(&quot;取款操作完成&quot;); &#125;&#125; Class Bank 12345678910111213141516171819package ATM;public class Bank &#123; private Account[] accounts = new Account[10]; //通过银行的构造方法初始化10个账户 public Bank() &#123; for(int i=0;i&lt;10;i++) &#123; accounts[i] = new Account(i+1); &#125; &#125; public Account getAccounts(int id) &#123; for(int i=0;i&lt;accounts.length;i++) &#123; if(accounts[i].getId()==id) &#123; return accounts[i]; &#125; &#125; return null; &#125;&#125; Main 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package ATM;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Scanner;public class Main &#123; public static void main(String[] args) &#123; Date d = new Date(); SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 hh:mm:ss&quot;); Scanner sc = new Scanner(System.in); Bank b = new Bank(); do &#123; System.out.println(&quot;\\t\\t中国银行湖南工学院分行欢迎您&quot;); System.out.println(&quot;当前时间：&quot;+sdf.format(d)); System.out.println(&quot;请输入您的卡号：&quot;); int id = sc.nextInt(); //根据id查找账户 Account account = b.getAccounts(id); if(account!=null) &#123; showMenu(account); &#125;else &#123; System.out.println(&quot;账户不存在&quot;); &#125; &#125;while(true); &#125; private static void showMenu(Account account) &#123; Scanner sc = new Scanner(System.in); int ch = -1; int money = -1; do &#123; System.out.println(&quot;\\t\\t操作菜单：&quot;); System.out.println(&quot;\\t\\t1.查询余额&quot;); System.out.println(&quot;\\t\\t2.取款&quot;); System.out.println(&quot;\\t\\t3.存款&quot;); System.out.println(&quot;\\t\\t4.退出&quot;); System.out.println(&quot;请输入你的选项：&quot;); ch = sc.nextInt(); switch(ch) &#123; case 1: account.check(); break; case 2: System.out.println(&quot;请输入您要取款的金额：&quot;); money = sc.nextInt(); account.widthdraw(money); break; case 3: System.out.println(&quot;请你输入要存款的金额&quot;); money = sc.nextInt(); account.deposit(money); break; &#125; &#125;while(ch!=4); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第13次课程","slug":"技术向/Java/源辰课程记录/第13次课程","date":"2019-05-10T16:00:00.000Z","updated":"2022-05-11T01:09:45.146Z","comments":true,"path":"技术向/Java/源辰课程记录/第13次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC13%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第13次课程 05.11.2019 **内容 ** OOP_1 1.老师和学生类 Class Student\\Class Teacher\\Main 123456789public class Student &#123; int id; String name; char sex; public void introduce() &#123; System.out.println(&quot;hello，我叫：&quot;+name+&quot;，性别：&quot;+sex); &#125;&#125; 123456789101112131415161718import java.util.Scanner;public class Teacher &#123; String name; String password; public void inputNameAndPassword() &#123; Scanner sc = new Scanner(System.in); System.out.println(&quot;老师，请输入登陆用户名：&quot;); name = sc.nextLine(); System.out.println(&quot;请输入登陆密码：&quot;); password = sc.nextLine(); &#125; public void showInfo() &#123; System.out.println(&quot;用户名：&quot;+name+&quot;，密码：&quot;+password); &#125;&#125; 12345678910111213141516public class Main1 &#123; public static void main(String[] args) &#123; //实例化 Student s = new Student(); // . 成员访问运算符 s.id = 1; s.name = &quot;张三&quot;; s.sex = &#x27;男&#x27;; s.introduce(); Teacher t = new Teacher(); t.inputNameAndPassword(); t.showInfo(); &#125;&#125; 2.体重 **Class **person 12345678910111213141516171819202122232425262728293031323334353637public class Person &#123; String name; double weight; double height; //吃食物 1斤食物 -&gt; 0.25斤体重 public void eat(double foods) &#123; weight = weight + foods/4; &#125; //运动 1小时 -&gt; 0.5斤体重 public void execise(double hours) &#123; weight = weight - hours*0.5; &#125; public void showInfo() &#123; System.out.println(name+&quot;，您的体重为：&quot;+weight); &#125; //bmi = 体重(公斤)*身高(米)^2 public void showBmi() &#123; double bmi; bmi = (weight/2)/(Math.pow(height, 2)); System.out.println(&quot;bim值为：&quot;+bmi); if(bmi&lt;18.5) &#123; System.out.println(&quot;体重过轻&quot;); &#125;else if(bmi&lt;24.5) &#123; System.out.println(&quot;体重正常&quot;); &#125;else if(bmi&lt;28) &#123; System.out.println(&quot;肥胖前期&quot;); &#125;else if(bmi&lt;30) &#123; System.out.println(&quot;肥胖&quot;); &#125;else &#123; System.out.println(&quot;放弃治疗...&quot;); &#125; &#125;&#125; Main 1234567891011121314151617public class Main2 &#123; public static void main(String[] args) &#123; Person p = new Person(); p.name = &quot;容闸总&quot;; p.weight = 100; p.height = 1.75; p.eat(1); p.execise(0.5); p.eat(0.5); p.execise(0.5); p.showInfo(); p.showBmi(); &#125;&#125; 3.关于private、this.、 替换快捷键：ALT + SHIFT + R 体重（增强版）实验： Class person 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768public class Person &#123; //private 私有化 成员仅能在当前类内被访问 private String name; private double weight; private double height; //类内加入逻辑，使程序更为健壮 //this.xxx 表示xxx是本类内的成员变量 public void setName(String name) &#123; if(name==null || &quot;&quot;.equals(name)) &#123; this.name = &quot;匿名用户&quot;; &#125;else &#123; this.name = name; &#125; &#125; public void setWeight(double weight) &#123; if(weight&lt;30 || weight&gt;800) &#123; this.weight = 110; System.out.println(&quot;录入体重不合法，已使用标准体重：110斤&quot;); &#125;else &#123; this.weight = weight; &#125; &#125; public void setHeigth(double height) &#123; if(height&lt;1 || height&gt;2.5) &#123; this.height = 1.7; System.out.println(&quot;录入身高不合法，已使用标准身高：1.7米&quot;); &#125;else &#123; this.height = height; &#125; &#125; //吃食物 1斤食物 -&gt; 0.25斤体重 public void eat(double foods) &#123; weight = weight + foods/4; &#125; //运动 1小时 -&gt; 0.5斤体重 public void execise(double hours) &#123; weight = weight - hours*0.5; &#125; public void showInfo() &#123; System.err.println(name); System.out.println(&quot;您的体重为：&quot;+weight+&quot;，身高为：&quot;+height); &#125; //bmi = 体重(公斤)*身高(米)^2 public void showBmi() &#123; double bmi; bmi = (weight/2)/(Math.pow(height, 2)); System.out.println(&quot;bim值为：&quot;+bmi); if(bmi&lt;18.5) &#123; System.out.println(&quot;体重过轻&quot;); &#125;else if(bmi&lt;24.5) &#123; System.out.println(&quot;体重正常&quot;); &#125;else if(bmi&lt;28) &#123; System.out.println(&quot;肥胖前期&quot;); &#125;else if(bmi&lt;30) &#123; System.out.println(&quot;肥胖&quot;); &#125;else &#123; System.out.println(&quot;放弃治疗...&quot;); &#125; &#125;&#125; Main 123456789101112131415161718192021public class Main2 &#123; public static void main(String[] args) &#123; Person p = new Person(); p.setName(&quot;容闸总&quot;); p.setWeight(110); p.setHeigth(1.72); //午饭时段 p.eat(1); p.execise(0.5); //晚饭时段 p.eat(0.5); p.execise(0.5); //显示 p.showInfo(); p.showBmi(); &#125;&#125; 4.构造方法和构造方法重载 商品实验： Class Goods 12345678910111213141516171819202122232425package Goods;public class Goods &#123; private String gname; private double price; //构造方法定义：1.与类同名 2.无返回值 3.new调用 //构造方法的作用：初始化成员 //类内可以存在多个构造方法(重载) //若不定义构造方法，则系统自动定义：String -&gt; null,double -&gt; 0.0,int -&gt; 0,boolean -&gt; false public Goods() &#123; this.gname = &quot;匿名商品&quot;; this.price = 1; &#125; //构造方法重载 public Goods(String gname,double price) &#123; this.gname = gname; this.price = price; &#125; public Goods(String gname) &#123; this.gname = gname; &#125;&#125; Main 12345678package Goods;public class Main3 &#123; public static void main(String[] args) &#123; Goods g1 = new Goods(); Goods g2 = new Goods(&quot;苹果&quot;,3000); Goods g3 = new Goods(&quot;华为&quot;); &#125;&#125; 5.[项目]学生总成绩和平均成绩 题目： 实现一个Student类。学生应有姓名和总分。提供一个适当的构造方法以及getName()，addQuiz(int score)，getTotalScore()和getAverageScore()方法。 为计算后者，需要存储学生参加测验的次数。 Class Student 1234567891011121314151617181920212223242526272829303132333435363738package Student;public class Student &#123; private String name; private int totalScore; //根据需求增加隐含变量 private int number; //构造方法 public Student() &#123; this.name = &quot;匿名用户&quot;; &#125; public Student(String name) &#123; this.name = name; &#125; //功能方法 public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getTotalScore() &#123; return totalScore; &#125; public void addQuiz(int Score) &#123; if(Score&lt;0) &#123; System.out.println(&quot;分数异常&quot;); &#125; this.totalScore += Score; this.number++; &#125; public int getAverageScore()&#123; if(this.number&lt;=0) &#123; return 0; &#125; return this.totalScore/this.number; &#125;&#125; Main 1234567891011package Student;public class Main4 &#123; public static void main(String[] args) &#123; Student s = new Student(); s.setName(&quot;容狗蛋&quot;); s.addQuiz(56); s.addQuiz(71); s.addQuiz(35); System.out.println(s.getName()+&quot;，总成绩为：&quot;+s.getTotalScore()+&quot;，平均成绩为：&quot;+s.getAverageScore()); &#125;&#125; 6.[项目]矩形的周长和面积 Class Rectangle 12345678910111213141516171819202122232425262728293031323334353637package Rectangle;public class Rectangle &#123; private double length; private double width; public Rectangle() &#123; this.length = 1; this.width = 1; &#125; public Rectangle(double length,double width) &#123; this.length = length; this.width = width; &#125; public double calPerimeter() &#123; return(this.length+this.width)*2; &#125; public double calArea() &#123; return this.length*this.width; &#125; public double getLength() &#123; return length; &#125; public void setLength(double length) &#123; this.length = length; &#125; public double getWidth() &#123; return width; &#125; public void setWidth(double width) &#123; this.width = width; &#125;&#125; Main 1234567package Rectangle;public class Main &#123; public static void main(String[] args) &#123; Rectangle r = new Rectangle(3,4); System.out.println(&quot;长为：&quot;+r.getLength()+&quot;，宽为：&quot;+r.getWidth()+&quot;，周长为：&quot;+r.calPerimeter()+&quot;，面积为：&quot;+r.calArea()); &#125;&#125; 7.[项目]发票 Class Invoice 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package Invoice;import java.util.Date;public class Invoice &#123; private String companyName; private Date date = new Date(); private final int NUM = 10; public Invoice() &#123; this.companyName = &quot;空&quot;; &#125; public Invoice(String companyName) &#123; this.companyName = companyName; &#125; private Item[] items = new Item[NUM]; public String getCompanyName() &#123; return companyName; &#125; public void setCompanyName(String companyName) &#123; this.companyName = companyName; &#125; public void printInvoice() &#123; System.out.println(&quot;*******************************************&quot;); System.out.println(&quot;\\t\\t&quot;+companyName); System.out.println(&quot;*******************************************&quot;); int length = size(); double total = 0; for(int i=0;i&lt;length;i++) &#123; Item item = items[i]; System.out.println(item.getItemInfo()); total = item.getSmallCount(); &#125; System.out.println(&quot;总计：\\t\\t\\t&quot;+total); System.out.println(&quot;开票日期：&quot;+date); System.out.println(&quot;*******************************************&quot;); &#125; public void addItem(Item item) &#123; int index = size(); if(index==NUM) &#123; System.out.println(&quot;发票最多打印&quot;+NUM+&quot;个商品&quot;); return; &#125; items[index] = item; &#125; private int size() &#123; for(int i=0;i&lt;items.length;i++) &#123; if(items[i]==null) &#123; return i; &#125; &#125; return NUM; &#125; &#125; Class Item 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package Invoice;public class Item &#123; //成员 private String name; private double price; private int number; //构造方法 public Item() &#123; this.name = &quot;空&quot;; this.price = 0.0; this.number = 0; &#125; public Item(String name,double price,int number) &#123; this.name = name; this.price = price; this.number = number; &#125; //基本方法 public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public double getPrice() &#123; return price; &#125; public void setPrice(double price) &#123; this.price = price; &#125; public int getNumber() &#123; return number; &#125; public void setNumber(int number) &#123; this.number = number; &#125; //功能方法 public double getSmallCount() &#123; return this.price*this.number; &#125; public String getItemInfo() &#123; return name+&quot;\\t&quot;+number+&quot;\\t&quot;+price+&quot;\\t&quot;+this.getSmallCount(); &#125;&#125; Main 123456789101112package Invoice;public class Main &#123; public static void main(String[] args) &#123; Invoice inv = new Invoice(&quot;胡氏集团总公司&quot;); Item i1 = new Item(&quot;iPhone5S&quot;,6088,1); inv.addItem(i1); Item i2 = new Item(&quot;iPhone X&quot;,9688,1); inv.addItem(i2); inv.printInvoice(); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第12次课程","slug":"技术向/Java/源辰课程记录/第12次课程","date":"2019-05-09T16:00:00.000Z","updated":"2022-05-11T01:09:32.176Z","comments":true,"path":"技术向/Java/源辰课程记录/第12次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC12%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第12次课程 05.10.2019 内容 1.井字棋盘 模式识别 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374import java.util.Random;import java.util.Scanner;public class Test1 &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); System.out.println(&quot;请录入矩阵行列数：&quot;); int n = sc.nextInt(); //创建矩阵 int[][] board = new int[n][n]; //初始化矩阵 Random r = new Random(); for(int i=0;i&lt;board.length;i++) &#123; for(int j=0;j&lt;board.length;j++) &#123; board[i][j] = r.nextInt(2); System.out.print(board[i][j]+&quot; &quot;); &#125; System.out.println(); &#125; //检测行 for(int i=0;i&lt;board.length;i++) &#123; boolean isSame = true; for(int j=0;j&lt;board.length;j++) &#123; if(board[0][0]!=board[i][j]) &#123; isSame = false; break; &#125; &#125; if(isSame) &#123; System.out.println(&quot;第&quot;+(i+1)+&quot;行全是：&quot;+board[i][0]); &#125; &#125; //检测列 for(int i=0;i&lt;board.length;i++) &#123; boolean isSame = true; for(int j=0;j&lt;board.length;j++) &#123; if(board[0][i]!=board[j][i]) &#123; isSame = false; break; &#125; &#125; if(isSame) &#123; System.out.println(&quot;第&quot;+(i+1)+&quot;列全是：&quot;+board[0][i]); &#125; &#125; //检测主对角 boolean isSame = true; for(int i=1;i&lt;board.length;i++) &#123; if(board[0][0]!=board[i][i]) &#123; isSame = false; break; &#125; &#125; if(isSame) &#123; System.out.println(&quot;主对角全是：&quot;+board[0][0]); &#125; //检测次对角 isSame = true; for(int i=1;i&lt;board.length;i++) &#123; if(board[i][board.length-1]!=board[i][board.length-i-1]) &#123; isSame = false; break; &#125; &#125; if(isSame) &#123; System.out.println(&quot;次对角全是：&quot;+board[0][board.length-1]); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第11次课程","slug":"技术向/Java/源辰课程记录/第11次课程","date":"2019-05-07T16:00:00.000Z","updated":"2022-05-11T01:09:18.776Z","comments":true,"path":"技术向/Java/源辰课程记录/第11次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC11%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第11次课程 05.08.2019 内容 1.矩阵相乘（标准版） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182import java.text.DecimalFormat;import java.util.Scanner;public class juzhenchengfa &#123; public static void main(String[] args) &#123; int n = 2; double[][] matrix1 = inputMatrix(n); double[][] matrix2 = inputMatrix(n); double[][] result = multiplyMatrix(matrix1,matrix2); //print(result); printFormula(matrix1,matrix2,result,&#x27;*&#x27;); &#125; public static double[][] inputMatrix(int n)&#123; Scanner sc = new Scanner(System.in); double[][] arr = new double[n][n]; System.out.println(&quot;请输入矩阵值：&quot;); for(int i=0;i&lt;arr.length;i++) &#123; for(int j=0;j&lt;arr[i].length;j++) &#123; arr[i][j] = sc.nextDouble(); &#125; &#125; return arr; &#125; public static double[][] multiplyMatrix(double[][]a,double[][]b)&#123; double[][] result = new double[a.length][a[0].length]; //矩阵乘法核心算法 for(int i=0;i&lt;a.length;i++) &#123; for(int j=0;j&lt;a[i].length;j++) &#123; for(int k=0;k&lt;a[0].length;k++) &#123; result[i][j] = result[i][j] + a[i][k] + b[k][j]; &#125; &#125; &#125; return result; &#125; public static void print(double[][] arr) &#123; for(int i=0;i&lt;arr.length;i++) &#123; for(int j=0;j&lt;arr[i].length;j++) &#123; System.out.print(arr[i][j]+&quot;\\t&quot;); &#125; System.out.println(); &#125; &#125; public static void printFormula(double[][] arr1,double[][] arr2,double[][] arr3,char op) &#123; //限定double小数位数，四舍五入。 DecimalFormat df = new DecimalFormat(&quot;0.00&quot;); //外层循环控制打印行 for(int i=0;i&lt;arr1.length;i++) &#123; //打印arr1 for(int j=0;j&lt;arr1[i].length;j++) &#123; System.out.print(df.format(arr1[i][j])+&quot; &quot;); &#125; if(i==arr1.length/2) &#123; System.out.print(&quot; &quot;+op+&quot; &quot;); &#125;else &#123; System.out.print(&quot; &quot;); &#125; //打印arr2 for(int j=0;j&lt;arr2[i].length;j++) &#123; System.out.print(df.format(arr2[i][j])+&quot; &quot;); &#125; if(i==arr1.length/2) &#123; System.out.print(&quot; = &quot;); &#125;else &#123; System.out.print(&quot; &quot;); &#125; //打印result for(int j=0;j&lt;arr3[i].length;j++) &#123; System.out.print(df.format(arr3[i][j])+&quot; &quot;); &#125; System.out.println(); &#125; &#125;&#125; 2.矩阵转置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import java.util.Scanner;public class juzhenzhuanzhi &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); int rows,cols; System.out.println(&quot;请输入行数：&quot;); rows = sc.nextInt(); System.out.println(&quot;请输入列数：&quot;); cols = sc.nextInt(); int[][] arr = new int[rows][cols]; int[][] result = new int[cols][rows]; arr = inputMatrix(arr); System.out.println(&quot;矩阵转置前：&quot;); print(arr); result = transpose(arr); System.out.println(&quot;矩阵转置后：&quot;); print(result); &#125; private static int[][] transpose(int[][] arr) &#123; //转置核心算法 //rows -&gt; cols cols-&gt;rows int[][] result = new int[arr[0].length][arr.length]; for(int i=0;i&lt;arr.length;i++) &#123; for(int j=0;j&lt;arr[i].length;j++) &#123; result[j][i] = arr[i][j]; &#125; &#125; return result; &#125; private static int[][] inputMatrix(int[][] arr) &#123; Scanner sc = new Scanner(System.in); System.out.println(&quot;请输入矩阵中的数据：&quot;); for(int i=0;i&lt;arr.length;i++) &#123; for(int j=0;j&lt;arr[i].length;j++) &#123; arr[i][j] = sc.nextInt(); &#125; &#125; return arr; &#125; public static void print(int[][] arr) &#123; for(int i=0;i&lt;arr.length;i++) &#123; for(int j=0;j&lt;arr[i].length;j++) &#123; System.out.print(arr[i][j]+&quot; &quot;); &#125; System.out.println(); &#125; &#125;&#125; 3.[大数据]人物相似画像 两点之间最短距离 1234567int a,b,c,p1,p2;//相当于：(p1-p2)^2a = Math.pow(p1-p2, 2);//相当于：二次根号b = Math.sqrt(a);//合并：根号(p1-p2)^2c = Math.sqrt(Math.pow(p1-p2, 2)); 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import java.util.Scanner;public class sanweishuzuzuixiaojuli &#123; public static void main(String[] args) &#123; /*double[][] points = new double[][]&#123; &#123;-1,0,3&#125;, &#123;-1,-1,-1&#125;, &#123;4,1,1&#125;, &#123;2,0.5,9&#125;, &#123;3.5,2,-1&#125;, &#123;3,1.5,3&#125;, &#123;-1.5,4,2&#125;, &#123;5.5,4,-0.5&#125; &#125;;*/ double[][] points = inputData(); int p1=0,p2=0; //设第一个数组和第二个数组之间为最小值，再与后面比较 double shortDistance = distance(points[0],points[1]); for(int i=0;i&lt;points.length;i++) &#123; for(int j=i+1;j&lt;points.length;j++) &#123; double d = distance(points[i],points[j]); System.out.println(&quot;第&quot;+i+&quot;点到第&quot;+j+&quot;点的距离为：&quot;+d); if(d&lt;shortDistance) &#123; p1 = i; p2 = j; shortDistance=d; &#125; &#125; &#125; System.out.println(&quot;最短距离是第&quot;+p1+&quot;点到第&quot;+p2+&quot;点的距离为：&quot;+shortDistance); &#125; private static double[][] inputData() &#123; Scanner sc = new Scanner(System.in); String[] films = &#123;&quot;盗梦空间&quot;,&quot;哈利波特&quot;,&quot;流浪地球&quot;&#125;; System.out.println(&quot;请输入采样人数：&quot;); int n = sc.nextInt(); double[][] rates = new double[n][films.length]; for(int i=0;i&lt;n;i++) &#123; System.out.println(&quot;请输入第&quot;+(i+1)+&quot;位人的评分：&quot;); for(int j=0;j&lt;films.length;j++) &#123; System.out.println(&quot;请输入您对：《&quot;+films[j]+&quot;》的评分(1，2，3，4，5)&quot;); rates[i][j] = sc.nextInt(); &#125; &#125; return rates; &#125; public static double distance(double[] point1,double[] point2) &#123; //规整化 double add = 0; for(int i=0;i&lt;point1.length;i++) &#123; add += Math.pow(point1[i]-point2[i], 2); &#125; return Math.sqrt(add); &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第10次课程","slug":"技术向/Java/源辰课程记录/第10次课程","date":"2019-05-05T16:00:00.000Z","updated":"2022-05-11T01:09:02.835Z","comments":true,"path":"技术向/Java/源辰课程记录/第10次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC10%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第10次课程 05.06.2019 内容 1.[项目]案例六：银行互相借贷的安全问题 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public class Test1 &#123; public static void main(String[] args) &#123; // 银行数目 int n = 5; // 银行安全线 double limit = 201; // 每家银行的现金余额 double[] balance = new double[] &#123; 25, 125, 175, 75, 181 &#125;; // 存借贷关系 double[][] load = new double[][] &#123; &#123; 0, 100.5, 0, 0, 320.5 &#125;, &#123; 0, 0, 40, 85, 0 &#125;, &#123; 125, 0, 0, 75, 0 &#125;, &#123; 125, 0, 0, 0, 0 &#125;, &#123; 0, 0, 125, 0, 0 &#125; &#125;; // 每个银行的净资产 double[] assets = new double[n]; // boolean型默认为false，这里均改为true boolean[] isSafe = new boolean[n]; for (int i = 0; i &lt; isSafe.length; i++) &#123; isSafe[i] = true; &#125; boolean newUnSafeBank = true; while (newUnSafeBank) &#123; newUnSafeBank = false; // 查找不安全的银行 for (int i = 0; i &lt; n; i++) &#123; // 求出净资产 assets[i] = balance[i]; for (int j = 0; j &lt; n; j++) &#123; assets[i] = assets[i] + load[i][j]; &#125; // 判断银行是否低于安全线以下 // 仅判断之前已认为安全的银行（红字） if (isSafe[i]==true &amp;&amp; assets[i]&lt;limit) &#123; newUnSafeBank = true; isSafe[i] = false; System.out.println(&quot;第&quot; + i + &quot;家银行不安全&quot;); // 将该银行二维数组中i这一列均置为0 for (int k = 0; k &lt; n; k++) &#123; load[k][i] = 0; &#125; &#125; &#125; &#125; printArr(load); &#125; public static void printArr(double[][] arr) &#123; for (int i = 0; i &lt; arr.length; i++) &#123; for (int j = 0; j &lt; arr[i].length; j++) &#123; System.out.print(arr[i][j] + &quot;\\t&quot;); &#125; System.out.println(); &#125; &#125;&#125; 2.矩阵相加 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import java.util.Scanner;public class Test2 &#123; public static void main(String[] args) &#123; int n = 3; double[][] matrix1 = inputMatrix(n); double[][] matrix2 = inputMatrix(n); double[][] result = addMatrix(matrix1,matrix2); //print(result); printFormula(matrix1,matrix2,result,&#x27;+&#x27;); &#125; public static double[][] inputMatrix(int n)&#123; Scanner sc = new Scanner(System.in); double[][] arr = new double[n][n]; for(int i=0;i&lt;arr.length;i++) &#123; for(int j=0;j&lt;arr[i].length;j++) &#123; arr[i][j] = sc.nextDouble(); &#125; &#125; return arr; &#125; public static double[][] addMatrix(double[][] a,double[][] b)&#123; double[][] result = new double[a.length][a[0].length]; for(int i=0;i&lt;a.length;i++) &#123; for(int j=0;j&lt;a[i].length;j++) &#123; result[i][j] = a[i][j] + b[i][j]; &#125; &#125; return result; &#125; public static void print(double[][] arr) &#123; for(int i=0;i&lt;arr.length;i++) &#123; for(int j=0;j&lt;arr[i].length;j++) &#123; System.out.print(arr[i][j]+&quot;\\t&quot;); &#125; System.out.println(); &#125; &#125; public static void printFormula(double[][] arr1,double[][] arr2,double[][] arr3,char op) &#123; for(int i=0;i&lt;arr1.length;i++) &#123; for(int j=0;j&lt;arr1[i].length;j++) &#123; System.out.print(arr1[i][j]+&quot; &quot;); &#125; if(i==arr1.length/2) &#123; System.out.print(&quot; &quot;+op+&quot; &quot;); &#125;else &#123; System.out.print(&quot; &quot;); &#125; for(int j=0;j&lt;arr2[i].length;j++) &#123; System.out.print(arr2[i][j]+&quot; &quot;); &#125; if(i==arr1.length/2) &#123; System.out.print(&quot; = &quot;); &#125;else &#123; System.out.print(&quot; &quot;); &#125; for(int j=0;j&lt;arr3[i].length;j++) &#123; System.out.print(arr3[i][j]+&quot; &quot;); &#125; System.out.println(); &#125; &#125;&#125; 3.矩阵相乘 DecimaiFormat使用方法 用于限定double小数位输出 12345//限定double小数位数，四舍五入。import java.text.DecimalFormat;DecimalFormat df = new DecimalFormat(&quot;0.00&quot;);double i = 3.33333333333 ;System.out.print(df.format(i)); 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071import java.text.DecimalFormat;import java.util.Scanner;public class Test3 &#123; public static void main(String[] args) &#123; int n = 3; double[][] matrix1 = inputMatrix(n); double[][] matrix2 = inputMatrix(n); double[][] result = multiplyMatrix(matrix1,matrix2); //print(result); printFormula(matrix1,matrix2,result,&#x27;*&#x27;); &#125; public static double[][] inputMatrix(int n)&#123; Scanner sc = new Scanner(System.in); double[][] arr = new double[n][n]; for(int i=0;i&lt;arr.length;i++) &#123; for(int j=0;j&lt;arr[i].length;j++) &#123; arr[i][j] = sc.nextDouble(); &#125; &#125; return arr; &#125; public static double[][] multiplyMatrix(double[][]a,double[][]b)&#123; double[][] result = new double[a.length][a[0].length]; for(int i=0;i&lt;a.length;i++) &#123; for(int j=0;j&lt;a[i].length;j++) &#123; //存在bug result[i][j] = a[i][0]*b[0][j]+a[i][1]*b[1][j]+a[i][2]*b[2][j]; &#125; &#125; return result; &#125; public static void print(double[][] arr) &#123; for(int i=0;i&lt;arr.length;i++) &#123; for(int j=0;j&lt;arr[i].length;j++) &#123; System.out.print(arr[i][j]+&quot;\\t&quot;); &#125; System.out.println(); &#125; &#125; public static void printFormula(double[][] arr1,double[][] arr2,double[][] arr3,char op) &#123; //限定double小数位数，四舍五入。 DecimalFormat df = new DecimalFormat(&quot;0.00&quot;); for(int i=0;i&lt;arr1.length;i++) &#123; for(int j=0;j&lt;arr1[i].length;j++) &#123; System.out.print(df.format(arr1[i][j])+&quot; &quot;); &#125; if(i==arr1.length/2) &#123; System.out.print(&quot; &quot;+op+&quot; &quot;); &#125;else &#123; System.out.print(&quot; &quot;); &#125; for(int j=0;j&lt;arr2[i].length;j++) &#123; System.out.print(df.format(arr2[i][j])+&quot; &quot;); &#125; if(i==arr1.length/2) &#123; System.out.print(&quot; = &quot;); &#125;else &#123; System.out.print(&quot; &quot;); &#125; for(int j=0;j&lt;arr3[i].length;j++) &#123; System.out.print(df.format(arr3[i][j])+&quot; &quot;); &#125; System.out.println(); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第9次课程","slug":"技术向/Java/源辰课程记录/第9次课程","date":"2019-04-28T16:00:00.000Z","updated":"2022-05-11T01:08:47.157Z","comments":true,"path":"技术向/Java/源辰课程记录/第9次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC9%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第9次课程 04.29.2019 内容 1.数组连续查找 123456789101112131415161718192021222324252627//嵌入上一节课“4.方法(函数)的调用”中//调用 查找功能-连续查找 System.out.println(&quot;请输入要查找的元素：&quot;); int tofind = sc.nextInt(); System.out.println(&quot;查找所有符合条件&quot;+tofind+&quot;的元素位置：&quot;); int tofindindex = -1; do &#123; tofindindex++; tofindindex = find(tofind,x,tofindindex); if(tofindindex!=-1) &#123; System.out.println(tofind+&quot;的位置在：&quot;+(tofindindex+1)); &#125; &#125;while(tofindindex !=-1);//查找功能-连续查找public static int find(int x,int[] arr,int start) &#123; int index = -1; for(int i=start;i&lt;arr.length;i++) &#123; if(x==arr[i]) &#123; index = i; break; &#125; &#125; return index; &#125; 2.[项目]生成数组、打印数组、打乱数组、冒泡排序、选择排序 生成数组方法： 12345678910111213141516171819private static int[] genArr(int length, int min, int max) &#123; //容错 if(length&lt;=0) &#123; System.out.println(&quot;系统异常代码1-1：数组长度必须大于0，实际输入的长度为：&quot;+length); return null; &#125; if(max&lt;=min) &#123; System.out.println(&quot;系统异常代码1-2：请按照要求填写数组范围...&quot;); return null; &#125; Random r = new Random(); int[] arr = new int[length]; for(int i=0;i&lt;arr.length;i++) &#123; arr[i] = r.nextInt(max-min)+(min); &#125; return arr; &#125; 打印数组方法： 123456789101112131415private static void printArr(int[] arr) &#123; //容错 if(arr==null) &#123; System.out.println(&quot;系统异常代码2-1：待输出的数组异常...&quot;); return; &#125; for(int i=0;i&lt;arr.length;i++) &#123; if(i%10==0) &#123; System.out.println(); &#125; System.out.print(arr[i]+&quot; &quot;); &#125; &#125; 打乱数组方法： 123456789101112131415private static void shuffleArr(int[] arr) &#123; Random r = new Random(); for(int i=0;i&lt;arr.length*2;i++) &#123; int index1 = r.nextInt(arr.length); int index2 = r.nextInt(arr.length); swap(arr,index1,index2); &#125; &#125;//交换数组元素private static void swap(int[] arr, int index1, int index2) &#123; int temp = arr[index1]; arr[index1] = arr[index2]; arr[index2] = temp; &#125; 冒泡排序方法： 原理图： ** ** 1234567891011121314151617181920private static void bubbleSort(int[] arr) &#123; if(arr==null) &#123; System.out.println(&quot;系统异常代码3-1：待输出的数组异常...&quot;); return; &#125; for(int i=0;i&lt;arr.length-1;i++) &#123; for(int j=0;j&lt;arr.length-i-1;j++) &#123; if(arr[j]&gt;arr[j+1]) &#123; swap(arr,j,j+1); &#125; &#125; &#125; &#125;//交换数组元素private static void swap(int[] arr, int index1, int index2) &#123; int temp = arr[index1]; arr[index1] = arr[index2]; arr[index2] = temp; &#125; 选择排序方法： 123456789101112131415161718192021222324private static void selectSort(int[] arr) &#123; for(int i=0;i&lt;arr.length;i++) &#123; int minIndex = findMinIndex(arr,i); swap(arr,minIndex,i); &#125; &#125;//查最小值的下标 private static int findMinIndex(int[] arr, int i) &#123; int minIndex = i; for(int j=i+1;j&lt;arr.length;j++) &#123; if(arr[j]&lt;arr[minIndex]) &#123; minIndex = j; &#125; &#125; return minIndex; &#125;//交换数组元素private static void swap(int[] arr, int index1, int index2) &#123; int temp = arr[index1]; arr[index1] = arr[index2]; arr[index2] = temp; &#125; 插入排序方法： 原理图： 1234567891011private static void insertSort(int[] arr) &#123; for(int i=1;i&lt;arr.length;i++) &#123; int next = arr[i]; int j = i; while(j&gt;0&amp;&amp;arr[j-1]&gt;next) &#123; arr[j] = arr[j-1]; j--; &#125; arr[j] = next; &#125; &#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第8次课程","slug":"技术向/Java/源辰课程记录/第8次课程","date":"2019-04-25T16:00:00.000Z","updated":"2022-05-11T01:08:26.929Z","comments":true,"path":"技术向/Java/源辰课程记录/第8次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC8%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第8次课程 04.26.2019 内容 1.创建数组 12345678910111213141516171819202122232425262728293031323334public class test1 &#123; public static void main(String[] args) &#123; //数组声明 //类型[] 数组名; //类型：基本型/引用型 int[] x; //数组初始化 x = new int[10]; //数组声明，同时初始化 int[] xx = new int[10]; //方式一 int xxx[] = new int[10]; //方式二 double[] y = new double[10]; String[] z = new String[10]; // hash码(哈希码) 地址 //[I@15db9742 &quot;[&quot;代表数组，&quot;I&quot;代表int型，此后为地址 System.out.println(x); //[D@6d06d69c &quot;D&quot;代表double型 System.out.println(y); //[Ljava.lang.String;@7852e922 System.out.println(z); //逐个打印数组内的值 for(int i=0;i&lt;10;i++) &#123; //数组初始化未指定值，默认为0(int) 0.0(double) null(String) System.out.println(x[i]+&quot;\\t&quot;+y[i]+&quot;\\t&quot;+z[i]); &#125; //更多的定义方式 int[] a = &#123;1,2,3,4&#125;; double[] b = new double[] &#123;1.0,2.0,3.0,4.0&#125;; //数组下标从0开始，数组长度可以以属性.length System.out.println(x.length); &#125;&#125; 2.引用数组和复制数组 123456789101112131415161718192021222324public class test2 &#123; public static void main(String[] args) &#123; //引用，相当于x的别名为y。x和y共用一个地址，x和y为同一个数组。 int[] x = &#123;1,2,3,4&#125;; int[] y = x; //改变y中的值，实际上也改变了x中的值 y[0] = 9; System.out.println(x[0]); System.out.println(y[0]); //创建一个新的数组，并且复制原数组xx的值。xx和z为两个不同的数组。 int[] xx = &#123;1,2,3,4&#125;; int[] z = new int[xx.length]; for(int i=0;i&lt;xx.length;i++) &#123; z[i] = xx[i]; &#125; //改变了xx中的值，不影响另一个复制的数组z中的值。 xx[0] = 9; System.out.println(xx[0]); System.out.println(z[0]); &#125;&#125; 3.数组越界错误 1234567891011121314151617181920public class test3 &#123; public static void main(String[] args) &#123; int[] x = &#123;1,2,3&#125;; //打印数组元素个数 System.out.println(x.length); //错误：越界 (超出了数组初始化的范围) //java.lang.ArrayIndexOutOfBoundsException: 3 System.out.println(x[3]); int[] y =null; //错误：空指针 (数组声明后，没有初始化申请空间) //java.lang.NullPointerException System.out.println(y[0]); &#125;&#125; 4.方法(函数)的调用 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374import java.util.*;public class test4 &#123; public static void main(String[] args) &#123; //调用 随机生成数组 方法 int[] x = genArr(10); //调用 打印数组 方法 printArr(x); Scanner sc = new Scanner(System.in); System.out.println(); System.out.println(&quot;请输入要查找的元素：&quot;); int num = sc.nextInt(); //调用 查找功能 方法 int index = find(num,x); System.out.println(index==-1?&quot;查无此元素&quot;:&quot;数组中存在这个元素，它的位置是：&quot;+(index+1)); //调用 查最大值 方法 int max = findMax(x); System.out.println(&quot;最大值为：&quot;+max); //调用 查最小值 方法 int min = findMin(x); System.out.println(&quot;最小值为：&quot;+min); &#125; //查找功能 方法(函数) public static int find(int x,int[] arr) &#123; int index = -1; for(int i=0;i&lt;arr.length;i++) &#123; if(x==arr[i]) &#123; index = i; break; &#125; &#125; return index; &#125; //随机生成数组 public static int[] genArr(int length) &#123; Random r = new Random(); int[] arr = new int[length]; for(int i=0;i&lt;arr.length;i++) &#123; arr[i]=r.nextInt(100); &#125; return arr; &#125; //打印数组 public static void printArr(int[] arr) &#123; for(int i=0;i&lt;arr.length;i++) &#123; System.out.print(arr[i]+&quot;\\t&quot;); &#125; &#125; //查最大值 public static int findMax(int[]arr) &#123; int max = arr[0]; for(int i=0;i&lt;arr.length;i++) &#123; if(max&lt;arr[i]) &#123; max = arr[i]; &#125; &#125; return max; &#125; //查最小值 public static int findMin(int[]arr) &#123; int min = arr[0]; for(int i=0;i&lt;arr.length;i++) &#123; if(min&gt;arr[i]) &#123; min = arr[i]; &#125; &#125; return min; &#125;&#125; 5.二维数组 123456789101112131415161718192021222324252627282930313233343536import java.util.*;public class erweishuzu &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); System.out.println(&quot;请输入行列：(空格隔开)&quot;); int rows = sc.nextInt(); int cols = sc.nextInt(); int[][] array = new int[rows][cols]; System.out.println(&quot;刚生成的原数组如下：&quot;); show(array); System.out.println(&quot;随机生成元素后数组如下：&quot;); gen(array); show(array); &#125; //初始化二维数组的元素 public static void gen(int[][] arr) &#123; Random r = new Random(); for(int i=0;i&lt;arr.length;i++) &#123; for(int j=0;j&lt;arr[i].length;j++) &#123; arr[i][j] = r.nextInt(10); &#125; &#125; &#125; //打印二维数组 public static void show(int[][] arr) &#123; for(int i=0;i&lt;arr.length;i++) &#123; for(int j=0;j&lt;arr[i].length;j++) &#123; System.out.print(arr[i][j]+&quot; &quot;); &#125; System.out.println(); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第7次课程","slug":"技术向/Java/源辰课程记录/第7次课程","date":"2019-04-23T16:00:00.000Z","updated":"2022-05-11T01:08:11.823Z","comments":true,"path":"技术向/Java/源辰课程记录/第7次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC7%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第7次课程 04.24.2019 内容 1.题目： 编写程序输出1-100之间所有能被7整除的偶数。 12345678910public class bei7chu &#123; public static void main(String[] args) &#123; int i; for(i=1;i&lt;=100;i++) &#123; if(i%7==0&amp;&amp;i%2==0) &#123; System.out.println(i); &#125; &#125; &#125;&#125; 2.题目： 求所有满足如下条件的四位数：千位上的数字大于百位数字，百位数字大于十位数字，十位数字大于个位数字，并且千位数字是其他三位数字的和。 12345678910111213141516171819202122232425262728293031323334public class test8 &#123; public static void main(String[] args) &#123; /* * 千位 * 1234/1000=1 * 1234%1000=234 * 百位 * 234/100=2 * 234%100=34 * 十位 * 34/10=3 * 34%10=4 * 个位 * 4/1=4 * */ int i; for(i=1000;i&lt;=9999;i++) &#123; int a,b,c,d,temp; a=i/1000; temp=i%1000; b=temp/100; temp=temp%100; c=temp/10; temp=temp%10; d=temp/1; if(a&gt;b&amp;&amp;b&gt;c&amp;&amp;c&gt;d&amp;&amp;a==b+c+d) &#123; System.out.println(i); &#125; &#125; &#125;&#125; 3.题目： 给定两个任意的正整数,求它们之间的所有完全平方数，完全平方数是指这个数是某个整数的平方，例如 16，25，36等都是完全平方数。 12判断完全平方数：Math.sqrt(i)%1==0 12345678910111213141516171819202122232425262728293031323334353637import java.util.*;public class test9 &#123; public static void main(String[] args) &#123; /* * 判断完全平方数：Math.sqrt(i)%1==0 */ Scanner sc = new Scanner(System.in); int i,j; System.out.println(&quot;请输入起始值：&quot;); i = sc.nextInt(); System.out.println(&quot;请输入终止值：&quot;); j = sc.nextInt(); //常规算法 //推荐使用 for(int a=i;a&lt;=j;a++) &#123; if(Math.sqrt(a)%1==0)&#123; System.out.println(a); &#125; &#125; System.out.println(); //老师算法 //Math.sqrt(x) =&gt; 求x的平方根 //Math.ceil(x) =&gt; 求大于x的最小整数 for(int b=i;b&lt;=j;b++) &#123; for(int z=1;z&lt;=Math.ceil(Math.sqrt(b));z++) &#123; if(b==z*z) &#123; System.out.println(b); break; &#125; &#125; &#125; &#125;&#125; 4.题目： 编写程序求下列多项式的前50项的和：1-1&#x2F;3+1&#x2F;5-1&#x2F;7+1&#x2F;9-…… 12345678910111213141516171819202122public class test10 &#123; public static void main(String[] args) &#123; /** * 1-1/3+1/5-1/7+1/9...... 单数项：+ 偶数项：- 分母：+2 */ double sum = 0, x = 1, y = 1; int count = 4; int i = 1; for (; i &lt;= count; i++) &#123; if (i % 2 == 0) &#123; sum = sum - x / y; System.out.print(&quot;-&quot; + x + &quot;/&quot; + y); &#125; else &#123; sum = sum + x / y; System.out.print(&quot;+&quot; + x + &quot;/&quot; + y); &#125; y = y + 2; &#125; System.out.println(); System.out.println(&quot;前&quot; + count + &quot;项的结果：&quot; + sum); &#125;&#125; 5.题目： 编写程序输出1-100之间的所有素数。 12345678910111213141516171819public class test12 &#123; public static void main(String[] args) &#123; for(int i=1;i&lt;=100;i++) &#123; boolean flag=true; //判断除了1(因此，z不能从1开始)和自身(i)以外，是否还存在其他(i-1)可以被整除的数 for(int z=2;z&lt;=i-1;z++) &#123; if(i%z==0) &#123; //若存在，则不是素数，打上false标签 flag = false; break; &#125; &#125; if(flag==true) &#123; System.out.println(i+&quot;是素数&quot;); &#125; &#125; &#125;&#125; 6.题目： 求斐波那契数列前n项的和值,斐波那契数列如下：1，1，2，3，5，8，13，21…… 123456789101112131415161718192021public class test14 &#123; public static void main(String[] args) &#123; /** * 斐波那契数列 * 1,1,2,3,5,8,13,21...... * 前两位数是1,从第三位开始每位数都是前两位数之和 */ //前两位 int num1=1,num2=1; System.out.print(num1+&quot;,&quot;+num2); //从第三位开始,前两位数之和 for(int i=3;i&lt;=8;i++) &#123; int num3; num3=num1+num2; System.out.print(&quot;,&quot;+num3); //更换新前两位 num1=num2; num2=num3; &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第6次课程","slug":"技术向/Java/源辰课程记录/第6次课程","date":"2019-04-21T16:00:00.000Z","updated":"2022-05-11T01:07:55.066Z","comments":true,"path":"技术向/Java/源辰课程记录/第6次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC6%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第6次课程 04.22.2019 内容 1.回顾 2.[项目]圣诞树 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package Test0422;import java.util.Scanner;public class shengdanshu &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); System.out.println(&quot;请输入行数：&quot;); int n = sc.nextInt(); for (int i = 1; i &lt;= n - 2; i++) &#123; for (int j = 1; j &lt;= n - i; j++) &#123; System.out.print(&quot; &quot;); &#125; for (int k = 1; k &lt;= i * 2 - 1; k++) &#123; if (k == 1 || k == i * 2 - 1 || i == n - 2) &#123; System.out.print(&quot;*&quot;); &#125; else &#123; System.out.print(&quot; &quot;); &#125; &#125; System.out.println(); &#125; for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= n - i; j++) &#123; System.out.print(&quot; &quot;); &#125; for (int k = 1; k &lt;= i * 2 - 1; k++) &#123; System.out.print(&quot;*&quot;); &#125; System.out.println(); &#125; if (n % 2 == 0) &#123; // 偶数行自适应树干 for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= n / 2; j++) &#123; System.out.print(&quot; &quot;); &#125; for (int k = 1; k &lt;= n - 1; k++) &#123; System.out.print(&quot;*&quot;); &#125; System.out.println(); &#125; &#125; else &#123; // 奇数行自适应树干 for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= n / 2; j++) &#123; System.out.print(&quot; &quot;); &#125; for (int k = 1; k &lt;= n; k++) &#123; System.out.print(&quot;*&quot;); &#125; System.out.println(); &#125; &#125; &#125;&#125; 3.[项目]三值最大 123456789101112131415package Test0422;import java.util.Scanner;public class bijiaodaxiao &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); System.out.println(&quot;请输入三个数：&quot;); //n1 n2 n3 int x = sc.nextInt(); int y = sc.nextInt(); int z = sc.nextInt(); int max=x&gt;y?x:y; max=max&gt;z?max:z; System.out.println(&quot;最大值为：&quot;+max); &#125;&#125; 4.[项目]电话费 12345678910111213141516171819202122232425package Test0422;import java.util.*;public class dianhuafei &#123; private static final int PACKAGE = 180; private static final double MONEY1 = 0.2; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); System.out.println(&quot;请输入通话时长(秒)：&quot;); int times = sc.nextInt(); double fee = 0.0; if (times &lt; 0) &#123; System.out.println(&quot;错误代码001：通话时间不能为负值！&quot;); &#125; else &#123; if (times &lt;= PACKAGE) &#123; fee = MONEY1; &#125; else &#123;// times-MONEY1为int型，结果取整数 fee = MONEY1 + (times - MONEY1) / 60 * 0.1; if (times % 60 != 0) &#123; fee = fee + 0.1; &#125; &#125; System.out.println(&quot;通话时长为：&quot; + times + &quot;秒，收费为：&quot; + fee + &quot;元&quot;); &#125; &#125;&#125; 5.[项目]出租车 1234567891011121314151617181920package Test0422;import java.util.*;public class chuzuche &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); System.out.println(&quot;请输入里程数(公里)：&quot;); double miles = sc.nextDouble(); System.out.println(&quot;等待时间(秒)：&quot;); int seconds = sc.nextInt(); int fee = 10; if (miles &gt; 3) &#123; fee = fee + (int) ((miles - 3) / 0.5); &#125; fee = fee + seconds / 150; if (miles &gt; 15) &#123; fee = fee + (int) (fee * 0.5); &#125; System.out.println(&quot;行驶里程：&quot; + miles + &quot;公里，等待时间：&quot; + seconds + &quot;秒，收费：&quot; + fee + &quot;元&quot;); &#125;&#125; 6.[项目]分等级 1234567891011121314151617181920package Test0422;import java.util.Scanner;public class dengji &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); System.out.println(&quot;请输入一个分数：&quot;); int score = sc.nextInt(); if(score&gt;=90) &#123; System.out.println(&quot;A级&quot;); &#125;else if(score&gt;=80)&#123; System.out.println(&quot;B级&quot;); &#125;else if(score&gt;=70)&#123; System.out.println(&quot;C级&quot;); &#125;else if(score&gt;=60)&#123; System.out.println(&quot;D级&quot;); &#125;else &#123; System.out.println(&quot;E级&quot;); &#125; &#125;&#125; 7.[项目]奇数和 12345678910111213package Test0422;public class jishuqiuhe &#123; public static void main(String[] args) &#123; int sum = 0; for(int i=1;i&lt;=100;i++) &#123; if(i%2==1) &#123; sum = sum + i; &#125; &#125; System.out.println(&quot;总和：&quot;+sum); &#125;&#125; 8.Debug功能应用 一、调试（甲壳虫） 二、打开调试界面 三、功能使用 1.调试工作区清空 “调试”工作区内，”全部终止&#x2F;断开连接”-&gt;”除去所有终止的操作”。 2.断点 断点含义：调试时，程序执行到断点处将停止。 双击源码工作区左侧滑动条，出现圆球则断点。 3.直接运行程序及单步运行程序 (停止) (下一步) (直接运行到下一个断点) 4.查看变量状态 可在”变量”工作区查看。 其他 ****作业附件： 作业题4_学生.doc","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第5次课程","slug":"技术向/Java/源辰课程记录/第5次课程","date":"2019-04-18T16:00:00.000Z","updated":"2022-05-11T01:07:42.119Z","comments":true,"path":"技术向/Java/源辰课程记录/第5次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC5%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第5次课程 04.19.2019 内容 1.回顾 运算符 赋值 &#x3D; +&#x3D; -&#x3D;…. 从右向左 关系 &gt; &gt;&#x3D; &lt; &lt;&#x3D; !&#x3D; 计算出boolean值 逻辑 &amp;&amp; || ! &amp;&amp; || 短路 &amp;&amp;只要有一个操作数为 false ，则表达式的结果为false ||只要有一个操作数为true,则表达式结果为true 表达式1?表达式2:表达式3 相当 if…else 位: ^ 异或 () [] . 运算符优先级…. 控制流语句 条件 : if … else switch…case 循环: for while do..while 中断: break continue 输入输出，随机数: System.out.println(); System.out.print() import java.util.Scanner; Scanner sc&#x3D;new Scanner(System.in); System.in: 系统标准输入流 sc.nextLine(); &#x2F;&#x2F;以换行符为结束 sc.nextInt(); &#x2F;&#x2F;以空格为结束 sc.nextDouble(); … 随机数: import java.util.Random; Random r&#x3D;new Random(); r.nextInt(); &#x2F;&#x2F;生成整数 r.nextInt( range ); &#x2F;&#x2F; [0, range) 案例: 生成牌: ( 如何抽取数据，每次抽取的不同，且算法复杂度: N ) 闰平年: 每个月多少天. 2.eclipse软件 public static void main(String[] args) {} 快捷键：main alt+&#x2F; System.out.println(“”); 快捷键：syso alt+&#x2F; 调入包 快捷键：(将光标放在类名上) ctrl+1 快速复制一行 快捷键：ctrl+alt+向下键 快速删除一行 快捷键：ctrl+D 代码自动对齐 快捷键：ctrl+shift+f 3.eclipse外观设置 视图框意外关闭，恢复方法：窗口-&gt;perspective-&gt;复位透视图 字体及外观设置：窗口-&gt;首选项-&gt;常规-&gt;外观 4.[项目]税收问题（if用法) 实验题： 123常量的定义private static final double SINGLE_BRACKET1 = 21450;私有 静态 数据类型 常量名（大写字母）= 值 ; 12345678910111213141516171819202122232425262728293031323334353637package Test0419;import java.util.*;public class tax &#123; private static final double RATE1 = 0.15; private static final double RATE2 = 0.28; private static final double RATE3 = 0.31; private static final double SINGLE_BRACKET1 = 21450; private static final double SINGLE_BRACKET2 = 51900; private static final double MARRIED_BRACKET1 = 35800; private static final double MARRIED_BRACKET2 = 86500; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); System.out.println(&quot;请输入您的收入：&quot;); double income = in.nextDouble(); System.out.println(&quot;请输入婚姻状态(S 单身/M 已婚)：&quot;); String input = in.next(); double tax = 0; if (input.equals(&quot;S&quot;)) &#123; if (income &lt;= SINGLE_BRACKET1) &#123; tax = RATE1 * income; &#125; else if (income &lt;= SINGLE_BRACKET2) &#123; tax = RATE1 * SINGLE_BRACKET1 + RATE2 * (income - SINGLE_BRACKET1); &#125; else tax = RATE1 * SINGLE_BRACKET1 + RATE2 * (SINGLE_BRACKET2 - SINGLE_BRACKET1) + RATE3 * (income - SINGLE_BRACKET2); &#125; else if (input.equals(&quot;M&quot;)) &#123; if (income &lt;= MARRIED_BRACKET1) &#123; tax = RATE1 * income; &#125; else if (income &lt;= MARRIED_BRACKET2) &#123; tax = RATE1 * MARRIED_BRACKET1 + RATE2 * (income - MARRIED_BRACKET1); &#125; else tax = RATE1 * MARRIED_BRACKET1 + RATE2 * (MARRIED_BRACKET2 - MARRIED_BRACKET1) + RATE3 * (income - MARRIED_BRACKET2); &#125; System.out.println(&quot;所应缴的税款为：&quot;+tax); &#125;&#125; 5.do…while循环用法 菜单： 12345678910111213141516171819202122232425262728293031package Test0419;import java.util.*;public class dowhile &#123; public static void main(String[] args) &#123; Scanner sc=new Scanner(System.in); boolean flag = true; do &#123; System.out.println(&quot;===========学生管理系统============&quot;); System.out.println(&quot;1.登陆&quot;); System.out.println(&quot;2.退出&quot;); System.out.println(&quot;================================&quot;); int choice = sc.nextInt(); sc.nextLine(); if(choice==1) &#123; System.out.println(&quot;登陆服务器繁忙，请稍后......&quot;); System.out.println(&quot;按回车键继续......&quot;); sc.nextLine(); &#125;else if(choice==2) &#123; System.out.println(&quot;已安全退出程序&quot;); flag = false; &#125; /*while内 *flag==true时，满足循环。 *flag==false时，跳出循环。*/ &#125;while( flag ); &#125;&#125; 九九乘法表： 123456789101112131415package Test0419;public class jiujiuchengfabiao &#123; public static void main(String[] args) &#123; int i = 1; do &#123; int j = 1; do &#123; System.out.print(i+&quot;*&quot;+j+&quot;=&quot;+i*j); j++; &#125;while(j&lt;=i); System.out.println(); i++; &#125;while(i&lt;=9); &#125;&#125; 6.for循环用法 九九乘法表： 123456789101112package Test0419;public class jiujiuchengfabiaofor &#123; public static void main(String[] args) &#123; for(int i=1;i&lt;=9;i++) &#123; for(int j=1;j&lt;=i;j++) &#123; System.out.print(i+&quot;*&quot;+j+&quot;=&quot;+i*j); &#125; System.out.println(); &#125; &#125;&#125; 转存html文件 找到该源码文件（java）所生成的字节码文件（class），然后通过”&gt;.html”转存为网页文件（html）。&#x2F;&#x2F; 通过”&gt;.txt”转存为文档文件（txt）。 九九乘法表（加入html换行标签）： 1234567891011//package Test0419;public class jiujiuchengfabiaofor &#123; public static void main(String[] args) &#123; for(int i=1;i&lt;=9;i++) &#123; for(int j=1;j&lt;=i;j++) &#123; System.out.print(i+&quot;*&quot;+j+&quot;=&quot;+i*j); &#125; System.out.println(&quot;&lt;br/&gt;&quot;); &#125; &#125;&#125; 效果图如下： 7.for循环例题 星号三角例题 ** ** 解体源码如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182package Test0419;import java.util.Scanner;public class xingxingta1 &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); System.out.println(&quot;请输入行数：&quot;); int n = sc.nextInt(); System.out.println(&quot;例题一&quot;); for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= i; j++) &#123; System.out.print(&quot;*&quot;); &#125; System.out.println(); &#125; // System.out.println(); System.out.println(&quot;例题二&quot;); /* * 图解： 图 星 空 行i * * 1 4 1 * *** 3 3 2 * ***** 5 2 3 * ******* 7 1 4 ********** 9 0 5 * * 规则： * 空j：n-行 -&gt; n-i * 星j：行*2-1 -&gt; i*2-1 */ for (int i = 1; i &lt;= n; i++) &#123; // 打印空格 for (int j = 1; j &lt;= n - i; j++) &#123; System.out.print(&quot; &quot;); &#125; // 打印星号 for (int j =1; j &lt;=i*2-1 ; j++) &#123; System.out.print(&quot;*&quot;); &#125; // 换行 System.out.println(); &#125; System.out.println(&quot;例题三&quot;); for (int i = 1; i &lt;= n; i++) &#123; // 打印空格 for (int j = 1; j &lt;= n - i; j++) &#123; System.out.print(&quot; &quot;); &#125; // 打印星号 for (int j = 1; j &lt;= i * 2 - 1; j++) &#123; if (j == 1 || j == i * 2 - 1 || i == n) &#123; System.out.print(&quot;*&quot;); &#125; else &#123; System.out.print(&quot; &quot;); &#125; &#125; // 换行 System.out.println(); &#125; System.out.println(&quot;例题四&quot;); for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= n - i; j++) &#123; System.out.print(&quot; &quot;); &#125; for (int k = 1; k &lt;= i * 2 - 1; k++) &#123; System.out.print(&quot;*&quot;); &#125; System.out.println(); &#125; for (int i = 1; i &lt;= n; i++) &#123; for (int k = 1; k &lt;= i; k++) &#123; System.out.print(&quot; &quot;); &#125; for (int j =1; j &lt;=2*(n-i)-1 ; j++) &#123; System.out.print(&quot;*&quot;); &#125; System.out.println(); &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第4次课程","slug":"技术向/Java/源辰课程记录/第4次课程","date":"2019-04-14T16:00:00.000Z","updated":"2022-05-11T01:07:29.896Z","comments":true,"path":"技术向/Java/源辰课程记录/第4次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC4%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第4次课程 04.15.2019 内容 1.回顾 **复习.txt： ** 输入输出，随机数: 输出 System.out.println(); &#x2F;&#x2F;换行 System.out.print(); &#x2F;&#x2F;同一行 +处理方式: 任何类型的数据与 字符串相”+” 当成联接. 输入: Scanner扫描器 引入: import java.util.*; &#x2F;&#x2F;*代表这个util包下所有的类 import java.util.Scanner; &#x2F;&#x2F; Scanner sc&#x3D;new Scanner( System.in); &#x2F;&#x2F; System.in: 标准输入流 sc.nextLine(); &#x2F;&#x2F;按行读取 读到换行符 sc.nextInt(); &#x2F;&#x2F;按分隔符读一个int -&gt; nextInt()不会读取换行符 sc.nextDouble(); int age&#x3D;Integer.parseInt( sc.nextLine() ); 或 int age&#x3D;sc.nextInt(); 随机数: Random 引入: import java.util.Random; Random r&#x3D;new Random(); r.nextInt(); &#x2F;&#x2F;整个整型范围的值 r.nextInt( n ); &#x2F;&#x2F; [0,n) -&gt; r.nextInt(5)+5; r.nextDouble() 如何定义一个方法? public static void main(String[] args){} -&gt; 静态方法 静态方法一般都调用另一个静态方法: public static 返回值类型 方法名( 实际参数 ){} 返回值类型: 基本型: 8种 -&gt;boolean byte short char int long float double 引用型: 数组, 对象类型 void 作用域? 变量起作用的范围 { &#x2F;&#x2F;声明的变量，在外面不能访问 } 2.逻辑运算符（含do…while菜单） 学生管理系统实验： 123456789101112131415161718192021222324252627282930313233343536package Test0415;import java.util.*;public class test1 &#123; public static void main(String[] args) &#123; boolean flag1 = true; System.out.println( !flag1 ); boolean flag2 = false; System.out.println( !flag2 ); Scanner sc=new Scanner(System.in); boolean flag = true; do &#123; System.out.println(&quot;===========学生管理系统============&quot;); System.out.println(&quot;1.登陆&quot;); System.out.println(&quot;2.退出&quot;); System.out.println(&quot;================================&quot;); int choice = sc.nextInt(); sc.nextLine(); if(choice==1) &#123; System.out.println(&quot;登陆服务器繁忙，请稍后......&quot;); System.out.println(&quot;按回车键继续......&quot;); sc.nextLine(); &#125;else if(choice==2) &#123; System.out.println(&quot;已安全退出程序&quot;); flag = false; &#125; /*while内 *flag==true时，满足循环。 *flag==false时，跳出循环。*/ &#125;while( flag ); &#125;&#125; 3. “&amp;&amp;”、“ ||” 左右两边均为（true\\false）值。 12345System.out.println( 5&gt;4&amp;&amp;5&lt;6 );//运行时：System.out.println( true&amp;&amp;false );//结果为：false 闰年判定实验： 12345678910111213141516171819202122232425package Test0415;import java.util.*;public class Test2 &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); System.out.println(&quot;请输入年份&quot;); int year = Integer.parseInt(sc.nextLine()); boolean b = isRun(year); if(b==true) &#123; System.out.println(year+&quot;是闰年！&quot;); &#125;else &#123; System.out.println(year+&quot;不是闰年！&quot;); &#125; &#125; public static boolean isRun(int year) &#123; if( ( year%4==0 &amp;&amp; year%100!=0 ) || year%400==0) &#123; return true; &#125; //除了if里的情况，其他均为另一种情况时，建议省略else，在尾部直接返回。 return false; &#125; &#125; 4.赋值运算符 命令行参数实验： 123456789101112131415package Test0415;//命令行参数： java 文件名 10 5public class Test4 &#123; public static void main(String[] args) &#123; //10 5 会存到数组args参数，当成字符串存入 if( args.length&lt;2 ) &#123; System.out.println(&quot;没有传入参数，程序初始化失败！&quot;); return; &#125; int x = Integer.parseInt(args[0]); int y = Integer.parseInt(args[1]); //此处为x=x+y的简写 x+=y; System.out.println(x); &#125;&#125; 运行结果： 交换数值三种算法： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package Test0415;public class Test5 &#123; public static void main(String[] args) &#123; //10 5 会存到数组args参数，当成字符串存入 if( args.length&lt;2 ) &#123; System.out.println(&quot;没有传入参数，程序初始化失败！&quot;); return; &#125; int x = Integer.parseInt(args[0]); int y = Integer.parseInt(args[1]); //交换数值 //解决方案一 int t=x; x=y; y=t; System.out.println(&quot;方案一：&quot;+x+&quot;\\t&quot;+y); //解决方案二 x=(x+y)-y y=(x+y)-x x=x+y; y=x-y; x=x-y; System.out.println(&quot;方案二：&quot;+x+&quot;\\t&quot;+y); //解决方案三 ^位运算符。异或门，相同取false，不同取true。 /*解析： * x=3 011 * y=4 100 * * 011 * ^100 * 111 * * 111 * ^011 * 100 * * 111 * ^100 * 011 * * x=4 100 * y=3 011 * * */ x=x^y; y=x^y; x=x^y; System.out.println(&quot;方案三：&quot;+x+&quot;\\t&quot;+y); &#125;&#125; **5.**表达式1?表达式2:表达式3 实验题： 12345678910111213141516package Test0415;import java.util.*;import java.util.Scanner;public class Test6 &#123; public static void main(String[] args) &#123; Scanner sc=new Scanner(System.in); int x = sc.nextInt(); int y = sc.nextInt(); //表达式1?表达式2:表达式3 //if(表达式1)&#123;表达式2&#125;else&#123;表达式3&#125; //(作于演示，x!=y) String s=x&gt;y?&quot;大于&quot;:&quot;小于&quot;; System.out.println(s); &#125;&#125; **5.**Switch语句 计算月份有多少天实验题： 123456789101112131415161718192021222324252627282930313233343536373839404142434445package Test0415;import java.util.*;public class Test7 &#123; public static void main(String[] args) &#123; Scanner sc=new Scanner(System.in); System.out.println(&quot;请输入要查询的年份：&quot;); int year = sc.nextInt(); System.out.println(&quot;请输入要查询的月份：&quot;); int month = sc.nextInt(); int days = getDays(year,month); System.out.println(year+&quot;年&quot;+month+&quot;月有：&quot;+days+&quot;天&quot;); &#125; public static boolean isRun(int year) &#123; if( ( year%4==0 &amp;&amp; year%100!=0 ) || year%400==0) &#123; return true; &#125; return false; &#125; public static int getDays(int year,int month) &#123; //int day = 0; switch(month) &#123; case 1: case 3: case 5: case 7: case 8: case 10: case 12:return 31; case 4: case 6: case 9: case 11:return 30; case 2:boolean b = isRun(year); if(b==true) &#123; return 29; &#125;else&#123; return 28; &#125; default: return -1; &#125; &#125;&#125;","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第2次课程","slug":"技术向/Java/源辰课程记录/第2次课程","date":"2019-04-11T16:00:00.000Z","updated":"2022-05-11T01:07:06.104Z","comments":true,"path":"技术向/Java/源辰课程记录/第2次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC2%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第2次课程 04.12.2019 导图 内容 1.回顾-jdk配置 2.回顾-hello程序 3.变量声明的语法 **** boolea型用法 java中的boolean的值仅有true或false，占内存1位。 与c\\c++中的不同，c\\c++则是按照非0为true，0为false。 4.byte数据类型 byte值范围为：-128~127。 正数由原码（当值为正数时，原码&#x3D;补码）表示，负数由补码表示。 5.char数据类型 6.char深入 7.转义字符 其他","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第1次课程","slug":"技术向/Java/源辰课程记录/第1次课程","date":"2019-04-09T16:00:00.000Z","updated":"2022-05-11T01:06:39.123Z","comments":true,"path":"技术向/Java/源辰课程记录/第1次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC1%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第1次课程 04.10.2019 内容 1.java简介 2.jdk下载安装 3.关于共享 4.jdk安装与配置 5.jdk安装目录说明 6.helloworld 其他 源辰教育网址：http://www.hyycinfo.com/Examination2.0 Java经典编程题：Java经典编程题_学生.doc","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"},{"title":"第3次课程","slug":"技术向/Java/源辰课程记录/第3次课程","date":"2019-04-09T16:00:00.000Z","updated":"2022-05-12T01:24:14.469Z","comments":true,"path":"技术向/Java/源辰课程记录/第3次课程/","link":"","permalink":"http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E7%AC%AC3%E6%AC%A1%E8%AF%BE%E7%A8%8B/","excerpt":"","text":"源辰74班 第3次课程 04.13.2019 导图 内容 1.数据类型：基本型 |类型 |占用空间|范围 ||boolean|1bit |true&#x2F;false ||byte |1Byte |-128~127 ||short |2Byte |-32768~32767 ||char |2Byte |0~65545 ||int |4Byte |-2147483648~2147483647||long |8Byte |-263 ~ 263-1 ||float |4Byte | ||double |8byte | | 实验题1： 12345678910111213141516171819package Test0413;public class Test1 &#123; public static void main(String[] args) &#123; int ia = 0x55; int ib = 011; //byte占2个字节，8bit。强制转换后将保留原数值(如：int型)的二进制的后8bit赋值给新byte型。 /* * 例： * 十六进制： 0x771 -&gt; 十进制：771 int二进制时：011101110001 byte二进制时： 01110001 得： 十进制：113 */ byte ba = (byte)0x771; long la = 123456789; long lb = 12345678987654321L; System.out.println(ia+&quot;\\t&quot;+ib+&quot;\\t&quot;+ba+&quot;\\t&quot;+la+&quot;\\t&quot;+lb); &#125;&#125; 实验题2： 1234567891011121314151617package Test0413;public class Test2 &#123; public static void main(String[] args) &#123; //符号f与F，d与D，e与E不区分大小写，效果一样 //浮点型默认是double打印。 float fa = 123.4f; //fb等价于fc。 float fb = 12.5E3F; float fc = (float)12.5E3; double da = 123D; double db = 123.456D; double dc = 123.45e301; System.out.println(fa+&quot; &quot;+fb+&quot; &quot;+fc+&quot; &quot;+da+&quot; &quot;+db+&quot; &quot;+dc); &#125;&#125; 2.数据类型：引用型 |class（类） ||interface（接口）||数组 | 数组实验： 12//创建数组的方式int[] x = new int[4]; 123456789101112package Test0413;public class Test4 &#123; public static void main(String[] args) &#123; //定义一个数组x，系统默认赋值为0(安全) int[] x = new int[4]; //打印数组中每一个元素 for(int i=0;i&lt;4;i++) &#123; System.out.println(x[i]); &#125; &#125;&#125; 运算优先级实验： 123456789101112131415package Test0413;public class Test4 &#123; public static void main(String[] args) &#123; // + 运算数为 数字型 则为 加法运算 // + 运算数为 字符串 则为 联接 System.out.println(&quot;book&quot;+3+4+&quot;price&quot;); System.out.println(3+4+&quot;book&quot;+&quot;price&quot;); System.out.println(&quot;book&quot;+&quot;price&quot;+3+4); &#125;&#125;结果：book34price7bookpricebookprice34 3.作用域 实验： 1234567891011121314151617181920package Test0413;public class Test6 &#123; static int x; int y; public static void main(String[] args) &#123; int zz = 90; System.out.println(x); //System.out.println(y); //在&quot;静态区&quot;中只能访问静态成员 &#123;//用&#123;&#125;创建一个作用域 int z = 10; System.out.println(z); System.out.println(zz); //System.out.println(yy); &#125; //int yy = 70; //系统从上向下读取，在调用yy之前应该声明yy //System.out.println(z); //在一个作用域定义的变量，在这个作用域外无法访问 &#125;&#125; 4.Scanner类： 作用：输入 Scanner实验： 123456//调用Scanner的方式Scanner sc = new Scanner(System.in);//输入数字String s1 = sc.nextInt();//输入字符String s2 = sc.nextLine(); 1234567891011121314151617181920212223242526package Test0413;import java.util.Scanner;public class Test7 &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); System.out.println(&quot;请输入姓名&quot;); String s = sc.nextLine(); System.out.println(&quot;请输入年龄&quot;); int age = sc.nextInt(); //输入年龄数值后，回车符会被下一行吸收，导致下一行未输入就跳过 /* * 解决方案一： * int age = sc.nextInt(); * sc.nextLine(); \\\\将多余的回车符用nextLine吸收 * 解决方案二： * int age = Integer.parseInt(sc.nextLine); //输入的部分，最后强制转换为数字赋值给age * */ System.out.println(&quot;请输入性别&quot;); String sex = sc.nextLine(); System.out.println(&quot;姓名为：&quot;+s+&quot;年龄为：&quot;+age+&quot;性别为：&quot;+sex); &#125;&#125; 5.Rammod类： **** 作用：生成随机数 Rammod实验： 123调用Rammod的方式Random r = new Random();int x1 = r.nextInt(); 12345678910111213141516package Test0413;import java.util.Random;public class Test9 &#123; public static void main(String[] args) &#123; Random r = new Random(); //随机范围为：0~2147483647 int x1 = r.nextInt(); System.out.println(x1); //随机范围为：0~9 int x2 = r.nextInt(10); System.out.println(x2); //随机范围为：5~9 int x3 = r.nextInt(5)+5; System.out.println(x3); &#125;&#125; 6.[项目]扑克牌发牌系统 ****我的算法： 12345678910111213141516package Test0413;import java.util.Random;public class Test_pukepai &#123; public static void main(String[] args) &#123; Random r = new Random(); String[] puke = &#123;&quot;方片A&quot;,&quot;方片2&quot;,&quot;方片3&quot;,&quot;方片4&quot;,&quot;方片5&quot;,&quot;方片6&quot;,&quot;方片7&quot;,&quot;方片8&quot;,&quot;方片9&quot;,&quot;方片10&quot;,&quot;方片J&quot;,&quot;方片Q&quot;,&quot;方片K&quot;, &quot;梅花A&quot;,&quot;梅花2&quot;,&quot;梅花3&quot;,&quot;梅花4&quot;,&quot;梅花5&quot;,&quot;梅花6&quot;,&quot;梅花7&quot;,&quot;梅花8&quot;,&quot;梅花9&quot;,&quot;梅花10&quot;,&quot;梅花J&quot;,&quot;梅花Q&quot;,&quot;梅花K&quot;, &quot;红桃A&quot;,&quot;红桃2&quot;,&quot;红桃3&quot;,&quot;红桃4&quot;,&quot;红桃5&quot;,&quot;红桃6&quot;,&quot;红桃7&quot;,&quot;红桃8&quot;,&quot;红桃9&quot;,&quot;红桃10&quot;,&quot;红桃J&quot;,&quot;红桃Q&quot;,&quot;红桃K&quot;, &quot;黑桃A&quot;,&quot;黑桃2&quot;,&quot;黑桃3&quot;,&quot;黑桃4&quot;,&quot;黑桃5&quot;,&quot;黑桃6&quot;,&quot;黑桃7&quot;,&quot;黑桃8&quot;,&quot;黑桃9&quot;,&quot;黑桃10&quot;,&quot;黑桃J&quot;,&quot;黑桃Q&quot;,&quot;黑桃K&quot;, &#125;; for(int i=1;i&lt;14;i++) &#123; int a = r.nextInt(52); System.out.println(puke[a]); &#125; &#125;&#125; ** 老师算法：** 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package Test0413;import java.util.Random;import java.util.Scanner;public class puke_teacher &#123; public static void main(String[] args) &#123; Random r = new Random(); Scanner sc = new Scanner(System.in); System.out.println(&quot;请输入牌的套数&quot;); int a = sc.nextInt(); int total = 52*a; int index = r.nextInt(total); String card = genFlower(index); card = card + genCardNum(index); System.out.println(index+&quot;对应的牌为：&quot;+card); &#125; //获取花色 public static String genFlower(int index) &#123; String flower = &quot;&quot;; int flowerindex = index/13%4; switch(flowerindex) &#123; case 0:flower = &quot;方片&quot;;break; case 1:flower = &quot;梅花&quot;;break; case 2:flower = &quot;红桃&quot;;break; case 3:flower = &quot;黑桃&quot;;break; &#125; return flower; &#125; //获取牌数值 public static String genCardNum(int index) &#123; String cardNum = &quot;&quot;; int card = index%13+1; cardNum=card+&quot;&quot;; switch(card) &#123; case 1:cardNum = &quot;A&quot;;break; case 11:cardNum = &quot;J&quot;;break; case 12:cardNum = &quot;Q&quot;;break; case 13:cardNum = &quot;K&quot;;break; &#125; return cardNum; &#125;&#125; 其他 ****作业附件： Java笔试题：Java基础概念_学生用.doc 作业题-学生用.doc","categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"}],"author":"hooy"}],"categories":[{"name":"技术向","slug":"技术向","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"},{"name":"Zookeeper","slug":"技术向/Zookeeper","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Zookeeper/"},{"name":"大数据技术之Zookeeper_3.5.7版本教程","slug":"技术向/Zookeeper/大数据技术之Zookeeper-3-5-7版本教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Zookeeper/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BZookeeper-3-5-7%E7%89%88%E6%9C%AC%E6%95%99%E7%A8%8B/"},{"name":"FXGL","slug":"技术向/FXGL","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/FXGL/"},{"name":"FXGL基础入门教程_Java游戏引擎教程","slug":"技术向/FXGL/FXGL基础入门教程-Java游戏引擎教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/FXGL/FXGL%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-Java%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E6%95%99%E7%A8%8B/"},{"name":"SpringCloud","slug":"技术向/SpringCloud","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/"},{"name":"小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂","slug":"技术向/SpringCloud/小破站讲的最好SpringCloudAlibaba入门教程-保姆级教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"},{"name":"SpringFramework","slug":"技术向/SpringFramework","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"},{"name":"尚硅谷Spring框架视频教程（spring5源码级讲解）","slug":"技术向/SpringFramework/尚硅谷Spring框架视频教程（spring5源码级讲解）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"},{"name":"Java","slug":"技术向/Java","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"},{"name":"JavaSE强化教程泛型_由点到面的讲解了整个泛型体系","slug":"技术向/Java/JavaSE强化教程泛型-由点到面的讲解了整个泛型体系","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/JavaSE%E5%BC%BA%E5%8C%96%E6%95%99%E7%A8%8B%E6%B3%9B%E5%9E%8B-%E7%94%B1%E7%82%B9%E5%88%B0%E9%9D%A2%E7%9A%84%E8%AE%B2%E8%A7%A3%E4%BA%86%E6%95%B4%E4%B8%AA%E6%B3%9B%E5%9E%8B%E4%BD%93%E7%B3%BB/"},{"name":"java8_Stream流式编程爱_撸码就是快_流式编程好_代码传家宝","slug":"技术向/Java/java8-Stream流式编程爱-撸码就是快-流式编程好-代码传家宝","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/java8-Stream%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%88%B1-%E6%92%B8%E7%A0%81%E5%B0%B1%E6%98%AF%E5%BF%AB-%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%A5%BD-%E4%BB%A3%E7%A0%81%E4%BC%A0%E5%AE%B6%E5%AE%9D/"},{"name":"黑马程序员java日志框架教程_全面深入学习多种java日志框架","slug":"技术向/Java/黑马程序员java日志框架教程-全面深入学习多种java日志框架","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"},{"name":"XPath","slug":"技术向/XPath","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/XPath/"},{"name":"20分钟带你搞懂XPath-Scrapy数据解析神器","slug":"技术向/XPath/20分钟带你搞懂XPath-Scrapy数据解析神器","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/XPath/20%E5%88%86%E9%92%9F%E5%B8%A6%E4%BD%A0%E6%90%9E%E6%87%82XPath-Scrapy%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E7%A5%9E%E5%99%A8/"},{"name":"尚硅谷宋红康JVM全套教程（详解java虚拟机）","slug":"技术向/Java/尚硅谷宋红康JVM全套教程（详解java虚拟机）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%AE%8B%E7%BA%A2%E5%BA%B7JVM%E5%85%A8%E5%A5%97%E6%95%99%E7%A8%8B%EF%BC%88%E8%AF%A6%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89/"},{"name":"阿里P8爆肝2个月呕心整理_挑战30天打卡春招上岸","slug":"技术向/Java/阿里P8爆肝2个月呕心整理-挑战30天打卡春招上岸","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%98%BF%E9%87%8CP8%E7%88%86%E8%82%9D2%E4%B8%AA%E6%9C%88%E5%91%95%E5%BF%83%E6%95%B4%E7%90%86-%E6%8C%91%E6%88%9830%E5%A4%A9%E6%89%93%E5%8D%A1%E6%98%A5%E6%8B%9B%E4%B8%8A%E5%B2%B8/"},{"name":"HashMap全B站最细致源码分析课程_看完月薪最少涨5k","slug":"技术向/Java/HashMap全B站最细致源码分析课程-看完月薪最少涨5k","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/HashMap%E5%85%A8B%E7%AB%99%E6%9C%80%E7%BB%86%E8%87%B4%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E8%AF%BE%E7%A8%8B-%E7%9C%8B%E5%AE%8C%E6%9C%88%E8%96%AA%E6%9C%80%E5%B0%91%E6%B6%A85k/"},{"name":"Cpp","slug":"技术向/Cpp","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Cpp/"},{"name":"黑马程序员匠心之作_C++教程从0到1入门编程_学习编程不再难","slug":"技术向/Cpp/黑马程序员匠心之作-C-教程从0到1入门编程-学习编程不再难","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Cpp/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98%E5%8C%A0%E5%BF%83%E4%B9%8B%E4%BD%9C-C-%E6%95%99%E7%A8%8B%E4%BB%8E0%E5%88%B01%E5%85%A5%E9%97%A8%E7%BC%96%E7%A8%8B-%E5%AD%A6%E4%B9%A0%E7%BC%96%E7%A8%8B%E4%B8%8D%E5%86%8D%E9%9A%BE/"},{"name":"创作集","slug":"创作集","permalink":"http://blog.hooy.xyz/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"},{"name":"Webpack","slug":"技术向/Webpack","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/"},{"name":"尚硅谷2020最新版Webpack5实战教程","slug":"技术向/Webpack/尚硅谷2020最新版Webpack5实战教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Webpack/%E5%B0%9A%E7%A1%85%E8%B0%B72020%E6%9C%80%E6%96%B0%E7%89%88Webpack5%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"},{"name":"MySQL","slug":"技术向/MySQL","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/"},{"name":"MySQL数据库（mysql安装_基础_高级_优化）","slug":"技术向/MySQL/MySQL数据库（mysql安装-基础-高级-优化）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88mysql%E5%AE%89%E8%A3%85-%E5%9F%BA%E7%A1%80-%E9%AB%98%E7%BA%A7-%E4%BC%98%E5%8C%96%EF%BC%89/"},{"name":"Docker","slug":"技术向/Docker","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/"},{"name":"狂神说Java_Docker最新超详细版教程通俗易懂","slug":"技术向/Docker/狂神说Java-Docker最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Docker/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-Docker%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"},{"name":"尚硅谷Java设计模式（图解+框架源码剖析）","slug":"技术向/Java/尚硅谷Java设计模式（图解-框架源码剖析）","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E5%B0%9A%E7%A1%85%E8%B0%B7Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%BE%E8%A7%A3-%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%89/"},{"name":"JavaScript","slug":"技术向/JavaScript","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/"},{"name":"海豚日记_学习JS看这个就够了_全面打通_JAVASCRIPT_知识点","slug":"技术向/JavaScript/海豚日记-学习JS看这个就够了-全面打通-JAVASCRIPT-知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/JavaScript/%E6%B5%B7%E8%B1%9A%E6%97%A5%E8%AE%B0-%E5%AD%A6%E4%B9%A0JS%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9A-JAVASCRIPT-%E7%9F%A5%E8%AF%86%E7%82%B9/"},{"name":"源辰课程记录","slug":"技术向/Java/源辰课程记录","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"},{"name":"狂神说Java_MySQL最新教程通俗易懂","slug":"技术向/MySQL/狂神说Java-MySQL最新教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/MySQL/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-MySQL%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"},{"name":"狂神说Java_JUC并发编程最新版通俗易懂","slug":"技术向/Java/狂神说Java-JUC并发编程最新版通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E7%89%88%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"},{"name":"狂神说Java_多线程详解","slug":"技术向/Java/狂神说Java-多线程详解","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E7%8B%82%E7%A5%9E%E8%AF%B4Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/"},{"name":"Redis","slug":"技术向/Redis","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/"},{"name":"Redis最新超详细版教程通俗易懂","slug":"技术向/Redis/Redis最新超详细版教程通俗易懂","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Redis/Redis%E6%9C%80%E6%96%B0%E8%B6%85%E8%AF%A6%E7%BB%86%E7%89%88%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"},{"name":"SpringSecurity","slug":"技术向/SpringSecurity","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/"},{"name":"SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","slug":"技术向/SpringSecurity/SpringSecurity-Social-OAuth2社交登录接口授权鉴权系列课程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringSecurity/SpringSecurity-Social-OAuth2%E7%A4%BE%E4%BA%A4%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%8E%88%E6%9D%83%E9%89%B4%E6%9D%83%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/"},{"name":"SpringBoot","slug":"技术向/SpringBoot","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/"},{"name":"20年全新_Spring Boot 2.x_从青铜到王者之白银篇_打造精品中的精品","slug":"技术向/SpringBoot/20年全新-Spring-Boot-2-x-从青铜到王者之白银篇-打造精品中的精品","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringBoot/20%E5%B9%B4%E5%85%A8%E6%96%B0-Spring-Boot-2-x-%E4%BB%8E%E9%9D%92%E9%93%9C%E5%88%B0%E7%8E%8B%E8%80%85%E4%B9%8B%E7%99%BD%E9%93%B6%E7%AF%87-%E6%89%93%E9%80%A0%E7%B2%BE%E5%93%81%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%93%81/"},{"name":"Markdown","slug":"技术向/Markdown","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/"},{"name":"Markdown_教程_菜鸟教程","slug":"技术向/Markdown/Markdown-教程-菜鸟教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Markdown/Markdown-%E6%95%99%E7%A8%8B-%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"},{"name":"Java核心技术","slug":"技术向/Java/Java核心技术","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"},{"name":"HTML","slug":"技术向/HTML","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/"},{"name":"HTML看这个就够了_全面打通HTML前端开发知识点","slug":"技术向/HTML/HTML看这个就够了-全面打通HTML前端开发知识点","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/HTML/HTML%E7%9C%8B%E8%BF%99%E4%B8%AA%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%85%A8%E9%9D%A2%E6%89%93%E9%80%9AHTML%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9/"},{"name":"源辰技术储备","slug":"技术向/Java/源辰技术储备","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E6%BA%90%E8%BE%B0%E6%8A%80%E6%9C%AF%E5%82%A8%E5%A4%87/"},{"name":"CSS","slug":"技术向/CSS","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/"},{"name":"体验高质量的CSS教程","slug":"技术向/CSS/体验高质量的CSS教程","permalink":"http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/CSS/%E4%BD%93%E9%AA%8C%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84CSS%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"尚硅谷","slug":"尚硅谷","permalink":"http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"},{"name":"LeeWyatt","slug":"LeeWyatt","permalink":"http://blog.hooy.xyz/tags/LeeWyatt/"},{"name":"图灵架构师周瑜","slug":"图灵架构师周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E6%9E%B6%E6%9E%84%E5%B8%88%E5%91%A8%E7%91%9C/"},{"name":"图灵学院","slug":"图灵学院","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E5%AD%A6%E9%99%A2/"},{"name":"徐庶","slug":"徐庶","permalink":"http://blog.hooy.xyz/tags/%E5%BE%90%E5%BA%B6/"},{"name":"黑马程序员","slug":"黑马程序员","permalink":"http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"},{"name":"鲁班大叔","slug":"鲁班大叔","permalink":"http://blog.hooy.xyz/tags/%E9%B2%81%E7%8F%AD%E5%A4%A7%E5%8F%94/"},{"name":"智能学院","slug":"智能学院","permalink":"http://blog.hooy.xyz/tags/%E6%99%BA%E8%83%BD%E5%AD%A6%E9%99%A2/"},{"name":"宋红康","slug":"宋红康","permalink":"http://blog.hooy.xyz/tags/%E5%AE%8B%E7%BA%A2%E5%BA%B7/"},{"name":"图灵课堂","slug":"图灵课堂","permalink":"http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E8%AF%BE%E5%A0%82/"},{"name":"周瑜","slug":"周瑜","permalink":"http://blog.hooy.xyz/tags/%E5%91%A8%E7%91%9C/"},{"name":"小刘讲源码","slug":"小刘讲源码","permalink":"http://blog.hooy.xyz/tags/%E5%B0%8F%E5%88%98%E8%AE%B2%E6%BA%90%E7%A0%81/"},{"name":"遇见狂神说","slug":"遇见狂神说","permalink":"http://blog.hooy.xyz/tags/%E9%81%87%E8%A7%81%E7%8B%82%E7%A5%9E%E8%AF%B4/"},{"name":"蜗牛学院","slug":"蜗牛学院","permalink":"http://blog.hooy.xyz/tags/%E8%9C%97%E7%89%9B%E5%AD%A6%E9%99%A2/"},{"name":"后盾人编程","slug":"后盾人编程","permalink":"http://blog.hooy.xyz/tags/%E5%90%8E%E7%9B%BE%E4%BA%BA%E7%BC%96%E7%A8%8B/"},{"name":"源辰","slug":"源辰","permalink":"http://blog.hooy.xyz/tags/%E6%BA%90%E8%BE%B0/"},{"name":"字母哥课堂","slug":"字母哥课堂","permalink":"http://blog.hooy.xyz/tags/%E5%AD%97%E6%AF%8D%E5%93%A5%E8%AF%BE%E5%A0%82/"},{"name":"菜鸟教程","slug":"菜鸟教程","permalink":"http://blog.hooy.xyz/tags/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/"},{"name":"Cay S.Horstmann","slug":"Cay-S-Horstmann","permalink":"http://blog.hooy.xyz/tags/Cay-S-Horstmann/"}]}