<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hooy&#39;s Blog</title>
  
  
  <link href="http://blog.hooy.xyz/atom.xml" rel="self"/>
  
  <link href="http://blog.hooy.xyz/"/>
  <updated>2022-06-21T08:00:33.102Z</updated>
  <id>http://blog.hooy.xyz/</id>
  
  <author>
    <name>Hooyantsing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>P26 微服务调用组件 Feign</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P26%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E7%BB%84%E4%BB%B6%20Feign/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P26%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E7%BB%84%E4%BB%B6%20Feign/</id>
    <published>2022-06-20T16:00:00.000Z</published>
    <updated>2022-06-21T08:00:33.102Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1bR4y1L724">小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂</a></p></blockquote><h3 id="Java-项目中如何实现接口调用？"><a href="#Java-项目中如何实现接口调用？" class="headerlink" title="Java 项目中如何实现接口调用？"></a>Java 项目中如何实现接口调用？</h3><ol><li><p><strong>Httpclient</strong></p><p>Httpclient 是 Apache Jakarta Common 下的子项目，用来提供高效的、最新的、功能丰富的支持  http 协议的客户端编程工具包，并且它支持 HTTP 协议最新版本和建议。Httpclient 相比传统 JDK 自带的 URL Connection，提升了易用性和灵活性，使客户端发送 http 请求变得容易，提高了开发的效率。</p></li><li><p><strong>Okhttp</strong></p><p>一个处理网络请求的开源项目，是安卓端最火的轻量级框架，由 Square 公司贡献，用于代替 HttpUrlConnection 和 Apache HttpClient。Okhttp拥有简介的 API、高效的性能，并支持多种协议（HTTP&#x2F;2 和 SPDY）。</p></li><li><p><strong>HttpURLConnection</strong></p><p>HttpURLConnection 是 Java 的标准类，它继承自 URLConnection，可用于向指定网站发送 GET 请求、POST 请求。HttpURLConnection 使用比较复杂，不像 HttpClient 那样容易使用。</p></li><li><p><strong>RestTemplate WebClient</strong></p><p>RestTemplate  是 Spring 提供的用于访问 Rest 服务的客户端，RestTemplate 提供了多种便捷访问远程 HTTP 服务的方法，能够大大提高客户端的编写效率。</p></li></ol><p>上面介绍的是最常见的集中调用接口的方法，我们下面要介绍的方法比上面的更简单、方便，他就是 Feign。</p><h3 id="1-什么是-Feign"><a href="#1-什么是-Feign" class="headerlink" title="1. 什么是 Feign"></a>1. 什么是 Feign</h3><p>Feign 是 Netflix 开发的声明式、模板化的 HTTP 客户端。</p><p>Spring Cloud openfeign 对 Feign 进行了增强，使其支持 Spring MVC 注解，另外还整合了 Ribbon 和 Nacos，从而使得 Feign 的使用更加方便。</p><h4 id="1-1-优势"><a href="#1-1-优势" class="headerlink" title="1.1 优势"></a>1.1 优势</h4><p>Feign 可以做到 <strong>使用 HTTP 请求远程服务时就像是调用本地方法一样的体验</strong> 。开发者完全感知不到这是远程方法，更改知不道这是一个 HTTP 请求。它像 Dubbo 一样，consumer 直接调用接口方法调用 provider，而不需要通过常规的 Httpclient 构造请求再解析返回数据，它解决了让开发者调用远程接口就像调用本地方法一样，无需关注与远程的交互细节，更无需关注分布式环境开发。</p><h3 id="2-Spring-Cloud-Alibaba-快速整合-OpenFeign"><a href="#2-Spring-Cloud-Alibaba-快速整合-OpenFeign" class="headerlink" title="2. Spring Cloud Alibaba 快速整合 OpenFeign"></a>2. Spring Cloud Alibaba 快速整合 OpenFeign</h3><p><em>Step 01</em> 引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加 openfeign 依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>Step 02</em> 添加 feign 接口和方法</p><p><em>order-openfeign 服务</em> feign.StockFeignService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name 服务名 , path 对应服务 Controller @RequestMapping 路径</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;stock-service&quot;, path = &quot;/stock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StockFeignService</span> &#123;</span><br><span class="line">    <span class="comment">// 声明 Controller 是怎么样的就怎么样复制过来</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/reduct&quot;)</span></span><br><span class="line">    String <span class="title function_">reduct</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>stock-nacos 服务</em> controller.StockController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/stock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StockController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/reduct&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reduct</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;扣减库存&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;扣减库存&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Step 03</em> 消费者服务调用生产者服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StockFeignService stockFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;下单成功&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> stockFeignService.reduct();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Feign&quot;</span> + msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Step 04</em> 消费者服务开启 OpenFeign，使用 <code>@EnableFeignClients</code> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Spring-Cloud-Feign-的自定义配置及使用"><a href="#3-Spring-Cloud-Feign-的自定义配置及使用" class="headerlink" title="3. Spring Cloud Feign 的自定义配置及使用"></a>3. Spring Cloud Feign 的自定义配置及使用</h3><h4 id="3-1-日志配置"><a href="#3-1-日志配置" class="headerlink" title="3.1 日志配置"></a>3.1 日志配置</h4><h4 id="3-2-超时时间配置"><a href="#3-2-超时时间配置" class="headerlink" title="3.2 超时时间配置"></a>3.2 超时时间配置</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1bR4y1L724&quot;&gt;小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 </summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="SpringCloud" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/"/>
    
    <category term="小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"/>
    
    
    <category term="图灵架构师周瑜" scheme="http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E6%9E%B6%E6%9E%84%E5%B8%88%E5%91%A8%E7%91%9C/"/>
    
    <category term="图灵学院" scheme="http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E5%AD%A6%E9%99%A2/"/>
    
    <category term="徐庶" scheme="http://blog.hooy.xyz/tags/%E5%BE%90%E5%BA%B6/"/>
    
  </entry>
  
  <entry>
    <title>P21 微服务负载均衡器 Ribbon</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P21%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%20Ribbon/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P21%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%20Ribbon/</id>
    <published>2022-06-20T16:00:00.000Z</published>
    <updated>2022-06-21T03:40:01.930Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1bR4y1L724">小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂</a></p></blockquote><h3 id="1-什么是-Ribbon"><a href="#1-什么是-Ribbon" class="headerlink" title="1. 什么是 Ribbon"></a>1. 什么是 Ribbon</h3><p>目前主流的负载方案分以下两种：</p><ul><li>集中式负载均衡，在消费者和服务提供方中间使用独立的代理方式进行负载，有硬件的（比如 F5），也有软件的（比如 Nginx）；</li><li>客户端根据自己的请求情况做负载均衡，Ribbon 就属于客户端自己做负载均衡。</li></ul><p>Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一套客户端的负载均衡工具，Ribbon 客户端组件提供一系列的完善配置，如超时，重试等。通过 LoadBalancer 获取到服务提供的所有机器实例，Ribbon 会自动基于某种规则（轮询、随机）去调用这些服务。Ribbon 也可以实现我们自己的负载均衡算法。</p><h4 id="1-1-客户端的负载均衡"><a href="#1-1-客户端的负载均衡" class="headerlink" title="1.1 客户端的负载均衡"></a>1.1 客户端的负载均衡</h4><p>例如 Spring Cloud 中的 Ribbon ，客户端会有一个服务器地址列表，在发送请求前通过负载均衡算法选择一个服务器，然后进行访问，这是客户端负载均衡；即在客户端就进行负载均衡算法匹配。</p><p><img src="/image%5Cimage-20220621091200313.png" alt="image-20220621091200313"></p><h4 id="1-2-服务端的负载均衡"><a href="#1-2-服务端的负载均衡" class="headerlink" title="1.2 服务端的负载均衡"></a>1.2 服务端的负载均衡</h4><p>例如 Nginx，通过 Nginx 进行负载均衡，先发送请求，然后通过负载均衡算法，在多个服务器之间选择一个进行访问；即在服务器端再进行负载均衡算法匹配。</p><p><img src="/image%5Cimage-20220621091405179.png" alt="image-20220621091405179"></p><h4 id="1-3-常见负载均衡算法"><a href="#1-3-常见负载均衡算法" class="headerlink" title="1.3 常见负载均衡算法"></a>1.3 常见负载均衡算法</h4><ul><li>随机，通过随机选择服务进行执行，一般这种方式使用较少；</li><li>轮询，负载均衡默认实现方式，请求来之后排队处理；</li><li>加权轮询，通过对服务器性能的分型，给高配置、低负载的服务器分配更高的权重，均衡各个服务器的压力；</li><li>地址 Hash，通过客户端请求的地址 Hash 值取模映射进行服务器调度；</li><li>最小链接数，即使请求均衡了，压力不一定会均衡，最小链接数法就是根据服务器的情况，比如请求积压数等参数，将请求分配到当前压力最小的服务器。</li></ul><h3 id="2-Nacos-使用-Ribbon"><a href="#2-Nacos-使用-Ribbon" class="headerlink" title="2. Nacos 使用 Ribbon"></a>2. Nacos 使用 Ribbon</h3><p><em>Step 01</em> <strong>nacos-discovery 依赖了 ribbon，可以不用再引入 ribbon 依赖</strong></p><p><img src="/image%5Cimage-20220621092231707.png" alt="image-20220621092231707"></p><p><em>Step 02</em> 添加 <code>@LoadBalanced</code> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Step 03</em> 修改 Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://mall-order/order/findOrderByUserId&quot;</span> + id;</span><br><span class="line"><span class="type">R</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(url,R.class);</span><br></pre></td></tr></table></figure><h3 id="3-Ribbon-内核原理"><a href="#3-Ribbon-内核原理" class="headerlink" title="3. Ribbon 内核原理"></a>3. Ribbon 内核原理</h3><h4 id="3-1-Ribbon-原理"><a href="#3-1-Ribbon-原理" class="headerlink" title="3.1 Ribbon 原理"></a>3.1 Ribbon 原理</h4><h4 id="3-2-Ribbon-负载均衡策略"><a href="#3-2-Ribbon-负载均衡策略" class="headerlink" title="3.2 Ribbon 负载均衡策略"></a>3.2 Ribbon 负载均衡策略</h4><p><img src="/image%5Cimage-20220621092935539.png" alt="image-20220621092935539"></p><ul><li><p><strong>IRule</strong> </p><p>这是所有负载均衡策略的父接口，里边的核心方法是 choose 方法，用来选择一个服务实例；</p></li><li><p><strong>AbstractLoadBalancerRule</strong></p><p>AbstractLoadBalancerRule 是一个抽象类，里边主要定义了一个 ILoadBalancer，这里定义它的目的主要是辅助负责均衡策略选取合适的服务端实例。</p></li></ul><p><img src="/image%5Cimage-20220621094258452.png" alt="image-20220621094258452"></p><h5 id="3-2-1-修改默认负载均衡策略"><a href="#3-2-1-修改默认负载均衡策略" class="headerlink" title="3.2.1 修改默认负载均衡策略"></a>3.2.1 修改默认负载均衡策略</h5><h6 id="配置类方式"><a href="#配置类方式" class="headerlink" title="配置类方式"></a>配置类方式</h6><p>调用其他微服务，一律使用指定的负载均衡算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonRandomRuleConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法名一定要叫 iRule</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">iRule</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，此处有坑！不能写在 @SpringBootApplication 注解的 @CompentScan 扫描得到的地方，否则自定义的配置类会被所有的 RibbonClients 共享。不建议这么使用，推荐 yml 方式。</p></blockquote><p>再在 Spring Boot 启动类指定哪些服务使用该负载均衡策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RibbonClients(value = &#123;</span></span><br><span class="line"><span class="meta">        @RibbonClient(name = &quot;stock-service&quot;,configuration = RibbonRandomRuleConfig.class)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通常写在配置类里面</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="配置文件方式（推荐）"><a href="#配置文件方式（推荐）" class="headerlink" title="配置文件方式（推荐）"></a>配置文件方式（推荐）</h6><p>调用指定微服务提供的服务时，使用对应的负载均衡算法</p><p>修改 application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务名:</span></span><br><span class="line"><span class="comment">#   ribbon:</span></span><br><span class="line"><span class="comment">#     NFLoadBalancerRuleClassName: 负载均衡策略实现类全路径</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stock-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span></span><br></pre></td></tr></table></figure><h5 id="3-2-2-自定义负载均衡策略"><a href="#3-2-2-自定义负载均衡策略" class="headerlink" title="3.2.2 自定义负载均衡策略"></a>3.2.2 自定义负载均衡策略</h5><p>通过实现 <code>IRule</code> 接口或继承 <code>AbstractLoadBalancerRule</code> 抽象类可以自定义负载均衡策略，主要的选择服务逻辑在 choose 方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义负载均衡策略：返回一个随机服务实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomRule</span> <span class="keyword">extends</span> <span class="title class_">AbstractLoadBalancerRule</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initWithNiwsConfig</span><span class="params">(IClientConfig iClientConfig)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 负载均衡算法逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="type">ILoadBalancer</span> <span class="variable">loadBalancer</span> <span class="operator">=</span> <span class="built_in">this</span>.getLoadBalancer();</span><br><span class="line">        <span class="comment">// 获取当前请求的服务实例</span></span><br><span class="line">        List&lt;Server&gt; reachableServers = loadBalancer.getReachableServers();</span><br><span class="line">        <span class="comment">// 获取随机数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">random</span> <span class="operator">=</span> ThreadLocalRandom.current().nextInt(reachableServers.size());</span><br><span class="line">        <span class="keyword">return</span> reachableServers.get(random);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-饥饿加载"><a href="#3-3-饥饿加载" class="headerlink" title="3.3 饥饿加载"></a>3.3 饥饿加载</h4><p>默认 Ribbon 处于懒加载状态，使用到时才会加载，这也就导致消费者第一次向生产者服务实例请求响应速度慢。</p><p>开启饥饿加载（禁用懒加载）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="comment"># 开启 ribbon 饥饿加载</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 配置哪个服务使用 ribbon 饥饿加载，多个使用逗号分隔</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">stock-service</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1bR4y1L724&quot;&gt;小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 </summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="SpringCloud" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/"/>
    
    <category term="小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"/>
    
    
    <category term="图灵架构师周瑜" scheme="http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E6%9E%B6%E6%9E%84%E5%B8%88%E5%91%A8%E7%91%9C/"/>
    
    <category term="图灵学院" scheme="http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E5%AD%A6%E9%99%A2/"/>
    
    <category term="徐庶" scheme="http://blog.hooy.xyz/tags/%E5%BE%90%E5%BA%B6/"/>
    
  </entry>
  
  <entry>
    <title>P25 微服务负载均衡器 LoadBalancer</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P25%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%20LoadBalancer/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P25%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%20LoadBalancer/</id>
    <published>2022-06-20T16:00:00.000Z</published>
    <updated>2022-06-21T06:42:05.118Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1bR4y1L724">小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂</a></p></blockquote><h3 id="1-什么是-Spring-Cloud-LoadBalancer"><a href="#1-什么是-Spring-Cloud-LoadBalancer" class="headerlink" title="1. 什么是 Spring Cloud LoadBalancer"></a>1. 什么是 Spring Cloud LoadBalancer</h3><p>Spring Cloud LoadBalancer 是 Spring Cloud 官方自己提供的客户端负载均衡器，用来替代 Ribbon。</p><p>Spring 官方提供了两种负载均衡客户端：</p><ul><li><p><strong>RestTemplate</strong></p><p>RestTemplate 是 Spring 提供的可用于访问 Rest 服务的客户端，RestTemplate 提供了多种便捷访问远程 http 服务的方法，能够大大提高客户端的编写效率。默认情况下，RestTemplate 默认依赖 jdk 的 http 连接工具。</p></li><li><p><strong>WebClient</strong></p><p>WebClient 是从 Spring WebFlux 5.0 版本开始提供的一个非阻塞的基于响应式编程的进行 http 请求的客户端工具。它的响应式编程基于 Reactor。WebClient 提供了标准 http 请求方式对应的 GET POST PUT DELETE 等方法，可以用来发起相应的请求。</p></li></ul><h3 id="2-RestTemplate-整合-LoadBalancer"><a href="#2-RestTemplate-整合-LoadBalancer" class="headerlink" title="2. RestTemplate 整合 LoadBalancer"></a>2. RestTemplate 整合 LoadBalancer</h3><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--排除 ribbon 依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--添加 loadbalancer 依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1bR4y1L724&quot;&gt;小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 </summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="SpringCloud" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/"/>
    
    <category term="小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"/>
    
    
    <category term="图灵架构师周瑜" scheme="http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E6%9E%B6%E6%9E%84%E5%B8%88%E5%91%A8%E7%91%9C/"/>
    
    <category term="图灵学院" scheme="http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E5%AD%A6%E9%99%A2/"/>
    
    <category term="徐庶" scheme="http://blog.hooy.xyz/tags/%E5%BE%90%E5%BA%B6/"/>
    
  </entry>
  
  <entry>
    <title>P12 Alibaba 微服务组件 Nacos 注册中心</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P12%20Alibaba%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6%20Nacos%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P12%20Alibaba%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6%20Nacos%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</id>
    <published>2022-06-16T16:00:00.000Z</published>
    <updated>2022-06-20T11:47:21.820Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1bR4y1L724">小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂</a></p></blockquote><h3 id="1-什么是-Nacos"><a href="#1-什么是-Nacos" class="headerlink" title="1. 什么是 Nacos"></a>1. 什么是 Nacos</h3><p>Nacos 官网：<a href="https://nacos.io/">https://nacos.io</a></p><p>官方：一个更易于构建云原生应用的动态 <strong>服务发现（Nacos Discovery）</strong>、<strong>服务配置（Nacos Config）</strong> 和服务管理平台。</p><p>Nacos 的关键特性包括：</p><ul><li>服务发现和服务健康检测；</li><li>动态配置服务；</li><li>动态 DNS 服务；</li><li>服务及其元数据管理。</li></ul><h3 id="2-Nacos-注册中心"><a href="#2-Nacos-注册中心" class="headerlink" title="2. Nacos 注册中心"></a>2. Nacos 注册中心</h3><h4 id="2-1-注册中心演变及其设计思想"><a href="#2-1-注册中心演变及其设计思想" class="headerlink" title="2.1 注册中心演变及其设计思想"></a>2.1 注册中心演变及其设计思想</h4><p><img src="/image%5Cimage-20220617111853100.png" alt="image-20220617111853100"></p><h4 id="2-2-Nacos-注册中心架构"><a href="#2-2-Nacos-注册中心架构" class="headerlink" title="2.2 Nacos 注册中心架构"></a>2.2 Nacos 注册中心架构</h4><p><img src="/image%5Cimage-20220617113241774.png" alt="image-20220617113241774"></p><h4 id="2-3-核心功能"><a href="#2-3-核心功能" class="headerlink" title="2.3 核心功能"></a>2.3 核心功能</h4><p><strong>服务注册：</strong>Nacos Client 会通过发送 REST 请求的方式向 Nacos Server 注册自己的服务，提供自身的元数据，比如 ip 地址、端口等信息。Nacos Client 接收到注册请求后，就会把这些元数据信息存储在一个双层的内存 Map 中。</p><p><strong>服务心跳：</strong>在服务注册后，Nacos Client 会维护一个定时心跳来持续通知 Nacos Server，说明服务一直处于可用状态，防止被剔除。默认 5s 发送一次心跳。</p><p><strong>服务同步：</strong>Nacos Server 集群之间会相互同步服务实例，用来保证服务信息的一致性。</p><p><strong>服务发现：</strong>服务消费者（Nacos Client）在调用服务提供者的服务时，会发送一个 REST 请求给 Nacos Server，获取上面注册的服务清单，并缓存在 Nacos Client 本地，同时会在 Nacos Client 本地开启一个定时任务定时拉取服务端最新的注册表信息更新到本地缓存。</p><p><strong>服务健康检查：</strong>Nacos Server 会开启一个定时任务用来检查注册服务实例的健康情况，对于超过 15s 没有收到客户端心跳的实例会将它的 healthy 属性置为 false（客户端服务发现时不会发现），如果某个实例超过 30s 没有收到心跳，直接剔除该实例（被剔除的实例如果恢复发送心跳则会重新注册）。</p><h5 id="注册中心之间的对比"><a href="#注册中心之间的对比" class="headerlink" title="注册中心之间的对比"></a>注册中心之间的对比</h5><blockquote><p>一致性协议CAP：C一致性；A可用性；P分区容错性。 </p></blockquote><p><img src="/image%5Cimage-20220617142652397.png" alt="image-20220617142652397"></p><h3 id="3-Nacos-Server-部署"><a href="#3-Nacos-Server-部署" class="headerlink" title="3. Nacos Server 部署"></a>3. Nacos Server 部署</h3><blockquote><p>Spring Cloud Alibaba:2.2.5.RELEASE 对应 Nacos 1.4.1</p></blockquote><p>下载地址：<a href="https://github.com/alibaba/nacos/releases">Nacos</a></p><h4 id="3-1-单机模式"><a href="#3-1-单机模式" class="headerlink" title="3.1 单机模式"></a>3.1 单机模式</h4><p><em>eg</em> 以下通过 Windows 版本展开学习</p><p>下载并解压，找到 <code>startup.cmd</code> 文件，Nacos 默认启动是集群模式，刚入门则需要修改该文件改为单机模式，方便学习。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> MODE=<span class="string">&quot;cluster&quot;</span></span><br><span class="line"><span class="comment"># 将 cluster 改为 standalone</span></span><br><span class="line"><span class="built_in">set</span> MODE=<span class="string">&quot;standalone&quot;</span></span><br></pre></td></tr></table></figure><p>双击启动。</p><blockquote><p>JDK 版本必须高于 8，且必须配置 JAVA_HOME 环境变量。</p></blockquote><p>控制台会输出 web 管理链接，默认账号密码均是：nacos</p><p>现在，给每个项目 pom 文件加入 Nacos Client 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>更多配置文件配置字段详见：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-discovery">https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-discovery</a></p></blockquote><p><em>order-nacos 微服务项目</em></p><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8020</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 该微服务名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="comment"># Nacos 注册中心地址</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 访问用户名及密码</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="comment"># 命名空间，不同空间的微服务相互隔离。通常可划分为开发环境 dev 生产环境 prod，默认 public</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure><p><em>stock-nacos 微服务项目</em></p><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8021</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 该微服务名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">stock-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="comment"># Nacos 注册中心地址</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 访问用户名及密码</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="comment"># 命名空间，不同空间的微服务相互隔离。通常可划分为开发环境 dev 生产环境 prod，默认 public</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure><p>分别启动以上两个微服务项目，可以在 Nacos web 管理页面看到如下信息：</p><p><img src="/image%5Cimage-20220620164034560.png" alt="image-20220620164034560"></p><p>引入注册中心后，我们就不需要在代码里写服务地址了，取而代之的是服务名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8011/stock/reduct&quot;</span>, String.class);</span><br><span class="line"><span class="comment">// 服务地址 -&gt; 服务名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://stock-service/stock/reduct&quot;</span>, String.class);</span><br></pre></td></tr></table></figure><p>为 RestTemplate 加上 <code>@LoadBalanced</code> 注解，启用负载均衡器。负载均衡器具有服务名向地址解析的功能。</p><blockquote><p>Nacos 默认采用 Ribbon 负载均衡。</p></blockquote><blockquote><p>负载均衡机制：循环向相同服务不同实例发送处理请求。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通常写在配置类里面</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line"><span class="keyword">return</span> restTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="同一个项目如何开启多个实例"><a href="#同一个项目如何开启多个实例" class="headerlink" title="同一个项目如何开启多个实例"></a>同一个项目如何开启多个实例</h5><p>对实例点击右键 <code>Copy Configuration...</code> 打开如下图配置界面。</p><p><img src="/image%5Cimage-20220620165919752.png" alt="image-20220620165919752"></p><h4 id="3-2-集群模式"><a href="#3-2-集群模式" class="headerlink" title="3.2 集群模式"></a>3.2 集群模式</h4><p><img src="/image%5Cimage-20220620192639701.png" alt="image-20220620192639701"></p><p><em>eg</em> 以下通过 Linux 版本展开学习</p><p>进入 Linux 系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个文件目录，并进入</span></span><br><span class="line"><span class="built_in">mkdir</span> nacos</span><br><span class="line"><span class="built_in">cd</span> nacos</span><br><span class="line"><span class="comment"># 下载 Linux 版 release（1.4.1）</span></span><br><span class="line">wget https://github.com/alibaba/nacos/releases/download/1.4.1/nacos-server-1.4.1.tar.gz</span><br><span class="line"><span class="comment"># 下载好，解压</span></span><br><span class="line">tar -zxvf nacos-server-1.4.1.tar.gz</span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line"><span class="built_in">mv</span> nacos nacos8849</span><br></pre></td></tr></table></figure><p>单机搭建伪集群</p><p><img src="/image%5Cimage-20220620185825173.png" alt="image-20220620185825173"></p><p>修改每个 Nacos 配置文件，以 nacos8849 为例，进入 nacos8849 目录</p><p>修改 conf&#x2F;application.properties 的配置，使用外置数据源</p><blockquote><p>MySQL 版本要求 5.7+</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用外置 MySQL 数据源</span></span><br><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment"># 连接数量</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># MySQL</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>将 conf&#x2F;cluster.conf.example 复制一份重命名为 cluster.conf，添加节点配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制并重命名</span></span><br><span class="line"><span class="built_in">cp</span> cluster.conf.example cluster.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ip:port</span><br><span class="line">192.168.3.14:8849</span><br><span class="line">192.168.3.14:8850</span><br><span class="line">192.168.3.14:8851</span><br></pre></td></tr></table></figure><p>创建 MySQL 数据库，sql 脚本位置：conf&#x2F;nacos-mysql.sql</p><p>（可选）如果出现内存不足，修改启动脚本（bin&#x2F;startup.sh）的 jvm 参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -server -Xms512m -Xmx512m -Xmn256 -XX:MetaspasceSize=128m ...&quot;</span></span><br></pre></td></tr></table></figure><p>启动 Nacos</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><p>目前，已经成功搭建起了 Nacos 集群，可到 Nacos web 管理页面查看。</p><p>现在，我们需要通过 Nginx 负载均衡将请求分发到各个 Nacos 服务器。</p><p>下载 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 添加官方源仓库</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line">yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 安装 openresty</span></span><br><span class="line">yum install -y openresty</span><br><span class="line"><span class="built_in">cd</span> /user/local/openresty/</span><br></pre></td></tr></table></figure><p>官方推荐，Nginx 反向代理 conf&#x2F;nginx.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">upstream nacoscluster &#123;</span><br><span class="line">server 127.0.0.1:8849;</span><br><span class="line">server 127.0.0.1:8850;</span><br><span class="line">server 127.0.0.1:8851;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">linsten 8847;</span><br><span class="line">server_name localhost;</span><br><span class="line">location /nacos/&#123;</span><br><span class="line">proxy_pass http://nacoscluster/nacos/;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>最后，微服务项目（Nacos Client）在配置文件中指向 Nginx 即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="string">server-addr:192.168.65.220:8847</span></span><br></pre></td></tr></table></figure><h4 id="3-3-prometheus-grafana-监控-Nacos"><a href="#3-3-prometheus-grafana-监控-Nacos" class="headerlink" title="3.3 prometheus + grafana 监控 Nacos"></a>3.3 prometheus + grafana 监控 Nacos</h4><h3 id="4-Spring-Cloud-Alibaba-Nacos-快速开始"><a href="#4-Spring-Cloud-Alibaba-Nacos-快速开始" class="headerlink" title="4. Spring Cloud Alibaba Nacos 快速开始"></a>4. Spring Cloud Alibaba Nacos 快速开始</h3><h4 id="4-1-Spring-Cloud-Alibaba-版本选型"><a href="#4-1-Spring-Cloud-Alibaba-版本选型" class="headerlink" title="4.1 Spring Cloud Alibaba 版本选型"></a>4.1 Spring Cloud Alibaba 版本选型</h4><h4 id="4-2-搭建-Nacos-client-服务"><a href="#4-2-搭建-Nacos-client-服务" class="headerlink" title="4.2 搭建 Nacos-client 服务"></a>4.2 搭建 Nacos-client 服务</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1bR4y1L724&quot;&gt;小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 </summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="SpringCloud" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/"/>
    
    <category term="小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"/>
    
    
    <category term="图灵架构师周瑜" scheme="http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E6%9E%B6%E6%9E%84%E5%B8%88%E5%91%A8%E7%91%9C/"/>
    
    <category term="图灵学院" scheme="http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E5%AD%A6%E9%99%A2/"/>
    
    <category term="徐庶" scheme="http://blog.hooy.xyz/tags/%E5%BE%90%E5%BA%B6/"/>
    
  </entry>
  
  <entry>
    <title>P01 微服务和 Spring Cloud Alibaba</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P01%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%92%8C%20Spring%20Cloud%20Alibaba/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P01%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%92%8C%20Spring%20Cloud%20Alibaba/</id>
    <published>2022-06-14T16:00:00.000Z</published>
    <updated>2022-06-17T02:29:41.181Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1bR4y1L724">小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂</a></p></blockquote><h3 id="1-微服务和-Spring-Cloud-Alibaba-介绍"><a href="#1-微服务和-Spring-Cloud-Alibaba-介绍" class="headerlink" title="1. 微服务和 Spring Cloud Alibaba 介绍"></a>1. 微服务和 Spring Cloud Alibaba 介绍</h3><h4 id="1-1-架构的演变过程"><a href="#1-1-架构的演变过程" class="headerlink" title="1.1 架构的演变过程"></a>1.1 架构的演变过程</h4><p><img src="/image%5Cimage-20220615173506278.png" alt="image-20220615173506278"></p><h5 id="1-1-1-单体应用架构"><a href="#1-1-1-单体应用架构" class="headerlink" title="1.1.1 单体应用架构"></a>1.1.1 单体应用架构</h5><ul><li>优点：<ul><li>项目架构简单，开发成本低；</li><li>项目部署在一个节点上，维护方便；</li></ul></li><li>缺点：<ul><li>全部功能集成在一个工程中，对于大型项目来讲不易开发和维护；</li><li>项目模块之间紧密耦合，单点容错率低；</li><li>无法针对不同模块进行针对性优化和水平扩展。</li></ul></li></ul><h5 id="1-1-2-垂直应用架构"><a href="#1-1-2-垂直应用架构" class="headerlink" title="1.1.2 垂直应用架构"></a>1.1.2 垂直应用架构</h5><ul><li>优点：<ul><li>系统拆分实现了流量分担，解决了并发问题，而且可以针对不同莫款进行优化和水平扩展；</li><li>一个系统的问题不会影响到其它系统，提高容错率；</li></ul></li><li>缺点：<ul><li>系统之间相互独立，无法进行相互调用；</li><li>系统之间相互独立，会有重复的开发任务。</li></ul></li></ul><h5 id="1-1-3-分布式架构（互联网公司刚起步推荐架构）"><a href="#1-1-3-分布式架构（互联网公司刚起步推荐架构）" class="headerlink" title="1.1.3 分布式架构（互联网公司刚起步推荐架构）"></a>1.1.3 分布式架构（互联网公司刚起步推荐架构）</h5><ul><li>优点：<ul><li>抽取公共的功能为服务层，提高代码复用性；</li></ul></li><li>缺点：<ul><li>系统间耦合度变高，调用关系错综复杂，难以维护。</li></ul></li></ul><h5 id="1-1-4-SOA-架构"><a href="#1-1-4-SOA-架构" class="headerlink" title="1.1.4 SOA 架构"></a>1.1.4 SOA 架构</h5><ul><li>优点：<ul><li>使用治理中心（ESB\Dubbo）解决了服务间调用关系的自动调节；</li></ul></li><li>缺点：<ul><li>服务间会有依赖关系，一旦某个环节出错会影响较大（服务雪崩）；</li><li>服务关系复杂，运维、测试部署困难。</li></ul></li></ul><h5 id="1-1-5-微服务架构"><a href="#1-1-5-微服务架构" class="headerlink" title="1.1.5 微服务架构"></a>1.1.5 微服务架构</h5><p>微服务架构比 SOA 架构粒度会更加精细，让专业的人去做专业的事情（专注），目的提高效率，每个服务与服务之间互不影响，微服务架构中，每个服务必须独立部署，微服务架构也更加轻巧、轻量级。</p><p>SOA 架构中可能数据库存储会发生共享，微服务强调独立每个服务都是单独数据库，保证每个服务与服务之间互不影响。</p><p>项目体现特征微服务架构比 SOA 架构更加适合互联网公司敏捷开发、快速迭代版本，因为粒度非常精细。</p><ul><li>优点：<ul><li>服务原子化拆分，独立打包、部署和升级、保证每个微服务清晰的任务划分，利于扩展；</li><li>微服务之间采用 Restful 等轻量级 http 协议互相调用；</li></ul></li><li>缺点：<ul><li>分布式系统开发的技术成本高（容错、分布式事务等）；</li><li>复杂性更高。各个微服务进行分布式独立部署，当进行模块调用的时候，分布式会变得更加麻烦。</li></ul></li></ul><h5 id="1-2-1-微服务架构的常见问题"><a href="#1-2-1-微服务架构的常见问题" class="headerlink" title="1.2.1 微服务架构的常见问题"></a>1.2.1 微服务架构的常见问题</h5><ul><li>这么多小服务，如何管理他们？（服务治理 注册中心[服务注册 发现 剔除]）Nacos</li><li>这么多小服务，他们之间如何通讯？（Restful RPC Dubbo Feign）<ul><li>迭代：<strong>以前</strong>[httpclient(“url”,args)] -&gt; <strong>SpringBoot</strong>[restTemplate(“url”,args)] -&gt; <strong>Feign</strong></li></ul></li><li>这么多小服务，客户端怎么访问他们？（网关）Gateway</li><li>这么多小服务，一旦出现问题了，应该如何自处理？（容错）Sentinel</li><li>这么多小服务，一点出现问题了，应该如何排错？（链路追踪）Skywalking</li></ul><p><img src="/image%5Cimage-20220615193525142.png" alt="image-20220615193525142"></p><p><img src="/image%5Cimage-20220615193634146.png" alt="image-20220615193634146"></p><h5 id="1-2-2-常见微服务架构"><a href="#1-2-2-常见微服务架构" class="headerlink" title="1.2.2 常见微服务架构"></a>1.2.2 常见微服务架构</h5><ol><li>Dobbo：Zookeeper + Dubbo + SpringMVC&#x2F;SpringBoot<ul><li>配套通信方式：rpc</li><li>注册中心：zookeeper&#x2F;redis</li><li>配置中心：diamond</li></ul></li><li>SpringCloud：全家桶 + 轻松嵌入第三方组件（Netfilx）<ul><li>配套通信方式：http restful</li><li>注册中心：eruka&#x2F;consul</li><li>配置中心：config</li><li>断路器：hystrix</li><li>网关：zuul</li><li>分布式追踪系统：sleuth + zipkin</li></ul></li><li><strong>SpringCloud Alibaba</strong></li></ol><blockquote><p>SpringCloud 以微服务为核心的分布式系统构建标准</p></blockquote><p><img src="/image%5Cimage-20220615194542436.png" alt="image-20220615194542436"></p><h3 id="4-Spring-Cloud-各套实现对比"><a href="#4-Spring-Cloud-各套实现对比" class="headerlink" title="4. Spring Cloud 各套实现对比"></a>4. Spring Cloud 各套实现对比</h3><p><img src="/image%5Cimage-20220616142258849.png" alt="image-20220616142258849"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1bR4y1L724&quot;&gt;小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 </summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="SpringCloud" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/"/>
    
    <category term="小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"/>
    
    
    <category term="图灵架构师周瑜" scheme="http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E6%9E%B6%E6%9E%84%E5%B8%88%E5%91%A8%E7%91%9C/"/>
    
    <category term="图灵学院" scheme="http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E5%AD%A6%E9%99%A2/"/>
    
    <category term="徐庶" scheme="http://blog.hooy.xyz/tags/%E5%BE%90%E5%BA%B6/"/>
    
  </entry>
  
  <entry>
    <title>P10 Spring Cloud Alibaba 环境搭建</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P10%20Spring%20Cloud%20Alibaba%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B_%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/P10%20Spring%20Cloud%20Alibaba%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-06-14T16:00:00.000Z</published>
    <updated>2022-06-16T11:38:32.909Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1bR4y1L724">小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂</a></p></blockquote><h3 id="3-Spring-Cloud-Alibaba-环境搭建"><a href="#3-Spring-Cloud-Alibaba-环境搭建" class="headerlink" title="3. Spring Cloud Alibaba 环境搭建"></a>3. Spring Cloud Alibaba 环境搭建</h3><h4 id="1-基于-Spring-Boot-的父-maven-项目"><a href="#1-基于-Spring-Boot-的父-maven-项目" class="headerlink" title="1. 基于 Spring Boot 的父 maven 项目"></a>1. 基于 Spring Boot 的父 maven 项目</h4><p>打开 <code>IDEA</code> 创建一个 <code>Spring Initializr</code> 项目，Type 选择 <code>Maven Project</code>，再将 Packaging 选择 <code>Pom</code> （如果没有Pom选项，后面在 pom 文件里改成 pom 即可）。</p><p><img src="/image%5Cimage-20220616145021057.png" alt="image-20220616145021057"></p><p>一路下一步。项目创建好后，打开 pom 文件，加入以下代码，让项目打包时不用打包成 jar 包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-子-maven-项目"><a href="#2-子-maven-项目" class="headerlink" title="2. 子 maven 项目"></a>2. 子 maven 项目</h4><p>右键父项目 <code>New Module</code>，创建一个 <code>Maven</code> 项目。</p><p><img src="/image%5Cimage-20220616150358353.png" alt="image-20220616150358353"></p><p>子项目是 web 项目，pom 加入 web 相关的依赖坐标。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-创建两个服务并通信"><a href="#3-创建两个服务并通信" class="headerlink" title="3. 创建两个服务并通信"></a>3. 创建两个服务并通信</h4><p><img src="/image%5Cimage-20220616163921651.png" alt="image-20220616163921651"></p><p><em>Order 服务</em></p><p>SpringBootApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通常写在配置类里面</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;下单成功&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8011/stock/reduct&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span> + msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>aplication.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8010</span></span><br></pre></td></tr></table></figure><p><em>Stock 服务</em></p><p>SpringBootApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StockApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(StockApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/stock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StockController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/reduct&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reduct</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;扣减库存&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;扣减库存&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>aplication.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8011</span></span><br></pre></td></tr></table></figure><h5 id="Run-Dashboard-x2F-Service"><a href="#Run-Dashboard-x2F-Service" class="headerlink" title="Run Dashboard &#x2F; Service"></a>Run Dashboard &#x2F; Service</h5><p>方便管理各个服务。</p><p><img src="/image%5Cimage-20220616164205378.png" alt="image-20220616164205378"></p><h4 id="4-引入-Spring-Cloud-Alibaba-相关组件"><a href="#4-引入-Spring-Cloud-Alibaba-相关组件" class="headerlink" title="4. 引入 Spring Cloud Alibaba 相关组件"></a>4. 引入 Spring Cloud Alibaba 相关组件</h4><blockquote><p>注意：一定要去查阅官方文档组件之间版本兼容性。</p></blockquote><p>这里使用以下版本学习：</p><ul><li>Spring Cloud Alibaba:2.2.5.RELEASE</li><li>Spring Boot:2.3.2.RELEASE</li><li>Spring Cloud:Hoxton.SR8</li></ul><p>为父项目加入依赖坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--spring cloud alibaba 版本管理--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>dependencyManagement 和 dependencies 区别：dependencyManagement 的依赖需要子类声明后才能使用，dependencies 的依赖子类可以直接使用。</p></blockquote><p>当然，可以将 <code>&lt;parent&gt;</code> 标签内的依赖坐标加入其中，这样就能释放 parent 标签了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--spring cloud alibaba 版本管理--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--spring boot 版本管理--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--spring cloud 版本管理--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-IDEA-集成阿里云快速初始化向导"><a href="#5-IDEA-集成阿里云快速初始化向导" class="headerlink" title="5. IDEA 集成阿里云快速初始化向导"></a>5. IDEA 集成阿里云快速初始化向导</h4><p>阿里云提供的快速初始化向导：<a href="https://start.aliyun.com/bootstrap.html">https://start.aliyun.com/bootstrap.html</a></p><p><img src="/image%5Cimage-20220616193822836.png" alt="image-20220616193822836"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1bR4y1L724&quot;&gt;小破站讲的最好SpringCloudAlibaba入门教程，保姆级教程通俗易懂&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 </summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="SpringCloud" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/"/>
    
    <category term="小破站讲的最好SpringCloudAlibaba入门教程_保姆级教程通俗易懂" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringCloud/%E5%B0%8F%E7%A0%B4%E7%AB%99%E8%AE%B2%E7%9A%84%E6%9C%80%E5%A5%BDSpringCloudAlibaba%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"/>
    
    
    <category term="图灵架构师周瑜" scheme="http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E6%9E%B6%E6%9E%84%E5%B8%88%E5%91%A8%E7%91%9C/"/>
    
    <category term="图灵学院" scheme="http://blog.hooy.xyz/tags/%E5%9B%BE%E7%81%B5%E5%AD%A6%E9%99%A2/"/>
    
    <category term="徐庶" scheme="http://blog.hooy.xyz/tags/%E5%BE%90%E5%BA%B6/"/>
    
  </entry>
  
  <entry>
    <title>P51 Nullable注解和函数式注册对象</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P51%20Nullable%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%87%BD%E6%95%B0%E5%BC%8F%E6%B3%A8%E5%86%8C%E5%AF%B9%E8%B1%A1/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P51%20Nullable%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%87%BD%E6%95%B0%E5%BC%8F%E6%B3%A8%E5%86%8C%E5%AF%B9%E8%B1%A1/</id>
    <published>2022-06-01T16:00:00.000Z</published>
    <updated>2022-06-15T08:32:50.642Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1Vf4y127N5">尚硅谷Spring框架视频教程（spring5源码级讲解）</a></p></blockquote><h3 id="Nullable-注解"><a href="#Nullable-注解" class="headerlink" title="@Nullable 注解"></a>@Nullable 注解</h3><p>该注解用在：</p><ul><li>方法：方法返回值可以为空；</li><li>形参：形参值可以为空；</li><li>属性：属性值可以为空。</li></ul><h3 id="函数式风格-GenericApplicationContext"><a href="#函数式风格-GenericApplicationContext" class="headerlink" title="函数式风格 GenericApplicationContext"></a>函数式风格 GenericApplicationContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 GenericApplicationContext 对象</span></span><br><span class="line"><span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line"><span class="comment">// （非必要）清空容器</span></span><br><span class="line">context.refresh();</span><br><span class="line"><span class="comment">// 对象注册</span></span><br><span class="line">context.registerBean(<span class="string">&quot;user&quot;</span>,User.class,()-&gt; <span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line"><span class="comment">// 获取在 spring 注册的对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)context.getBean(<span class="string">&quot;user&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1Vf4y127N5&quot;&gt;尚硅谷Spring框架视频教程（spring5源码级讲解）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Nullab</summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="SpringFramework" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"/>
    
    <category term="尚硅谷Spring框架视频教程（spring5源码级讲解）" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"/>
    
    
    <category term="尚硅谷" scheme="http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE强化教程泛型，由点到面的讲解了整个泛型体系</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/JavaSE%E5%BC%BA%E5%8C%96%E6%95%99%E7%A8%8B%E6%B3%9B%E5%9E%8B_%E7%94%B1%E7%82%B9%E5%88%B0%E9%9D%A2%E7%9A%84%E8%AE%B2%E8%A7%A3%E4%BA%86%E6%95%B4%E4%B8%AA%E6%B3%9B%E5%9E%8B%E4%BD%93%E7%B3%BB/JavaSE%E5%BC%BA%E5%8C%96%E6%95%99%E7%A8%8B%E6%B3%9B%E5%9E%8B%EF%BC%8C%E7%94%B1%E7%82%B9%E5%88%B0%E9%9D%A2%E7%9A%84%E8%AE%B2%E8%A7%A3%E4%BA%86%E6%95%B4%E4%B8%AA%E6%B3%9B%E5%9E%8B%E4%BD%93%E7%B3%BB/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/JavaSE%E5%BC%BA%E5%8C%96%E6%95%99%E7%A8%8B%E6%B3%9B%E5%9E%8B_%E7%94%B1%E7%82%B9%E5%88%B0%E9%9D%A2%E7%9A%84%E8%AE%B2%E8%A7%A3%E4%BA%86%E6%95%B4%E4%B8%AA%E6%B3%9B%E5%9E%8B%E4%BD%93%E7%B3%BB/JavaSE%E5%BC%BA%E5%8C%96%E6%95%99%E7%A8%8B%E6%B3%9B%E5%9E%8B%EF%BC%8C%E7%94%B1%E7%82%B9%E5%88%B0%E9%9D%A2%E7%9A%84%E8%AE%B2%E8%A7%A3%E4%BA%86%E6%95%B4%E4%B8%AA%E6%B3%9B%E5%9E%8B%E4%BD%93%E7%B3%BB/</id>
    <published>2022-05-31T16:00:00.000Z</published>
    <updated>2022-06-15T08:32:50.160Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1xJ411n77R">JavaSE强化教程泛型，由点到面的讲解了整个泛型体系</a></p></blockquote><h3 id="泛型类、接口"><a href="#泛型类、接口" class="headerlink" title="泛型类、接口"></a>泛型类、接口</h3><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><ul><li><p>泛型类的定义语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class 类名称&lt;泛型标识,泛型标识,...&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> 泛型标识 变量名;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>常用的泛型标识：T、E、K、V</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generic</span><span class="params">(T key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKey</span><span class="params">(T key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>使用语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名&lt;具体的数据类型&gt; 对象名 = <span class="keyword">new</span> 类名&lt;具体的数据类型&gt;();</span><br></pre></td></tr></table></figure></li><li><p>Java 1.7 以后，后面的&lt;&gt;中的具体数据类型可以省略不写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名&lt;具体的数据类型&gt; 对象名 = <span class="keyword">new</span> 类名&lt;&gt;();</span><br></pre></td></tr></table></figure></li></ul><h4 id="泛型类注意事项"><a href="#泛型类注意事项" class="headerlink" title="泛型类注意事项"></a>泛型类注意事项</h4><ul><li>泛型类，如果没有指定具体的数据类型，操作类型是 Object；</li><li>泛型的类型参数只能是类类型，不能是基本数据类型；</li><li>泛型类型在逻辑上可以看成是多个不同的类型，但实际上都是相同类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductGetter</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="comment">// 奖品</span></span><br><span class="line">    <span class="keyword">private</span> T product;</span><br><span class="line">    <span class="comment">// 奖品池</span></span><br><span class="line">    ArrayList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加奖品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addProduct</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        list.add(t);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 抽奖</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        product = list.get(random.nextInt(list.size()));</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="从泛型类派生子类"><a href="#从泛型类派生子类" class="headerlink" title="从泛型类派生子类"></a>从泛型类派生子类</h4><ul><li><p>子类也是泛型类，子类和父类的泛型类型要一致；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ChildGeneric</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Generic</span>&lt;T&gt;</span><br><span class="line"><span class="comment">// 也可以增加泛型类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildGeneric</span>&lt;T,E,K&gt; <span class="keyword">extends</span> <span class="title class_">Generic</span>&lt;T&gt;</span><br></pre></td></tr></table></figure></li><li><p>子类不是泛型类，父类要明确泛型的数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ChildGeneric</span> <span class="keyword">extends</span> <span class="title class_">Generic</span>&lt;String&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><ul><li><p>泛型接口的定义语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface 接口名称&lt;泛型标识,泛型标识,...&gt; &#123;</span><br><span class="line">    泛型标识 方法名();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="泛型接口的使用"><a href="#泛型接口的使用" class="headerlink" title="泛型接口的使用"></a>泛型接口的使用</h4><ul><li>实现类不是泛型类，接口要明确数据类型；</li><li>实现类也是泛型类，实现类和接口的泛型类型要一致。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Generator</span>&lt;T&gt; &#123;</span><br><span class="line">    T <span class="title function_">getKey</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T,E,K&gt; <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;T&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;String&gt;</span><br></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><ul><li>泛型类，是在实例化类的时候指明泛型的具体类型；</li><li>泛型方法，是在调用方法的时候指明泛型的具体类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;T,E,...&gt; 返回值类型 方法名(形参列表) &#123;</span><br><span class="line">    方法体...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>public 与返回值中间 <code>&lt;T&gt;</code> 非常重要，可以理解为声明此方法为泛型方法；</li><li><strong>只有声明了 <code>&lt;T&gt;</code> 的方法才是泛型方法</strong>，泛型类中的使用了泛型的成员方法并不是泛型方法；</li><li><code>&lt;T&gt;</code> 表明该方法将使用泛型类型 T，此时才可以在方法中使用泛型类型 T；</li><li>与泛型类的定义一样，此处 T 可以随便写为任意表示，常见的如 T、E、K、V 等形式的参数常用于表示泛型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; E <span class="title function_">getProduct</span><span class="params">(ArrayList&lt;E&gt; list)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> list.get(random.nextInt(list.size()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型方法可以被 <code>static</code> 修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,E,K&gt; <span class="keyword">void</span> <span class="title function_">printType</span><span class="params">(T t,E e,K k)</span></span><br></pre></td></tr></table></figure><h4 id="泛型方法与可变参数"><a href="#泛型方法与可变参数" class="headerlink" title="泛型方法与可变参数"></a>泛型方法与可变参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(E... e)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(E e1 : e) &#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型方法总结"><a href="#泛型方法总结" class="headerlink" title="泛型方法总结"></a>泛型方法总结</h4><ul><li>泛型方法能使方法独立于类而产生变化；</li><li>如果 <code>static</code> 方法要使用泛型能力，就必须使其成为泛型方法。</li></ul><h3 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h3><h4 id="什么是类型通配符"><a href="#什么是类型通配符" class="headerlink" title="什么是类型通配符"></a>什么是类型通配符</h4><ul><li>类型通配符一般是使用 <code>?</code> 代替具体的类型实参；</li><li>所以，类型通配符是类型实参，而不是类型形参。</li></ul><h4 id="类型通配符的上限"><a href="#类型通配符的上限" class="headerlink" title="类型通配符的上限"></a>类型通配符的上限</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类/接口&lt;? extends 实参类型&gt;</span><br></pre></td></tr></table></figure><p>要求该泛型的类型，只能是实参类型，或实参类型的<strong>子</strong>类型类型。</p><p><em>eg 01</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Box&lt;Number&gt; box1 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;;</span><br><span class="line">    showBox(box1);</span><br><span class="line">    Box&lt;Integer&gt; box2 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;;</span><br><span class="line">    showBox(box2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向上父类只能到Number （Integer是Number子类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showBox</span><span class="params">(Box&lt;? extends Number&gt; box)</span> &#123;</span><br><span class="line">    <span class="type">Numaber</span> <span class="variable">first</span> <span class="operator">=</span> box.getFirst();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>eg 02</em></p><p>继承关系：Animal -&gt; Cat -&gt; MiniCat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MiniCat</span> <span class="keyword">extends</span> <span class="title class_">Cat</span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;Animal&gt; animals = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ArrayList&lt;Cat&gt; cats = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ArrayList&lt;MiniCat&gt; miniCat = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    showAnimal(animals); <span class="comment">// 编译错误</span></span><br><span class="line">    showAnimal(cats);</span><br><span class="line">    showAnimal(miniCat);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showAnimal</span><span class="params">(ArrayList&lt;? extends Cat&gt; list)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>注意：“类型通配符的上限” 方法不允许添加元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showAnimal</span><span class="params">(ArrayList&lt;? extends Cat&gt; list)</span> &#123;</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Animal</span>()); <span class="comment">// 编译错误</span></span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Cat</span>()); <span class="comment">// 编译错误</span></span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">MiniCat</span>()); <span class="comment">// 编译错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型通配符的下限"><a href="#类型通配符的下限" class="headerlink" title="类型通配符的下限"></a>类型通配符的下限</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类/接口&lt;? <span class="built_in">super</span> 实参类型&gt;</span><br></pre></td></tr></table></figure><p>要求该泛型的类型，只能是实参类型，或实参类型的<strong>父</strong>类类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;Animal&gt; animals = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ArrayList&lt;Cat&gt; cats = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ArrayList&lt;MiniCat&gt; miniCat = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    showAnimal(animals);</span><br><span class="line">    showAnimal(cats);</span><br><span class="line">    showAnimal(miniCat); <span class="comment">// 编译错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showAnimal</span><span class="params">(ArrayList&lt;? <span class="built_in">super</span> Cat&gt; list)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>注意：“类型通配符的下限” 方法允许添加元素，不保证元素类型约束要求。</p><blockquote><p>以下章节未学习</p></blockquote><h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><h3 id="泛型与数组"><a href="#泛型与数组" class="headerlink" title="泛型与数组"></a>泛型与数组</h3><h3 id="泛型和反射"><a href="#泛型和反射" class="headerlink" title="泛型和反射"></a>泛型和反射</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1xJ411n77R&quot;&gt;JavaSE强化教程泛型，由点到面的讲解了整个泛型体系&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;泛型类、接口&quot;&gt;</summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="Java" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"/>
    
    <category term="JavaSE强化教程泛型_由点到面的讲解了整个泛型体系" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/JavaSE%E5%BC%BA%E5%8C%96%E6%95%99%E7%A8%8B%E6%B3%9B%E5%9E%8B-%E7%94%B1%E7%82%B9%E5%88%B0%E9%9D%A2%E7%9A%84%E8%AE%B2%E8%A7%A3%E4%BA%86%E6%95%B4%E4%B8%AA%E6%B3%9B%E5%9E%8B%E4%BD%93%E7%B3%BB/"/>
    
    
    <category term="黑马程序员" scheme="http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>P33 - P39 JdbcTemplate</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P33%20-%20P39%20JdbcTemplate/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P33%20-%20P39%20JdbcTemplate/</id>
    <published>2022-05-30T16:00:00.000Z</published>
    <updated>2022-06-15T08:32:50.641Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1Vf4y127N5">尚硅谷Spring框架视频教程（spring5源码级讲解）</a></p></blockquote><h3 id="JdbcTemplate（概念和准备）"><a href="#JdbcTemplate（概念和准备）" class="headerlink" title="JdbcTemplate（概念和准备）"></a>JdbcTemplate（概念和准备）</h3><h4 id="1-什么是-JdbcTemplate"><a href="#1-什么是-JdbcTemplate" class="headerlink" title="1. 什么是 JdbcTemplate"></a>1. 什么是 JdbcTemplate</h4><p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作。</p><h4 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h4><p><em>Step 01</em> 引入依赖（jar包）</p><p><img src="/Images%5Cimage-20220531093922683.png" alt="image-20220531093922683"></p><p><em>Step 02</em> 在 spring 配置文件配置数据库连接池</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/userDB&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>Step 03</em> 配置 JdbcTemplate 对象，注入 DataSource</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JdbcTemplate对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;JdbcTemplate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>Step 04</em> 创建 service 类，创建 dao 类，在 dao 注入 jdbcTemplate 对象</p><blockquote><p>由于使用到了注解，需要在 spring 配置文件中配置 <strong>组件扫描</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单条数据操作"><a href="#单条数据操作" class="headerlink" title="单条数据操作"></a>单条数据操作</h3><blockquote><p>P34</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userStatus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Overried</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建sql语句和args参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_book values(?,?,?)&quot;</span>;</span><br><span class="line">        Object[] args = &#123;book.getUserId(),book.getUserName(),book.getUserStatus()&#125;;</span><br><span class="line">        <span class="comment">// 调用方法 返回影响行数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改和删除"><a href="#修改和删除" class="headerlink" title="修改和删除"></a>修改和删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Overried</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建sql语句和args参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set user_id = ?,user_name = ?,user_status = ?&quot;</span>;</span><br><span class="line">        Object[] args = &#123;book.getUserId(),book.getUserName(),book.getUserStatus()&#125;;</span><br><span class="line">        <span class="comment">// 调用方法 返回影响行数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql,args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Overried</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建sql语句和args参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_book where user_id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">// 调用方法 返回影响行数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="返回基本类型"><a href="#返回基本类型" class="headerlink" title="返回基本类型"></a>返回基本类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Overried</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">selectCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from t_book&quot;</span>;</span><br><span class="line">        <span class="comment">// Class 返回类型</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql,Integer.class);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回对象类型"><a href="#返回对象类型" class="headerlink" title="返回对象类型"></a>返回对象类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Overried</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">findBookInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_book where user_id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">// RowMapper 是接口，针对返回不同类型数据，使用这个接口里面实现类完成数据封装</span></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql,<span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class),id);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回集合类型"><a href="#返回集合类型" class="headerlink" title="返回集合类型"></a>返回集合类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Overried</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">findAllBook</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_book&quot;</span>;</span><br><span class="line">        <span class="comment">// RowMapper 是接口，针对返回不同类型数据，使用这个接口里面实现类完成数据封装</span></span><br><span class="line">        List&lt;Book&gt; bookList = jdbcTemplate.query(sql,<span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class));</span><br><span class="line">        <span class="keyword">return</span> bookList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量数据操作"><a href="#批量数据操作" class="headerlink" title="批量数据操作"></a>批量数据操作</h3><h4 id="添加-1"><a href="#添加-1" class="headerlink" title="添加"></a>添加</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Overried</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchAddBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_book values(?,?,?)&quot;</span>;</span><br><span class="line">        <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql,batchArgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改和删除-1"><a href="#修改和删除-1" class="headerlink" title="修改和删除"></a>修改和删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Overried</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchUpdateBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set user_id = ?,user_name = ?,user_status = ?&quot;</span>;</span><br><span class="line">        <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql,batchArgs);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Overried</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchDeleteBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_book where user_id = ?&quot;</span>;</span><br><span class="line">        <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql,batchArgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1Vf4y127N5&quot;&gt;尚硅谷Spring框架视频教程（spring5源码级讲解）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;JdbcTe</summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="SpringFramework" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"/>
    
    <category term="尚硅谷Spring框架视频教程（spring5源码级讲解）" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"/>
    
    
    <category term="尚硅谷" scheme="http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>P40 - P49 事务操作</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P40%20-%20P49%20%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P40%20-%20P49%20%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C/</id>
    <published>2022-05-30T16:00:00.000Z</published>
    <updated>2022-06-15T08:32:50.642Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1Vf4y127N5">尚硅谷Spring框架视频教程（spring5源码级讲解）</a></p></blockquote><h3 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h3><h4 id="1-什么是事务"><a href="#1-什么是事务" class="headerlink" title="1. 什么是事务"></a>1. 什么是事务</h4><p>事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操作都失败。</p><h4 id="2-事务四个特性（ACID）"><a href="#2-事务四个特性（ACID）" class="headerlink" title="2. 事务四个特性（ACID）"></a>2. 事务四个特性（ACID）</h4><ul><li>原子性：不可分割，要么都成功要么都失败；</li><li>一致性：操作前后总量不变；</li><li>隔离性：多事务操作时互不影响；</li><li>持久性：提交后保存数据。</li></ul><h3 id="搭建事务操作环境"><a href="#搭建事务操作环境" class="headerlink" title="搭建事务操作环境"></a>搭建事务操作环境</h3><p><img src="/Images%5Cimage-20220531165138468.png" alt="image-20220531165138468"></p><h4 id="事务操作过程"><a href="#事务操作过程" class="headerlink" title="事务操作过程"></a>事务操作过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 第一步 开启事务</span></span><br><span class="line">        <span class="comment">// 第二步 进行业务操作</span></span><br><span class="line">        userDao.reduceMoney();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        userDao.addMoney();</span><br><span class="line">        <span class="comment">// 第三步 没有发生异常，提交事务</span></span><br><span class="line">    &#125; <span class="keyword">catch</span>(Excepiton e) &#123;</span><br><span class="line">        <span class="comment">// 第三步 出现异常，回滚事务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-事务管理介绍"><a href="#Spring-事务管理介绍" class="headerlink" title="Spring 事务管理介绍"></a>Spring 事务管理介绍</h3><h4 id="1-事务添加到-JavaEE-三层结构里面-Service-层（业务逻辑层）"><a href="#1-事务添加到-JavaEE-三层结构里面-Service-层（业务逻辑层）" class="headerlink" title="1. 事务添加到 JavaEE 三层结构里面 Service 层（业务逻辑层）"></a>1. 事务添加到 JavaEE 三层结构里面 Service 层（业务逻辑层）</h4><h4 id="2-在-Spring-进行事务管理操作"><a href="#2-在-Spring-进行事务管理操作" class="headerlink" title="2. 在 Spring 进行事务管理操作"></a>2. 在 Spring 进行事务管理操作</h4><p>有两种方式：</p><ul><li>编程式事务管理；</li><li>声明式事务管理（常用）。<ul><li>基于注解方式；</li><li>基于 xml 配置文件方式。</li></ul></li></ul><h4 id="4-在-Spring-进行声明式事务管理，底层使用-AOP-原理"><a href="#4-在-Spring-进行声明式事务管理，底层使用-AOP-原理" class="headerlink" title="4. 在 Spring 进行声明式事务管理，底层使用 AOP 原理"></a>4. 在 Spring 进行声明式事务管理，底层使用 AOP 原理</h4><h4 id="5-提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类"><a href="#5-提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类" class="headerlink" title="5. 提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类"></a>5. 提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类</h4><p><img src="/Images%5Cimage-20220531171508035.png" alt="image-20220531171508035"></p><h3 id="注解声明式事务管理"><a href="#注解声明式事务管理" class="headerlink" title="注解声明式事务管理"></a>注解声明式事务管理</h3><p><em>Step 01</em> 在 spring 配置文件配置事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>Step 02</em> 在 spring 配置文件，开启事务注解</p><p>在 spring 配置文件引入命名空间 tx</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:util=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span><br></pre></td></tr></table></figure><p>开启事务注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启事务注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>Step 03</em> 在 service 类（方法）上面添加事务注解 <code>@Transactional</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span> &#123;</span><br><span class="line">userDao.reduceMoney();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    userDao.addMoney();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明式事务管理参数配置"><a href="#声明式事务管理参数配置" class="headerlink" title="声明式事务管理参数配置"></a>声明式事务管理参数配置</h3><h4 id="1-在-Service-类上面添加注解-Transactional，在这个注解里面可以配置事务相关参数"><a href="#1-在-Service-类上面添加注解-Transactional，在这个注解里面可以配置事务相关参数" class="headerlink" title="1. 在 Service 类上面添加注解 @Transactional，在这个注解里面可以配置事务相关参数"></a>1. 在 Service 类上面添加注解 @Transactional，在这个注解里面可以配置事务相关参数</h4><p><img src="/Images%5Cimage-20220602152127490.png" alt="image-20220602152127490"></p><ul><li><p>propagation：事务传播行为；</p><p>多事务方法（对数据库表增删改操作）之间进行调用</p><p><img src="/Images%5Cimage-20220602154647748.png" alt="image-20220602154647748"></p><p>Spring 框架事务传播行为有 7 种：</p><p><img src="/Images%5Cimage-20220602155013395.png" alt="image-20220602155013395"></p><ul><li><strong>REQUIRED</strong>（默认）：如果 add 方法本身有事务，调用 update 方法后，update 使用当前 add 方法的事务；如果 add 方法本身没有事务，调用 update 方法后，创建新事务；</li><li><strong>REQUIRED_NEW</strong>：使用 add 方法调用 update 方法，如果 add 无论是否有事务，都创建新的事务；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>Isolation：事务隔离级别；</p><p>遇到的三个问题：</p><ul><li>脏读：一个未提交的事务读取到另一个未提交事务的数据；</li><li>不可重复读：一个未提交事务读取到另一个提交事务修改之前的数据；</li><li>幻读：</li></ul><blockquote><p>此部分建议专门搜索相关知识点。</p></blockquote><p>解决问题，设置事务隔离级别：</p><p><img src="/Images%5Cimage-20220602161042562.png" alt="image-20220602161042562"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>timeout：超时时间；</p><p>事务需要在一定时间内进行提交，如果不提交进行回滚。默认值 -1，即无超时时间。单位秒。</p></li><li><p>readOnly：是否只读；</p><p>默认值 false，设置 true 后，只能查询操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(timeout = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>rollbackFor：回滚；</p><p>设置出现哪些异常进行事务回滚。</p></li><li><p>noRollbackFor：不回滚；</p><p>设置出现哪些异常不进行事务回滚。</p></li></ul><h3 id="XML-声明式事务管理"><a href="#XML-声明式事务管理" class="headerlink" title="XML  声明式事务管理"></a>XML  声明式事务管理</h3><h4 id="1-在-spring-配置文件中进行配置"><a href="#1-在-spring-配置文件中进行配置" class="headerlink" title="1. 在 spring 配置文件中进行配置"></a>1. 在 spring 配置文件中进行配置</h4><p><em>Step 01</em> 配置事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>Step 02</em> 配置通知</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txadvice&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定哪种规则的方法上面添加事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;accountMoney&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>Step 03</em> 配置切入点和切面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.atguigu.spring5.service.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h3><h4 id="1-创建配置类，使用配置类代替-xml-配置文件"><a href="#1-创建配置类，使用配置类代替-xml-配置文件" class="headerlink" title="1. 创建配置类，使用配置类代替 xml 配置文件"></a>1. 创建配置类，使用配置类代替 xml 配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu&quot;)</span> <span class="comment">// 组件扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建数据库连接池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">getDruidDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql:///user_db&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 JdbcTemplate 对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="comment">// 到 IOC 容器中根据类型找到 dataSource</span></span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        <span class="comment">// 注入 dataSource</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建事务管理器对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1Vf4y127N5&quot;&gt;尚硅谷Spring框架视频教程（spring5源码级讲解）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;事务概念&quot;&gt;</summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="SpringFramework" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"/>
    
    <category term="尚硅谷Spring框架视频教程（spring5源码级讲解）" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"/>
    
    
    <category term="尚硅谷" scheme="http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>P24 - P32 AOP</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P25%20-%20P32%20AOP/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P25%20-%20P32%20AOP/</id>
    <published>2022-05-29T16:00:00.000Z</published>
    <updated>2022-06-15T08:32:50.641Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1Vf4y127N5">尚硅谷Spring框架视频教程（spring5源码级讲解）</a></p></blockquote><h3 id="AOP（概念）"><a href="#AOP（概念）" class="headerlink" title="AOP（概念）"></a>AOP（概念）</h3><h4 id="1-什么是-AOP"><a href="#1-什么是-AOP" class="headerlink" title="1. 什么是 AOP"></a>1. 什么是 AOP</h4><ul><li>不通过修改源码方式，在主干功能里面添加新功能。</li><li>将日志记录、性能统计、安全控制、事务处理、异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将他们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。</li></ul><h3 id="AOP（底层原理）"><a href="#AOP（底层原理）" class="headerlink" title="AOP（底层原理）"></a>AOP（底层原理）</h3><blockquote><p>P27</p></blockquote><h4 id="AOP-底层使用动态代理"><a href="#AOP-底层使用动态代理" class="headerlink" title="AOP 底层使用动态代理"></a>AOP 底层使用动态代理</h4><p>有两种情况动态代理：</p><ul><li>有接口情况，使用 <strong>JDK 动态代理</strong>；<ol><li>调用 java.lang.reflect.Proxy 类里的 newProxyInstance 方法；<ul><li>参数一：类加载器；</li><li>参数二：被代理类实现的接口，支持多个接口；</li><li>参数三：实现 InvocationHandler 接口，写增强方法。</li></ul></li><li>编写 JDK 动态代理代码；</li><li>使用 Proxy 类创建接口代理对象。</li></ol></li><li>没有接口情况，使用 <strong>CGLIB 动态代理</strong>。</li></ul><h3 id="AOP（术语）"><a href="#AOP（术语）" class="headerlink" title="AOP（术语）"></a>AOP（术语）</h3><blockquote><p>P28</p></blockquote><h4 id="1-连接点"><a href="#1-连接点" class="headerlink" title="1. 连接点"></a>1. 连接点</h4><p>类里面哪些方法可以被增强，这些方法称为连接点。</p><h4 id="2-切入点"><a href="#2-切入点" class="headerlink" title="2. 切入点"></a>2. 切入点</h4><p>实际被真正增强的方法，称为切入点。</p><h4 id="3-通知（增强）"><a href="#3-通知（增强）" class="headerlink" title="3. 通知（增强）"></a>3. 通知（增强）</h4><p>增强的逻辑部分被称为通知（增强）。</p><p>通知有多种类型：</p><ul><li>前置通知 @Before</li><li>后置通知 @After</li><li>环绕通知 @Around</li><li>异常通知 @AfterThrowing</li><li>最终通知 @AfterReturing</li></ul><h4 id="4-切面"><a href="#4-切面" class="headerlink" title="4. 切面"></a>4. 切面</h4><p>把通知应用到切入点的过程，称为切面。</p><h3 id="AOP-操作（准备）"><a href="#AOP-操作（准备）" class="headerlink" title="AOP 操作（准备）"></a>AOP 操作（准备）</h3><blockquote><p>P29</p></blockquote><h4 id="1-Spring-框架一般基于-AspectJ-实现-AOP-操作"><a href="#1-Spring-框架一般基于-AspectJ-实现-AOP-操作" class="headerlink" title="1. Spring 框架一般基于 AspectJ 实现 AOP 操作"></a>1. Spring 框架一般基于 AspectJ 实现 AOP 操作</h4><p>什么是 AspectJ ？</p><p>AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spring 框架一起使用，进行 AOP 操作。</p><h4 id="2-基于-AspectJ-实现-AOP-操作"><a href="#2-基于-AspectJ-实现-AOP-操作" class="headerlink" title="2. 基于 AspectJ 实现 AOP 操作"></a>2. 基于 AspectJ 实现 AOP 操作</h4><ol><li>基于 xml 配置文件实现；</li><li>基于注解方式实现。</li></ol><h4 id="3-在项目工程里面引入-AOP-相关依赖"><a href="#3-在项目工程里面引入-AOP-相关依赖" class="headerlink" title="3. 在项目工程里面引入 AOP 相关依赖"></a>3. 在项目工程里面引入 AOP 相关依赖</h4><h4 id="4-切入点表达式"><a href="#4-切入点表达式" class="headerlink" title="4. 切入点表达式"></a>4. 切入点表达式</h4><ol><li>切入点表达式的作用：知道对哪个类里面的哪个方法进行增强；</li><li>语法结构：<code>execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表])</code></li></ol><p><em>eg 01</em> 对 com.atguigu.dao.BookDao 类里面的 add 进行增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 权限修饰符 * 表示任意权限</span></span><br><span class="line"><span class="comment">// 返回类型 可以省略</span></span><br><span class="line"><span class="comment">// 参数列表 .. 表示全部参数</span></span><br><span class="line"></span><br><span class="line">execution(* com.atguigu.dao.BookDao.add(..));</span><br></pre></td></tr></table></figure><p><em>eg 02</em> 对 com.atguigu.dao.BookDao 类里面的所有的方法进行增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.atguigu.dao.BookDao.*(..));</span><br></pre></td></tr></table></figure><p><em>eg 03</em> 对 com.atguigu.dao 包里面所有类，类里面所有方法进行增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.atguigu.dao.*.*(..));</span><br></pre></td></tr></table></figure><h3 id="AOP-操作（AspectJ-注解）"><a href="#AOP-操作（AspectJ-注解）" class="headerlink" title="AOP 操作（AspectJ 注解）"></a>AOP 操作（AspectJ 注解）</h3><h4 id="1-创建类，在类里面定义方法"><a href="#1-创建类，在类里面定义方法" class="headerlink" title="1. 创建类，在类里面定义方法"></a>1. 创建类，在类里面定义方法</h4><h4 id="2-创建增强类（编写增强逻辑）"><a href="#2-创建增强类（编写增强逻辑）" class="headerlink" title="2. 创建增强类（编写增强逻辑）"></a>2. 创建增强类（编写增强逻辑）</h4><h4 id="3-进行通知的配置"><a href="#3-进行通知的配置" class="headerlink" title="3. 进行通知的配置"></a>3. 进行通知的配置</h4><ol><li><p>在 spring 配置文件中，开启注解扫描；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-san</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring5.aopanno&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-san</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>需要加入 context 和 aop 命名空间。</p></blockquote></li><li><p>使用注解创建 User 和 UserProxy 对象；</p></li><li><p>在增强类上面添加 @Aspect 注解；</p><p>被增强类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增强类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 环绕通知</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之前...&quot;</span>);</span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之后...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 spring 配置文件中开启生成代理对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启 Aspect 生成代理对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以用配置类的注解代替：<code>@EnableAspectJAutoProxy(proxyTargetClass = true)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 作为配置类，替代xml配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="5-相同切入点抽取"><a href="#5-相同切入点抽取" class="headerlink" title="5. 相同切入点抽取"></a>5. 相同切入点抽取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 相同切入点抽取</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointdemo</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(pointdemo()</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-有多个增强类对同一个方法进行增强，设置增强类优先级"><a href="#6-有多个增强类对同一个方法进行增强，设置增强类优先级" class="headerlink" title="6. 有多个增强类对同一个方法进行增强，设置增强类优先级"></a>6. 有多个增强类对同一个方法进行增强，设置增强类优先级</h4><p>在增强类上面添加注解 @Order(数字类型值)，数字类型值越小，优先级越高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 生成代理对象</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"><span class="comment">// more code ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AOP-操作（AspectJ-配置文件）"><a href="#AOP-操作（AspectJ-配置文件）" class="headerlink" title="AOP 操作（AspectJ 配置文件）"></a>AOP 操作（AspectJ 配置文件）</h3><blockquote><p>P32</p></blockquote><blockquote><p> 配置文件方式不常用，多用注解方式（上一节）。</p></blockquote><h4 id="1-创建两个类，被增强类和增强类，创建方法"><a href="#1-创建两个类，被增强类和增强类，创建方法" class="headerlink" title="1. 创建两个类，被增强类和增强类，创建方法"></a>1. 创建两个类，被增强类和增强类，创建方法</h4><p>被增强类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;buy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增强类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-在-spring-配置文件中创建两个类对象"><a href="#2-在-spring-配置文件中创建两个类对象" class="headerlink" title="2. 在 spring 配置文件中创建两个类对象"></a>2. 在 spring 配置文件中创建两个类对象</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.aopxml.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.aopxml.BookProxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-在-spring-配置文件中配置切入点"><a href="#3-在-spring-配置文件中配置切入点" class="headerlink" title="3. 在 spring 配置文件中配置切入点"></a>3. 在 spring 配置文件中配置切入点</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 切入点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.atguigu.spring5.aopxml.BookProxy.buy(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;bookProxy&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 增强作用在具体的方法上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;p&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-完全使用注解开发"><a href="#4-完全使用注解开发" class="headerlink" title="4. 完全使用注解开发"></a>4. 完全使用注解开发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 作为配置类，替代xml配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1Vf4y127N5&quot;&gt;尚硅谷Spring框架视频教程（spring5源码级讲解）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;AOP（概念</summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="SpringFramework" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"/>
    
    <category term="尚硅谷Spring框架视频教程（spring5源码级讲解）" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"/>
    
    
    <category term="尚硅谷" scheme="http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>P20 - P24 IOC容器-Bean管理注解方式</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P20%20-%20P24%20IOC%E5%AE%B9%E5%99%A8-Bean%E7%AE%A1%E7%90%86%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P20%20-%20P24%20IOC%E5%AE%B9%E5%99%A8-Bean%E7%AE%A1%E7%90%86%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F/</id>
    <published>2022-05-29T16:00:00.000Z</published>
    <updated>2022-06-15T08:32:50.640Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1Vf4y127N5">尚硅谷Spring框架视频教程（spring5源码级讲解）</a></p></blockquote><h3 id="IOC-操作-Bean-管理（基于注解方式）"><a href="#IOC-操作-Bean-管理（基于注解方式）" class="headerlink" title="IOC 操作 Bean 管理（基于注解方式）"></a>IOC 操作 Bean 管理（基于注解方式）</h3><blockquote><p>P20</p></blockquote><h4 id="1-什么是注解"><a href="#1-什么是注解" class="headerlink" title="1. 什么是注解"></a>1. 什么是注解</h4><h4 id="2-Spring-针对-Bean-管理中创建对象提供注解"><a href="#2-Spring-针对-Bean-管理中创建对象提供注解" class="headerlink" title="2. Spring 针对 Bean 管理中创建对象提供注解"></a>2. Spring 针对 Bean 管理中创建对象提供注解</h4><ol><li>@Component</li><li>@Service</li><li>@Controller</li><li>@Repository</li></ol><blockquote><p>不同名称是用于角色区分，上面四个注解功能一样，都可以创建 Bean 实例。</p></blockquote><h4 id="3-基于注解方式实现对象创建"><a href="#3-基于注解方式实现对象创建" class="headerlink" title="3. 基于注解方式实现对象创建"></a>3. 基于注解方式实现对象创建</h4><p><em>Step 01</em> 引入依赖</p><p><strong>spring-aop-5.2.6.RELEASE.jar</strong></p><p><em>Step 02</em> 开启组件扫描</p><p>在 spring 配置文件中引入命名空间 context</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:util=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/context http://www.springframework.org/schema/util/spring-context.xsd&quot;</span><br></pre></td></tr></table></figure><p>开启组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">如果扫描多个包</span></span><br><span class="line"><span class="comment">Method 01：多个包使用逗号隔开；</span></span><br><span class="line"><span class="comment">Method 02：扫描包上层目录。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-san</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.service,com.atguigu.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-san</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>Step 03</em> 创建类，在类上面添加创建对象注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注解里面 value 属性值可以省略不写，默认值是类名称首字母小写</span></span><br><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span> <span class="comment">// &lt;bean id=&quot;userService&quot; class=&quot;...&quot;&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// more code ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-开启组件扫描细节配置"><a href="#4-开启组件扫描细节配置" class="headerlink" title="4. 开启组件扫描细节配置"></a>4. 开启组件扫描细节配置</h4><blockquote><p>P21</p></blockquote><p>spring 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">[包括]</span></span><br><span class="line"><span class="comment">use-default-filters=&quot;false&quot; 表示不使用默认filter，不扫描全部</span></span><br><span class="line"><span class="comment">eg：只包括使用了 @Controller 注解（annotation）的类。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;fasle&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.sterotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">[排除]</span></span><br><span class="line"><span class="comment">eg：只排除使用了 @Controller 注解（annotation）的类。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.sterotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-基于注解方式实现属性注入"><a href="#5-基于注解方式实现属性注入" class="headerlink" title="5. 基于注解方式实现属性注入"></a>5. 基于注解方式实现属性注入</h4><blockquote><p>P22</p></blockquote><ol><li><p>@Autowired：根据属性类型自动注入；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure></li><li><p>@Qualifier：根据属性名称自动注入，要和 @Autowired 一起使用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure></li><li><p>@Resource：可以根据属性类型自动注入，也可以根据属性名称自动注入；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span> <span class="comment">// 根据类型进行注入</span></span><br><span class="line"><span class="meta">@Resource(name = &quot;userDaoImpl1&quot;)</span> <span class="comment">// 根据名称注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure></li><li><p>@Value：注入普通类型属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value=&quot;abc&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li></ol><h4 id="6-完全注解开发"><a href="#6-完全注解开发" class="headerlink" title="6. 完全注解开发"></a>6. 完全注解开发</h4><blockquote><p>P23</p></blockquote><p><em>Step 01</em> 创建配置类，替代  xml 配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 作为配置类，替代xml配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Step 02</em> 编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testService2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 加载配置类</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>,UserService.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1Vf4y127N5&quot;&gt;尚硅谷Spring框架视频教程（spring5源码级讲解）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;IOC-操作</summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="SpringFramework" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"/>
    
    <category term="尚硅谷Spring框架视频教程（spring5源码级讲解）" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"/>
    
    
    <category term="尚硅谷" scheme="http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>Java8 Stream流式编程爱 撸码就是快 流式编程好 代码传家宝</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/java8_Stream%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%88%B1_%E6%92%B8%E7%A0%81%E5%B0%B1%E6%98%AF%E5%BF%AB_%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%A5%BD_%E4%BB%A3%E7%A0%81%E4%BC%A0%E5%AE%B6%E5%AE%9D/Java8%20Stream%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%88%B1%20%E6%92%B8%E7%A0%81%E5%B0%B1%E6%98%AF%E5%BF%AB%20%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%A5%BD%20%E4%BB%A3%E7%A0%81%E4%BC%A0%E5%AE%B6%E5%AE%9D/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/java8_Stream%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%88%B1_%E6%92%B8%E7%A0%81%E5%B0%B1%E6%98%AF%E5%BF%AB_%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%A5%BD_%E4%BB%A3%E7%A0%81%E4%BC%A0%E5%AE%B6%E5%AE%9D/Java8%20Stream%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%88%B1%20%E6%92%B8%E7%A0%81%E5%B0%B1%E6%98%AF%E5%BF%AB%20%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%A5%BD%20%E4%BB%A3%E7%A0%81%E4%BC%A0%E5%AE%B6%E5%AE%9D/</id>
    <published>2022-05-12T16:00:00.000Z</published>
    <updated>2022-06-15T08:32:50.161Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1Mp4y1S7Em">java8 Stream流式编程爱 撸码就是快，流式编程好 代码传家宝</a></p></blockquote><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>接口内仅有一个声明的方法。</p><h4 id="FunctionalInterface"><a href="#FunctionalInterface" class="headerlink" title="@FunctionalInterface"></a>@FunctionalInterface</h4><p>该注解用于声明该接口为函数式接口，并无什么作用，顶多当接口内存在两个及以上方法时该注解无法通过编译。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> method;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">run(SimpleLamdba::doFormatStatic); <span class="comment">// 静态方法引用</span></span><br><span class="line">run(<span class="keyword">new</span> <span class="title class_">SimpleLamdba</span>()::doFormat); <span class="comment">// 普通方法引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doFormatStatic</span><span class="params">(String param)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;name&quot;</span> + param;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">doFormat</span><span class="params">(String param)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;name&quot;</span> + param;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stream-执行机制解密"><a href="#Stream-执行机制解密" class="headerlink" title="Stream 执行机制解密"></a>Stream 执行机制解密</h3><ul><li>Stream 不存储数据，不用担心内存溢出；</li><li>Stream 不改变源数据；</li><li>Stream 不可重复使用。</li></ul><p><img src="/image%5Cimage-20220513094612366.png" alt="image-20220513094612366"></p><ul><li>“过滤” 和 “排序” 可以拥有多个，“采集” 只能拥有一个。</li><li>“过滤” 和 “排序” 是懒节点，只有当执行 “采集” 节点时，前面的节点才执行，否则将即便是写了 “过滤” 和 “排序” 代码也不执行。</li></ul><h4 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h4><p>用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Apple&gt; appleStore = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="number">1</span>, <span class="string">&quot;red&quot;</span>, <span class="number">500</span>, <span class="string">&quot;湖南&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="number">2</span>, <span class="string">&quot;red&quot;</span>, <span class="number">100</span>, <span class="string">&quot;天津&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="number">3</span>, <span class="string">&quot;green&quot;</span>, <span class="number">300</span>, <span class="string">&quot;湖南&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="number">4</span>, <span class="string">&quot;green&quot;</span>, <span class="number">200</span>, <span class="string">&quot;天津&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="number">5</span>, <span class="string">&quot;green&quot;</span>, <span class="number">100</span>, <span class="string">&quot;湖南&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>向 Stream 转换方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list -&gt; stream</span></span><br><span class="line"><span class="comment">// Method 01:</span></span><br><span class="line">appleStore.stream();</span><br><span class="line"><span class="comment">// Method 02:</span></span><br><span class="line">Arrays.stream(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;);</span><br><span class="line"><span class="comment">// Method 03:</span></span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h4 id="1-流的生成与不可重复使用"><a href="#1-流的生成与不可重复使用" class="headerlink" title="1. 流的生成与不可重复使用"></a>1. 流的生成与不可重复使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Apple&gt; stream1 = appleStore.stream();</span><br><span class="line">Stream&lt;Apple&gt; stream2 = stream1.filter(a -&gt; a.getColor().equals(<span class="string">&quot;red&quot;</span>));</span><br><span class="line">Stream&lt;Apple&gt; stream3 = stream1.filter(a -&gt; a.getWeight() &gt; <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果报错</span></span><br></pre></td></tr></table></figure><p>stream2 流使用了 stream1 流，stream1 流销毁，当 stream3 流使用 stream1 流时执行报错。</p><h5 id="上一个节点可以影响下一个节点"><a href="#上一个节点可以影响下一个节点" class="headerlink" title="上一个节点可以影响下一个节点"></a>上一个节点可以影响下一个节点</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appleStore.stream()</span><br><span class="line">    .fillter(a -&gt; a.getColor().equals(<span class="string">&quot;red&quot;</span>) || a.getColor().equals(<span class="string">&quot;green&quot;</span>)) <span class="comment">// 过滤</span></span><br><span class="line">    .map(a -&gt; a.getColor()) <span class="comment">// 将 Apple 对象转换为 String 字符串</span></span><br><span class="line">    .distinct() <span class="comment">// 去重</span></span><br><span class="line">    .peek(color -&gt; System.out.println(color)) <span class="comment">// 打印</span></span><br><span class="line">    .toArray();</span><br></pre></td></tr></table></figure><h5 id="Debug-方法"><a href="#Debug-方法" class="headerlink" title="Debug 方法"></a>Debug 方法</h5><p>详见视频进度： <code>1:02:00</code></p><h5 id="采集"><a href="#采集" class="headerlink" title="采集"></a>采集</h5><ol><li>list</li><li>map</li><li>group by</li><li>数组</li><li>最大值</li><li>求任意值</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1Mp4y1S7Em&quot;&gt;java8 Stream流式编程爱 撸码就是快，流式编程好 代码传家宝&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;</summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="Java" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"/>
    
    <category term="java8_Stream流式编程爱_撸码就是快_流式编程好_代码传家宝" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/java8-Stream%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%88%B1-%E6%92%B8%E7%A0%81%E5%B0%B1%E6%98%AF%E5%BF%AB-%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%A5%BD-%E4%BB%A3%E7%A0%81%E4%BC%A0%E5%AE%B6%E5%AE%9D/"/>
    
    
    <category term="鲁班大叔" scheme="http://blog.hooy.xyz/tags/%E9%B2%81%E7%8F%AD%E5%A4%A7%E5%8F%94/"/>
    
  </entry>
  
  <entry>
    <title>P04 - P06 IOC容器（底层原理）</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P04%20-%20P06%20IOC%E5%AE%B9%E5%99%A8%EF%BC%88%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%89/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P04%20-%20P06%20IOC%E5%AE%B9%E5%99%A8%EF%BC%88%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%89/</id>
    <published>2022-05-05T16:00:00.000Z</published>
    <updated>2022-06-15T08:32:50.639Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1Vf4y127N5">尚硅谷Spring框架视频教程（spring5源码级讲解）</a></p></blockquote><h3 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h3><h4 id="IOC-容器"><a href="#IOC-容器" class="headerlink" title="IOC 容器"></a>IOC 容器</h4><ol><li>IOC 底层原理；</li><li>IOC 接口（BeanFactory）；</li><li>IOC 操作 Bean 管理（基于xml）；</li><li>IOC 操作 Bean 管理（基于注解）。</li></ol><h3 id="IOC（概念和原理）"><a href="#IOC（概念和原理）" class="headerlink" title="IOC（概念和原理）"></a>IOC（概念和原理）</h3><h4 id="1-什么是-IOC"><a href="#1-什么是-IOC" class="headerlink" title="1. 什么是 IOC"></a>1. 什么是 IOC</h4><ol><li>控制反转：把对象创建和对象之间的调用过程，交给 Spring 进行管理；</li><li>使用 IOC 的目的，为了耦合度降低。</li></ol><h4 id="2-IOC-底层原理"><a href="#2-IOC-底层原理" class="headerlink" title="2. IOC 底层原理"></a>2. IOC 底层原理</h4><ol><li><strong>xml 解析、工厂模式、反射</strong>；</li></ol><p><img src="/Images%5Cimage-20220506093235341.png" alt="image-20220506093235341"></p><p><img src="/Images%5Cimage-20220506093445768.png" alt="image-20220506093445768"></p><h4 id="3-画图讲解-IOC-底层原理"><a href="#3-画图讲解-IOC-底层原理" class="headerlink" title="3. 画图讲解 IOC 底层原理"></a>3. 画图讲解 IOC 底层原理</h4><p><img src="/Images%5Cimage-20220506094434375.png" alt="image-20220506094434375"></p><h3 id="IOC（接口）"><a href="#IOC（接口）" class="headerlink" title="IOC（接口）"></a>IOC（接口）</h3><ol><li><p>IOC 思想基于 IOC 容器完成，IOC容器底层就是对象工厂；</p></li><li><p>Spring 提供 IOC 容器实现两种方式（两个接口）：</p><ol><li><p><strong>BeanFactory</strong>：IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用；</p><ul><li>加载配置文件时不会创建对象，在获取（使用）对象才去创建对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BeanFactory</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>ApplicationContext</strong>：BeanFactory 接口的子接口，提供更多更强大的功能，一般由开发人员使用。</p><ul><li>加载配置文件时就会创建配置文件中的对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>ApplicationContext 接口的实现类：</p></li></ol><blockquote><p>IDEA 按住 <code>CTRL</code> + <code>H</code> 查看</p></blockquote><p><img src="/Images%5Cimage-20220506100800493.png" alt="image-20220506100800493"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1Vf4y127N5&quot;&gt;尚硅谷Spring框架视频教程（spring5源码级讲解）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;课程介绍&quot;&gt;</summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="SpringFramework" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"/>
    
    <category term="尚硅谷Spring框架视频教程（spring5源码级讲解）" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"/>
    
    
    <category term="尚硅谷" scheme="http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>P07 - P19 IOC容器-Bean管理XML方式</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P07%20-%20P19%20IOC%E5%AE%B9%E5%99%A8-Bean%E7%AE%A1%E7%90%86XML%E6%96%B9%E5%BC%8F/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/P07%20-%20P19%20IOC%E5%AE%B9%E5%99%A8-Bean%E7%AE%A1%E7%90%86XML%E6%96%B9%E5%BC%8F/</id>
    <published>2022-05-05T16:00:00.000Z</published>
    <updated>2022-06-15T08:32:50.639Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1Vf4y127N5">尚硅谷Spring框架视频教程（spring5源码级讲解）</a></p></blockquote><h3 id="IOC-操作-Bean-管理"><a href="#IOC-操作-Bean-管理" class="headerlink" title="IOC 操作 Bean 管理"></a>IOC 操作 Bean 管理</h3><h4 id="1-什么是-Bean-管理（两个操作）："><a href="#1-什么是-Bean-管理（两个操作）：" class="headerlink" title="1. 什么是 Bean 管理（两个操作）："></a>1. 什么是 Bean 管理（两个操作）：</h4><ol><li>Spring 创建对象；</li><li>Spring 注入属性。</li></ol><h4 id="2-Bean-管理操作有两种方式"><a href="#2-Bean-管理操作有两种方式" class="headerlink" title="2. Bean 管理操作有两种方式"></a>2. Bean 管理操作有两种方式</h4><ol><li>基于 xml 配置文件方式实现；</li><li>基于注解方式实现</li></ol><h3 id="IOC-操作-Bean-管理（基于-xml-方式）"><a href="#IOC-操作-Bean-管理（基于-xml-方式）" class="headerlink" title="IOC 操作 Bean 管理（基于 xml 方式）"></a>IOC 操作 Bean 管理（基于 xml 方式）</h3><h4 id="1-基于-xml-方式创建对象"><a href="#1-基于-xml-方式创建对象" class="headerlink" title="1. 基于 xml 方式创建对象"></a>1. 基于 xml 方式创建对象</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>在 spring 配置文件中，使用 bean 标签，标签里面添加对应属性，就可以实现对象创建；</li><li>在 bean 标签有很多属性，介绍常用的属性；<ul><li>id 属性：唯一标识，通过它从 IOC 中获取对象；</li><li>class 属性：类全路径（包类路径）。</li></ul></li><li>创建对象时，默认执行无参构造方法。</li></ol><h4 id="2-基于-xml-方式注入属性"><a href="#2-基于-xml-方式注入属性" class="headerlink" title="2. 基于 xml 方式注入属性"></a>2. 基于 xml 方式注入属性</h4><ol><li><strong>DI</strong>：依赖注入，就是注入属性。</li></ol><h4 id="3-使用-set方法-注入属性"><a href="#3-使用-set方法-注入属性" class="headerlink" title="3. 使用 set方法 注入属性"></a>3. 使用 set方法 注入属性</h4><p>model 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String bname;</span><br><span class="line">    <span class="keyword">private</span> String bauthor;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBname</span><span class="params">(String bname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bname = bname;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBauthor</span><span class="params">(String bauthor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bauthor = bauthor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 property 标签完成属性注入</span></span><br><span class="line"><span class="comment"> name 属性：类里面属性名称</span></span><br><span class="line"><span class="comment">value 属性：向属性注入的值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;易筋经&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;达摩老祖&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-使用-有参构造方法-注入属性"><a href="#4-使用-有参构造方法-注入属性" class="headerlink" title="4. 使用 有参构造方法 注入属性"></a>4. 使用 有参构造方法 注入属性</h4><p>model 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">(String oname,String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.oname = oname;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Orders&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-ages</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;电脑&quot;</span>&lt;/<span class="attr">constructor-ages</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-ages</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;China&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-ages</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>由于存在有参构造方法，并且没有显式无参构造方法。在编辑 xml 文件时，仅写 bean 不含 constructor-ages 标签时，class 属性会报错。</p></blockquote><h4 id="5-使用-p命名空间-注入属性"><a href="#5-使用-p命名空间-注入属性" class="headerlink" title="5. 使用 p命名空间 注入属性"></a>5. 使用 p命名空间 注入属性</h4><blockquote><p>可以简化基于 xml 配置方式。</p></blockquote><p><em>Step 01</em>：添加 p命名空间 在配置文件中</p><p><img src="/Images%5Cimage-20220507091455484.png" alt="image-20220507091455484"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure><p><em>Step 02</em>：简化配置代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 简化前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Book&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;易筋经&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;达摩老祖&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简化后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Book&quot;</span> <span class="attr">b:bname</span>=<span class="string">&quot;易筋经&quot;</span> <span class="attr">b:bauthor</span>=<span class="string">&quot;达摩老祖&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="IOC-操作-Bean-管理（xml-注入其他类型属性）"><a href="#IOC-操作-Bean-管理（xml-注入其他类型属性）" class="headerlink" title="IOC 操作 Bean 管理（xml 注入其他类型属性）"></a>IOC 操作 Bean 管理（xml 注入其他类型属性）</h3><h4 id="1-字面量"><a href="#1-字面量" class="headerlink" title="1. 字面量"></a>1. 字面量</h4><ol><li><p>null 值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>属性值包含特殊符号</p><p><em>method 01</em>：字符转义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;<span class="symbol">&amp;lt;</span><span class="symbol">&amp;lt;</span>南京<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span>&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>method 02</em>：把带特殊符号的内容写到 CDATA</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="2-注入属性-外部-bean"><a href="#2-注入属性-外部-bean" class="headerlink" title="2. 注入属性 - 外部 bean"></a>2. 注入属性 - 外部 bean</h4><p>UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;    </span><br><span class="line">    <span class="comment">// 创建 UserDao 类型属性，生成 set 方法</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add&quot;</span>);</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserDao 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao update&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.service.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">name 属性：类里面属性名称</span></span><br><span class="line"><span class="comment">ref 属性：创建 userDao 对象 bean 标签 id 值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-注入属性-内部-bean"><a href="#3-注入属性-内部-bean" class="headerlink" title="3. 注入属性 - 内部 bean"></a>3. 注入属性 - 内部 bean</h4><p>一对多关系：部门和员工</p><p>一个部门有多个员工，一个员工属于一个部门。部门是一，员工是多。</p><p>Dept</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部门类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDname</span> <span class="params">(String dname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Emp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">// 员工属于某一个部门，使用对象形式表示</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEname</span><span class="params">(String ename)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ename = ename</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 内部 bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置两个普通属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置对象类型属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;安保部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-注入属性-级联赋值"><a href="#4-注入属性-级联赋值" class="headerlink" title="4. 注入属性 - 级联赋值"></a>4. 注入属性 - 级联赋值</h4><p><em>method 01</em>：</p><p>spring 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 级联赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置两个普通属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置对象类型属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;安保部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>method 02</em>：</p><p>Emp 对其修改，增加 Dept 的 get 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">// 员工属于某一个部门，使用对象形式表示</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生成 dept 的 get 方法</span></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">getDept</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEname</span><span class="params">(String ename)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ename = ename</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 级联赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置两个普通属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置对象类型属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;安保部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="IOC-操作-Bean-管理（xml-注入集合属性）"><a href="#IOC-操作-Bean-管理（xml-注入集合属性）" class="headerlink" title="IOC 操作 Bean 管理（xml 注入集合属性）"></a>IOC 操作 Bean 管理（xml 注入集合属性）</h3><h4 id="1-注入数组类型属性"><a href="#1-注入数组类型属性" class="headerlink" title="1. 注入数组类型属性"></a>1. 注入数组类型属性</h4><h4 id="2-注入-List-集合类型属性"><a href="#2-注入-List-集合类型属性" class="headerlink" title="2. 注入 List 集合类型属性"></a>2. 注入 List 集合类型属性</h4><h4 id="3-注入-Map-集合类型属性"><a href="#3-注入-Map-集合类型属性" class="headerlink" title="3. 注入 Map 集合类型属性"></a>3. 注入 Map 集合类型属性</h4><h4 id="4-注入-Set-集合类型属性"><a href="#4-注入-Set-集合类型属性" class="headerlink" title="4. 注入 Set 集合类型属性"></a>4. 注入 Set 集合类型属性</h4><p>Stu</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="comment">// 1 array 类型属性</span></span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line">    <span class="comment">// 2 list 类型属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="comment">// 3 map 类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line">    <span class="comment">// 4 set 类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// setXXX() ...</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- array 类型属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- list 类型属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- map 类型属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;java&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;python&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Python&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- set 类型属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-在集合里面设置对象类型值"><a href="#5-在集合里面设置对象类型值" class="headerlink" title="5. 在集合里面设置对象类型值"></a>5. 在集合里面设置对象类型值</h4><p>Stu 基础上增加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="comment">// more code ...</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; courseList;</span><br><span class="line">    <span class="comment">// setCourseList() ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Course</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line">    <span class="comment">// setCname() ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- list 类型属性注入 对象类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Python&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-把集合注入部分提取出来"><a href="#6-把集合注入部分提取出来" class="headerlink" title="6. 把集合注入部分提取出来"></a>6. 把集合注入部分提取出来</h4><p><em>Step 01</em> 在 spring 配置文件中引入命名空间 util</p><p><img src="/Images%5Cimage-20220517093718982.png" alt="image-20220517093718982"> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</span><br></pre></td></tr></table></figure><p><em>Step 02</em> 使用 util 标签完成 list 集合注入</p><p>Book</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="comment">// setList() ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>易筋经<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>九阴真经<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>九阳神功<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.collectiontype.Book&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="IOC-操作-Bean-管理（FactoryBean）"><a href="#IOC-操作-Bean-管理（FactoryBean）" class="headerlink" title="IOC 操作 Bean 管理（FactoryBean）"></a>IOC 操作 Bean 管理（FactoryBean）</h3><blockquote><p>P15</p></blockquote><h4 id="1-Spring-有两种类型-bean，一种普通-bean，另外一种工厂-bean（FactoryBean）"><a href="#1-Spring-有两种类型-bean，一种普通-bean，另外一种工厂-bean（FactoryBean）" class="headerlink" title="1. Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）"></a>1. Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）</h4><ol><li>普通 bean：在配置文件定义 bean 类型就是返回类型；</li><li>工厂 bean：在配置文件定义 bean 类型可以和返回类型不一样（用于创建复杂 bean 对象）。</li></ol><p><em>Step 01</em> 创建类，让这个类作为工厂 bean，<strong>实现接口 FactoryBean</strong></p><p><em>Step 02</em> 实现接口里面的方法，在实现的方法中定义返回的 bean 类型</p><p>MyBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Course&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Course <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line">        course.setCname(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// more @Override ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.factorybean.MyBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line"><span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;myBean&quot;</span>,Course.class);</span><br><span class="line">System.out.println(course);</span><br></pre></td></tr></table></figure><h3 id="IOC-操作-Bean-管理（bean-作用域）"><a href="#IOC-操作-Bean-管理（bean-作用域）" class="headerlink" title="IOC 操作 Bean 管理（bean 作用域）"></a>IOC 操作 Bean 管理（bean 作用域）</h3><p>在 Spring 里面，<strong>默认情况下 bean 是单实例对象（单例）</strong>；</p><h4 id="1-如何设置单实例还是多实例"><a href="#1-如何设置单实例还是多实例" class="headerlink" title="1. 如何设置单实例还是多实例"></a>1. 如何设置单实例还是多实例</h4><p>在 spring 配置文件 bean 标签里面有属性 <code>scope</code> 用于设置单实例还是多实例：</p><ul><li>singleton：默认值，单实例；</li><li>prototype：多实例；</li><li>request：将对象放到 request 中；</li><li>session：将对象放到 session 中。</li></ul><blockquote><p>常用：singleton 和 prototype；不常用：request 和 session，若使用建议先查阅相关资料。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.collectiontype.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- more code ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="singleton-和-prototype-区别"><a href="#singleton-和-prototype-区别" class="headerlink" title="singleton 和 prototype 区别"></a>singleton 和 prototype 区别</h5><ol><li>singleton 单实例，prototype 多实例；</li><li>设置 scope 值是 singleton 时，加载 spring 配置文件时就会创建实例对象；设置 scope 值是 prototype 时，在调用 getBean() 方法时创建多实例对象。</li></ol><h3 id="IOC-操作-Bean-管理（bean-生命周期）"><a href="#IOC-操作-Bean-管理（bean-生命周期）" class="headerlink" title="IOC 操作 Bean 管理（bean 生命周期）"></a>IOC 操作 Bean 管理（bean 生命周期）</h3><blockquote><p>P17</p></blockquote><h4 id="1-生命周期"><a href="#1-生命周期" class="headerlink" title="1. 生命周期"></a>1. 生命周期</h4><p>从对象创建到对象销毁的过程。</p><h4 id="2-bean-生命周期（简化版）"><a href="#2-bean-生命周期（简化版）" class="headerlink" title="2. bean 生命周期（简化版）"></a>2. bean 生命周期（简化版）</h4><ol><li>通过构造器创建 bean 实例（执行无参构造方法）；</li><li>为 bean 的属性设置值核对其他 bean 引用（调用 set 方法）；</li><li>调用 bean 的初始化方法（需要开发者配置初始化方法）；</li><li>bean 可以使用了（对象获取到了）；</li><li><strong>当容器关闭时</strong>，调用 bean 的销毁方法（需要开发者配置销毁方法）。</li></ol><blockquote><p>这里只是简单的介绍了一下 bean 生命周期，技术细节还请查阅专业的技术文档。</p></blockquote><p><em>eg</em></p><p>Order</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步：执行无参构造方法创建bean实例&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderName</span><span class="params">(String orderName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderName = orderName;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步：调用set方法设置属性值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第四步：执行初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第七步：执行销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oymn.spring5.Orders&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;orderName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hahah&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置bean后置处理器，这样配置后整个xml里面的bean用的都是这个后置处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPost&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oymn.spring5.MyBeanPost&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOrders</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;orders&quot;</span>, Orders.class);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;第六步：获取bean实例对象&quot;</span>);</span><br><span class="line">    System.out.println(orders);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动让bean实例销毁</span></span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-后置处理器"><a href="#3-后置处理器" class="headerlink" title="3. 后置处理器"></a>3. 后置处理器</h4><p>MyBeanPost 后置处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现后置处理器，需要实现BeanPostProcessor接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPost</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步：将bean实例传递给bean后置处理器的postProcessBeforeInitialization方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第五步：将bean实例传递给bean后置处理器的postProcessAfterInitialization方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring 配置文件</p><blockquote><p>配置bean后置处理器，这样配置后整个xml里面的bean用的都是这个后置处理器。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oymn.spring5.Orders&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;orderName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hahah&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置bean后置处理器，这样配置后整个xml里面的bean用的都是这个后置处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPost&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oymn.spring5.MyBeanPost&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="IOC-操作-Bean-管理（xml-自动装配）"><a href="#IOC-操作-Bean-管理（xml-自动装配）" class="headerlink" title="IOC 操作 Bean 管理（xml 自动装配）"></a>IOC 操作 Bean 管理（xml 自动装配）</h3><blockquote><p>P18</p></blockquote><h4 id="1-什么是自动装配"><a href="#1-什么是自动装配" class="headerlink" title="1. 什么是自动装配"></a>1. 什么是自动装配</h4><p>根据指定装配规则（名称或者类型），Spring 自动将匹配的属性值进行注入。</p><h4 id="2-演示自动装配过程"><a href="#2-演示自动装配过程" class="headerlink" title="2. 演示自动装配过程"></a>2. 演示自动装配过程</h4><p>bean 标签属性 autowire，配置自动装配。autowire 属性常用两个值：</p><ul><li>byName：根据属性名称注入；</li><li>byType：根据属性类型注入。</li></ul><h5 id="1-根据属性名称自动注入"><a href="#1-根据属性名称自动注入" class="headerlink" title="1. 根据属性名称自动注入"></a>1. 根据属性名称自动注入</h5><p>根据属性名称自动装配：要求 emp中属性的名称dept 和 bean标签的id值dept 一样，才能识别。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--指定autowire属性值为byName--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;emp&quot;</span> class=<span class="string">&quot;com.oymn.spring5.Emp&quot;</span> autowire=<span class="string">&quot;byName&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;dept&quot;</span> class=<span class="string">&quot;com.oymn.spring5.Dept&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h5 id="2-根据属性类型自动注入"><a href="#2-根据属性类型自动注入" class="headerlink" title="2. 根据属性类型自动注入"></a>2. 根据属性类型自动注入</h5><p>根据属性类型自动装配：要求同一个xml文件中不能有两个相同类型的bean，否则无法识别是哪一个。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定autowire属性值为byType--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oymn.spring5.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.oymn.spring5.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="IOC-操作-Bean-管理（外部属性文件）"><a href="#IOC-操作-Bean-管理（外部属性文件）" class="headerlink" title="IOC 操作 Bean 管理（外部属性文件）"></a>IOC 操作 Bean 管理（外部属性文件）</h3><blockquote><p>P19</p></blockquote><p><em>eg</em> 配置德鲁伊（druid）连接池</p><h4 id="1-直接配置数据库信息"><a href="#1-直接配置数据库信息" class="headerlink" title="1. 直接配置数据库信息"></a>1. 直接配置数据库信息</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接配置连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/userDB&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-引入外部属性文件配置数据库连接池"><a href="#2-引入外部属性文件配置数据库连接池" class="headerlink" title="2. 引入外部属性文件配置数据库连接池"></a>2. 引入外部属性文件配置数据库连接池</h4><p><em>Step 00</em> 编写外部属性文件 和 引入德鲁伊（druid）连接池依赖 jar 包</p><p>jdbc.properties 外部属性文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prop.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">prop.url</span>=<span class="string">jdbc:mysql://localhost:3306/userDB</span></span><br><span class="line"><span class="attr">prop.userName</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">prop.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p><em>Step 01</em> 在 spring 配置文件中引入命名空间 context</p><p><img src="/Images%5Cimage-20220517172345376.png" alt="image-20220517172345376"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:util=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/context http://www.springframework.org/schema/util/spring-context.xsd&quot;</span><br></pre></td></tr></table></figure><p><em>Step 02</em> 在 spring 配置文件使用标签引入外部属性文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1Vf4y127N5&quot;&gt;尚硅谷Spring框架视频教程（spring5源码级讲解）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;IOC-操作</summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="SpringFramework" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/"/>
    
    <category term="尚硅谷Spring框架视频教程（spring5源码级讲解）" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/SpringFramework/%E5%B0%9A%E7%A1%85%E8%B0%B7Spring%E6%A1%86%E6%9E%B6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%EF%BC%88spring5%E6%BA%90%E7%A0%81%E7%BA%A7%E8%AE%B2%E8%A7%A3%EF%BC%89/"/>
    
    
    <category term="尚硅谷" scheme="http://blog.hooy.xyz/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>P26 logback入门</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P26%20logback%E5%85%A5%E9%97%A8/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P26%20logback%E5%85%A5%E9%97%A8/</id>
    <published>2022-04-23T16:00:00.000Z</published>
    <updated>2022-06-15T08:32:50.274Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1iJ411H74S">黑马程序员java日志框架教程，全面深入学习多种java日志框架</a></p></blockquote><h3 id="Logback-的使用"><a href="#Logback-的使用" class="headerlink" title="Logback 的使用"></a>Logback 的使用</h3><p>Logback 是由 log4j 创始人设计的另一个开源日志组件，性能比 log4j 更好。</p><p><strong>官方网站：</strong><a href="https://logback.qos.ch/">https://logback.qos.ch/</a></p><p>Logback主要分为三个模块：</p><ul><li>logback-core：其他两个模块的基础模块；</li><li>logback-classic：它是 log4j 的一个改良版本，同时它完整实现了 slf4j API；</li><li>logback-access：访问模块与 Servlet 容器集成提供通过 Http 来访问日志的功能。</li></ul><h4 id="logback-入门"><a href="#logback-入门" class="headerlink" title="logback 入门"></a>logback 入门</h4><p>导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--slf4j 日志门面--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--logback 日志实现--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogbackTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(LogbackTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick</span><span class="params">()</span>&#123;</span><br><span class="line">        LOGGER.error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        LOGGER.warn(<span class="string">&quot;warn&quot;</span>);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        LOGGER.debug(<span class="string">&quot;debug&quot;</span>);</span><br><span class="line">        LOGGER.trace(<span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1iJ411H74S&quot;&gt;黑马程序员java日志框架教程，全面深入学习多种java日志框架&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Log</summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="Java" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"/>
    
    <category term="黑马程序员java日志框架教程_全面深入学习多种java日志框架" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="黑马程序员" scheme="http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>P25 SLF4J日志桥接器</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P25%20SLF4J%E6%97%A5%E5%BF%97%E6%A1%A5%E6%8E%A5%E5%99%A8/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P25%20SLF4J%E6%97%A5%E5%BF%97%E6%A1%A5%E6%8E%A5%E5%99%A8/</id>
    <published>2022-04-23T16:00:00.000Z</published>
    <updated>2022-06-15T08:32:50.274Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1iJ411H74S">黑马程序员java日志框架教程，全面深入学习多种java日志框架</a></p></blockquote><h3 id="桥接旧的日志框架（Bridging）"><a href="#桥接旧的日志框架（Bridging）" class="headerlink" title="桥接旧的日志框架（Bridging）"></a>桥接旧的日志框架（Bridging）</h3><p><strong>针对老日志框架迁移至 SLF4J 及其实现</strong></p><p>通常，您依赖的某些组件依赖于 SLF4J 以外的日志记录 API。您也可以假设这些组件在不久的将来不会切换到 SLF4J 。为了解决这种情况，SLF4J 附带了几个桥接模块，这些模块将对 log4j、JCL 和 java.util.logging API 的调用重定向，就好像它们是对 SLF4J API 一样。</p><p>桥接解决的是项目中日志的遗留问题，当系统中存在之前的日志 API，可以通过桥接转换到 SLF4J 的实现。</p><ol><li>先去除之前老的日志框架的依赖；</li><li>添加 SLF4J 提供的桥接组件；</li><li>为项目添加 SLF4J 的具体实现。</li></ol><p><img src="/Images%5Cimage-20220424092802677.png" alt="image-20220424092802677"></p><blockquote><p>该图源自官方文档。</p></blockquote><h4 id="SLF4J-桥接-log4j"><a href="#SLF4J-桥接-log4j" class="headerlink" title="SLF4J 桥接 log4j"></a>SLF4J 桥接 log4j</h4><p>导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--slf4j 日志门面--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--logback 日志实现--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--log4j 日志实现</span></span><br><span class="line"><span class="comment">      &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">          &lt;groupId&gt;log4j&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">          &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">          &lt;version&gt;1.2.17&lt;/version&gt;</span></span><br><span class="line"><span class="comment">      &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!--log4j 桥接器--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log4jTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义 log4j 日志对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> Logger.getLogger(Log4jTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试桥接器</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;hello log4j&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，log4j 日志框架需要配置 log4j.properties 文件。</p></blockquote><p>经过 SLF4J 桥接 log4j 后，输出由 log4j 日志样式转变为 logback 日志样式。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>jcl-over-slf4j.jar 和 slf4-jcl.jar 不能同时出现。前一个 jar 文件将导致 JCL 将日志系统的选择委托给 SLF4J ，后一个 jar 文件将导致 SLF4J 将日志系统的选择委托给 JCL，从而导致 <strong>无限循环</strong>；</li><li>log4j-over-slf4j.jar 和 slf4j-log4j12.jar 不能同时出现；</li><li>jul-to-slf4j.jar 和 slf4j-jdk-14.jar 不能同时出现；</li><li>所有的桥接都只对 Logger 日志记录器对象有效，如果程序中调用了内部的配置类或者是 Appender，Filter 等对象，将无法产生效果。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1iJ411H74S&quot;&gt;黑马程序员java日志框架教程，全面深入学习多种java日志框架&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;桥接旧</summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="Java" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"/>
    
    <category term="黑马程序员java日志框架教程_全面深入学习多种java日志框架" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="黑马程序员" scheme="http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>P29 logback的拆分Appender</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P29%20logback%E7%9A%84%E6%8B%86%E5%88%86Appender/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P29%20logback%E7%9A%84%E6%8B%86%E5%88%86Appender/</id>
    <published>2022-04-23T16:00:00.000Z</published>
    <updated>2022-06-15T08:32:50.276Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1iJ411H74S">黑马程序员java日志框架教程，全面深入学习多种java日志框架</a></p></blockquote><h3 id="日志拆分和归档压缩"><a href="#日志拆分和归档压缩" class="headerlink" title="日志拆分和归档压缩"></a>日志拆分和归档压缩</h3><p>在 P27 的 logback.xml 基础上加入以下配置代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--日志拆分和归档压缩的appender--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;rollFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--日志文件保存路径--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log_dir&#125;/roll_logback.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--日志消息格式配置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--指定拆分规则--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--按照时间和压缩格式声明拆分的文件名--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log_dir&#125;/rolling.%d&#123;yyyy-MM-dd&#125;.log.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--按照文件大小拆分--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>1MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1iJ411H74S&quot;&gt;黑马程序员java日志框架教程，全面深入学习多种java日志框架&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;日志拆</summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="Java" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"/>
    
    <category term="黑马程序员java日志框架教程_全面深入学习多种java日志框架" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="黑马程序员" scheme="http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>P27 logback基础配置文件</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P27%20logback%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P27%20logback%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2022-04-23T16:00:00.000Z</published>
    <updated>2022-06-15T08:32:50.275Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1iJ411H74S">黑马程序员java日志框架教程，全面深入学习多种java日志框架</a></p></blockquote><h3 id="logback-配置"><a href="#logback-配置" class="headerlink" title="logback 配置"></a>logback 配置</h3><p>logback 会依次读取以下类型配置文件：</p><ol><li>logback.groovy</li><li>logback-test.xml</li><li>logback.xml</li></ol><p>如果均不存在会采用默认配置。</p><h4 id="logback-组件之间的关系"><a href="#logback-组件之间的关系" class="headerlink" title="logback 组件之间的关系"></a>logback 组件之间的关系</h4><ol><li>Logger：日志的记录器，把它关联到应用的对应的 context  上后，主要用于存放日志对象，也可以定义日志类型、级别；</li><li>Appender：用于指定日志输出的目的地、目的地可以是控制台、文件、数据库等等；</li><li>Layout：负责把事件转换成字符串，格式化的日志信息的输出。在 logback 中 Layout 对象被封装在 encoder 中。</li></ol><h4 id="基本配置信息"><a href="#基本配置信息" class="headerlink" title="基本配置信息"></a>基本配置信息</h4><p>输出至控制台（Console）。</p><p>src&#x2F;main&#x2F;resources&#x2F;logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置集中管理属性</span></span><br><span class="line"><span class="comment">    日志输出格式：</span></span><br><span class="line"><span class="comment">        %-5level：-5 占五位字符</span></span><br><span class="line"><span class="comment">        %d&#123;yyyy-MM-dd HH:mm:ss:SSS&#125;：日期格式化</span></span><br><span class="line"><span class="comment">        %c：类的完整名称</span></span><br><span class="line"><span class="comment">        %M：方法名</span></span><br><span class="line"><span class="comment">        %L：行号</span></span><br><span class="line"><span class="comment">        %thread：线程名称</span></span><br><span class="line"><span class="comment">        %m 或者 %msg：信息</span></span><br><span class="line"><span class="comment">        %n：换行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;%-5level&#125; %d&#123;yyyy-MM-dd HH:mm:ss:SSS&#125; %c %M %L %thread %m%n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--控制台日志输出 appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--控制输出流对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>System.err<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志消息格式配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--root logger 配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;ALL&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">appender-ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogbackTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(LogbackTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick</span><span class="params">()</span>&#123;</span><br><span class="line">        LOGGER.error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        LOGGER.warn(<span class="string">&quot;warn&quot;</span>);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        LOGGER.debug(<span class="string">&quot;debug&quot;</span>);</span><br><span class="line">        LOGGER.trace(<span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="/Images%5Cimage-20220424110749144.png" alt="image-20220424110749144"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1iJ411H74S&quot;&gt;黑马程序员java日志框架教程，全面深入学习多种java日志框架&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;log</summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="Java" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"/>
    
    <category term="黑马程序员java日志框架教程_全面深入学习多种java日志框架" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="黑马程序员" scheme="http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>P28 logback的FileAppender</title>
    <link href="http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P28%20logback%E7%9A%84FileAppender/"/>
    <id>http://blog.hooy.xyz/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B_%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/P28%20logback%E7%9A%84FileAppender/</id>
    <published>2022-04-23T16:00:00.000Z</published>
    <updated>2022-06-15T08:32:50.275Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频源：<a href="https://www.bilibili.com/video/BV1iJ411H74S">黑马程序员java日志框架教程，全面深入学习多种java日志框架</a></p></blockquote><h3 id="将日志输出至文件"><a href="#将日志输出至文件" class="headerlink" title="将日志输出至文件"></a>将日志输出至文件</h3><p>log（txt）或者 html 文件。</p><p>在 P27 的 logback.xml 基础上加入以下配置代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--text格式日志文件输出的appender--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;logFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.FileAppender&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--日志文件保存路径--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log_dir&#125;/logback.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--日志消息格式配置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--html格式日志文件输出的appender--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;htmlFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.FileAppender&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--日志文件保存路径--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log_dir&#125;/logback.html<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--日志消息格式配置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.html.HTMLLayout&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--root logger 配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;ALL&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;logFile&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;htmlFile&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频源：&lt;a href=&quot;https://www.bilibili.com/video/BV1iJ411H74S&quot;&gt;黑马程序员java日志框架教程，全面深入学习多种java日志框架&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;将日志</summary>
      
    
    
    
    <category term="技术向" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    <category term="Java" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/"/>
    
    <category term="黑马程序员java日志框架教程_全面深入学习多种java日志框架" scheme="http://blog.hooy.xyz/categories/%E6%8A%80%E6%9C%AF%E5%90%91/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%A7%8Djava%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="黑马程序员" scheme="http://blog.hooy.xyz/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
</feed>
